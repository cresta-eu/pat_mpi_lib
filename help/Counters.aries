#
############################################################################
#   Cray native performance counter specifications from papi_native_avail-d.aries
############################################################################

$COUNTERS{NATIVE}->{'AR_NIC_AMO_PRF_EN'} = {
    NAME => 'AR_NIC_AMO_PRF_EN',
    LABEL => 'AR_NIC_AMO_PRF_EN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_AMO_PRF_EN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_AMO_PRF_EN:PRF_ORDERED_EN'} = {
    NAME => 'AR_NIC_AMO_PRF_EN:PRF_ORDERED_EN',
    LABEL => 'AR_NIC_AMO_PRF_EN:PRF_ORDERED_EN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Enable AR_NIC_AMO_PRF_STALL_DURATION_ORDERED',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_AMO_PRF_EN:PRF_ORDERED_EN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_AMO_PRF_EN:PRF_FULL_EN'} = {
    NAME => 'AR_NIC_AMO_PRF_EN:PRF_FULL_EN',
    LABEL => 'AR_NIC_AMO_PRF_EN:PRF_FULL_EN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Enable AR_NIC_AMO_PRF_STALL_DURATION_FULL',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_AMO_PRF_EN:PRF_FULL_EN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_AMO_PRF_EN:PRF_FLUSH_EN'} = {
    NAME => 'AR_NIC_AMO_PRF_EN:PRF_FLUSH_EN',
    LABEL => 'AR_NIC_AMO_PRF_EN:PRF_FLUSH_EN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Enable AR_NIC_AMO_PRF_STALL_DURATION_FLUSH',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_AMO_PRF_EN:PRF_FLUSH_EN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_AMO_PRF_EN:PRF_MATCH_EN'} = {
    NAME => 'AR_NIC_AMO_PRF_EN:PRF_MATCH_EN',
    LABEL => 'AR_NIC_AMO_PRF_EN:PRF_MATCH_EN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Enable AR_NIC_AMO_PRF_STALL_DURATION_MATCH',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_AMO_PRF_EN:PRF_MATCH_EN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_AMO_PRF_STALL_DURATION_MATCH'} = {
    NAME => 'AR_NIC_AMO_PRF_STALL_DURATION_MATCH',
    LABEL => 'AR_NIC_AMO_PRF_STALL_DURATION_MATCH',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Maximum duration of stall (match)',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_AMO_PRF_STALL_DURATION_MATCH'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_AMO_PRF_STALL_DURATION_FLUSH'} = {
    NAME => 'AR_NIC_AMO_PRF_STALL_DURATION_FLUSH',
    LABEL => 'AR_NIC_AMO_PRF_STALL_DURATION_FLUSH',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Maximum duration of stall (flush)',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_AMO_PRF_STALL_DURATION_FLUSH'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_AMO_PRF_STALL_DURATION_FULL'} = {
    NAME => 'AR_NIC_AMO_PRF_STALL_DURATION_FULL',
    LABEL => 'AR_NIC_AMO_PRF_STALL_DURATION_FULL',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Maximum duration of stall (full)',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_AMO_PRF_STALL_DURATION_FULL'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_AMO_PRF_STALL_DURATION_ORDERED'} = {
    NAME => 'AR_NIC_AMO_PRF_STALL_DURATION_ORDERED',
    LABEL => 'AR_NIC_AMO_PRF_STALL_DURATION_ORDERED',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Maximum duration of stall (ordered)',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_AMO_PRF_STALL_DURATION_ORDERED'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_BTE_PRF_BYTES_0'} = {
    NAME => 'AR_NIC_BTE_PRF_BYTES_0',
    LABEL => 'AR_NIC_BTE_PRF_BYTES_0',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Current count of total number of bytes transmitted by BTE channel0',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_BTE_PRF_BYTES_0'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_BTE_PRF_BYTES_1'} = {
    NAME => 'AR_NIC_BTE_PRF_BYTES_1',
    LABEL => 'AR_NIC_BTE_PRF_BYTES_1',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Current count of total number of bytes transmitted by BTE channel1',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_BTE_PRF_BYTES_1'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_BTE_PRF_BYTES_2'} = {
    NAME => 'AR_NIC_BTE_PRF_BYTES_2',
    LABEL => 'AR_NIC_BTE_PRF_BYTES_2',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Current count of total number of bytes transmitted by BTE channel2',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_BTE_PRF_BYTES_2'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_BTE_PRF_BYTES_3'} = {
    NAME => 'AR_NIC_BTE_PRF_BYTES_3',
    LABEL => 'AR_NIC_BTE_PRF_BYTES_3',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Current count of total number of bytes transmitted by BTE channel3',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_BTE_PRF_BYTES_3'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_NETMON_PRF_EVENT_CNTR_CTRL'} = {
    NAME => 'AR_NIC_NETMON_PRF_EVENT_CNTR_CTRL',
    LABEL => 'AR_NIC_NETMON_PRF_EVENT_CNTR_CTRL',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_NETMON_PRF_EVENT_CNTR_CTRL'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_NETMON_PRF_EVENT_CNTR_CTRL:DISABLE_AUTO_UPDATE'} = {
    NAME => 'AR_NIC_NETMON_PRF_EVENT_CNTR_CTRL:DISABLE_AUTO_UPDATE',
    LABEL => 'AR_NIC_NETMON_PRF_EVENT_CNTR_CTRL:DISABLE_AUTO_UPDATE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Writing a 1 disables the auto-updating of the performance counter RAMs, turns off widget',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_NETMON_PRF_EVENT_CNTR_CTRL:DISABLE_AUTO_UPDATE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_NETMON_PRF_EVENT_CNTR_CTRL:ENABLE'} = {
    NAME => 'AR_NIC_NETMON_PRF_EVENT_CNTR_CTRL:ENABLE',
    LABEL => 'AR_NIC_NETMON_PRF_EVENT_CNTR_CTRL:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Writing a 1 enables performance counters, writing a 0 disables counting and allows all performance counters to be used as scratch',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_NETMON_PRF_EVENT_CNTR_CTRL:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_NETMON_PRF_EVENT_CNTR_CTRL:CLEAR'} = {
    NAME => 'AR_NIC_NETMON_PRF_EVENT_CNTR_CTRL:CLEAR',
    LABEL => 'AR_NIC_NETMON_PRF_EVENT_CNTR_CTRL:CLEAR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Writing a 1 initiates the clear sequence which clears all performance counters except scratch counters, read returns zero',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_NETMON_PRF_EVENT_CNTR_CTRL:CLEAR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_NETMON_PRF_EVENT_CNTR_CTRL:COUNTERS_CLEAR'} = {
    NAME => 'AR_NIC_NETMON_PRF_EVENT_CNTR_CTRL:COUNTERS_CLEAR',
    LABEL => 'AR_NIC_NETMON_PRF_EVENT_CNTR_CTRL:COUNTERS_CLEAR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* This bit is clear during the clear sequence and becomes set uponthe completion of the clear sequence',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_NETMON_PRF_EVENT_CNTR_CTRL:COUNTERS_CLEAR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_NETMON_PRF_EVENT_CNTR'} = {
    NAME => 'AR_NIC_NETMON_PRF_EVENT_CNTR',
    LABEL => 'AR_NIC_NETMON_PRF_EVENT_CNTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Event counters',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_NETMON_PRF_EVENT_CNTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NL_PRF_CTRL'} = {
    NAME => 'AR_NL_PRF_CTRL',
    LABEL => 'AR_NL_PRF_CTRL',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_NL_PRF_CTRL'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NL_PRF_CTRL:DISABLE_AUTO_UPDATE'} = {
    NAME => 'AR_NL_PRF_CTRL:DISABLE_AUTO_UPDATE',
    LABEL => 'AR_NL_PRF_CTRL:DISABLE_AUTO_UPDATE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Disables the auto-updating of the performance counters, turns off widget',
    CAT => 'craynpu',
};
$event_order{'AR_NL_PRF_CTRL:DISABLE_AUTO_UPDATE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NL_PRF_CTRL:ENABLE'} = {
    NAME => 'AR_NL_PRF_CTRL:ENABLE',
    LABEL => 'AR_NL_PRF_CTRL:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Writing a 1 enables performance counters, writing 0 disables counting',
    CAT => 'craynpu',
};
$event_order{'AR_NL_PRF_CTRL:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NL_PRF_CTRL:CLEAR'} = {
    NAME => 'AR_NL_PRF_CTRL:CLEAR',
    LABEL => 'AR_NL_PRF_CTRL:CLEAR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Initiates the clear sequence which clears all performance counters, read returns zero',
    CAT => 'craynpu',
};
$event_order{'AR_NL_PRF_CTRL:CLEAR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NL_PRF_CTRL:SEL_LM_TRIGGERS'} = {
    NAME => 'AR_NL_PRF_CTRL:SEL_LM_TRIGGERS',
    LABEL => 'AR_NL_PRF_CTRL:SEL_LM_TRIGGERS',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Select logic monitor triggers',
    CAT => 'craynpu',
};
$event_order{'AR_NL_PRF_CTRL:SEL_LM_TRIGGERS'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NL_PRF_CTRL:COUNTERS_CLEAR'} = {
    NAME => 'AR_NL_PRF_CTRL:COUNTERS_CLEAR',
    LABEL => 'AR_NL_PRF_CTRL:COUNTERS_CLEAR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* This bit becomes set upon the completion of the clear sequence',
    CAT => 'craynpu',
};
$event_order{'AR_NL_PRF_CTRL:COUNTERS_CLEAR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_NPT_PRF_EN'} = {
    NAME => 'AR_NIC_NPT_PRF_EN',
    LABEL => 'AR_NIC_NPT_PRF_EN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_NPT_PRF_EN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_NPT_PRF_EN:PRF_STALL_EN'} = {
    NAME => 'AR_NIC_NPT_PRF_EN:PRF_STALL_EN',
    LABEL => 'AR_NIC_NPT_PRF_EN:PRF_STALL_EN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Enable AR_NIC_NPT_PRF_NL_STALL_DURATION',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_NPT_PRF_EN:PRF_STALL_EN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_NPT_PRF_EN:PRF_FULL_EN'} = {
    NAME => 'AR_NIC_NPT_PRF_EN:PRF_FULL_EN',
    LABEL => 'AR_NIC_NPT_PRF_EN:PRF_FULL_EN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Enable AR_NIC_NPT_PRF_FULL_DURATION',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_NPT_PRF_EN:PRF_FULL_EN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_NPT_PRF_FULL_DURATION'} = {
    NAME => 'AR_NIC_NPT_PRF_FULL_DURATION',
    LABEL => 'AR_NIC_NPT_PRF_FULL_DURATION',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Full duration',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_NPT_PRF_FULL_DURATION'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_NPT_PRF_NL_STALL_DURATION'} = {
    NAME => 'AR_NIC_NPT_PRF_NL_STALL_DURATION',
    LABEL => 'AR_NIC_NPT_PRF_NL_STALL_DURATION',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'NL stall duration',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_NPT_PRF_NL_STALL_DURATION'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_NSLM_PRF_EVENT_CNTR_CTRL'} = {
    NAME => 'AR_NIC_NSLM_PRF_EVENT_CNTR_CTRL',
    LABEL => 'AR_NIC_NSLM_PRF_EVENT_CNTR_CTRL',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_NSLM_PRF_EVENT_CNTR_CTRL'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_NSLM_PRF_EVENT_CNTR_CTRL:DISABLE_AUTO_UPDATE'} = {
    NAME => 'AR_NIC_NSLM_PRF_EVENT_CNTR_CTRL:DISABLE_AUTO_UPDATE',
    LABEL => 'AR_NIC_NSLM_PRF_EVENT_CNTR_CTRL:DISABLE_AUTO_UPDATE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Writing a 1 disables the auto-updating of the performance counter RAMs, turns off widget',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_NSLM_PRF_EVENT_CNTR_CTRL:DISABLE_AUTO_UPDATE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_NSLM_PRF_EVENT_CNTR_CTRL:ENABLE'} = {
    NAME => 'AR_NIC_NSLM_PRF_EVENT_CNTR_CTRL:ENABLE',
    LABEL => 'AR_NIC_NSLM_PRF_EVENT_CNTR_CTRL:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Writing a 1 enables performance counters, writing a 0 disables counting and allows all performance counters to be used as scratch',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_NSLM_PRF_EVENT_CNTR_CTRL:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_NSLM_PRF_EVENT_CNTR_CTRL:CLEAR'} = {
    NAME => 'AR_NIC_NSLM_PRF_EVENT_CNTR_CTRL:CLEAR',
    LABEL => 'AR_NIC_NSLM_PRF_EVENT_CNTR_CTRL:CLEAR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Writing a 1 initiates the clear sequence which clears all performance counters except scratch counters, read returns zero',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_NSLM_PRF_EVENT_CNTR_CTRL:CLEAR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_NSLM_PRF_EVENT_CNTR_CTRL:COUNTERS_CLEAR'} = {
    NAME => 'AR_NIC_NSLM_PRF_EVENT_CNTR_CTRL:COUNTERS_CLEAR',
    LABEL => 'AR_NIC_NSLM_PRF_EVENT_CNTR_CTRL:COUNTERS_CLEAR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* This bit is clear during the clear sequence and becomes set uponthe completion of the clear sequence',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_NSLM_PRF_EVENT_CNTR_CTRL:COUNTERS_CLEAR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_NSLM_PRF_EVENT_CNTR'} = {
    NAME => 'AR_NIC_NSLM_PRF_EVENT_CNTR',
    LABEL => 'AR_NIC_NSLM_PRF_EVENT_CNTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Event counters',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_NSLM_PRF_EVENT_CNTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_0_INQ_PRF_INCOMING_FLIT_VC0'} = {
    NAME => 'AR_RTR_0_0_INQ_PRF_INCOMING_FLIT_VC0',
    LABEL => 'AR_RTR_0_0_INQ_PRF_INCOMING_FLIT_VC0',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_0_INQ_PRF_INCOMING_FLIT_VC0'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_1_INQ_PRF_INCOMING_FLIT_VC0'} = {
    NAME => 'AR_RTR_0_1_INQ_PRF_INCOMING_FLIT_VC0',
    LABEL => 'AR_RTR_0_1_INQ_PRF_INCOMING_FLIT_VC0',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_1_INQ_PRF_INCOMING_FLIT_VC0'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_2_INQ_PRF_INCOMING_FLIT_VC0'} = {
    NAME => 'AR_RTR_0_2_INQ_PRF_INCOMING_FLIT_VC0',
    LABEL => 'AR_RTR_0_2_INQ_PRF_INCOMING_FLIT_VC0',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_2_INQ_PRF_INCOMING_FLIT_VC0'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_3_INQ_PRF_INCOMING_FLIT_VC0'} = {
    NAME => 'AR_RTR_0_3_INQ_PRF_INCOMING_FLIT_VC0',
    LABEL => 'AR_RTR_0_3_INQ_PRF_INCOMING_FLIT_VC0',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_3_INQ_PRF_INCOMING_FLIT_VC0'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_4_INQ_PRF_INCOMING_FLIT_VC0'} = {
    NAME => 'AR_RTR_0_4_INQ_PRF_INCOMING_FLIT_VC0',
    LABEL => 'AR_RTR_0_4_INQ_PRF_INCOMING_FLIT_VC0',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_4_INQ_PRF_INCOMING_FLIT_VC0'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_5_INQ_PRF_INCOMING_FLIT_VC0'} = {
    NAME => 'AR_RTR_0_5_INQ_PRF_INCOMING_FLIT_VC0',
    LABEL => 'AR_RTR_0_5_INQ_PRF_INCOMING_FLIT_VC0',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_5_INQ_PRF_INCOMING_FLIT_VC0'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_6_INQ_PRF_INCOMING_FLIT_VC0'} = {
    NAME => 'AR_RTR_0_6_INQ_PRF_INCOMING_FLIT_VC0',
    LABEL => 'AR_RTR_0_6_INQ_PRF_INCOMING_FLIT_VC0',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_6_INQ_PRF_INCOMING_FLIT_VC0'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_7_INQ_PRF_INCOMING_FLIT_VC0'} = {
    NAME => 'AR_RTR_0_7_INQ_PRF_INCOMING_FLIT_VC0',
    LABEL => 'AR_RTR_0_7_INQ_PRF_INCOMING_FLIT_VC0',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_7_INQ_PRF_INCOMING_FLIT_VC0'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_0_INQ_PRF_INCOMING_FLIT_VC0'} = {
    NAME => 'AR_RTR_1_0_INQ_PRF_INCOMING_FLIT_VC0',
    LABEL => 'AR_RTR_1_0_INQ_PRF_INCOMING_FLIT_VC0',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_0_INQ_PRF_INCOMING_FLIT_VC0'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_1_INQ_PRF_INCOMING_FLIT_VC0'} = {
    NAME => 'AR_RTR_1_1_INQ_PRF_INCOMING_FLIT_VC0',
    LABEL => 'AR_RTR_1_1_INQ_PRF_INCOMING_FLIT_VC0',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_1_INQ_PRF_INCOMING_FLIT_VC0'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_2_INQ_PRF_INCOMING_FLIT_VC0'} = {
    NAME => 'AR_RTR_1_2_INQ_PRF_INCOMING_FLIT_VC0',
    LABEL => 'AR_RTR_1_2_INQ_PRF_INCOMING_FLIT_VC0',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_2_INQ_PRF_INCOMING_FLIT_VC0'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_3_INQ_PRF_INCOMING_FLIT_VC0'} = {
    NAME => 'AR_RTR_1_3_INQ_PRF_INCOMING_FLIT_VC0',
    LABEL => 'AR_RTR_1_3_INQ_PRF_INCOMING_FLIT_VC0',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_3_INQ_PRF_INCOMING_FLIT_VC0'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_4_INQ_PRF_INCOMING_FLIT_VC0'} = {
    NAME => 'AR_RTR_1_4_INQ_PRF_INCOMING_FLIT_VC0',
    LABEL => 'AR_RTR_1_4_INQ_PRF_INCOMING_FLIT_VC0',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_4_INQ_PRF_INCOMING_FLIT_VC0'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_5_INQ_PRF_INCOMING_FLIT_VC0'} = {
    NAME => 'AR_RTR_1_5_INQ_PRF_INCOMING_FLIT_VC0',
    LABEL => 'AR_RTR_1_5_INQ_PRF_INCOMING_FLIT_VC0',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_5_INQ_PRF_INCOMING_FLIT_VC0'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_6_INQ_PRF_INCOMING_FLIT_VC0'} = {
    NAME => 'AR_RTR_1_6_INQ_PRF_INCOMING_FLIT_VC0',
    LABEL => 'AR_RTR_1_6_INQ_PRF_INCOMING_FLIT_VC0',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_6_INQ_PRF_INCOMING_FLIT_VC0'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_7_INQ_PRF_INCOMING_FLIT_VC0'} = {
    NAME => 'AR_RTR_1_7_INQ_PRF_INCOMING_FLIT_VC0',
    LABEL => 'AR_RTR_1_7_INQ_PRF_INCOMING_FLIT_VC0',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_7_INQ_PRF_INCOMING_FLIT_VC0'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_0_INQ_PRF_INCOMING_FLIT_VC0'} = {
    NAME => 'AR_RTR_2_0_INQ_PRF_INCOMING_FLIT_VC0',
    LABEL => 'AR_RTR_2_0_INQ_PRF_INCOMING_FLIT_VC0',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_0_INQ_PRF_INCOMING_FLIT_VC0'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_1_INQ_PRF_INCOMING_FLIT_VC0'} = {
    NAME => 'AR_RTR_2_1_INQ_PRF_INCOMING_FLIT_VC0',
    LABEL => 'AR_RTR_2_1_INQ_PRF_INCOMING_FLIT_VC0',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_1_INQ_PRF_INCOMING_FLIT_VC0'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_2_INQ_PRF_INCOMING_FLIT_VC0'} = {
    NAME => 'AR_RTR_2_2_INQ_PRF_INCOMING_FLIT_VC0',
    LABEL => 'AR_RTR_2_2_INQ_PRF_INCOMING_FLIT_VC0',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_2_INQ_PRF_INCOMING_FLIT_VC0'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_3_INQ_PRF_INCOMING_FLIT_VC0'} = {
    NAME => 'AR_RTR_2_3_INQ_PRF_INCOMING_FLIT_VC0',
    LABEL => 'AR_RTR_2_3_INQ_PRF_INCOMING_FLIT_VC0',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_3_INQ_PRF_INCOMING_FLIT_VC0'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_4_INQ_PRF_INCOMING_FLIT_VC0'} = {
    NAME => 'AR_RTR_2_4_INQ_PRF_INCOMING_FLIT_VC0',
    LABEL => 'AR_RTR_2_4_INQ_PRF_INCOMING_FLIT_VC0',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_4_INQ_PRF_INCOMING_FLIT_VC0'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_5_INQ_PRF_INCOMING_FLIT_VC0'} = {
    NAME => 'AR_RTR_2_5_INQ_PRF_INCOMING_FLIT_VC0',
    LABEL => 'AR_RTR_2_5_INQ_PRF_INCOMING_FLIT_VC0',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_5_INQ_PRF_INCOMING_FLIT_VC0'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_6_INQ_PRF_INCOMING_FLIT_VC0'} = {
    NAME => 'AR_RTR_2_6_INQ_PRF_INCOMING_FLIT_VC0',
    LABEL => 'AR_RTR_2_6_INQ_PRF_INCOMING_FLIT_VC0',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_6_INQ_PRF_INCOMING_FLIT_VC0'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_7_INQ_PRF_INCOMING_FLIT_VC0'} = {
    NAME => 'AR_RTR_2_7_INQ_PRF_INCOMING_FLIT_VC0',
    LABEL => 'AR_RTR_2_7_INQ_PRF_INCOMING_FLIT_VC0',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_7_INQ_PRF_INCOMING_FLIT_VC0'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_0_INQ_PRF_INCOMING_FLIT_VC0'} = {
    NAME => 'AR_RTR_3_0_INQ_PRF_INCOMING_FLIT_VC0',
    LABEL => 'AR_RTR_3_0_INQ_PRF_INCOMING_FLIT_VC0',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_0_INQ_PRF_INCOMING_FLIT_VC0'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_1_INQ_PRF_INCOMING_FLIT_VC0'} = {
    NAME => 'AR_RTR_3_1_INQ_PRF_INCOMING_FLIT_VC0',
    LABEL => 'AR_RTR_3_1_INQ_PRF_INCOMING_FLIT_VC0',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_1_INQ_PRF_INCOMING_FLIT_VC0'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_2_INQ_PRF_INCOMING_FLIT_VC0'} = {
    NAME => 'AR_RTR_3_2_INQ_PRF_INCOMING_FLIT_VC0',
    LABEL => 'AR_RTR_3_2_INQ_PRF_INCOMING_FLIT_VC0',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_2_INQ_PRF_INCOMING_FLIT_VC0'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_3_INQ_PRF_INCOMING_FLIT_VC0'} = {
    NAME => 'AR_RTR_3_3_INQ_PRF_INCOMING_FLIT_VC0',
    LABEL => 'AR_RTR_3_3_INQ_PRF_INCOMING_FLIT_VC0',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_3_INQ_PRF_INCOMING_FLIT_VC0'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_4_INQ_PRF_INCOMING_FLIT_VC0'} = {
    NAME => 'AR_RTR_3_4_INQ_PRF_INCOMING_FLIT_VC0',
    LABEL => 'AR_RTR_3_4_INQ_PRF_INCOMING_FLIT_VC0',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_4_INQ_PRF_INCOMING_FLIT_VC0'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_5_INQ_PRF_INCOMING_FLIT_VC0'} = {
    NAME => 'AR_RTR_3_5_INQ_PRF_INCOMING_FLIT_VC0',
    LABEL => 'AR_RTR_3_5_INQ_PRF_INCOMING_FLIT_VC0',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_5_INQ_PRF_INCOMING_FLIT_VC0'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_6_INQ_PRF_INCOMING_FLIT_VC0'} = {
    NAME => 'AR_RTR_3_6_INQ_PRF_INCOMING_FLIT_VC0',
    LABEL => 'AR_RTR_3_6_INQ_PRF_INCOMING_FLIT_VC0',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_6_INQ_PRF_INCOMING_FLIT_VC0'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_7_INQ_PRF_INCOMING_FLIT_VC0'} = {
    NAME => 'AR_RTR_3_7_INQ_PRF_INCOMING_FLIT_VC0',
    LABEL => 'AR_RTR_3_7_INQ_PRF_INCOMING_FLIT_VC0',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_7_INQ_PRF_INCOMING_FLIT_VC0'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_0_INQ_PRF_INCOMING_FLIT_VC0'} = {
    NAME => 'AR_RTR_4_0_INQ_PRF_INCOMING_FLIT_VC0',
    LABEL => 'AR_RTR_4_0_INQ_PRF_INCOMING_FLIT_VC0',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_0_INQ_PRF_INCOMING_FLIT_VC0'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_1_INQ_PRF_INCOMING_FLIT_VC0'} = {
    NAME => 'AR_RTR_4_1_INQ_PRF_INCOMING_FLIT_VC0',
    LABEL => 'AR_RTR_4_1_INQ_PRF_INCOMING_FLIT_VC0',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_1_INQ_PRF_INCOMING_FLIT_VC0'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_2_INQ_PRF_INCOMING_FLIT_VC0'} = {
    NAME => 'AR_RTR_4_2_INQ_PRF_INCOMING_FLIT_VC0',
    LABEL => 'AR_RTR_4_2_INQ_PRF_INCOMING_FLIT_VC0',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_2_INQ_PRF_INCOMING_FLIT_VC0'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_3_INQ_PRF_INCOMING_FLIT_VC0'} = {
    NAME => 'AR_RTR_4_3_INQ_PRF_INCOMING_FLIT_VC0',
    LABEL => 'AR_RTR_4_3_INQ_PRF_INCOMING_FLIT_VC0',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_3_INQ_PRF_INCOMING_FLIT_VC0'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_4_INQ_PRF_INCOMING_FLIT_VC0'} = {
    NAME => 'AR_RTR_4_4_INQ_PRF_INCOMING_FLIT_VC0',
    LABEL => 'AR_RTR_4_4_INQ_PRF_INCOMING_FLIT_VC0',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_4_INQ_PRF_INCOMING_FLIT_VC0'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_5_INQ_PRF_INCOMING_FLIT_VC0'} = {
    NAME => 'AR_RTR_4_5_INQ_PRF_INCOMING_FLIT_VC0',
    LABEL => 'AR_RTR_4_5_INQ_PRF_INCOMING_FLIT_VC0',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_5_INQ_PRF_INCOMING_FLIT_VC0'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_6_INQ_PRF_INCOMING_FLIT_VC0'} = {
    NAME => 'AR_RTR_4_6_INQ_PRF_INCOMING_FLIT_VC0',
    LABEL => 'AR_RTR_4_6_INQ_PRF_INCOMING_FLIT_VC0',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_6_INQ_PRF_INCOMING_FLIT_VC0'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_7_INQ_PRF_INCOMING_FLIT_VC0'} = {
    NAME => 'AR_RTR_4_7_INQ_PRF_INCOMING_FLIT_VC0',
    LABEL => 'AR_RTR_4_7_INQ_PRF_INCOMING_FLIT_VC0',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_7_INQ_PRF_INCOMING_FLIT_VC0'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_0_INQ_PRF_INCOMING_FLIT_VC1'} = {
    NAME => 'AR_RTR_0_0_INQ_PRF_INCOMING_FLIT_VC1',
    LABEL => 'AR_RTR_0_0_INQ_PRF_INCOMING_FLIT_VC1',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC1',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_0_INQ_PRF_INCOMING_FLIT_VC1'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_1_INQ_PRF_INCOMING_FLIT_VC1'} = {
    NAME => 'AR_RTR_0_1_INQ_PRF_INCOMING_FLIT_VC1',
    LABEL => 'AR_RTR_0_1_INQ_PRF_INCOMING_FLIT_VC1',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC1',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_1_INQ_PRF_INCOMING_FLIT_VC1'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_2_INQ_PRF_INCOMING_FLIT_VC1'} = {
    NAME => 'AR_RTR_0_2_INQ_PRF_INCOMING_FLIT_VC1',
    LABEL => 'AR_RTR_0_2_INQ_PRF_INCOMING_FLIT_VC1',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC1',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_2_INQ_PRF_INCOMING_FLIT_VC1'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_3_INQ_PRF_INCOMING_FLIT_VC1'} = {
    NAME => 'AR_RTR_0_3_INQ_PRF_INCOMING_FLIT_VC1',
    LABEL => 'AR_RTR_0_3_INQ_PRF_INCOMING_FLIT_VC1',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC1',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_3_INQ_PRF_INCOMING_FLIT_VC1'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_4_INQ_PRF_INCOMING_FLIT_VC1'} = {
    NAME => 'AR_RTR_0_4_INQ_PRF_INCOMING_FLIT_VC1',
    LABEL => 'AR_RTR_0_4_INQ_PRF_INCOMING_FLIT_VC1',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC1',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_4_INQ_PRF_INCOMING_FLIT_VC1'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_5_INQ_PRF_INCOMING_FLIT_VC1'} = {
    NAME => 'AR_RTR_0_5_INQ_PRF_INCOMING_FLIT_VC1',
    LABEL => 'AR_RTR_0_5_INQ_PRF_INCOMING_FLIT_VC1',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC1',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_5_INQ_PRF_INCOMING_FLIT_VC1'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_6_INQ_PRF_INCOMING_FLIT_VC1'} = {
    NAME => 'AR_RTR_0_6_INQ_PRF_INCOMING_FLIT_VC1',
    LABEL => 'AR_RTR_0_6_INQ_PRF_INCOMING_FLIT_VC1',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC1',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_6_INQ_PRF_INCOMING_FLIT_VC1'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_7_INQ_PRF_INCOMING_FLIT_VC1'} = {
    NAME => 'AR_RTR_0_7_INQ_PRF_INCOMING_FLIT_VC1',
    LABEL => 'AR_RTR_0_7_INQ_PRF_INCOMING_FLIT_VC1',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC1',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_7_INQ_PRF_INCOMING_FLIT_VC1'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_0_INQ_PRF_INCOMING_FLIT_VC1'} = {
    NAME => 'AR_RTR_1_0_INQ_PRF_INCOMING_FLIT_VC1',
    LABEL => 'AR_RTR_1_0_INQ_PRF_INCOMING_FLIT_VC1',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC1',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_0_INQ_PRF_INCOMING_FLIT_VC1'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_1_INQ_PRF_INCOMING_FLIT_VC1'} = {
    NAME => 'AR_RTR_1_1_INQ_PRF_INCOMING_FLIT_VC1',
    LABEL => 'AR_RTR_1_1_INQ_PRF_INCOMING_FLIT_VC1',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC1',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_1_INQ_PRF_INCOMING_FLIT_VC1'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_2_INQ_PRF_INCOMING_FLIT_VC1'} = {
    NAME => 'AR_RTR_1_2_INQ_PRF_INCOMING_FLIT_VC1',
    LABEL => 'AR_RTR_1_2_INQ_PRF_INCOMING_FLIT_VC1',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC1',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_2_INQ_PRF_INCOMING_FLIT_VC1'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_3_INQ_PRF_INCOMING_FLIT_VC1'} = {
    NAME => 'AR_RTR_1_3_INQ_PRF_INCOMING_FLIT_VC1',
    LABEL => 'AR_RTR_1_3_INQ_PRF_INCOMING_FLIT_VC1',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC1',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_3_INQ_PRF_INCOMING_FLIT_VC1'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_4_INQ_PRF_INCOMING_FLIT_VC1'} = {
    NAME => 'AR_RTR_1_4_INQ_PRF_INCOMING_FLIT_VC1',
    LABEL => 'AR_RTR_1_4_INQ_PRF_INCOMING_FLIT_VC1',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC1',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_4_INQ_PRF_INCOMING_FLIT_VC1'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_5_INQ_PRF_INCOMING_FLIT_VC1'} = {
    NAME => 'AR_RTR_1_5_INQ_PRF_INCOMING_FLIT_VC1',
    LABEL => 'AR_RTR_1_5_INQ_PRF_INCOMING_FLIT_VC1',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC1',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_5_INQ_PRF_INCOMING_FLIT_VC1'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_6_INQ_PRF_INCOMING_FLIT_VC1'} = {
    NAME => 'AR_RTR_1_6_INQ_PRF_INCOMING_FLIT_VC1',
    LABEL => 'AR_RTR_1_6_INQ_PRF_INCOMING_FLIT_VC1',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC1',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_6_INQ_PRF_INCOMING_FLIT_VC1'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_7_INQ_PRF_INCOMING_FLIT_VC1'} = {
    NAME => 'AR_RTR_1_7_INQ_PRF_INCOMING_FLIT_VC1',
    LABEL => 'AR_RTR_1_7_INQ_PRF_INCOMING_FLIT_VC1',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC1',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_7_INQ_PRF_INCOMING_FLIT_VC1'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_0_INQ_PRF_INCOMING_FLIT_VC1'} = {
    NAME => 'AR_RTR_2_0_INQ_PRF_INCOMING_FLIT_VC1',
    LABEL => 'AR_RTR_2_0_INQ_PRF_INCOMING_FLIT_VC1',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC1',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_0_INQ_PRF_INCOMING_FLIT_VC1'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_1_INQ_PRF_INCOMING_FLIT_VC1'} = {
    NAME => 'AR_RTR_2_1_INQ_PRF_INCOMING_FLIT_VC1',
    LABEL => 'AR_RTR_2_1_INQ_PRF_INCOMING_FLIT_VC1',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC1',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_1_INQ_PRF_INCOMING_FLIT_VC1'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_2_INQ_PRF_INCOMING_FLIT_VC1'} = {
    NAME => 'AR_RTR_2_2_INQ_PRF_INCOMING_FLIT_VC1',
    LABEL => 'AR_RTR_2_2_INQ_PRF_INCOMING_FLIT_VC1',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC1',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_2_INQ_PRF_INCOMING_FLIT_VC1'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_3_INQ_PRF_INCOMING_FLIT_VC1'} = {
    NAME => 'AR_RTR_2_3_INQ_PRF_INCOMING_FLIT_VC1',
    LABEL => 'AR_RTR_2_3_INQ_PRF_INCOMING_FLIT_VC1',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC1',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_3_INQ_PRF_INCOMING_FLIT_VC1'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_4_INQ_PRF_INCOMING_FLIT_VC1'} = {
    NAME => 'AR_RTR_2_4_INQ_PRF_INCOMING_FLIT_VC1',
    LABEL => 'AR_RTR_2_4_INQ_PRF_INCOMING_FLIT_VC1',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC1',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_4_INQ_PRF_INCOMING_FLIT_VC1'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_5_INQ_PRF_INCOMING_FLIT_VC1'} = {
    NAME => 'AR_RTR_2_5_INQ_PRF_INCOMING_FLIT_VC1',
    LABEL => 'AR_RTR_2_5_INQ_PRF_INCOMING_FLIT_VC1',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC1',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_5_INQ_PRF_INCOMING_FLIT_VC1'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_6_INQ_PRF_INCOMING_FLIT_VC1'} = {
    NAME => 'AR_RTR_2_6_INQ_PRF_INCOMING_FLIT_VC1',
    LABEL => 'AR_RTR_2_6_INQ_PRF_INCOMING_FLIT_VC1',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC1',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_6_INQ_PRF_INCOMING_FLIT_VC1'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_7_INQ_PRF_INCOMING_FLIT_VC1'} = {
    NAME => 'AR_RTR_2_7_INQ_PRF_INCOMING_FLIT_VC1',
    LABEL => 'AR_RTR_2_7_INQ_PRF_INCOMING_FLIT_VC1',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC1',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_7_INQ_PRF_INCOMING_FLIT_VC1'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_0_INQ_PRF_INCOMING_FLIT_VC1'} = {
    NAME => 'AR_RTR_3_0_INQ_PRF_INCOMING_FLIT_VC1',
    LABEL => 'AR_RTR_3_0_INQ_PRF_INCOMING_FLIT_VC1',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC1',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_0_INQ_PRF_INCOMING_FLIT_VC1'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_1_INQ_PRF_INCOMING_FLIT_VC1'} = {
    NAME => 'AR_RTR_3_1_INQ_PRF_INCOMING_FLIT_VC1',
    LABEL => 'AR_RTR_3_1_INQ_PRF_INCOMING_FLIT_VC1',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC1',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_1_INQ_PRF_INCOMING_FLIT_VC1'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_2_INQ_PRF_INCOMING_FLIT_VC1'} = {
    NAME => 'AR_RTR_3_2_INQ_PRF_INCOMING_FLIT_VC1',
    LABEL => 'AR_RTR_3_2_INQ_PRF_INCOMING_FLIT_VC1',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC1',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_2_INQ_PRF_INCOMING_FLIT_VC1'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_3_INQ_PRF_INCOMING_FLIT_VC1'} = {
    NAME => 'AR_RTR_3_3_INQ_PRF_INCOMING_FLIT_VC1',
    LABEL => 'AR_RTR_3_3_INQ_PRF_INCOMING_FLIT_VC1',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC1',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_3_INQ_PRF_INCOMING_FLIT_VC1'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_4_INQ_PRF_INCOMING_FLIT_VC1'} = {
    NAME => 'AR_RTR_3_4_INQ_PRF_INCOMING_FLIT_VC1',
    LABEL => 'AR_RTR_3_4_INQ_PRF_INCOMING_FLIT_VC1',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC1',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_4_INQ_PRF_INCOMING_FLIT_VC1'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_5_INQ_PRF_INCOMING_FLIT_VC1'} = {
    NAME => 'AR_RTR_3_5_INQ_PRF_INCOMING_FLIT_VC1',
    LABEL => 'AR_RTR_3_5_INQ_PRF_INCOMING_FLIT_VC1',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC1',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_5_INQ_PRF_INCOMING_FLIT_VC1'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_6_INQ_PRF_INCOMING_FLIT_VC1'} = {
    NAME => 'AR_RTR_3_6_INQ_PRF_INCOMING_FLIT_VC1',
    LABEL => 'AR_RTR_3_6_INQ_PRF_INCOMING_FLIT_VC1',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC1',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_6_INQ_PRF_INCOMING_FLIT_VC1'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_7_INQ_PRF_INCOMING_FLIT_VC1'} = {
    NAME => 'AR_RTR_3_7_INQ_PRF_INCOMING_FLIT_VC1',
    LABEL => 'AR_RTR_3_7_INQ_PRF_INCOMING_FLIT_VC1',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC1',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_7_INQ_PRF_INCOMING_FLIT_VC1'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_0_INQ_PRF_INCOMING_FLIT_VC1'} = {
    NAME => 'AR_RTR_4_0_INQ_PRF_INCOMING_FLIT_VC1',
    LABEL => 'AR_RTR_4_0_INQ_PRF_INCOMING_FLIT_VC1',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC1',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_0_INQ_PRF_INCOMING_FLIT_VC1'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_1_INQ_PRF_INCOMING_FLIT_VC1'} = {
    NAME => 'AR_RTR_4_1_INQ_PRF_INCOMING_FLIT_VC1',
    LABEL => 'AR_RTR_4_1_INQ_PRF_INCOMING_FLIT_VC1',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC1',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_1_INQ_PRF_INCOMING_FLIT_VC1'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_2_INQ_PRF_INCOMING_FLIT_VC1'} = {
    NAME => 'AR_RTR_4_2_INQ_PRF_INCOMING_FLIT_VC1',
    LABEL => 'AR_RTR_4_2_INQ_PRF_INCOMING_FLIT_VC1',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC1',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_2_INQ_PRF_INCOMING_FLIT_VC1'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_3_INQ_PRF_INCOMING_FLIT_VC1'} = {
    NAME => 'AR_RTR_4_3_INQ_PRF_INCOMING_FLIT_VC1',
    LABEL => 'AR_RTR_4_3_INQ_PRF_INCOMING_FLIT_VC1',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC1',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_3_INQ_PRF_INCOMING_FLIT_VC1'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_4_INQ_PRF_INCOMING_FLIT_VC1'} = {
    NAME => 'AR_RTR_4_4_INQ_PRF_INCOMING_FLIT_VC1',
    LABEL => 'AR_RTR_4_4_INQ_PRF_INCOMING_FLIT_VC1',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC1',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_4_INQ_PRF_INCOMING_FLIT_VC1'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_5_INQ_PRF_INCOMING_FLIT_VC1'} = {
    NAME => 'AR_RTR_4_5_INQ_PRF_INCOMING_FLIT_VC1',
    LABEL => 'AR_RTR_4_5_INQ_PRF_INCOMING_FLIT_VC1',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC1',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_5_INQ_PRF_INCOMING_FLIT_VC1'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_6_INQ_PRF_INCOMING_FLIT_VC1'} = {
    NAME => 'AR_RTR_4_6_INQ_PRF_INCOMING_FLIT_VC1',
    LABEL => 'AR_RTR_4_6_INQ_PRF_INCOMING_FLIT_VC1',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC1',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_6_INQ_PRF_INCOMING_FLIT_VC1'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_7_INQ_PRF_INCOMING_FLIT_VC1'} = {
    NAME => 'AR_RTR_4_7_INQ_PRF_INCOMING_FLIT_VC1',
    LABEL => 'AR_RTR_4_7_INQ_PRF_INCOMING_FLIT_VC1',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC1',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_7_INQ_PRF_INCOMING_FLIT_VC1'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_0_INQ_PRF_INCOMING_FLIT_VC2'} = {
    NAME => 'AR_RTR_0_0_INQ_PRF_INCOMING_FLIT_VC2',
    LABEL => 'AR_RTR_0_0_INQ_PRF_INCOMING_FLIT_VC2',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC2',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_0_INQ_PRF_INCOMING_FLIT_VC2'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_1_INQ_PRF_INCOMING_FLIT_VC2'} = {
    NAME => 'AR_RTR_0_1_INQ_PRF_INCOMING_FLIT_VC2',
    LABEL => 'AR_RTR_0_1_INQ_PRF_INCOMING_FLIT_VC2',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC2',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_1_INQ_PRF_INCOMING_FLIT_VC2'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_2_INQ_PRF_INCOMING_FLIT_VC2'} = {
    NAME => 'AR_RTR_0_2_INQ_PRF_INCOMING_FLIT_VC2',
    LABEL => 'AR_RTR_0_2_INQ_PRF_INCOMING_FLIT_VC2',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC2',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_2_INQ_PRF_INCOMING_FLIT_VC2'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_3_INQ_PRF_INCOMING_FLIT_VC2'} = {
    NAME => 'AR_RTR_0_3_INQ_PRF_INCOMING_FLIT_VC2',
    LABEL => 'AR_RTR_0_3_INQ_PRF_INCOMING_FLIT_VC2',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC2',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_3_INQ_PRF_INCOMING_FLIT_VC2'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_4_INQ_PRF_INCOMING_FLIT_VC2'} = {
    NAME => 'AR_RTR_0_4_INQ_PRF_INCOMING_FLIT_VC2',
    LABEL => 'AR_RTR_0_4_INQ_PRF_INCOMING_FLIT_VC2',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC2',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_4_INQ_PRF_INCOMING_FLIT_VC2'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_5_INQ_PRF_INCOMING_FLIT_VC2'} = {
    NAME => 'AR_RTR_0_5_INQ_PRF_INCOMING_FLIT_VC2',
    LABEL => 'AR_RTR_0_5_INQ_PRF_INCOMING_FLIT_VC2',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC2',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_5_INQ_PRF_INCOMING_FLIT_VC2'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_6_INQ_PRF_INCOMING_FLIT_VC2'} = {
    NAME => 'AR_RTR_0_6_INQ_PRF_INCOMING_FLIT_VC2',
    LABEL => 'AR_RTR_0_6_INQ_PRF_INCOMING_FLIT_VC2',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC2',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_6_INQ_PRF_INCOMING_FLIT_VC2'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_7_INQ_PRF_INCOMING_FLIT_VC2'} = {
    NAME => 'AR_RTR_0_7_INQ_PRF_INCOMING_FLIT_VC2',
    LABEL => 'AR_RTR_0_7_INQ_PRF_INCOMING_FLIT_VC2',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC2',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_7_INQ_PRF_INCOMING_FLIT_VC2'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_0_INQ_PRF_INCOMING_FLIT_VC2'} = {
    NAME => 'AR_RTR_1_0_INQ_PRF_INCOMING_FLIT_VC2',
    LABEL => 'AR_RTR_1_0_INQ_PRF_INCOMING_FLIT_VC2',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC2',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_0_INQ_PRF_INCOMING_FLIT_VC2'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_1_INQ_PRF_INCOMING_FLIT_VC2'} = {
    NAME => 'AR_RTR_1_1_INQ_PRF_INCOMING_FLIT_VC2',
    LABEL => 'AR_RTR_1_1_INQ_PRF_INCOMING_FLIT_VC2',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC2',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_1_INQ_PRF_INCOMING_FLIT_VC2'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_2_INQ_PRF_INCOMING_FLIT_VC2'} = {
    NAME => 'AR_RTR_1_2_INQ_PRF_INCOMING_FLIT_VC2',
    LABEL => 'AR_RTR_1_2_INQ_PRF_INCOMING_FLIT_VC2',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC2',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_2_INQ_PRF_INCOMING_FLIT_VC2'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_3_INQ_PRF_INCOMING_FLIT_VC2'} = {
    NAME => 'AR_RTR_1_3_INQ_PRF_INCOMING_FLIT_VC2',
    LABEL => 'AR_RTR_1_3_INQ_PRF_INCOMING_FLIT_VC2',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC2',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_3_INQ_PRF_INCOMING_FLIT_VC2'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_4_INQ_PRF_INCOMING_FLIT_VC2'} = {
    NAME => 'AR_RTR_1_4_INQ_PRF_INCOMING_FLIT_VC2',
    LABEL => 'AR_RTR_1_4_INQ_PRF_INCOMING_FLIT_VC2',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC2',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_4_INQ_PRF_INCOMING_FLIT_VC2'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_5_INQ_PRF_INCOMING_FLIT_VC2'} = {
    NAME => 'AR_RTR_1_5_INQ_PRF_INCOMING_FLIT_VC2',
    LABEL => 'AR_RTR_1_5_INQ_PRF_INCOMING_FLIT_VC2',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC2',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_5_INQ_PRF_INCOMING_FLIT_VC2'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_6_INQ_PRF_INCOMING_FLIT_VC2'} = {
    NAME => 'AR_RTR_1_6_INQ_PRF_INCOMING_FLIT_VC2',
    LABEL => 'AR_RTR_1_6_INQ_PRF_INCOMING_FLIT_VC2',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC2',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_6_INQ_PRF_INCOMING_FLIT_VC2'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_7_INQ_PRF_INCOMING_FLIT_VC2'} = {
    NAME => 'AR_RTR_1_7_INQ_PRF_INCOMING_FLIT_VC2',
    LABEL => 'AR_RTR_1_7_INQ_PRF_INCOMING_FLIT_VC2',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC2',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_7_INQ_PRF_INCOMING_FLIT_VC2'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_0_INQ_PRF_INCOMING_FLIT_VC2'} = {
    NAME => 'AR_RTR_2_0_INQ_PRF_INCOMING_FLIT_VC2',
    LABEL => 'AR_RTR_2_0_INQ_PRF_INCOMING_FLIT_VC2',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC2',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_0_INQ_PRF_INCOMING_FLIT_VC2'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_1_INQ_PRF_INCOMING_FLIT_VC2'} = {
    NAME => 'AR_RTR_2_1_INQ_PRF_INCOMING_FLIT_VC2',
    LABEL => 'AR_RTR_2_1_INQ_PRF_INCOMING_FLIT_VC2',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC2',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_1_INQ_PRF_INCOMING_FLIT_VC2'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_2_INQ_PRF_INCOMING_FLIT_VC2'} = {
    NAME => 'AR_RTR_2_2_INQ_PRF_INCOMING_FLIT_VC2',
    LABEL => 'AR_RTR_2_2_INQ_PRF_INCOMING_FLIT_VC2',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC2',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_2_INQ_PRF_INCOMING_FLIT_VC2'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_3_INQ_PRF_INCOMING_FLIT_VC2'} = {
    NAME => 'AR_RTR_2_3_INQ_PRF_INCOMING_FLIT_VC2',
    LABEL => 'AR_RTR_2_3_INQ_PRF_INCOMING_FLIT_VC2',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC2',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_3_INQ_PRF_INCOMING_FLIT_VC2'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_4_INQ_PRF_INCOMING_FLIT_VC2'} = {
    NAME => 'AR_RTR_2_4_INQ_PRF_INCOMING_FLIT_VC2',
    LABEL => 'AR_RTR_2_4_INQ_PRF_INCOMING_FLIT_VC2',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC2',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_4_INQ_PRF_INCOMING_FLIT_VC2'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_5_INQ_PRF_INCOMING_FLIT_VC2'} = {
    NAME => 'AR_RTR_2_5_INQ_PRF_INCOMING_FLIT_VC2',
    LABEL => 'AR_RTR_2_5_INQ_PRF_INCOMING_FLIT_VC2',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC2',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_5_INQ_PRF_INCOMING_FLIT_VC2'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_6_INQ_PRF_INCOMING_FLIT_VC2'} = {
    NAME => 'AR_RTR_2_6_INQ_PRF_INCOMING_FLIT_VC2',
    LABEL => 'AR_RTR_2_6_INQ_PRF_INCOMING_FLIT_VC2',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC2',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_6_INQ_PRF_INCOMING_FLIT_VC2'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_7_INQ_PRF_INCOMING_FLIT_VC2'} = {
    NAME => 'AR_RTR_2_7_INQ_PRF_INCOMING_FLIT_VC2',
    LABEL => 'AR_RTR_2_7_INQ_PRF_INCOMING_FLIT_VC2',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC2',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_7_INQ_PRF_INCOMING_FLIT_VC2'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_0_INQ_PRF_INCOMING_FLIT_VC2'} = {
    NAME => 'AR_RTR_3_0_INQ_PRF_INCOMING_FLIT_VC2',
    LABEL => 'AR_RTR_3_0_INQ_PRF_INCOMING_FLIT_VC2',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC2',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_0_INQ_PRF_INCOMING_FLIT_VC2'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_1_INQ_PRF_INCOMING_FLIT_VC2'} = {
    NAME => 'AR_RTR_3_1_INQ_PRF_INCOMING_FLIT_VC2',
    LABEL => 'AR_RTR_3_1_INQ_PRF_INCOMING_FLIT_VC2',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC2',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_1_INQ_PRF_INCOMING_FLIT_VC2'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_2_INQ_PRF_INCOMING_FLIT_VC2'} = {
    NAME => 'AR_RTR_3_2_INQ_PRF_INCOMING_FLIT_VC2',
    LABEL => 'AR_RTR_3_2_INQ_PRF_INCOMING_FLIT_VC2',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC2',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_2_INQ_PRF_INCOMING_FLIT_VC2'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_3_INQ_PRF_INCOMING_FLIT_VC2'} = {
    NAME => 'AR_RTR_3_3_INQ_PRF_INCOMING_FLIT_VC2',
    LABEL => 'AR_RTR_3_3_INQ_PRF_INCOMING_FLIT_VC2',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC2',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_3_INQ_PRF_INCOMING_FLIT_VC2'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_4_INQ_PRF_INCOMING_FLIT_VC2'} = {
    NAME => 'AR_RTR_3_4_INQ_PRF_INCOMING_FLIT_VC2',
    LABEL => 'AR_RTR_3_4_INQ_PRF_INCOMING_FLIT_VC2',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC2',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_4_INQ_PRF_INCOMING_FLIT_VC2'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_5_INQ_PRF_INCOMING_FLIT_VC2'} = {
    NAME => 'AR_RTR_3_5_INQ_PRF_INCOMING_FLIT_VC2',
    LABEL => 'AR_RTR_3_5_INQ_PRF_INCOMING_FLIT_VC2',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC2',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_5_INQ_PRF_INCOMING_FLIT_VC2'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_6_INQ_PRF_INCOMING_FLIT_VC2'} = {
    NAME => 'AR_RTR_3_6_INQ_PRF_INCOMING_FLIT_VC2',
    LABEL => 'AR_RTR_3_6_INQ_PRF_INCOMING_FLIT_VC2',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC2',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_6_INQ_PRF_INCOMING_FLIT_VC2'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_7_INQ_PRF_INCOMING_FLIT_VC2'} = {
    NAME => 'AR_RTR_3_7_INQ_PRF_INCOMING_FLIT_VC2',
    LABEL => 'AR_RTR_3_7_INQ_PRF_INCOMING_FLIT_VC2',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC2',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_7_INQ_PRF_INCOMING_FLIT_VC2'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_0_INQ_PRF_INCOMING_FLIT_VC2'} = {
    NAME => 'AR_RTR_4_0_INQ_PRF_INCOMING_FLIT_VC2',
    LABEL => 'AR_RTR_4_0_INQ_PRF_INCOMING_FLIT_VC2',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC2',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_0_INQ_PRF_INCOMING_FLIT_VC2'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_1_INQ_PRF_INCOMING_FLIT_VC2'} = {
    NAME => 'AR_RTR_4_1_INQ_PRF_INCOMING_FLIT_VC2',
    LABEL => 'AR_RTR_4_1_INQ_PRF_INCOMING_FLIT_VC2',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC2',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_1_INQ_PRF_INCOMING_FLIT_VC2'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_2_INQ_PRF_INCOMING_FLIT_VC2'} = {
    NAME => 'AR_RTR_4_2_INQ_PRF_INCOMING_FLIT_VC2',
    LABEL => 'AR_RTR_4_2_INQ_PRF_INCOMING_FLIT_VC2',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC2',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_2_INQ_PRF_INCOMING_FLIT_VC2'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_3_INQ_PRF_INCOMING_FLIT_VC2'} = {
    NAME => 'AR_RTR_4_3_INQ_PRF_INCOMING_FLIT_VC2',
    LABEL => 'AR_RTR_4_3_INQ_PRF_INCOMING_FLIT_VC2',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC2',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_3_INQ_PRF_INCOMING_FLIT_VC2'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_4_INQ_PRF_INCOMING_FLIT_VC2'} = {
    NAME => 'AR_RTR_4_4_INQ_PRF_INCOMING_FLIT_VC2',
    LABEL => 'AR_RTR_4_4_INQ_PRF_INCOMING_FLIT_VC2',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC2',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_4_INQ_PRF_INCOMING_FLIT_VC2'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_5_INQ_PRF_INCOMING_FLIT_VC2'} = {
    NAME => 'AR_RTR_4_5_INQ_PRF_INCOMING_FLIT_VC2',
    LABEL => 'AR_RTR_4_5_INQ_PRF_INCOMING_FLIT_VC2',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC2',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_5_INQ_PRF_INCOMING_FLIT_VC2'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_6_INQ_PRF_INCOMING_FLIT_VC2'} = {
    NAME => 'AR_RTR_4_6_INQ_PRF_INCOMING_FLIT_VC2',
    LABEL => 'AR_RTR_4_6_INQ_PRF_INCOMING_FLIT_VC2',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC2',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_6_INQ_PRF_INCOMING_FLIT_VC2'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_7_INQ_PRF_INCOMING_FLIT_VC2'} = {
    NAME => 'AR_RTR_4_7_INQ_PRF_INCOMING_FLIT_VC2',
    LABEL => 'AR_RTR_4_7_INQ_PRF_INCOMING_FLIT_VC2',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC2',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_7_INQ_PRF_INCOMING_FLIT_VC2'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_0_INQ_PRF_INCOMING_FLIT_VC3'} = {
    NAME => 'AR_RTR_0_0_INQ_PRF_INCOMING_FLIT_VC3',
    LABEL => 'AR_RTR_0_0_INQ_PRF_INCOMING_FLIT_VC3',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC3',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_0_INQ_PRF_INCOMING_FLIT_VC3'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_1_INQ_PRF_INCOMING_FLIT_VC3'} = {
    NAME => 'AR_RTR_0_1_INQ_PRF_INCOMING_FLIT_VC3',
    LABEL => 'AR_RTR_0_1_INQ_PRF_INCOMING_FLIT_VC3',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC3',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_1_INQ_PRF_INCOMING_FLIT_VC3'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_2_INQ_PRF_INCOMING_FLIT_VC3'} = {
    NAME => 'AR_RTR_0_2_INQ_PRF_INCOMING_FLIT_VC3',
    LABEL => 'AR_RTR_0_2_INQ_PRF_INCOMING_FLIT_VC3',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC3',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_2_INQ_PRF_INCOMING_FLIT_VC3'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_3_INQ_PRF_INCOMING_FLIT_VC3'} = {
    NAME => 'AR_RTR_0_3_INQ_PRF_INCOMING_FLIT_VC3',
    LABEL => 'AR_RTR_0_3_INQ_PRF_INCOMING_FLIT_VC3',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC3',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_3_INQ_PRF_INCOMING_FLIT_VC3'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_4_INQ_PRF_INCOMING_FLIT_VC3'} = {
    NAME => 'AR_RTR_0_4_INQ_PRF_INCOMING_FLIT_VC3',
    LABEL => 'AR_RTR_0_4_INQ_PRF_INCOMING_FLIT_VC3',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC3',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_4_INQ_PRF_INCOMING_FLIT_VC3'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_5_INQ_PRF_INCOMING_FLIT_VC3'} = {
    NAME => 'AR_RTR_0_5_INQ_PRF_INCOMING_FLIT_VC3',
    LABEL => 'AR_RTR_0_5_INQ_PRF_INCOMING_FLIT_VC3',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC3',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_5_INQ_PRF_INCOMING_FLIT_VC3'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_6_INQ_PRF_INCOMING_FLIT_VC3'} = {
    NAME => 'AR_RTR_0_6_INQ_PRF_INCOMING_FLIT_VC3',
    LABEL => 'AR_RTR_0_6_INQ_PRF_INCOMING_FLIT_VC3',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC3',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_6_INQ_PRF_INCOMING_FLIT_VC3'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_7_INQ_PRF_INCOMING_FLIT_VC3'} = {
    NAME => 'AR_RTR_0_7_INQ_PRF_INCOMING_FLIT_VC3',
    LABEL => 'AR_RTR_0_7_INQ_PRF_INCOMING_FLIT_VC3',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC3',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_7_INQ_PRF_INCOMING_FLIT_VC3'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_0_INQ_PRF_INCOMING_FLIT_VC3'} = {
    NAME => 'AR_RTR_1_0_INQ_PRF_INCOMING_FLIT_VC3',
    LABEL => 'AR_RTR_1_0_INQ_PRF_INCOMING_FLIT_VC3',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC3',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_0_INQ_PRF_INCOMING_FLIT_VC3'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_1_INQ_PRF_INCOMING_FLIT_VC3'} = {
    NAME => 'AR_RTR_1_1_INQ_PRF_INCOMING_FLIT_VC3',
    LABEL => 'AR_RTR_1_1_INQ_PRF_INCOMING_FLIT_VC3',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC3',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_1_INQ_PRF_INCOMING_FLIT_VC3'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_2_INQ_PRF_INCOMING_FLIT_VC3'} = {
    NAME => 'AR_RTR_1_2_INQ_PRF_INCOMING_FLIT_VC3',
    LABEL => 'AR_RTR_1_2_INQ_PRF_INCOMING_FLIT_VC3',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC3',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_2_INQ_PRF_INCOMING_FLIT_VC3'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_3_INQ_PRF_INCOMING_FLIT_VC3'} = {
    NAME => 'AR_RTR_1_3_INQ_PRF_INCOMING_FLIT_VC3',
    LABEL => 'AR_RTR_1_3_INQ_PRF_INCOMING_FLIT_VC3',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC3',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_3_INQ_PRF_INCOMING_FLIT_VC3'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_4_INQ_PRF_INCOMING_FLIT_VC3'} = {
    NAME => 'AR_RTR_1_4_INQ_PRF_INCOMING_FLIT_VC3',
    LABEL => 'AR_RTR_1_4_INQ_PRF_INCOMING_FLIT_VC3',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC3',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_4_INQ_PRF_INCOMING_FLIT_VC3'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_5_INQ_PRF_INCOMING_FLIT_VC3'} = {
    NAME => 'AR_RTR_1_5_INQ_PRF_INCOMING_FLIT_VC3',
    LABEL => 'AR_RTR_1_5_INQ_PRF_INCOMING_FLIT_VC3',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC3',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_5_INQ_PRF_INCOMING_FLIT_VC3'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_6_INQ_PRF_INCOMING_FLIT_VC3'} = {
    NAME => 'AR_RTR_1_6_INQ_PRF_INCOMING_FLIT_VC3',
    LABEL => 'AR_RTR_1_6_INQ_PRF_INCOMING_FLIT_VC3',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC3',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_6_INQ_PRF_INCOMING_FLIT_VC3'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_7_INQ_PRF_INCOMING_FLIT_VC3'} = {
    NAME => 'AR_RTR_1_7_INQ_PRF_INCOMING_FLIT_VC3',
    LABEL => 'AR_RTR_1_7_INQ_PRF_INCOMING_FLIT_VC3',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC3',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_7_INQ_PRF_INCOMING_FLIT_VC3'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_0_INQ_PRF_INCOMING_FLIT_VC3'} = {
    NAME => 'AR_RTR_2_0_INQ_PRF_INCOMING_FLIT_VC3',
    LABEL => 'AR_RTR_2_0_INQ_PRF_INCOMING_FLIT_VC3',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC3',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_0_INQ_PRF_INCOMING_FLIT_VC3'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_1_INQ_PRF_INCOMING_FLIT_VC3'} = {
    NAME => 'AR_RTR_2_1_INQ_PRF_INCOMING_FLIT_VC3',
    LABEL => 'AR_RTR_2_1_INQ_PRF_INCOMING_FLIT_VC3',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC3',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_1_INQ_PRF_INCOMING_FLIT_VC3'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_2_INQ_PRF_INCOMING_FLIT_VC3'} = {
    NAME => 'AR_RTR_2_2_INQ_PRF_INCOMING_FLIT_VC3',
    LABEL => 'AR_RTR_2_2_INQ_PRF_INCOMING_FLIT_VC3',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC3',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_2_INQ_PRF_INCOMING_FLIT_VC3'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_3_INQ_PRF_INCOMING_FLIT_VC3'} = {
    NAME => 'AR_RTR_2_3_INQ_PRF_INCOMING_FLIT_VC3',
    LABEL => 'AR_RTR_2_3_INQ_PRF_INCOMING_FLIT_VC3',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC3',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_3_INQ_PRF_INCOMING_FLIT_VC3'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_4_INQ_PRF_INCOMING_FLIT_VC3'} = {
    NAME => 'AR_RTR_2_4_INQ_PRF_INCOMING_FLIT_VC3',
    LABEL => 'AR_RTR_2_4_INQ_PRF_INCOMING_FLIT_VC3',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC3',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_4_INQ_PRF_INCOMING_FLIT_VC3'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_5_INQ_PRF_INCOMING_FLIT_VC3'} = {
    NAME => 'AR_RTR_2_5_INQ_PRF_INCOMING_FLIT_VC3',
    LABEL => 'AR_RTR_2_5_INQ_PRF_INCOMING_FLIT_VC3',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC3',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_5_INQ_PRF_INCOMING_FLIT_VC3'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_6_INQ_PRF_INCOMING_FLIT_VC3'} = {
    NAME => 'AR_RTR_2_6_INQ_PRF_INCOMING_FLIT_VC3',
    LABEL => 'AR_RTR_2_6_INQ_PRF_INCOMING_FLIT_VC3',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC3',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_6_INQ_PRF_INCOMING_FLIT_VC3'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_7_INQ_PRF_INCOMING_FLIT_VC3'} = {
    NAME => 'AR_RTR_2_7_INQ_PRF_INCOMING_FLIT_VC3',
    LABEL => 'AR_RTR_2_7_INQ_PRF_INCOMING_FLIT_VC3',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC3',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_7_INQ_PRF_INCOMING_FLIT_VC3'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_0_INQ_PRF_INCOMING_FLIT_VC3'} = {
    NAME => 'AR_RTR_3_0_INQ_PRF_INCOMING_FLIT_VC3',
    LABEL => 'AR_RTR_3_0_INQ_PRF_INCOMING_FLIT_VC3',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC3',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_0_INQ_PRF_INCOMING_FLIT_VC3'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_1_INQ_PRF_INCOMING_FLIT_VC3'} = {
    NAME => 'AR_RTR_3_1_INQ_PRF_INCOMING_FLIT_VC3',
    LABEL => 'AR_RTR_3_1_INQ_PRF_INCOMING_FLIT_VC3',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC3',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_1_INQ_PRF_INCOMING_FLIT_VC3'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_2_INQ_PRF_INCOMING_FLIT_VC3'} = {
    NAME => 'AR_RTR_3_2_INQ_PRF_INCOMING_FLIT_VC3',
    LABEL => 'AR_RTR_3_2_INQ_PRF_INCOMING_FLIT_VC3',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC3',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_2_INQ_PRF_INCOMING_FLIT_VC3'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_3_INQ_PRF_INCOMING_FLIT_VC3'} = {
    NAME => 'AR_RTR_3_3_INQ_PRF_INCOMING_FLIT_VC3',
    LABEL => 'AR_RTR_3_3_INQ_PRF_INCOMING_FLIT_VC3',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC3',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_3_INQ_PRF_INCOMING_FLIT_VC3'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_4_INQ_PRF_INCOMING_FLIT_VC3'} = {
    NAME => 'AR_RTR_3_4_INQ_PRF_INCOMING_FLIT_VC3',
    LABEL => 'AR_RTR_3_4_INQ_PRF_INCOMING_FLIT_VC3',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC3',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_4_INQ_PRF_INCOMING_FLIT_VC3'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_5_INQ_PRF_INCOMING_FLIT_VC3'} = {
    NAME => 'AR_RTR_3_5_INQ_PRF_INCOMING_FLIT_VC3',
    LABEL => 'AR_RTR_3_5_INQ_PRF_INCOMING_FLIT_VC3',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC3',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_5_INQ_PRF_INCOMING_FLIT_VC3'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_6_INQ_PRF_INCOMING_FLIT_VC3'} = {
    NAME => 'AR_RTR_3_6_INQ_PRF_INCOMING_FLIT_VC3',
    LABEL => 'AR_RTR_3_6_INQ_PRF_INCOMING_FLIT_VC3',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC3',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_6_INQ_PRF_INCOMING_FLIT_VC3'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_7_INQ_PRF_INCOMING_FLIT_VC3'} = {
    NAME => 'AR_RTR_3_7_INQ_PRF_INCOMING_FLIT_VC3',
    LABEL => 'AR_RTR_3_7_INQ_PRF_INCOMING_FLIT_VC3',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC3',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_7_INQ_PRF_INCOMING_FLIT_VC3'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_0_INQ_PRF_INCOMING_FLIT_VC3'} = {
    NAME => 'AR_RTR_4_0_INQ_PRF_INCOMING_FLIT_VC3',
    LABEL => 'AR_RTR_4_0_INQ_PRF_INCOMING_FLIT_VC3',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC3',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_0_INQ_PRF_INCOMING_FLIT_VC3'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_1_INQ_PRF_INCOMING_FLIT_VC3'} = {
    NAME => 'AR_RTR_4_1_INQ_PRF_INCOMING_FLIT_VC3',
    LABEL => 'AR_RTR_4_1_INQ_PRF_INCOMING_FLIT_VC3',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC3',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_1_INQ_PRF_INCOMING_FLIT_VC3'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_2_INQ_PRF_INCOMING_FLIT_VC3'} = {
    NAME => 'AR_RTR_4_2_INQ_PRF_INCOMING_FLIT_VC3',
    LABEL => 'AR_RTR_4_2_INQ_PRF_INCOMING_FLIT_VC3',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC3',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_2_INQ_PRF_INCOMING_FLIT_VC3'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_3_INQ_PRF_INCOMING_FLIT_VC3'} = {
    NAME => 'AR_RTR_4_3_INQ_PRF_INCOMING_FLIT_VC3',
    LABEL => 'AR_RTR_4_3_INQ_PRF_INCOMING_FLIT_VC3',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC3',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_3_INQ_PRF_INCOMING_FLIT_VC3'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_4_INQ_PRF_INCOMING_FLIT_VC3'} = {
    NAME => 'AR_RTR_4_4_INQ_PRF_INCOMING_FLIT_VC3',
    LABEL => 'AR_RTR_4_4_INQ_PRF_INCOMING_FLIT_VC3',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC3',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_4_INQ_PRF_INCOMING_FLIT_VC3'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_5_INQ_PRF_INCOMING_FLIT_VC3'} = {
    NAME => 'AR_RTR_4_5_INQ_PRF_INCOMING_FLIT_VC3',
    LABEL => 'AR_RTR_4_5_INQ_PRF_INCOMING_FLIT_VC3',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC3',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_5_INQ_PRF_INCOMING_FLIT_VC3'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_6_INQ_PRF_INCOMING_FLIT_VC3'} = {
    NAME => 'AR_RTR_4_6_INQ_PRF_INCOMING_FLIT_VC3',
    LABEL => 'AR_RTR_4_6_INQ_PRF_INCOMING_FLIT_VC3',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC3',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_6_INQ_PRF_INCOMING_FLIT_VC3'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_7_INQ_PRF_INCOMING_FLIT_VC3'} = {
    NAME => 'AR_RTR_4_7_INQ_PRF_INCOMING_FLIT_VC3',
    LABEL => 'AR_RTR_4_7_INQ_PRF_INCOMING_FLIT_VC3',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC3',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_7_INQ_PRF_INCOMING_FLIT_VC3'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_0_INQ_PRF_INCOMING_FLIT_VC4'} = {
    NAME => 'AR_RTR_0_0_INQ_PRF_INCOMING_FLIT_VC4',
    LABEL => 'AR_RTR_0_0_INQ_PRF_INCOMING_FLIT_VC4',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC4',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_0_INQ_PRF_INCOMING_FLIT_VC4'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_1_INQ_PRF_INCOMING_FLIT_VC4'} = {
    NAME => 'AR_RTR_0_1_INQ_PRF_INCOMING_FLIT_VC4',
    LABEL => 'AR_RTR_0_1_INQ_PRF_INCOMING_FLIT_VC4',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC4',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_1_INQ_PRF_INCOMING_FLIT_VC4'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_2_INQ_PRF_INCOMING_FLIT_VC4'} = {
    NAME => 'AR_RTR_0_2_INQ_PRF_INCOMING_FLIT_VC4',
    LABEL => 'AR_RTR_0_2_INQ_PRF_INCOMING_FLIT_VC4',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC4',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_2_INQ_PRF_INCOMING_FLIT_VC4'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_3_INQ_PRF_INCOMING_FLIT_VC4'} = {
    NAME => 'AR_RTR_0_3_INQ_PRF_INCOMING_FLIT_VC4',
    LABEL => 'AR_RTR_0_3_INQ_PRF_INCOMING_FLIT_VC4',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC4',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_3_INQ_PRF_INCOMING_FLIT_VC4'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_4_INQ_PRF_INCOMING_FLIT_VC4'} = {
    NAME => 'AR_RTR_0_4_INQ_PRF_INCOMING_FLIT_VC4',
    LABEL => 'AR_RTR_0_4_INQ_PRF_INCOMING_FLIT_VC4',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC4',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_4_INQ_PRF_INCOMING_FLIT_VC4'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_5_INQ_PRF_INCOMING_FLIT_VC4'} = {
    NAME => 'AR_RTR_0_5_INQ_PRF_INCOMING_FLIT_VC4',
    LABEL => 'AR_RTR_0_5_INQ_PRF_INCOMING_FLIT_VC4',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC4',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_5_INQ_PRF_INCOMING_FLIT_VC4'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_6_INQ_PRF_INCOMING_FLIT_VC4'} = {
    NAME => 'AR_RTR_0_6_INQ_PRF_INCOMING_FLIT_VC4',
    LABEL => 'AR_RTR_0_6_INQ_PRF_INCOMING_FLIT_VC4',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC4',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_6_INQ_PRF_INCOMING_FLIT_VC4'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_7_INQ_PRF_INCOMING_FLIT_VC4'} = {
    NAME => 'AR_RTR_0_7_INQ_PRF_INCOMING_FLIT_VC4',
    LABEL => 'AR_RTR_0_7_INQ_PRF_INCOMING_FLIT_VC4',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC4',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_7_INQ_PRF_INCOMING_FLIT_VC4'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_0_INQ_PRF_INCOMING_FLIT_VC4'} = {
    NAME => 'AR_RTR_1_0_INQ_PRF_INCOMING_FLIT_VC4',
    LABEL => 'AR_RTR_1_0_INQ_PRF_INCOMING_FLIT_VC4',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC4',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_0_INQ_PRF_INCOMING_FLIT_VC4'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_1_INQ_PRF_INCOMING_FLIT_VC4'} = {
    NAME => 'AR_RTR_1_1_INQ_PRF_INCOMING_FLIT_VC4',
    LABEL => 'AR_RTR_1_1_INQ_PRF_INCOMING_FLIT_VC4',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC4',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_1_INQ_PRF_INCOMING_FLIT_VC4'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_2_INQ_PRF_INCOMING_FLIT_VC4'} = {
    NAME => 'AR_RTR_1_2_INQ_PRF_INCOMING_FLIT_VC4',
    LABEL => 'AR_RTR_1_2_INQ_PRF_INCOMING_FLIT_VC4',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC4',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_2_INQ_PRF_INCOMING_FLIT_VC4'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_3_INQ_PRF_INCOMING_FLIT_VC4'} = {
    NAME => 'AR_RTR_1_3_INQ_PRF_INCOMING_FLIT_VC4',
    LABEL => 'AR_RTR_1_3_INQ_PRF_INCOMING_FLIT_VC4',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC4',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_3_INQ_PRF_INCOMING_FLIT_VC4'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_4_INQ_PRF_INCOMING_FLIT_VC4'} = {
    NAME => 'AR_RTR_1_4_INQ_PRF_INCOMING_FLIT_VC4',
    LABEL => 'AR_RTR_1_4_INQ_PRF_INCOMING_FLIT_VC4',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC4',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_4_INQ_PRF_INCOMING_FLIT_VC4'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_5_INQ_PRF_INCOMING_FLIT_VC4'} = {
    NAME => 'AR_RTR_1_5_INQ_PRF_INCOMING_FLIT_VC4',
    LABEL => 'AR_RTR_1_5_INQ_PRF_INCOMING_FLIT_VC4',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC4',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_5_INQ_PRF_INCOMING_FLIT_VC4'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_6_INQ_PRF_INCOMING_FLIT_VC4'} = {
    NAME => 'AR_RTR_1_6_INQ_PRF_INCOMING_FLIT_VC4',
    LABEL => 'AR_RTR_1_6_INQ_PRF_INCOMING_FLIT_VC4',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC4',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_6_INQ_PRF_INCOMING_FLIT_VC4'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_7_INQ_PRF_INCOMING_FLIT_VC4'} = {
    NAME => 'AR_RTR_1_7_INQ_PRF_INCOMING_FLIT_VC4',
    LABEL => 'AR_RTR_1_7_INQ_PRF_INCOMING_FLIT_VC4',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC4',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_7_INQ_PRF_INCOMING_FLIT_VC4'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_0_INQ_PRF_INCOMING_FLIT_VC4'} = {
    NAME => 'AR_RTR_2_0_INQ_PRF_INCOMING_FLIT_VC4',
    LABEL => 'AR_RTR_2_0_INQ_PRF_INCOMING_FLIT_VC4',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC4',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_0_INQ_PRF_INCOMING_FLIT_VC4'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_1_INQ_PRF_INCOMING_FLIT_VC4'} = {
    NAME => 'AR_RTR_2_1_INQ_PRF_INCOMING_FLIT_VC4',
    LABEL => 'AR_RTR_2_1_INQ_PRF_INCOMING_FLIT_VC4',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC4',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_1_INQ_PRF_INCOMING_FLIT_VC4'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_2_INQ_PRF_INCOMING_FLIT_VC4'} = {
    NAME => 'AR_RTR_2_2_INQ_PRF_INCOMING_FLIT_VC4',
    LABEL => 'AR_RTR_2_2_INQ_PRF_INCOMING_FLIT_VC4',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC4',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_2_INQ_PRF_INCOMING_FLIT_VC4'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_3_INQ_PRF_INCOMING_FLIT_VC4'} = {
    NAME => 'AR_RTR_2_3_INQ_PRF_INCOMING_FLIT_VC4',
    LABEL => 'AR_RTR_2_3_INQ_PRF_INCOMING_FLIT_VC4',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC4',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_3_INQ_PRF_INCOMING_FLIT_VC4'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_4_INQ_PRF_INCOMING_FLIT_VC4'} = {
    NAME => 'AR_RTR_2_4_INQ_PRF_INCOMING_FLIT_VC4',
    LABEL => 'AR_RTR_2_4_INQ_PRF_INCOMING_FLIT_VC4',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC4',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_4_INQ_PRF_INCOMING_FLIT_VC4'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_5_INQ_PRF_INCOMING_FLIT_VC4'} = {
    NAME => 'AR_RTR_2_5_INQ_PRF_INCOMING_FLIT_VC4',
    LABEL => 'AR_RTR_2_5_INQ_PRF_INCOMING_FLIT_VC4',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC4',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_5_INQ_PRF_INCOMING_FLIT_VC4'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_6_INQ_PRF_INCOMING_FLIT_VC4'} = {
    NAME => 'AR_RTR_2_6_INQ_PRF_INCOMING_FLIT_VC4',
    LABEL => 'AR_RTR_2_6_INQ_PRF_INCOMING_FLIT_VC4',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC4',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_6_INQ_PRF_INCOMING_FLIT_VC4'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_7_INQ_PRF_INCOMING_FLIT_VC4'} = {
    NAME => 'AR_RTR_2_7_INQ_PRF_INCOMING_FLIT_VC4',
    LABEL => 'AR_RTR_2_7_INQ_PRF_INCOMING_FLIT_VC4',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC4',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_7_INQ_PRF_INCOMING_FLIT_VC4'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_0_INQ_PRF_INCOMING_FLIT_VC4'} = {
    NAME => 'AR_RTR_3_0_INQ_PRF_INCOMING_FLIT_VC4',
    LABEL => 'AR_RTR_3_0_INQ_PRF_INCOMING_FLIT_VC4',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC4',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_0_INQ_PRF_INCOMING_FLIT_VC4'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_1_INQ_PRF_INCOMING_FLIT_VC4'} = {
    NAME => 'AR_RTR_3_1_INQ_PRF_INCOMING_FLIT_VC4',
    LABEL => 'AR_RTR_3_1_INQ_PRF_INCOMING_FLIT_VC4',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC4',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_1_INQ_PRF_INCOMING_FLIT_VC4'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_2_INQ_PRF_INCOMING_FLIT_VC4'} = {
    NAME => 'AR_RTR_3_2_INQ_PRF_INCOMING_FLIT_VC4',
    LABEL => 'AR_RTR_3_2_INQ_PRF_INCOMING_FLIT_VC4',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC4',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_2_INQ_PRF_INCOMING_FLIT_VC4'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_3_INQ_PRF_INCOMING_FLIT_VC4'} = {
    NAME => 'AR_RTR_3_3_INQ_PRF_INCOMING_FLIT_VC4',
    LABEL => 'AR_RTR_3_3_INQ_PRF_INCOMING_FLIT_VC4',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC4',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_3_INQ_PRF_INCOMING_FLIT_VC4'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_4_INQ_PRF_INCOMING_FLIT_VC4'} = {
    NAME => 'AR_RTR_3_4_INQ_PRF_INCOMING_FLIT_VC4',
    LABEL => 'AR_RTR_3_4_INQ_PRF_INCOMING_FLIT_VC4',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC4',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_4_INQ_PRF_INCOMING_FLIT_VC4'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_5_INQ_PRF_INCOMING_FLIT_VC4'} = {
    NAME => 'AR_RTR_3_5_INQ_PRF_INCOMING_FLIT_VC4',
    LABEL => 'AR_RTR_3_5_INQ_PRF_INCOMING_FLIT_VC4',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC4',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_5_INQ_PRF_INCOMING_FLIT_VC4'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_6_INQ_PRF_INCOMING_FLIT_VC4'} = {
    NAME => 'AR_RTR_3_6_INQ_PRF_INCOMING_FLIT_VC4',
    LABEL => 'AR_RTR_3_6_INQ_PRF_INCOMING_FLIT_VC4',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC4',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_6_INQ_PRF_INCOMING_FLIT_VC4'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_7_INQ_PRF_INCOMING_FLIT_VC4'} = {
    NAME => 'AR_RTR_3_7_INQ_PRF_INCOMING_FLIT_VC4',
    LABEL => 'AR_RTR_3_7_INQ_PRF_INCOMING_FLIT_VC4',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC4',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_7_INQ_PRF_INCOMING_FLIT_VC4'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_0_INQ_PRF_INCOMING_FLIT_VC4'} = {
    NAME => 'AR_RTR_4_0_INQ_PRF_INCOMING_FLIT_VC4',
    LABEL => 'AR_RTR_4_0_INQ_PRF_INCOMING_FLIT_VC4',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC4',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_0_INQ_PRF_INCOMING_FLIT_VC4'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_1_INQ_PRF_INCOMING_FLIT_VC4'} = {
    NAME => 'AR_RTR_4_1_INQ_PRF_INCOMING_FLIT_VC4',
    LABEL => 'AR_RTR_4_1_INQ_PRF_INCOMING_FLIT_VC4',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC4',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_1_INQ_PRF_INCOMING_FLIT_VC4'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_2_INQ_PRF_INCOMING_FLIT_VC4'} = {
    NAME => 'AR_RTR_4_2_INQ_PRF_INCOMING_FLIT_VC4',
    LABEL => 'AR_RTR_4_2_INQ_PRF_INCOMING_FLIT_VC4',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC4',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_2_INQ_PRF_INCOMING_FLIT_VC4'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_3_INQ_PRF_INCOMING_FLIT_VC4'} = {
    NAME => 'AR_RTR_4_3_INQ_PRF_INCOMING_FLIT_VC4',
    LABEL => 'AR_RTR_4_3_INQ_PRF_INCOMING_FLIT_VC4',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC4',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_3_INQ_PRF_INCOMING_FLIT_VC4'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_4_INQ_PRF_INCOMING_FLIT_VC4'} = {
    NAME => 'AR_RTR_4_4_INQ_PRF_INCOMING_FLIT_VC4',
    LABEL => 'AR_RTR_4_4_INQ_PRF_INCOMING_FLIT_VC4',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC4',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_4_INQ_PRF_INCOMING_FLIT_VC4'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_5_INQ_PRF_INCOMING_FLIT_VC4'} = {
    NAME => 'AR_RTR_4_5_INQ_PRF_INCOMING_FLIT_VC4',
    LABEL => 'AR_RTR_4_5_INQ_PRF_INCOMING_FLIT_VC4',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC4',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_5_INQ_PRF_INCOMING_FLIT_VC4'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_6_INQ_PRF_INCOMING_FLIT_VC4'} = {
    NAME => 'AR_RTR_4_6_INQ_PRF_INCOMING_FLIT_VC4',
    LABEL => 'AR_RTR_4_6_INQ_PRF_INCOMING_FLIT_VC4',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC4',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_6_INQ_PRF_INCOMING_FLIT_VC4'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_7_INQ_PRF_INCOMING_FLIT_VC4'} = {
    NAME => 'AR_RTR_4_7_INQ_PRF_INCOMING_FLIT_VC4',
    LABEL => 'AR_RTR_4_7_INQ_PRF_INCOMING_FLIT_VC4',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC4',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_7_INQ_PRF_INCOMING_FLIT_VC4'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_0_INQ_PRF_INCOMING_FLIT_VC5'} = {
    NAME => 'AR_RTR_0_0_INQ_PRF_INCOMING_FLIT_VC5',
    LABEL => 'AR_RTR_0_0_INQ_PRF_INCOMING_FLIT_VC5',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC5',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_0_INQ_PRF_INCOMING_FLIT_VC5'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_1_INQ_PRF_INCOMING_FLIT_VC5'} = {
    NAME => 'AR_RTR_0_1_INQ_PRF_INCOMING_FLIT_VC5',
    LABEL => 'AR_RTR_0_1_INQ_PRF_INCOMING_FLIT_VC5',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC5',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_1_INQ_PRF_INCOMING_FLIT_VC5'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_2_INQ_PRF_INCOMING_FLIT_VC5'} = {
    NAME => 'AR_RTR_0_2_INQ_PRF_INCOMING_FLIT_VC5',
    LABEL => 'AR_RTR_0_2_INQ_PRF_INCOMING_FLIT_VC5',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC5',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_2_INQ_PRF_INCOMING_FLIT_VC5'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_3_INQ_PRF_INCOMING_FLIT_VC5'} = {
    NAME => 'AR_RTR_0_3_INQ_PRF_INCOMING_FLIT_VC5',
    LABEL => 'AR_RTR_0_3_INQ_PRF_INCOMING_FLIT_VC5',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC5',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_3_INQ_PRF_INCOMING_FLIT_VC5'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_4_INQ_PRF_INCOMING_FLIT_VC5'} = {
    NAME => 'AR_RTR_0_4_INQ_PRF_INCOMING_FLIT_VC5',
    LABEL => 'AR_RTR_0_4_INQ_PRF_INCOMING_FLIT_VC5',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC5',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_4_INQ_PRF_INCOMING_FLIT_VC5'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_5_INQ_PRF_INCOMING_FLIT_VC5'} = {
    NAME => 'AR_RTR_0_5_INQ_PRF_INCOMING_FLIT_VC5',
    LABEL => 'AR_RTR_0_5_INQ_PRF_INCOMING_FLIT_VC5',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC5',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_5_INQ_PRF_INCOMING_FLIT_VC5'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_6_INQ_PRF_INCOMING_FLIT_VC5'} = {
    NAME => 'AR_RTR_0_6_INQ_PRF_INCOMING_FLIT_VC5',
    LABEL => 'AR_RTR_0_6_INQ_PRF_INCOMING_FLIT_VC5',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC5',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_6_INQ_PRF_INCOMING_FLIT_VC5'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_7_INQ_PRF_INCOMING_FLIT_VC5'} = {
    NAME => 'AR_RTR_0_7_INQ_PRF_INCOMING_FLIT_VC5',
    LABEL => 'AR_RTR_0_7_INQ_PRF_INCOMING_FLIT_VC5',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC5',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_7_INQ_PRF_INCOMING_FLIT_VC5'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_0_INQ_PRF_INCOMING_FLIT_VC5'} = {
    NAME => 'AR_RTR_1_0_INQ_PRF_INCOMING_FLIT_VC5',
    LABEL => 'AR_RTR_1_0_INQ_PRF_INCOMING_FLIT_VC5',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC5',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_0_INQ_PRF_INCOMING_FLIT_VC5'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_1_INQ_PRF_INCOMING_FLIT_VC5'} = {
    NAME => 'AR_RTR_1_1_INQ_PRF_INCOMING_FLIT_VC5',
    LABEL => 'AR_RTR_1_1_INQ_PRF_INCOMING_FLIT_VC5',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC5',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_1_INQ_PRF_INCOMING_FLIT_VC5'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_2_INQ_PRF_INCOMING_FLIT_VC5'} = {
    NAME => 'AR_RTR_1_2_INQ_PRF_INCOMING_FLIT_VC5',
    LABEL => 'AR_RTR_1_2_INQ_PRF_INCOMING_FLIT_VC5',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC5',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_2_INQ_PRF_INCOMING_FLIT_VC5'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_3_INQ_PRF_INCOMING_FLIT_VC5'} = {
    NAME => 'AR_RTR_1_3_INQ_PRF_INCOMING_FLIT_VC5',
    LABEL => 'AR_RTR_1_3_INQ_PRF_INCOMING_FLIT_VC5',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC5',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_3_INQ_PRF_INCOMING_FLIT_VC5'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_4_INQ_PRF_INCOMING_FLIT_VC5'} = {
    NAME => 'AR_RTR_1_4_INQ_PRF_INCOMING_FLIT_VC5',
    LABEL => 'AR_RTR_1_4_INQ_PRF_INCOMING_FLIT_VC5',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC5',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_4_INQ_PRF_INCOMING_FLIT_VC5'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_5_INQ_PRF_INCOMING_FLIT_VC5'} = {
    NAME => 'AR_RTR_1_5_INQ_PRF_INCOMING_FLIT_VC5',
    LABEL => 'AR_RTR_1_5_INQ_PRF_INCOMING_FLIT_VC5',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC5',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_5_INQ_PRF_INCOMING_FLIT_VC5'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_6_INQ_PRF_INCOMING_FLIT_VC5'} = {
    NAME => 'AR_RTR_1_6_INQ_PRF_INCOMING_FLIT_VC5',
    LABEL => 'AR_RTR_1_6_INQ_PRF_INCOMING_FLIT_VC5',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC5',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_6_INQ_PRF_INCOMING_FLIT_VC5'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_7_INQ_PRF_INCOMING_FLIT_VC5'} = {
    NAME => 'AR_RTR_1_7_INQ_PRF_INCOMING_FLIT_VC5',
    LABEL => 'AR_RTR_1_7_INQ_PRF_INCOMING_FLIT_VC5',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC5',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_7_INQ_PRF_INCOMING_FLIT_VC5'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_0_INQ_PRF_INCOMING_FLIT_VC5'} = {
    NAME => 'AR_RTR_2_0_INQ_PRF_INCOMING_FLIT_VC5',
    LABEL => 'AR_RTR_2_0_INQ_PRF_INCOMING_FLIT_VC5',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC5',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_0_INQ_PRF_INCOMING_FLIT_VC5'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_1_INQ_PRF_INCOMING_FLIT_VC5'} = {
    NAME => 'AR_RTR_2_1_INQ_PRF_INCOMING_FLIT_VC5',
    LABEL => 'AR_RTR_2_1_INQ_PRF_INCOMING_FLIT_VC5',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC5',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_1_INQ_PRF_INCOMING_FLIT_VC5'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_2_INQ_PRF_INCOMING_FLIT_VC5'} = {
    NAME => 'AR_RTR_2_2_INQ_PRF_INCOMING_FLIT_VC5',
    LABEL => 'AR_RTR_2_2_INQ_PRF_INCOMING_FLIT_VC5',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC5',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_2_INQ_PRF_INCOMING_FLIT_VC5'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_3_INQ_PRF_INCOMING_FLIT_VC5'} = {
    NAME => 'AR_RTR_2_3_INQ_PRF_INCOMING_FLIT_VC5',
    LABEL => 'AR_RTR_2_3_INQ_PRF_INCOMING_FLIT_VC5',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC5',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_3_INQ_PRF_INCOMING_FLIT_VC5'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_4_INQ_PRF_INCOMING_FLIT_VC5'} = {
    NAME => 'AR_RTR_2_4_INQ_PRF_INCOMING_FLIT_VC5',
    LABEL => 'AR_RTR_2_4_INQ_PRF_INCOMING_FLIT_VC5',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC5',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_4_INQ_PRF_INCOMING_FLIT_VC5'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_5_INQ_PRF_INCOMING_FLIT_VC5'} = {
    NAME => 'AR_RTR_2_5_INQ_PRF_INCOMING_FLIT_VC5',
    LABEL => 'AR_RTR_2_5_INQ_PRF_INCOMING_FLIT_VC5',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC5',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_5_INQ_PRF_INCOMING_FLIT_VC5'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_6_INQ_PRF_INCOMING_FLIT_VC5'} = {
    NAME => 'AR_RTR_2_6_INQ_PRF_INCOMING_FLIT_VC5',
    LABEL => 'AR_RTR_2_6_INQ_PRF_INCOMING_FLIT_VC5',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC5',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_6_INQ_PRF_INCOMING_FLIT_VC5'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_7_INQ_PRF_INCOMING_FLIT_VC5'} = {
    NAME => 'AR_RTR_2_7_INQ_PRF_INCOMING_FLIT_VC5',
    LABEL => 'AR_RTR_2_7_INQ_PRF_INCOMING_FLIT_VC5',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC5',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_7_INQ_PRF_INCOMING_FLIT_VC5'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_0_INQ_PRF_INCOMING_FLIT_VC5'} = {
    NAME => 'AR_RTR_3_0_INQ_PRF_INCOMING_FLIT_VC5',
    LABEL => 'AR_RTR_3_0_INQ_PRF_INCOMING_FLIT_VC5',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC5',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_0_INQ_PRF_INCOMING_FLIT_VC5'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_1_INQ_PRF_INCOMING_FLIT_VC5'} = {
    NAME => 'AR_RTR_3_1_INQ_PRF_INCOMING_FLIT_VC5',
    LABEL => 'AR_RTR_3_1_INQ_PRF_INCOMING_FLIT_VC5',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC5',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_1_INQ_PRF_INCOMING_FLIT_VC5'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_2_INQ_PRF_INCOMING_FLIT_VC5'} = {
    NAME => 'AR_RTR_3_2_INQ_PRF_INCOMING_FLIT_VC5',
    LABEL => 'AR_RTR_3_2_INQ_PRF_INCOMING_FLIT_VC5',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC5',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_2_INQ_PRF_INCOMING_FLIT_VC5'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_3_INQ_PRF_INCOMING_FLIT_VC5'} = {
    NAME => 'AR_RTR_3_3_INQ_PRF_INCOMING_FLIT_VC5',
    LABEL => 'AR_RTR_3_3_INQ_PRF_INCOMING_FLIT_VC5',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC5',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_3_INQ_PRF_INCOMING_FLIT_VC5'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_4_INQ_PRF_INCOMING_FLIT_VC5'} = {
    NAME => 'AR_RTR_3_4_INQ_PRF_INCOMING_FLIT_VC5',
    LABEL => 'AR_RTR_3_4_INQ_PRF_INCOMING_FLIT_VC5',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC5',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_4_INQ_PRF_INCOMING_FLIT_VC5'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_5_INQ_PRF_INCOMING_FLIT_VC5'} = {
    NAME => 'AR_RTR_3_5_INQ_PRF_INCOMING_FLIT_VC5',
    LABEL => 'AR_RTR_3_5_INQ_PRF_INCOMING_FLIT_VC5',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC5',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_5_INQ_PRF_INCOMING_FLIT_VC5'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_6_INQ_PRF_INCOMING_FLIT_VC5'} = {
    NAME => 'AR_RTR_3_6_INQ_PRF_INCOMING_FLIT_VC5',
    LABEL => 'AR_RTR_3_6_INQ_PRF_INCOMING_FLIT_VC5',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC5',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_6_INQ_PRF_INCOMING_FLIT_VC5'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_7_INQ_PRF_INCOMING_FLIT_VC5'} = {
    NAME => 'AR_RTR_3_7_INQ_PRF_INCOMING_FLIT_VC5',
    LABEL => 'AR_RTR_3_7_INQ_PRF_INCOMING_FLIT_VC5',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC5',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_7_INQ_PRF_INCOMING_FLIT_VC5'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_0_INQ_PRF_INCOMING_FLIT_VC5'} = {
    NAME => 'AR_RTR_4_0_INQ_PRF_INCOMING_FLIT_VC5',
    LABEL => 'AR_RTR_4_0_INQ_PRF_INCOMING_FLIT_VC5',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC5',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_0_INQ_PRF_INCOMING_FLIT_VC5'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_1_INQ_PRF_INCOMING_FLIT_VC5'} = {
    NAME => 'AR_RTR_4_1_INQ_PRF_INCOMING_FLIT_VC5',
    LABEL => 'AR_RTR_4_1_INQ_PRF_INCOMING_FLIT_VC5',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC5',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_1_INQ_PRF_INCOMING_FLIT_VC5'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_2_INQ_PRF_INCOMING_FLIT_VC5'} = {
    NAME => 'AR_RTR_4_2_INQ_PRF_INCOMING_FLIT_VC5',
    LABEL => 'AR_RTR_4_2_INQ_PRF_INCOMING_FLIT_VC5',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC5',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_2_INQ_PRF_INCOMING_FLIT_VC5'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_3_INQ_PRF_INCOMING_FLIT_VC5'} = {
    NAME => 'AR_RTR_4_3_INQ_PRF_INCOMING_FLIT_VC5',
    LABEL => 'AR_RTR_4_3_INQ_PRF_INCOMING_FLIT_VC5',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC5',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_3_INQ_PRF_INCOMING_FLIT_VC5'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_4_INQ_PRF_INCOMING_FLIT_VC5'} = {
    NAME => 'AR_RTR_4_4_INQ_PRF_INCOMING_FLIT_VC5',
    LABEL => 'AR_RTR_4_4_INQ_PRF_INCOMING_FLIT_VC5',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC5',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_4_INQ_PRF_INCOMING_FLIT_VC5'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_5_INQ_PRF_INCOMING_FLIT_VC5'} = {
    NAME => 'AR_RTR_4_5_INQ_PRF_INCOMING_FLIT_VC5',
    LABEL => 'AR_RTR_4_5_INQ_PRF_INCOMING_FLIT_VC5',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC5',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_5_INQ_PRF_INCOMING_FLIT_VC5'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_6_INQ_PRF_INCOMING_FLIT_VC5'} = {
    NAME => 'AR_RTR_4_6_INQ_PRF_INCOMING_FLIT_VC5',
    LABEL => 'AR_RTR_4_6_INQ_PRF_INCOMING_FLIT_VC5',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC5',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_6_INQ_PRF_INCOMING_FLIT_VC5'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_7_INQ_PRF_INCOMING_FLIT_VC5'} = {
    NAME => 'AR_RTR_4_7_INQ_PRF_INCOMING_FLIT_VC5',
    LABEL => 'AR_RTR_4_7_INQ_PRF_INCOMING_FLIT_VC5',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC5',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_7_INQ_PRF_INCOMING_FLIT_VC5'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_0_INQ_PRF_INCOMING_FLIT_VC6'} = {
    NAME => 'AR_RTR_0_0_INQ_PRF_INCOMING_FLIT_VC6',
    LABEL => 'AR_RTR_0_0_INQ_PRF_INCOMING_FLIT_VC6',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC6',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_0_INQ_PRF_INCOMING_FLIT_VC6'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_1_INQ_PRF_INCOMING_FLIT_VC6'} = {
    NAME => 'AR_RTR_0_1_INQ_PRF_INCOMING_FLIT_VC6',
    LABEL => 'AR_RTR_0_1_INQ_PRF_INCOMING_FLIT_VC6',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC6',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_1_INQ_PRF_INCOMING_FLIT_VC6'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_2_INQ_PRF_INCOMING_FLIT_VC6'} = {
    NAME => 'AR_RTR_0_2_INQ_PRF_INCOMING_FLIT_VC6',
    LABEL => 'AR_RTR_0_2_INQ_PRF_INCOMING_FLIT_VC6',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC6',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_2_INQ_PRF_INCOMING_FLIT_VC6'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_3_INQ_PRF_INCOMING_FLIT_VC6'} = {
    NAME => 'AR_RTR_0_3_INQ_PRF_INCOMING_FLIT_VC6',
    LABEL => 'AR_RTR_0_3_INQ_PRF_INCOMING_FLIT_VC6',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC6',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_3_INQ_PRF_INCOMING_FLIT_VC6'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_4_INQ_PRF_INCOMING_FLIT_VC6'} = {
    NAME => 'AR_RTR_0_4_INQ_PRF_INCOMING_FLIT_VC6',
    LABEL => 'AR_RTR_0_4_INQ_PRF_INCOMING_FLIT_VC6',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC6',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_4_INQ_PRF_INCOMING_FLIT_VC6'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_5_INQ_PRF_INCOMING_FLIT_VC6'} = {
    NAME => 'AR_RTR_0_5_INQ_PRF_INCOMING_FLIT_VC6',
    LABEL => 'AR_RTR_0_5_INQ_PRF_INCOMING_FLIT_VC6',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC6',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_5_INQ_PRF_INCOMING_FLIT_VC6'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_6_INQ_PRF_INCOMING_FLIT_VC6'} = {
    NAME => 'AR_RTR_0_6_INQ_PRF_INCOMING_FLIT_VC6',
    LABEL => 'AR_RTR_0_6_INQ_PRF_INCOMING_FLIT_VC6',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC6',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_6_INQ_PRF_INCOMING_FLIT_VC6'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_7_INQ_PRF_INCOMING_FLIT_VC6'} = {
    NAME => 'AR_RTR_0_7_INQ_PRF_INCOMING_FLIT_VC6',
    LABEL => 'AR_RTR_0_7_INQ_PRF_INCOMING_FLIT_VC6',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC6',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_7_INQ_PRF_INCOMING_FLIT_VC6'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_0_INQ_PRF_INCOMING_FLIT_VC6'} = {
    NAME => 'AR_RTR_1_0_INQ_PRF_INCOMING_FLIT_VC6',
    LABEL => 'AR_RTR_1_0_INQ_PRF_INCOMING_FLIT_VC6',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC6',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_0_INQ_PRF_INCOMING_FLIT_VC6'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_1_INQ_PRF_INCOMING_FLIT_VC6'} = {
    NAME => 'AR_RTR_1_1_INQ_PRF_INCOMING_FLIT_VC6',
    LABEL => 'AR_RTR_1_1_INQ_PRF_INCOMING_FLIT_VC6',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC6',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_1_INQ_PRF_INCOMING_FLIT_VC6'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_2_INQ_PRF_INCOMING_FLIT_VC6'} = {
    NAME => 'AR_RTR_1_2_INQ_PRF_INCOMING_FLIT_VC6',
    LABEL => 'AR_RTR_1_2_INQ_PRF_INCOMING_FLIT_VC6',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC6',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_2_INQ_PRF_INCOMING_FLIT_VC6'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_3_INQ_PRF_INCOMING_FLIT_VC6'} = {
    NAME => 'AR_RTR_1_3_INQ_PRF_INCOMING_FLIT_VC6',
    LABEL => 'AR_RTR_1_3_INQ_PRF_INCOMING_FLIT_VC6',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC6',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_3_INQ_PRF_INCOMING_FLIT_VC6'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_4_INQ_PRF_INCOMING_FLIT_VC6'} = {
    NAME => 'AR_RTR_1_4_INQ_PRF_INCOMING_FLIT_VC6',
    LABEL => 'AR_RTR_1_4_INQ_PRF_INCOMING_FLIT_VC6',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC6',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_4_INQ_PRF_INCOMING_FLIT_VC6'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_5_INQ_PRF_INCOMING_FLIT_VC6'} = {
    NAME => 'AR_RTR_1_5_INQ_PRF_INCOMING_FLIT_VC6',
    LABEL => 'AR_RTR_1_5_INQ_PRF_INCOMING_FLIT_VC6',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC6',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_5_INQ_PRF_INCOMING_FLIT_VC6'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_6_INQ_PRF_INCOMING_FLIT_VC6'} = {
    NAME => 'AR_RTR_1_6_INQ_PRF_INCOMING_FLIT_VC6',
    LABEL => 'AR_RTR_1_6_INQ_PRF_INCOMING_FLIT_VC6',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC6',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_6_INQ_PRF_INCOMING_FLIT_VC6'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_7_INQ_PRF_INCOMING_FLIT_VC6'} = {
    NAME => 'AR_RTR_1_7_INQ_PRF_INCOMING_FLIT_VC6',
    LABEL => 'AR_RTR_1_7_INQ_PRF_INCOMING_FLIT_VC6',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC6',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_7_INQ_PRF_INCOMING_FLIT_VC6'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_0_INQ_PRF_INCOMING_FLIT_VC6'} = {
    NAME => 'AR_RTR_2_0_INQ_PRF_INCOMING_FLIT_VC6',
    LABEL => 'AR_RTR_2_0_INQ_PRF_INCOMING_FLIT_VC6',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC6',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_0_INQ_PRF_INCOMING_FLIT_VC6'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_1_INQ_PRF_INCOMING_FLIT_VC6'} = {
    NAME => 'AR_RTR_2_1_INQ_PRF_INCOMING_FLIT_VC6',
    LABEL => 'AR_RTR_2_1_INQ_PRF_INCOMING_FLIT_VC6',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC6',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_1_INQ_PRF_INCOMING_FLIT_VC6'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_2_INQ_PRF_INCOMING_FLIT_VC6'} = {
    NAME => 'AR_RTR_2_2_INQ_PRF_INCOMING_FLIT_VC6',
    LABEL => 'AR_RTR_2_2_INQ_PRF_INCOMING_FLIT_VC6',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC6',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_2_INQ_PRF_INCOMING_FLIT_VC6'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_3_INQ_PRF_INCOMING_FLIT_VC6'} = {
    NAME => 'AR_RTR_2_3_INQ_PRF_INCOMING_FLIT_VC6',
    LABEL => 'AR_RTR_2_3_INQ_PRF_INCOMING_FLIT_VC6',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC6',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_3_INQ_PRF_INCOMING_FLIT_VC6'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_4_INQ_PRF_INCOMING_FLIT_VC6'} = {
    NAME => 'AR_RTR_2_4_INQ_PRF_INCOMING_FLIT_VC6',
    LABEL => 'AR_RTR_2_4_INQ_PRF_INCOMING_FLIT_VC6',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC6',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_4_INQ_PRF_INCOMING_FLIT_VC6'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_5_INQ_PRF_INCOMING_FLIT_VC6'} = {
    NAME => 'AR_RTR_2_5_INQ_PRF_INCOMING_FLIT_VC6',
    LABEL => 'AR_RTR_2_5_INQ_PRF_INCOMING_FLIT_VC6',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC6',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_5_INQ_PRF_INCOMING_FLIT_VC6'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_6_INQ_PRF_INCOMING_FLIT_VC6'} = {
    NAME => 'AR_RTR_2_6_INQ_PRF_INCOMING_FLIT_VC6',
    LABEL => 'AR_RTR_2_6_INQ_PRF_INCOMING_FLIT_VC6',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC6',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_6_INQ_PRF_INCOMING_FLIT_VC6'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_7_INQ_PRF_INCOMING_FLIT_VC6'} = {
    NAME => 'AR_RTR_2_7_INQ_PRF_INCOMING_FLIT_VC6',
    LABEL => 'AR_RTR_2_7_INQ_PRF_INCOMING_FLIT_VC6',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC6',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_7_INQ_PRF_INCOMING_FLIT_VC6'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_0_INQ_PRF_INCOMING_FLIT_VC6'} = {
    NAME => 'AR_RTR_3_0_INQ_PRF_INCOMING_FLIT_VC6',
    LABEL => 'AR_RTR_3_0_INQ_PRF_INCOMING_FLIT_VC6',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC6',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_0_INQ_PRF_INCOMING_FLIT_VC6'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_1_INQ_PRF_INCOMING_FLIT_VC6'} = {
    NAME => 'AR_RTR_3_1_INQ_PRF_INCOMING_FLIT_VC6',
    LABEL => 'AR_RTR_3_1_INQ_PRF_INCOMING_FLIT_VC6',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC6',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_1_INQ_PRF_INCOMING_FLIT_VC6'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_2_INQ_PRF_INCOMING_FLIT_VC6'} = {
    NAME => 'AR_RTR_3_2_INQ_PRF_INCOMING_FLIT_VC6',
    LABEL => 'AR_RTR_3_2_INQ_PRF_INCOMING_FLIT_VC6',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC6',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_2_INQ_PRF_INCOMING_FLIT_VC6'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_3_INQ_PRF_INCOMING_FLIT_VC6'} = {
    NAME => 'AR_RTR_3_3_INQ_PRF_INCOMING_FLIT_VC6',
    LABEL => 'AR_RTR_3_3_INQ_PRF_INCOMING_FLIT_VC6',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC6',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_3_INQ_PRF_INCOMING_FLIT_VC6'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_4_INQ_PRF_INCOMING_FLIT_VC6'} = {
    NAME => 'AR_RTR_3_4_INQ_PRF_INCOMING_FLIT_VC6',
    LABEL => 'AR_RTR_3_4_INQ_PRF_INCOMING_FLIT_VC6',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC6',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_4_INQ_PRF_INCOMING_FLIT_VC6'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_5_INQ_PRF_INCOMING_FLIT_VC6'} = {
    NAME => 'AR_RTR_3_5_INQ_PRF_INCOMING_FLIT_VC6',
    LABEL => 'AR_RTR_3_5_INQ_PRF_INCOMING_FLIT_VC6',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC6',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_5_INQ_PRF_INCOMING_FLIT_VC6'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_6_INQ_PRF_INCOMING_FLIT_VC6'} = {
    NAME => 'AR_RTR_3_6_INQ_PRF_INCOMING_FLIT_VC6',
    LABEL => 'AR_RTR_3_6_INQ_PRF_INCOMING_FLIT_VC6',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC6',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_6_INQ_PRF_INCOMING_FLIT_VC6'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_7_INQ_PRF_INCOMING_FLIT_VC6'} = {
    NAME => 'AR_RTR_3_7_INQ_PRF_INCOMING_FLIT_VC6',
    LABEL => 'AR_RTR_3_7_INQ_PRF_INCOMING_FLIT_VC6',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC6',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_7_INQ_PRF_INCOMING_FLIT_VC6'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_0_INQ_PRF_INCOMING_FLIT_VC6'} = {
    NAME => 'AR_RTR_4_0_INQ_PRF_INCOMING_FLIT_VC6',
    LABEL => 'AR_RTR_4_0_INQ_PRF_INCOMING_FLIT_VC6',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC6',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_0_INQ_PRF_INCOMING_FLIT_VC6'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_1_INQ_PRF_INCOMING_FLIT_VC6'} = {
    NAME => 'AR_RTR_4_1_INQ_PRF_INCOMING_FLIT_VC6',
    LABEL => 'AR_RTR_4_1_INQ_PRF_INCOMING_FLIT_VC6',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC6',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_1_INQ_PRF_INCOMING_FLIT_VC6'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_2_INQ_PRF_INCOMING_FLIT_VC6'} = {
    NAME => 'AR_RTR_4_2_INQ_PRF_INCOMING_FLIT_VC6',
    LABEL => 'AR_RTR_4_2_INQ_PRF_INCOMING_FLIT_VC6',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC6',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_2_INQ_PRF_INCOMING_FLIT_VC6'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_3_INQ_PRF_INCOMING_FLIT_VC6'} = {
    NAME => 'AR_RTR_4_3_INQ_PRF_INCOMING_FLIT_VC6',
    LABEL => 'AR_RTR_4_3_INQ_PRF_INCOMING_FLIT_VC6',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC6',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_3_INQ_PRF_INCOMING_FLIT_VC6'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_4_INQ_PRF_INCOMING_FLIT_VC6'} = {
    NAME => 'AR_RTR_4_4_INQ_PRF_INCOMING_FLIT_VC6',
    LABEL => 'AR_RTR_4_4_INQ_PRF_INCOMING_FLIT_VC6',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC6',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_4_INQ_PRF_INCOMING_FLIT_VC6'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_5_INQ_PRF_INCOMING_FLIT_VC6'} = {
    NAME => 'AR_RTR_4_5_INQ_PRF_INCOMING_FLIT_VC6',
    LABEL => 'AR_RTR_4_5_INQ_PRF_INCOMING_FLIT_VC6',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC6',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_5_INQ_PRF_INCOMING_FLIT_VC6'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_6_INQ_PRF_INCOMING_FLIT_VC6'} = {
    NAME => 'AR_RTR_4_6_INQ_PRF_INCOMING_FLIT_VC6',
    LABEL => 'AR_RTR_4_6_INQ_PRF_INCOMING_FLIT_VC6',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC6',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_6_INQ_PRF_INCOMING_FLIT_VC6'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_7_INQ_PRF_INCOMING_FLIT_VC6'} = {
    NAME => 'AR_RTR_4_7_INQ_PRF_INCOMING_FLIT_VC6',
    LABEL => 'AR_RTR_4_7_INQ_PRF_INCOMING_FLIT_VC6',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC6',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_7_INQ_PRF_INCOMING_FLIT_VC6'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_0_INQ_PRF_INCOMING_FLIT_VC7'} = {
    NAME => 'AR_RTR_0_0_INQ_PRF_INCOMING_FLIT_VC7',
    LABEL => 'AR_RTR_0_0_INQ_PRF_INCOMING_FLIT_VC7',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC7',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_0_INQ_PRF_INCOMING_FLIT_VC7'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_1_INQ_PRF_INCOMING_FLIT_VC7'} = {
    NAME => 'AR_RTR_0_1_INQ_PRF_INCOMING_FLIT_VC7',
    LABEL => 'AR_RTR_0_1_INQ_PRF_INCOMING_FLIT_VC7',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC7',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_1_INQ_PRF_INCOMING_FLIT_VC7'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_2_INQ_PRF_INCOMING_FLIT_VC7'} = {
    NAME => 'AR_RTR_0_2_INQ_PRF_INCOMING_FLIT_VC7',
    LABEL => 'AR_RTR_0_2_INQ_PRF_INCOMING_FLIT_VC7',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC7',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_2_INQ_PRF_INCOMING_FLIT_VC7'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_3_INQ_PRF_INCOMING_FLIT_VC7'} = {
    NAME => 'AR_RTR_0_3_INQ_PRF_INCOMING_FLIT_VC7',
    LABEL => 'AR_RTR_0_3_INQ_PRF_INCOMING_FLIT_VC7',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC7',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_3_INQ_PRF_INCOMING_FLIT_VC7'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_4_INQ_PRF_INCOMING_FLIT_VC7'} = {
    NAME => 'AR_RTR_0_4_INQ_PRF_INCOMING_FLIT_VC7',
    LABEL => 'AR_RTR_0_4_INQ_PRF_INCOMING_FLIT_VC7',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC7',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_4_INQ_PRF_INCOMING_FLIT_VC7'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_5_INQ_PRF_INCOMING_FLIT_VC7'} = {
    NAME => 'AR_RTR_0_5_INQ_PRF_INCOMING_FLIT_VC7',
    LABEL => 'AR_RTR_0_5_INQ_PRF_INCOMING_FLIT_VC7',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC7',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_5_INQ_PRF_INCOMING_FLIT_VC7'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_6_INQ_PRF_INCOMING_FLIT_VC7'} = {
    NAME => 'AR_RTR_0_6_INQ_PRF_INCOMING_FLIT_VC7',
    LABEL => 'AR_RTR_0_6_INQ_PRF_INCOMING_FLIT_VC7',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC7',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_6_INQ_PRF_INCOMING_FLIT_VC7'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_7_INQ_PRF_INCOMING_FLIT_VC7'} = {
    NAME => 'AR_RTR_0_7_INQ_PRF_INCOMING_FLIT_VC7',
    LABEL => 'AR_RTR_0_7_INQ_PRF_INCOMING_FLIT_VC7',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC7',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_7_INQ_PRF_INCOMING_FLIT_VC7'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_0_INQ_PRF_INCOMING_FLIT_VC7'} = {
    NAME => 'AR_RTR_1_0_INQ_PRF_INCOMING_FLIT_VC7',
    LABEL => 'AR_RTR_1_0_INQ_PRF_INCOMING_FLIT_VC7',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC7',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_0_INQ_PRF_INCOMING_FLIT_VC7'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_1_INQ_PRF_INCOMING_FLIT_VC7'} = {
    NAME => 'AR_RTR_1_1_INQ_PRF_INCOMING_FLIT_VC7',
    LABEL => 'AR_RTR_1_1_INQ_PRF_INCOMING_FLIT_VC7',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC7',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_1_INQ_PRF_INCOMING_FLIT_VC7'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_2_INQ_PRF_INCOMING_FLIT_VC7'} = {
    NAME => 'AR_RTR_1_2_INQ_PRF_INCOMING_FLIT_VC7',
    LABEL => 'AR_RTR_1_2_INQ_PRF_INCOMING_FLIT_VC7',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC7',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_2_INQ_PRF_INCOMING_FLIT_VC7'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_3_INQ_PRF_INCOMING_FLIT_VC7'} = {
    NAME => 'AR_RTR_1_3_INQ_PRF_INCOMING_FLIT_VC7',
    LABEL => 'AR_RTR_1_3_INQ_PRF_INCOMING_FLIT_VC7',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC7',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_3_INQ_PRF_INCOMING_FLIT_VC7'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_4_INQ_PRF_INCOMING_FLIT_VC7'} = {
    NAME => 'AR_RTR_1_4_INQ_PRF_INCOMING_FLIT_VC7',
    LABEL => 'AR_RTR_1_4_INQ_PRF_INCOMING_FLIT_VC7',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC7',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_4_INQ_PRF_INCOMING_FLIT_VC7'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_5_INQ_PRF_INCOMING_FLIT_VC7'} = {
    NAME => 'AR_RTR_1_5_INQ_PRF_INCOMING_FLIT_VC7',
    LABEL => 'AR_RTR_1_5_INQ_PRF_INCOMING_FLIT_VC7',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC7',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_5_INQ_PRF_INCOMING_FLIT_VC7'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_6_INQ_PRF_INCOMING_FLIT_VC7'} = {
    NAME => 'AR_RTR_1_6_INQ_PRF_INCOMING_FLIT_VC7',
    LABEL => 'AR_RTR_1_6_INQ_PRF_INCOMING_FLIT_VC7',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC7',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_6_INQ_PRF_INCOMING_FLIT_VC7'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_7_INQ_PRF_INCOMING_FLIT_VC7'} = {
    NAME => 'AR_RTR_1_7_INQ_PRF_INCOMING_FLIT_VC7',
    LABEL => 'AR_RTR_1_7_INQ_PRF_INCOMING_FLIT_VC7',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC7',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_7_INQ_PRF_INCOMING_FLIT_VC7'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_0_INQ_PRF_INCOMING_FLIT_VC7'} = {
    NAME => 'AR_RTR_2_0_INQ_PRF_INCOMING_FLIT_VC7',
    LABEL => 'AR_RTR_2_0_INQ_PRF_INCOMING_FLIT_VC7',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC7',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_0_INQ_PRF_INCOMING_FLIT_VC7'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_1_INQ_PRF_INCOMING_FLIT_VC7'} = {
    NAME => 'AR_RTR_2_1_INQ_PRF_INCOMING_FLIT_VC7',
    LABEL => 'AR_RTR_2_1_INQ_PRF_INCOMING_FLIT_VC7',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC7',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_1_INQ_PRF_INCOMING_FLIT_VC7'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_2_INQ_PRF_INCOMING_FLIT_VC7'} = {
    NAME => 'AR_RTR_2_2_INQ_PRF_INCOMING_FLIT_VC7',
    LABEL => 'AR_RTR_2_2_INQ_PRF_INCOMING_FLIT_VC7',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC7',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_2_INQ_PRF_INCOMING_FLIT_VC7'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_3_INQ_PRF_INCOMING_FLIT_VC7'} = {
    NAME => 'AR_RTR_2_3_INQ_PRF_INCOMING_FLIT_VC7',
    LABEL => 'AR_RTR_2_3_INQ_PRF_INCOMING_FLIT_VC7',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC7',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_3_INQ_PRF_INCOMING_FLIT_VC7'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_4_INQ_PRF_INCOMING_FLIT_VC7'} = {
    NAME => 'AR_RTR_2_4_INQ_PRF_INCOMING_FLIT_VC7',
    LABEL => 'AR_RTR_2_4_INQ_PRF_INCOMING_FLIT_VC7',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC7',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_4_INQ_PRF_INCOMING_FLIT_VC7'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_5_INQ_PRF_INCOMING_FLIT_VC7'} = {
    NAME => 'AR_RTR_2_5_INQ_PRF_INCOMING_FLIT_VC7',
    LABEL => 'AR_RTR_2_5_INQ_PRF_INCOMING_FLIT_VC7',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC7',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_5_INQ_PRF_INCOMING_FLIT_VC7'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_6_INQ_PRF_INCOMING_FLIT_VC7'} = {
    NAME => 'AR_RTR_2_6_INQ_PRF_INCOMING_FLIT_VC7',
    LABEL => 'AR_RTR_2_6_INQ_PRF_INCOMING_FLIT_VC7',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC7',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_6_INQ_PRF_INCOMING_FLIT_VC7'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_7_INQ_PRF_INCOMING_FLIT_VC7'} = {
    NAME => 'AR_RTR_2_7_INQ_PRF_INCOMING_FLIT_VC7',
    LABEL => 'AR_RTR_2_7_INQ_PRF_INCOMING_FLIT_VC7',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC7',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_7_INQ_PRF_INCOMING_FLIT_VC7'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_0_INQ_PRF_INCOMING_FLIT_VC7'} = {
    NAME => 'AR_RTR_3_0_INQ_PRF_INCOMING_FLIT_VC7',
    LABEL => 'AR_RTR_3_0_INQ_PRF_INCOMING_FLIT_VC7',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC7',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_0_INQ_PRF_INCOMING_FLIT_VC7'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_1_INQ_PRF_INCOMING_FLIT_VC7'} = {
    NAME => 'AR_RTR_3_1_INQ_PRF_INCOMING_FLIT_VC7',
    LABEL => 'AR_RTR_3_1_INQ_PRF_INCOMING_FLIT_VC7',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC7',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_1_INQ_PRF_INCOMING_FLIT_VC7'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_2_INQ_PRF_INCOMING_FLIT_VC7'} = {
    NAME => 'AR_RTR_3_2_INQ_PRF_INCOMING_FLIT_VC7',
    LABEL => 'AR_RTR_3_2_INQ_PRF_INCOMING_FLIT_VC7',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC7',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_2_INQ_PRF_INCOMING_FLIT_VC7'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_3_INQ_PRF_INCOMING_FLIT_VC7'} = {
    NAME => 'AR_RTR_3_3_INQ_PRF_INCOMING_FLIT_VC7',
    LABEL => 'AR_RTR_3_3_INQ_PRF_INCOMING_FLIT_VC7',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC7',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_3_INQ_PRF_INCOMING_FLIT_VC7'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_4_INQ_PRF_INCOMING_FLIT_VC7'} = {
    NAME => 'AR_RTR_3_4_INQ_PRF_INCOMING_FLIT_VC7',
    LABEL => 'AR_RTR_3_4_INQ_PRF_INCOMING_FLIT_VC7',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC7',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_4_INQ_PRF_INCOMING_FLIT_VC7'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_5_INQ_PRF_INCOMING_FLIT_VC7'} = {
    NAME => 'AR_RTR_3_5_INQ_PRF_INCOMING_FLIT_VC7',
    LABEL => 'AR_RTR_3_5_INQ_PRF_INCOMING_FLIT_VC7',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC7',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_5_INQ_PRF_INCOMING_FLIT_VC7'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_6_INQ_PRF_INCOMING_FLIT_VC7'} = {
    NAME => 'AR_RTR_3_6_INQ_PRF_INCOMING_FLIT_VC7',
    LABEL => 'AR_RTR_3_6_INQ_PRF_INCOMING_FLIT_VC7',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC7',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_6_INQ_PRF_INCOMING_FLIT_VC7'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_7_INQ_PRF_INCOMING_FLIT_VC7'} = {
    NAME => 'AR_RTR_3_7_INQ_PRF_INCOMING_FLIT_VC7',
    LABEL => 'AR_RTR_3_7_INQ_PRF_INCOMING_FLIT_VC7',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC7',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_7_INQ_PRF_INCOMING_FLIT_VC7'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_0_INQ_PRF_INCOMING_FLIT_VC7'} = {
    NAME => 'AR_RTR_4_0_INQ_PRF_INCOMING_FLIT_VC7',
    LABEL => 'AR_RTR_4_0_INQ_PRF_INCOMING_FLIT_VC7',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC7',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_0_INQ_PRF_INCOMING_FLIT_VC7'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_1_INQ_PRF_INCOMING_FLIT_VC7'} = {
    NAME => 'AR_RTR_4_1_INQ_PRF_INCOMING_FLIT_VC7',
    LABEL => 'AR_RTR_4_1_INQ_PRF_INCOMING_FLIT_VC7',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC7',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_1_INQ_PRF_INCOMING_FLIT_VC7'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_2_INQ_PRF_INCOMING_FLIT_VC7'} = {
    NAME => 'AR_RTR_4_2_INQ_PRF_INCOMING_FLIT_VC7',
    LABEL => 'AR_RTR_4_2_INQ_PRF_INCOMING_FLIT_VC7',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC7',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_2_INQ_PRF_INCOMING_FLIT_VC7'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_3_INQ_PRF_INCOMING_FLIT_VC7'} = {
    NAME => 'AR_RTR_4_3_INQ_PRF_INCOMING_FLIT_VC7',
    LABEL => 'AR_RTR_4_3_INQ_PRF_INCOMING_FLIT_VC7',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC7',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_3_INQ_PRF_INCOMING_FLIT_VC7'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_4_INQ_PRF_INCOMING_FLIT_VC7'} = {
    NAME => 'AR_RTR_4_4_INQ_PRF_INCOMING_FLIT_VC7',
    LABEL => 'AR_RTR_4_4_INQ_PRF_INCOMING_FLIT_VC7',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC7',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_4_INQ_PRF_INCOMING_FLIT_VC7'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_5_INQ_PRF_INCOMING_FLIT_VC7'} = {
    NAME => 'AR_RTR_4_5_INQ_PRF_INCOMING_FLIT_VC7',
    LABEL => 'AR_RTR_4_5_INQ_PRF_INCOMING_FLIT_VC7',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC7',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_5_INQ_PRF_INCOMING_FLIT_VC7'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_6_INQ_PRF_INCOMING_FLIT_VC7'} = {
    NAME => 'AR_RTR_4_6_INQ_PRF_INCOMING_FLIT_VC7',
    LABEL => 'AR_RTR_4_6_INQ_PRF_INCOMING_FLIT_VC7',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC7',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_6_INQ_PRF_INCOMING_FLIT_VC7'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_7_INQ_PRF_INCOMING_FLIT_VC7'} = {
    NAME => 'AR_RTR_4_7_INQ_PRF_INCOMING_FLIT_VC7',
    LABEL => 'AR_RTR_4_7_INQ_PRF_INCOMING_FLIT_VC7',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC7',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_7_INQ_PRF_INCOMING_FLIT_VC7'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_0_INQ_PRF_FLIT0_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_0_0_INQ_PRF_FLIT0_FILTERING_SETUP',
    LABEL => 'AR_RTR_0_0_INQ_PRF_FLIT0_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_0_INQ_PRF_FLIT0_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_0_INQ_PRF_FLIT0_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_0_0_INQ_PRF_FLIT0_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_0_0_INQ_PRF_FLIT0_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC0_FILTER_FLIT0_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_0_INQ_PRF_FLIT0_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_0_INQ_PRF_FLIT0_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_0_0_INQ_PRF_FLIT0_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_0_0_INQ_PRF_FLIT0_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC0 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_0_INQ_PRF_FLIT0_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_0_INQ_PRF_FLIT0_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_0_0_INQ_PRF_FLIT0_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_0_0_INQ_PRF_FLIT0_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 0 to match the VC fieldof the header flit to 0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_0_INQ_PRF_FLIT0_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_1_INQ_PRF_FLIT0_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_0_1_INQ_PRF_FLIT0_FILTERING_SETUP',
    LABEL => 'AR_RTR_0_1_INQ_PRF_FLIT0_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_1_INQ_PRF_FLIT0_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_1_INQ_PRF_FLIT0_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_0_1_INQ_PRF_FLIT0_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_0_1_INQ_PRF_FLIT0_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC0_FILTER_FLIT0_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_1_INQ_PRF_FLIT0_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_1_INQ_PRF_FLIT0_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_0_1_INQ_PRF_FLIT0_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_0_1_INQ_PRF_FLIT0_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC0 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_1_INQ_PRF_FLIT0_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_1_INQ_PRF_FLIT0_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_0_1_INQ_PRF_FLIT0_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_0_1_INQ_PRF_FLIT0_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 0 to match the VC fieldof the header flit to 0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_1_INQ_PRF_FLIT0_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_2_INQ_PRF_FLIT0_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_0_2_INQ_PRF_FLIT0_FILTERING_SETUP',
    LABEL => 'AR_RTR_0_2_INQ_PRF_FLIT0_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_2_INQ_PRF_FLIT0_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_2_INQ_PRF_FLIT0_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_0_2_INQ_PRF_FLIT0_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_0_2_INQ_PRF_FLIT0_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC0_FILTER_FLIT0_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_2_INQ_PRF_FLIT0_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_2_INQ_PRF_FLIT0_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_0_2_INQ_PRF_FLIT0_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_0_2_INQ_PRF_FLIT0_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC0 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_2_INQ_PRF_FLIT0_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_2_INQ_PRF_FLIT0_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_0_2_INQ_PRF_FLIT0_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_0_2_INQ_PRF_FLIT0_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 0 to match the VC fieldof the header flit to 0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_2_INQ_PRF_FLIT0_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_3_INQ_PRF_FLIT0_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_0_3_INQ_PRF_FLIT0_FILTERING_SETUP',
    LABEL => 'AR_RTR_0_3_INQ_PRF_FLIT0_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_3_INQ_PRF_FLIT0_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_3_INQ_PRF_FLIT0_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_0_3_INQ_PRF_FLIT0_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_0_3_INQ_PRF_FLIT0_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC0_FILTER_FLIT0_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_3_INQ_PRF_FLIT0_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_3_INQ_PRF_FLIT0_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_0_3_INQ_PRF_FLIT0_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_0_3_INQ_PRF_FLIT0_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC0 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_3_INQ_PRF_FLIT0_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_3_INQ_PRF_FLIT0_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_0_3_INQ_PRF_FLIT0_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_0_3_INQ_PRF_FLIT0_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 0 to match the VC fieldof the header flit to 0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_3_INQ_PRF_FLIT0_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_4_INQ_PRF_FLIT0_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_0_4_INQ_PRF_FLIT0_FILTERING_SETUP',
    LABEL => 'AR_RTR_0_4_INQ_PRF_FLIT0_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_4_INQ_PRF_FLIT0_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_4_INQ_PRF_FLIT0_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_0_4_INQ_PRF_FLIT0_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_0_4_INQ_PRF_FLIT0_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC0_FILTER_FLIT0_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_4_INQ_PRF_FLIT0_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_4_INQ_PRF_FLIT0_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_0_4_INQ_PRF_FLIT0_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_0_4_INQ_PRF_FLIT0_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC0 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_4_INQ_PRF_FLIT0_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_4_INQ_PRF_FLIT0_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_0_4_INQ_PRF_FLIT0_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_0_4_INQ_PRF_FLIT0_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 0 to match the VC fieldof the header flit to 0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_4_INQ_PRF_FLIT0_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_5_INQ_PRF_FLIT0_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_0_5_INQ_PRF_FLIT0_FILTERING_SETUP',
    LABEL => 'AR_RTR_0_5_INQ_PRF_FLIT0_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_5_INQ_PRF_FLIT0_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_5_INQ_PRF_FLIT0_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_0_5_INQ_PRF_FLIT0_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_0_5_INQ_PRF_FLIT0_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC0_FILTER_FLIT0_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_5_INQ_PRF_FLIT0_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_5_INQ_PRF_FLIT0_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_0_5_INQ_PRF_FLIT0_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_0_5_INQ_PRF_FLIT0_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC0 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_5_INQ_PRF_FLIT0_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_5_INQ_PRF_FLIT0_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_0_5_INQ_PRF_FLIT0_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_0_5_INQ_PRF_FLIT0_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 0 to match the VC fieldof the header flit to 0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_5_INQ_PRF_FLIT0_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_6_INQ_PRF_FLIT0_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_0_6_INQ_PRF_FLIT0_FILTERING_SETUP',
    LABEL => 'AR_RTR_0_6_INQ_PRF_FLIT0_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_6_INQ_PRF_FLIT0_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_6_INQ_PRF_FLIT0_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_0_6_INQ_PRF_FLIT0_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_0_6_INQ_PRF_FLIT0_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC0_FILTER_FLIT0_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_6_INQ_PRF_FLIT0_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_6_INQ_PRF_FLIT0_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_0_6_INQ_PRF_FLIT0_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_0_6_INQ_PRF_FLIT0_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC0 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_6_INQ_PRF_FLIT0_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_6_INQ_PRF_FLIT0_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_0_6_INQ_PRF_FLIT0_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_0_6_INQ_PRF_FLIT0_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 0 to match the VC fieldof the header flit to 0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_6_INQ_PRF_FLIT0_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_7_INQ_PRF_FLIT0_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_0_7_INQ_PRF_FLIT0_FILTERING_SETUP',
    LABEL => 'AR_RTR_0_7_INQ_PRF_FLIT0_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_7_INQ_PRF_FLIT0_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_7_INQ_PRF_FLIT0_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_0_7_INQ_PRF_FLIT0_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_0_7_INQ_PRF_FLIT0_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC0_FILTER_FLIT0_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_7_INQ_PRF_FLIT0_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_7_INQ_PRF_FLIT0_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_0_7_INQ_PRF_FLIT0_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_0_7_INQ_PRF_FLIT0_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC0 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_7_INQ_PRF_FLIT0_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_7_INQ_PRF_FLIT0_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_0_7_INQ_PRF_FLIT0_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_0_7_INQ_PRF_FLIT0_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 0 to match the VC fieldof the header flit to 0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_7_INQ_PRF_FLIT0_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_0_INQ_PRF_FLIT0_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_1_0_INQ_PRF_FLIT0_FILTERING_SETUP',
    LABEL => 'AR_RTR_1_0_INQ_PRF_FLIT0_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_0_INQ_PRF_FLIT0_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_0_INQ_PRF_FLIT0_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_1_0_INQ_PRF_FLIT0_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_1_0_INQ_PRF_FLIT0_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC0_FILTER_FLIT0_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_0_INQ_PRF_FLIT0_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_0_INQ_PRF_FLIT0_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_1_0_INQ_PRF_FLIT0_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_1_0_INQ_PRF_FLIT0_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC0 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_0_INQ_PRF_FLIT0_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_0_INQ_PRF_FLIT0_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_1_0_INQ_PRF_FLIT0_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_1_0_INQ_PRF_FLIT0_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 0 to match the VC fieldof the header flit to 0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_0_INQ_PRF_FLIT0_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_1_INQ_PRF_FLIT0_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_1_1_INQ_PRF_FLIT0_FILTERING_SETUP',
    LABEL => 'AR_RTR_1_1_INQ_PRF_FLIT0_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_1_INQ_PRF_FLIT0_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_1_INQ_PRF_FLIT0_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_1_1_INQ_PRF_FLIT0_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_1_1_INQ_PRF_FLIT0_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC0_FILTER_FLIT0_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_1_INQ_PRF_FLIT0_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_1_INQ_PRF_FLIT0_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_1_1_INQ_PRF_FLIT0_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_1_1_INQ_PRF_FLIT0_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC0 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_1_INQ_PRF_FLIT0_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_1_INQ_PRF_FLIT0_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_1_1_INQ_PRF_FLIT0_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_1_1_INQ_PRF_FLIT0_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 0 to match the VC fieldof the header flit to 0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_1_INQ_PRF_FLIT0_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_2_INQ_PRF_FLIT0_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_1_2_INQ_PRF_FLIT0_FILTERING_SETUP',
    LABEL => 'AR_RTR_1_2_INQ_PRF_FLIT0_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_2_INQ_PRF_FLIT0_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_2_INQ_PRF_FLIT0_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_1_2_INQ_PRF_FLIT0_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_1_2_INQ_PRF_FLIT0_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC0_FILTER_FLIT0_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_2_INQ_PRF_FLIT0_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_2_INQ_PRF_FLIT0_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_1_2_INQ_PRF_FLIT0_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_1_2_INQ_PRF_FLIT0_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC0 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_2_INQ_PRF_FLIT0_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_2_INQ_PRF_FLIT0_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_1_2_INQ_PRF_FLIT0_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_1_2_INQ_PRF_FLIT0_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 0 to match the VC fieldof the header flit to 0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_2_INQ_PRF_FLIT0_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_3_INQ_PRF_FLIT0_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_1_3_INQ_PRF_FLIT0_FILTERING_SETUP',
    LABEL => 'AR_RTR_1_3_INQ_PRF_FLIT0_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_3_INQ_PRF_FLIT0_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_3_INQ_PRF_FLIT0_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_1_3_INQ_PRF_FLIT0_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_1_3_INQ_PRF_FLIT0_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC0_FILTER_FLIT0_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_3_INQ_PRF_FLIT0_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_3_INQ_PRF_FLIT0_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_1_3_INQ_PRF_FLIT0_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_1_3_INQ_PRF_FLIT0_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC0 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_3_INQ_PRF_FLIT0_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_3_INQ_PRF_FLIT0_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_1_3_INQ_PRF_FLIT0_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_1_3_INQ_PRF_FLIT0_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 0 to match the VC fieldof the header flit to 0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_3_INQ_PRF_FLIT0_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_4_INQ_PRF_FLIT0_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_1_4_INQ_PRF_FLIT0_FILTERING_SETUP',
    LABEL => 'AR_RTR_1_4_INQ_PRF_FLIT0_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_4_INQ_PRF_FLIT0_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_4_INQ_PRF_FLIT0_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_1_4_INQ_PRF_FLIT0_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_1_4_INQ_PRF_FLIT0_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC0_FILTER_FLIT0_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_4_INQ_PRF_FLIT0_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_4_INQ_PRF_FLIT0_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_1_4_INQ_PRF_FLIT0_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_1_4_INQ_PRF_FLIT0_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC0 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_4_INQ_PRF_FLIT0_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_4_INQ_PRF_FLIT0_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_1_4_INQ_PRF_FLIT0_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_1_4_INQ_PRF_FLIT0_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 0 to match the VC fieldof the header flit to 0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_4_INQ_PRF_FLIT0_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_5_INQ_PRF_FLIT0_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_1_5_INQ_PRF_FLIT0_FILTERING_SETUP',
    LABEL => 'AR_RTR_1_5_INQ_PRF_FLIT0_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_5_INQ_PRF_FLIT0_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_5_INQ_PRF_FLIT0_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_1_5_INQ_PRF_FLIT0_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_1_5_INQ_PRF_FLIT0_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC0_FILTER_FLIT0_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_5_INQ_PRF_FLIT0_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_5_INQ_PRF_FLIT0_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_1_5_INQ_PRF_FLIT0_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_1_5_INQ_PRF_FLIT0_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC0 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_5_INQ_PRF_FLIT0_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_5_INQ_PRF_FLIT0_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_1_5_INQ_PRF_FLIT0_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_1_5_INQ_PRF_FLIT0_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 0 to match the VC fieldof the header flit to 0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_5_INQ_PRF_FLIT0_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_6_INQ_PRF_FLIT0_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_1_6_INQ_PRF_FLIT0_FILTERING_SETUP',
    LABEL => 'AR_RTR_1_6_INQ_PRF_FLIT0_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_6_INQ_PRF_FLIT0_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_6_INQ_PRF_FLIT0_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_1_6_INQ_PRF_FLIT0_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_1_6_INQ_PRF_FLIT0_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC0_FILTER_FLIT0_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_6_INQ_PRF_FLIT0_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_6_INQ_PRF_FLIT0_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_1_6_INQ_PRF_FLIT0_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_1_6_INQ_PRF_FLIT0_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC0 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_6_INQ_PRF_FLIT0_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_6_INQ_PRF_FLIT0_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_1_6_INQ_PRF_FLIT0_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_1_6_INQ_PRF_FLIT0_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 0 to match the VC fieldof the header flit to 0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_6_INQ_PRF_FLIT0_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_7_INQ_PRF_FLIT0_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_1_7_INQ_PRF_FLIT0_FILTERING_SETUP',
    LABEL => 'AR_RTR_1_7_INQ_PRF_FLIT0_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_7_INQ_PRF_FLIT0_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_7_INQ_PRF_FLIT0_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_1_7_INQ_PRF_FLIT0_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_1_7_INQ_PRF_FLIT0_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC0_FILTER_FLIT0_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_7_INQ_PRF_FLIT0_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_7_INQ_PRF_FLIT0_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_1_7_INQ_PRF_FLIT0_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_1_7_INQ_PRF_FLIT0_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC0 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_7_INQ_PRF_FLIT0_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_7_INQ_PRF_FLIT0_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_1_7_INQ_PRF_FLIT0_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_1_7_INQ_PRF_FLIT0_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 0 to match the VC fieldof the header flit to 0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_7_INQ_PRF_FLIT0_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_0_INQ_PRF_FLIT0_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_2_0_INQ_PRF_FLIT0_FILTERING_SETUP',
    LABEL => 'AR_RTR_2_0_INQ_PRF_FLIT0_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_0_INQ_PRF_FLIT0_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_0_INQ_PRF_FLIT0_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_2_0_INQ_PRF_FLIT0_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_2_0_INQ_PRF_FLIT0_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC0_FILTER_FLIT0_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_0_INQ_PRF_FLIT0_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_0_INQ_PRF_FLIT0_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_2_0_INQ_PRF_FLIT0_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_2_0_INQ_PRF_FLIT0_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC0 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_0_INQ_PRF_FLIT0_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_0_INQ_PRF_FLIT0_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_2_0_INQ_PRF_FLIT0_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_2_0_INQ_PRF_FLIT0_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 0 to match the VC fieldof the header flit to 0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_0_INQ_PRF_FLIT0_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_1_INQ_PRF_FLIT0_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_2_1_INQ_PRF_FLIT0_FILTERING_SETUP',
    LABEL => 'AR_RTR_2_1_INQ_PRF_FLIT0_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_1_INQ_PRF_FLIT0_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_1_INQ_PRF_FLIT0_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_2_1_INQ_PRF_FLIT0_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_2_1_INQ_PRF_FLIT0_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC0_FILTER_FLIT0_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_1_INQ_PRF_FLIT0_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_1_INQ_PRF_FLIT0_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_2_1_INQ_PRF_FLIT0_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_2_1_INQ_PRF_FLIT0_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC0 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_1_INQ_PRF_FLIT0_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_1_INQ_PRF_FLIT0_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_2_1_INQ_PRF_FLIT0_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_2_1_INQ_PRF_FLIT0_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 0 to match the VC fieldof the header flit to 0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_1_INQ_PRF_FLIT0_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_2_INQ_PRF_FLIT0_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_2_2_INQ_PRF_FLIT0_FILTERING_SETUP',
    LABEL => 'AR_RTR_2_2_INQ_PRF_FLIT0_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_2_INQ_PRF_FLIT0_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_2_INQ_PRF_FLIT0_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_2_2_INQ_PRF_FLIT0_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_2_2_INQ_PRF_FLIT0_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC0_FILTER_FLIT0_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_2_INQ_PRF_FLIT0_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_2_INQ_PRF_FLIT0_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_2_2_INQ_PRF_FLIT0_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_2_2_INQ_PRF_FLIT0_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC0 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_2_INQ_PRF_FLIT0_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_2_INQ_PRF_FLIT0_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_2_2_INQ_PRF_FLIT0_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_2_2_INQ_PRF_FLIT0_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 0 to match the VC fieldof the header flit to 0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_2_INQ_PRF_FLIT0_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_3_INQ_PRF_FLIT0_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_2_3_INQ_PRF_FLIT0_FILTERING_SETUP',
    LABEL => 'AR_RTR_2_3_INQ_PRF_FLIT0_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_3_INQ_PRF_FLIT0_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_3_INQ_PRF_FLIT0_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_2_3_INQ_PRF_FLIT0_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_2_3_INQ_PRF_FLIT0_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC0_FILTER_FLIT0_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_3_INQ_PRF_FLIT0_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_3_INQ_PRF_FLIT0_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_2_3_INQ_PRF_FLIT0_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_2_3_INQ_PRF_FLIT0_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC0 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_3_INQ_PRF_FLIT0_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_3_INQ_PRF_FLIT0_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_2_3_INQ_PRF_FLIT0_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_2_3_INQ_PRF_FLIT0_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 0 to match the VC fieldof the header flit to 0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_3_INQ_PRF_FLIT0_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_4_INQ_PRF_FLIT0_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_2_4_INQ_PRF_FLIT0_FILTERING_SETUP',
    LABEL => 'AR_RTR_2_4_INQ_PRF_FLIT0_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_4_INQ_PRF_FLIT0_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_4_INQ_PRF_FLIT0_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_2_4_INQ_PRF_FLIT0_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_2_4_INQ_PRF_FLIT0_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC0_FILTER_FLIT0_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_4_INQ_PRF_FLIT0_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_4_INQ_PRF_FLIT0_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_2_4_INQ_PRF_FLIT0_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_2_4_INQ_PRF_FLIT0_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC0 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_4_INQ_PRF_FLIT0_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_4_INQ_PRF_FLIT0_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_2_4_INQ_PRF_FLIT0_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_2_4_INQ_PRF_FLIT0_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 0 to match the VC fieldof the header flit to 0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_4_INQ_PRF_FLIT0_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_5_INQ_PRF_FLIT0_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_2_5_INQ_PRF_FLIT0_FILTERING_SETUP',
    LABEL => 'AR_RTR_2_5_INQ_PRF_FLIT0_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_5_INQ_PRF_FLIT0_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_5_INQ_PRF_FLIT0_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_2_5_INQ_PRF_FLIT0_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_2_5_INQ_PRF_FLIT0_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC0_FILTER_FLIT0_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_5_INQ_PRF_FLIT0_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_5_INQ_PRF_FLIT0_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_2_5_INQ_PRF_FLIT0_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_2_5_INQ_PRF_FLIT0_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC0 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_5_INQ_PRF_FLIT0_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_5_INQ_PRF_FLIT0_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_2_5_INQ_PRF_FLIT0_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_2_5_INQ_PRF_FLIT0_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 0 to match the VC fieldof the header flit to 0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_5_INQ_PRF_FLIT0_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_6_INQ_PRF_FLIT0_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_2_6_INQ_PRF_FLIT0_FILTERING_SETUP',
    LABEL => 'AR_RTR_2_6_INQ_PRF_FLIT0_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_6_INQ_PRF_FLIT0_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_6_INQ_PRF_FLIT0_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_2_6_INQ_PRF_FLIT0_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_2_6_INQ_PRF_FLIT0_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC0_FILTER_FLIT0_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_6_INQ_PRF_FLIT0_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_6_INQ_PRF_FLIT0_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_2_6_INQ_PRF_FLIT0_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_2_6_INQ_PRF_FLIT0_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC0 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_6_INQ_PRF_FLIT0_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_6_INQ_PRF_FLIT0_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_2_6_INQ_PRF_FLIT0_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_2_6_INQ_PRF_FLIT0_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 0 to match the VC fieldof the header flit to 0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_6_INQ_PRF_FLIT0_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_7_INQ_PRF_FLIT0_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_2_7_INQ_PRF_FLIT0_FILTERING_SETUP',
    LABEL => 'AR_RTR_2_7_INQ_PRF_FLIT0_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_7_INQ_PRF_FLIT0_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_7_INQ_PRF_FLIT0_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_2_7_INQ_PRF_FLIT0_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_2_7_INQ_PRF_FLIT0_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC0_FILTER_FLIT0_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_7_INQ_PRF_FLIT0_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_7_INQ_PRF_FLIT0_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_2_7_INQ_PRF_FLIT0_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_2_7_INQ_PRF_FLIT0_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC0 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_7_INQ_PRF_FLIT0_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_7_INQ_PRF_FLIT0_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_2_7_INQ_PRF_FLIT0_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_2_7_INQ_PRF_FLIT0_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 0 to match the VC fieldof the header flit to 0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_7_INQ_PRF_FLIT0_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_0_INQ_PRF_FLIT0_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_3_0_INQ_PRF_FLIT0_FILTERING_SETUP',
    LABEL => 'AR_RTR_3_0_INQ_PRF_FLIT0_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_0_INQ_PRF_FLIT0_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_0_INQ_PRF_FLIT0_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_3_0_INQ_PRF_FLIT0_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_3_0_INQ_PRF_FLIT0_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC0_FILTER_FLIT0_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_0_INQ_PRF_FLIT0_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_0_INQ_PRF_FLIT0_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_3_0_INQ_PRF_FLIT0_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_3_0_INQ_PRF_FLIT0_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC0 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_0_INQ_PRF_FLIT0_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_0_INQ_PRF_FLIT0_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_3_0_INQ_PRF_FLIT0_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_3_0_INQ_PRF_FLIT0_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 0 to match the VC fieldof the header flit to 0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_0_INQ_PRF_FLIT0_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_1_INQ_PRF_FLIT0_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_3_1_INQ_PRF_FLIT0_FILTERING_SETUP',
    LABEL => 'AR_RTR_3_1_INQ_PRF_FLIT0_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_1_INQ_PRF_FLIT0_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_1_INQ_PRF_FLIT0_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_3_1_INQ_PRF_FLIT0_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_3_1_INQ_PRF_FLIT0_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC0_FILTER_FLIT0_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_1_INQ_PRF_FLIT0_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_1_INQ_PRF_FLIT0_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_3_1_INQ_PRF_FLIT0_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_3_1_INQ_PRF_FLIT0_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC0 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_1_INQ_PRF_FLIT0_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_1_INQ_PRF_FLIT0_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_3_1_INQ_PRF_FLIT0_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_3_1_INQ_PRF_FLIT0_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 0 to match the VC fieldof the header flit to 0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_1_INQ_PRF_FLIT0_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_2_INQ_PRF_FLIT0_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_3_2_INQ_PRF_FLIT0_FILTERING_SETUP',
    LABEL => 'AR_RTR_3_2_INQ_PRF_FLIT0_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_2_INQ_PRF_FLIT0_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_2_INQ_PRF_FLIT0_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_3_2_INQ_PRF_FLIT0_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_3_2_INQ_PRF_FLIT0_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC0_FILTER_FLIT0_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_2_INQ_PRF_FLIT0_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_2_INQ_PRF_FLIT0_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_3_2_INQ_PRF_FLIT0_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_3_2_INQ_PRF_FLIT0_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC0 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_2_INQ_PRF_FLIT0_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_2_INQ_PRF_FLIT0_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_3_2_INQ_PRF_FLIT0_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_3_2_INQ_PRF_FLIT0_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 0 to match the VC fieldof the header flit to 0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_2_INQ_PRF_FLIT0_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_3_INQ_PRF_FLIT0_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_3_3_INQ_PRF_FLIT0_FILTERING_SETUP',
    LABEL => 'AR_RTR_3_3_INQ_PRF_FLIT0_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_3_INQ_PRF_FLIT0_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_3_INQ_PRF_FLIT0_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_3_3_INQ_PRF_FLIT0_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_3_3_INQ_PRF_FLIT0_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC0_FILTER_FLIT0_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_3_INQ_PRF_FLIT0_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_3_INQ_PRF_FLIT0_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_3_3_INQ_PRF_FLIT0_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_3_3_INQ_PRF_FLIT0_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC0 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_3_INQ_PRF_FLIT0_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_3_INQ_PRF_FLIT0_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_3_3_INQ_PRF_FLIT0_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_3_3_INQ_PRF_FLIT0_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 0 to match the VC fieldof the header flit to 0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_3_INQ_PRF_FLIT0_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_4_INQ_PRF_FLIT0_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_3_4_INQ_PRF_FLIT0_FILTERING_SETUP',
    LABEL => 'AR_RTR_3_4_INQ_PRF_FLIT0_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_4_INQ_PRF_FLIT0_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_4_INQ_PRF_FLIT0_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_3_4_INQ_PRF_FLIT0_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_3_4_INQ_PRF_FLIT0_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC0_FILTER_FLIT0_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_4_INQ_PRF_FLIT0_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_4_INQ_PRF_FLIT0_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_3_4_INQ_PRF_FLIT0_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_3_4_INQ_PRF_FLIT0_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC0 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_4_INQ_PRF_FLIT0_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_4_INQ_PRF_FLIT0_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_3_4_INQ_PRF_FLIT0_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_3_4_INQ_PRF_FLIT0_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 0 to match the VC fieldof the header flit to 0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_4_INQ_PRF_FLIT0_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_5_INQ_PRF_FLIT0_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_3_5_INQ_PRF_FLIT0_FILTERING_SETUP',
    LABEL => 'AR_RTR_3_5_INQ_PRF_FLIT0_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_5_INQ_PRF_FLIT0_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_5_INQ_PRF_FLIT0_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_3_5_INQ_PRF_FLIT0_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_3_5_INQ_PRF_FLIT0_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC0_FILTER_FLIT0_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_5_INQ_PRF_FLIT0_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_5_INQ_PRF_FLIT0_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_3_5_INQ_PRF_FLIT0_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_3_5_INQ_PRF_FLIT0_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC0 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_5_INQ_PRF_FLIT0_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_5_INQ_PRF_FLIT0_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_3_5_INQ_PRF_FLIT0_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_3_5_INQ_PRF_FLIT0_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 0 to match the VC fieldof the header flit to 0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_5_INQ_PRF_FLIT0_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_6_INQ_PRF_FLIT0_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_3_6_INQ_PRF_FLIT0_FILTERING_SETUP',
    LABEL => 'AR_RTR_3_6_INQ_PRF_FLIT0_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_6_INQ_PRF_FLIT0_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_6_INQ_PRF_FLIT0_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_3_6_INQ_PRF_FLIT0_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_3_6_INQ_PRF_FLIT0_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC0_FILTER_FLIT0_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_6_INQ_PRF_FLIT0_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_6_INQ_PRF_FLIT0_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_3_6_INQ_PRF_FLIT0_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_3_6_INQ_PRF_FLIT0_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC0 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_6_INQ_PRF_FLIT0_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_6_INQ_PRF_FLIT0_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_3_6_INQ_PRF_FLIT0_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_3_6_INQ_PRF_FLIT0_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 0 to match the VC fieldof the header flit to 0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_6_INQ_PRF_FLIT0_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_7_INQ_PRF_FLIT0_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_3_7_INQ_PRF_FLIT0_FILTERING_SETUP',
    LABEL => 'AR_RTR_3_7_INQ_PRF_FLIT0_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_7_INQ_PRF_FLIT0_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_7_INQ_PRF_FLIT0_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_3_7_INQ_PRF_FLIT0_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_3_7_INQ_PRF_FLIT0_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC0_FILTER_FLIT0_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_7_INQ_PRF_FLIT0_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_7_INQ_PRF_FLIT0_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_3_7_INQ_PRF_FLIT0_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_3_7_INQ_PRF_FLIT0_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC0 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_7_INQ_PRF_FLIT0_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_7_INQ_PRF_FLIT0_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_3_7_INQ_PRF_FLIT0_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_3_7_INQ_PRF_FLIT0_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 0 to match the VC fieldof the header flit to 0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_7_INQ_PRF_FLIT0_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_0_INQ_PRF_FLIT0_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_4_0_INQ_PRF_FLIT0_FILTERING_SETUP',
    LABEL => 'AR_RTR_4_0_INQ_PRF_FLIT0_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_0_INQ_PRF_FLIT0_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_0_INQ_PRF_FLIT0_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_4_0_INQ_PRF_FLIT0_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_4_0_INQ_PRF_FLIT0_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC0_FILTER_FLIT0_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_0_INQ_PRF_FLIT0_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_0_INQ_PRF_FLIT0_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_4_0_INQ_PRF_FLIT0_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_4_0_INQ_PRF_FLIT0_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC0 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_0_INQ_PRF_FLIT0_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_0_INQ_PRF_FLIT0_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_4_0_INQ_PRF_FLIT0_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_4_0_INQ_PRF_FLIT0_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 0 to match the VC fieldof the header flit to 0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_0_INQ_PRF_FLIT0_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_1_INQ_PRF_FLIT0_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_4_1_INQ_PRF_FLIT0_FILTERING_SETUP',
    LABEL => 'AR_RTR_4_1_INQ_PRF_FLIT0_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_1_INQ_PRF_FLIT0_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_1_INQ_PRF_FLIT0_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_4_1_INQ_PRF_FLIT0_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_4_1_INQ_PRF_FLIT0_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC0_FILTER_FLIT0_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_1_INQ_PRF_FLIT0_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_1_INQ_PRF_FLIT0_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_4_1_INQ_PRF_FLIT0_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_4_1_INQ_PRF_FLIT0_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC0 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_1_INQ_PRF_FLIT0_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_1_INQ_PRF_FLIT0_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_4_1_INQ_PRF_FLIT0_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_4_1_INQ_PRF_FLIT0_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 0 to match the VC fieldof the header flit to 0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_1_INQ_PRF_FLIT0_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_2_INQ_PRF_FLIT0_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_4_2_INQ_PRF_FLIT0_FILTERING_SETUP',
    LABEL => 'AR_RTR_4_2_INQ_PRF_FLIT0_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_2_INQ_PRF_FLIT0_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_2_INQ_PRF_FLIT0_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_4_2_INQ_PRF_FLIT0_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_4_2_INQ_PRF_FLIT0_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC0_FILTER_FLIT0_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_2_INQ_PRF_FLIT0_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_2_INQ_PRF_FLIT0_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_4_2_INQ_PRF_FLIT0_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_4_2_INQ_PRF_FLIT0_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC0 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_2_INQ_PRF_FLIT0_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_2_INQ_PRF_FLIT0_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_4_2_INQ_PRF_FLIT0_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_4_2_INQ_PRF_FLIT0_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 0 to match the VC fieldof the header flit to 0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_2_INQ_PRF_FLIT0_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_3_INQ_PRF_FLIT0_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_4_3_INQ_PRF_FLIT0_FILTERING_SETUP',
    LABEL => 'AR_RTR_4_3_INQ_PRF_FLIT0_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_3_INQ_PRF_FLIT0_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_3_INQ_PRF_FLIT0_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_4_3_INQ_PRF_FLIT0_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_4_3_INQ_PRF_FLIT0_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC0_FILTER_FLIT0_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_3_INQ_PRF_FLIT0_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_3_INQ_PRF_FLIT0_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_4_3_INQ_PRF_FLIT0_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_4_3_INQ_PRF_FLIT0_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC0 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_3_INQ_PRF_FLIT0_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_3_INQ_PRF_FLIT0_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_4_3_INQ_PRF_FLIT0_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_4_3_INQ_PRF_FLIT0_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 0 to match the VC fieldof the header flit to 0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_3_INQ_PRF_FLIT0_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_4_INQ_PRF_FLIT0_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_4_4_INQ_PRF_FLIT0_FILTERING_SETUP',
    LABEL => 'AR_RTR_4_4_INQ_PRF_FLIT0_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_4_INQ_PRF_FLIT0_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_4_INQ_PRF_FLIT0_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_4_4_INQ_PRF_FLIT0_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_4_4_INQ_PRF_FLIT0_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC0_FILTER_FLIT0_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_4_INQ_PRF_FLIT0_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_4_INQ_PRF_FLIT0_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_4_4_INQ_PRF_FLIT0_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_4_4_INQ_PRF_FLIT0_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC0 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_4_INQ_PRF_FLIT0_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_4_INQ_PRF_FLIT0_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_4_4_INQ_PRF_FLIT0_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_4_4_INQ_PRF_FLIT0_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 0 to match the VC fieldof the header flit to 0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_4_INQ_PRF_FLIT0_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_5_INQ_PRF_FLIT0_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_4_5_INQ_PRF_FLIT0_FILTERING_SETUP',
    LABEL => 'AR_RTR_4_5_INQ_PRF_FLIT0_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_5_INQ_PRF_FLIT0_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_5_INQ_PRF_FLIT0_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_4_5_INQ_PRF_FLIT0_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_4_5_INQ_PRF_FLIT0_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC0_FILTER_FLIT0_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_5_INQ_PRF_FLIT0_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_5_INQ_PRF_FLIT0_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_4_5_INQ_PRF_FLIT0_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_4_5_INQ_PRF_FLIT0_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC0 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_5_INQ_PRF_FLIT0_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_5_INQ_PRF_FLIT0_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_4_5_INQ_PRF_FLIT0_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_4_5_INQ_PRF_FLIT0_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 0 to match the VC fieldof the header flit to 0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_5_INQ_PRF_FLIT0_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_6_INQ_PRF_FLIT0_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_4_6_INQ_PRF_FLIT0_FILTERING_SETUP',
    LABEL => 'AR_RTR_4_6_INQ_PRF_FLIT0_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_6_INQ_PRF_FLIT0_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_6_INQ_PRF_FLIT0_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_4_6_INQ_PRF_FLIT0_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_4_6_INQ_PRF_FLIT0_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC0_FILTER_FLIT0_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_6_INQ_PRF_FLIT0_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_6_INQ_PRF_FLIT0_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_4_6_INQ_PRF_FLIT0_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_4_6_INQ_PRF_FLIT0_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC0 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_6_INQ_PRF_FLIT0_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_6_INQ_PRF_FLIT0_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_4_6_INQ_PRF_FLIT0_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_4_6_INQ_PRF_FLIT0_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 0 to match the VC fieldof the header flit to 0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_6_INQ_PRF_FLIT0_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_7_INQ_PRF_FLIT0_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_4_7_INQ_PRF_FLIT0_FILTERING_SETUP',
    LABEL => 'AR_RTR_4_7_INQ_PRF_FLIT0_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_7_INQ_PRF_FLIT0_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_7_INQ_PRF_FLIT0_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_4_7_INQ_PRF_FLIT0_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_4_7_INQ_PRF_FLIT0_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC0_FILTER_FLIT0_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_7_INQ_PRF_FLIT0_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_7_INQ_PRF_FLIT0_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_4_7_INQ_PRF_FLIT0_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_4_7_INQ_PRF_FLIT0_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC0 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_7_INQ_PRF_FLIT0_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_7_INQ_PRF_FLIT0_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_4_7_INQ_PRF_FLIT0_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_4_7_INQ_PRF_FLIT0_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 0 to match the VC fieldof the header flit to 0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_7_INQ_PRF_FLIT0_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_0_INQ_PRF_FLIT0_FILTERING_MASK'} = {
    NAME => 'AR_RTR_0_0_INQ_PRF_FLIT0_FILTERING_MASK',
    LABEL => 'AR_RTR_0_0_INQ_PRF_FLIT0_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_0_INQ_PRF_FLIT0_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_0_INQ_PRF_FLIT0_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_0_0_INQ_PRF_FLIT0_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_0_0_INQ_PRF_FLIT0_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_0_INQ_PRF_FLIT0_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_1_INQ_PRF_FLIT0_FILTERING_MASK'} = {
    NAME => 'AR_RTR_0_1_INQ_PRF_FLIT0_FILTERING_MASK',
    LABEL => 'AR_RTR_0_1_INQ_PRF_FLIT0_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_1_INQ_PRF_FLIT0_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_1_INQ_PRF_FLIT0_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_0_1_INQ_PRF_FLIT0_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_0_1_INQ_PRF_FLIT0_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_1_INQ_PRF_FLIT0_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_2_INQ_PRF_FLIT0_FILTERING_MASK'} = {
    NAME => 'AR_RTR_0_2_INQ_PRF_FLIT0_FILTERING_MASK',
    LABEL => 'AR_RTR_0_2_INQ_PRF_FLIT0_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_2_INQ_PRF_FLIT0_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_2_INQ_PRF_FLIT0_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_0_2_INQ_PRF_FLIT0_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_0_2_INQ_PRF_FLIT0_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_2_INQ_PRF_FLIT0_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_3_INQ_PRF_FLIT0_FILTERING_MASK'} = {
    NAME => 'AR_RTR_0_3_INQ_PRF_FLIT0_FILTERING_MASK',
    LABEL => 'AR_RTR_0_3_INQ_PRF_FLIT0_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_3_INQ_PRF_FLIT0_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_3_INQ_PRF_FLIT0_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_0_3_INQ_PRF_FLIT0_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_0_3_INQ_PRF_FLIT0_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_3_INQ_PRF_FLIT0_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_4_INQ_PRF_FLIT0_FILTERING_MASK'} = {
    NAME => 'AR_RTR_0_4_INQ_PRF_FLIT0_FILTERING_MASK',
    LABEL => 'AR_RTR_0_4_INQ_PRF_FLIT0_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_4_INQ_PRF_FLIT0_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_4_INQ_PRF_FLIT0_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_0_4_INQ_PRF_FLIT0_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_0_4_INQ_PRF_FLIT0_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_4_INQ_PRF_FLIT0_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_5_INQ_PRF_FLIT0_FILTERING_MASK'} = {
    NAME => 'AR_RTR_0_5_INQ_PRF_FLIT0_FILTERING_MASK',
    LABEL => 'AR_RTR_0_5_INQ_PRF_FLIT0_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_5_INQ_PRF_FLIT0_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_5_INQ_PRF_FLIT0_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_0_5_INQ_PRF_FLIT0_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_0_5_INQ_PRF_FLIT0_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_5_INQ_PRF_FLIT0_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_6_INQ_PRF_FLIT0_FILTERING_MASK'} = {
    NAME => 'AR_RTR_0_6_INQ_PRF_FLIT0_FILTERING_MASK',
    LABEL => 'AR_RTR_0_6_INQ_PRF_FLIT0_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_6_INQ_PRF_FLIT0_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_6_INQ_PRF_FLIT0_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_0_6_INQ_PRF_FLIT0_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_0_6_INQ_PRF_FLIT0_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_6_INQ_PRF_FLIT0_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_7_INQ_PRF_FLIT0_FILTERING_MASK'} = {
    NAME => 'AR_RTR_0_7_INQ_PRF_FLIT0_FILTERING_MASK',
    LABEL => 'AR_RTR_0_7_INQ_PRF_FLIT0_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_7_INQ_PRF_FLIT0_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_7_INQ_PRF_FLIT0_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_0_7_INQ_PRF_FLIT0_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_0_7_INQ_PRF_FLIT0_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_7_INQ_PRF_FLIT0_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_0_INQ_PRF_FLIT0_FILTERING_MASK'} = {
    NAME => 'AR_RTR_1_0_INQ_PRF_FLIT0_FILTERING_MASK',
    LABEL => 'AR_RTR_1_0_INQ_PRF_FLIT0_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_0_INQ_PRF_FLIT0_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_0_INQ_PRF_FLIT0_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_1_0_INQ_PRF_FLIT0_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_1_0_INQ_PRF_FLIT0_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_0_INQ_PRF_FLIT0_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_1_INQ_PRF_FLIT0_FILTERING_MASK'} = {
    NAME => 'AR_RTR_1_1_INQ_PRF_FLIT0_FILTERING_MASK',
    LABEL => 'AR_RTR_1_1_INQ_PRF_FLIT0_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_1_INQ_PRF_FLIT0_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_1_INQ_PRF_FLIT0_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_1_1_INQ_PRF_FLIT0_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_1_1_INQ_PRF_FLIT0_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_1_INQ_PRF_FLIT0_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_2_INQ_PRF_FLIT0_FILTERING_MASK'} = {
    NAME => 'AR_RTR_1_2_INQ_PRF_FLIT0_FILTERING_MASK',
    LABEL => 'AR_RTR_1_2_INQ_PRF_FLIT0_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_2_INQ_PRF_FLIT0_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_2_INQ_PRF_FLIT0_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_1_2_INQ_PRF_FLIT0_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_1_2_INQ_PRF_FLIT0_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_2_INQ_PRF_FLIT0_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_3_INQ_PRF_FLIT0_FILTERING_MASK'} = {
    NAME => 'AR_RTR_1_3_INQ_PRF_FLIT0_FILTERING_MASK',
    LABEL => 'AR_RTR_1_3_INQ_PRF_FLIT0_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_3_INQ_PRF_FLIT0_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_3_INQ_PRF_FLIT0_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_1_3_INQ_PRF_FLIT0_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_1_3_INQ_PRF_FLIT0_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_3_INQ_PRF_FLIT0_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_4_INQ_PRF_FLIT0_FILTERING_MASK'} = {
    NAME => 'AR_RTR_1_4_INQ_PRF_FLIT0_FILTERING_MASK',
    LABEL => 'AR_RTR_1_4_INQ_PRF_FLIT0_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_4_INQ_PRF_FLIT0_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_4_INQ_PRF_FLIT0_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_1_4_INQ_PRF_FLIT0_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_1_4_INQ_PRF_FLIT0_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_4_INQ_PRF_FLIT0_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_5_INQ_PRF_FLIT0_FILTERING_MASK'} = {
    NAME => 'AR_RTR_1_5_INQ_PRF_FLIT0_FILTERING_MASK',
    LABEL => 'AR_RTR_1_5_INQ_PRF_FLIT0_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_5_INQ_PRF_FLIT0_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_5_INQ_PRF_FLIT0_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_1_5_INQ_PRF_FLIT0_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_1_5_INQ_PRF_FLIT0_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_5_INQ_PRF_FLIT0_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_6_INQ_PRF_FLIT0_FILTERING_MASK'} = {
    NAME => 'AR_RTR_1_6_INQ_PRF_FLIT0_FILTERING_MASK',
    LABEL => 'AR_RTR_1_6_INQ_PRF_FLIT0_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_6_INQ_PRF_FLIT0_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_6_INQ_PRF_FLIT0_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_1_6_INQ_PRF_FLIT0_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_1_6_INQ_PRF_FLIT0_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_6_INQ_PRF_FLIT0_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_7_INQ_PRF_FLIT0_FILTERING_MASK'} = {
    NAME => 'AR_RTR_1_7_INQ_PRF_FLIT0_FILTERING_MASK',
    LABEL => 'AR_RTR_1_7_INQ_PRF_FLIT0_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_7_INQ_PRF_FLIT0_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_7_INQ_PRF_FLIT0_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_1_7_INQ_PRF_FLIT0_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_1_7_INQ_PRF_FLIT0_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_7_INQ_PRF_FLIT0_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_0_INQ_PRF_FLIT0_FILTERING_MASK'} = {
    NAME => 'AR_RTR_2_0_INQ_PRF_FLIT0_FILTERING_MASK',
    LABEL => 'AR_RTR_2_0_INQ_PRF_FLIT0_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_0_INQ_PRF_FLIT0_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_0_INQ_PRF_FLIT0_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_2_0_INQ_PRF_FLIT0_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_2_0_INQ_PRF_FLIT0_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_0_INQ_PRF_FLIT0_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_1_INQ_PRF_FLIT0_FILTERING_MASK'} = {
    NAME => 'AR_RTR_2_1_INQ_PRF_FLIT0_FILTERING_MASK',
    LABEL => 'AR_RTR_2_1_INQ_PRF_FLIT0_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_1_INQ_PRF_FLIT0_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_1_INQ_PRF_FLIT0_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_2_1_INQ_PRF_FLIT0_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_2_1_INQ_PRF_FLIT0_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_1_INQ_PRF_FLIT0_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_2_INQ_PRF_FLIT0_FILTERING_MASK'} = {
    NAME => 'AR_RTR_2_2_INQ_PRF_FLIT0_FILTERING_MASK',
    LABEL => 'AR_RTR_2_2_INQ_PRF_FLIT0_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_2_INQ_PRF_FLIT0_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_2_INQ_PRF_FLIT0_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_2_2_INQ_PRF_FLIT0_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_2_2_INQ_PRF_FLIT0_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_2_INQ_PRF_FLIT0_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_3_INQ_PRF_FLIT0_FILTERING_MASK'} = {
    NAME => 'AR_RTR_2_3_INQ_PRF_FLIT0_FILTERING_MASK',
    LABEL => 'AR_RTR_2_3_INQ_PRF_FLIT0_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_3_INQ_PRF_FLIT0_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_3_INQ_PRF_FLIT0_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_2_3_INQ_PRF_FLIT0_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_2_3_INQ_PRF_FLIT0_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_3_INQ_PRF_FLIT0_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_4_INQ_PRF_FLIT0_FILTERING_MASK'} = {
    NAME => 'AR_RTR_2_4_INQ_PRF_FLIT0_FILTERING_MASK',
    LABEL => 'AR_RTR_2_4_INQ_PRF_FLIT0_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_4_INQ_PRF_FLIT0_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_4_INQ_PRF_FLIT0_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_2_4_INQ_PRF_FLIT0_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_2_4_INQ_PRF_FLIT0_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_4_INQ_PRF_FLIT0_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_5_INQ_PRF_FLIT0_FILTERING_MASK'} = {
    NAME => 'AR_RTR_2_5_INQ_PRF_FLIT0_FILTERING_MASK',
    LABEL => 'AR_RTR_2_5_INQ_PRF_FLIT0_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_5_INQ_PRF_FLIT0_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_5_INQ_PRF_FLIT0_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_2_5_INQ_PRF_FLIT0_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_2_5_INQ_PRF_FLIT0_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_5_INQ_PRF_FLIT0_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_6_INQ_PRF_FLIT0_FILTERING_MASK'} = {
    NAME => 'AR_RTR_2_6_INQ_PRF_FLIT0_FILTERING_MASK',
    LABEL => 'AR_RTR_2_6_INQ_PRF_FLIT0_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_6_INQ_PRF_FLIT0_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_6_INQ_PRF_FLIT0_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_2_6_INQ_PRF_FLIT0_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_2_6_INQ_PRF_FLIT0_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_6_INQ_PRF_FLIT0_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_7_INQ_PRF_FLIT0_FILTERING_MASK'} = {
    NAME => 'AR_RTR_2_7_INQ_PRF_FLIT0_FILTERING_MASK',
    LABEL => 'AR_RTR_2_7_INQ_PRF_FLIT0_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_7_INQ_PRF_FLIT0_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_7_INQ_PRF_FLIT0_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_2_7_INQ_PRF_FLIT0_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_2_7_INQ_PRF_FLIT0_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_7_INQ_PRF_FLIT0_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_0_INQ_PRF_FLIT0_FILTERING_MASK'} = {
    NAME => 'AR_RTR_3_0_INQ_PRF_FLIT0_FILTERING_MASK',
    LABEL => 'AR_RTR_3_0_INQ_PRF_FLIT0_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_0_INQ_PRF_FLIT0_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_0_INQ_PRF_FLIT0_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_3_0_INQ_PRF_FLIT0_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_3_0_INQ_PRF_FLIT0_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_0_INQ_PRF_FLIT0_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_1_INQ_PRF_FLIT0_FILTERING_MASK'} = {
    NAME => 'AR_RTR_3_1_INQ_PRF_FLIT0_FILTERING_MASK',
    LABEL => 'AR_RTR_3_1_INQ_PRF_FLIT0_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_1_INQ_PRF_FLIT0_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_1_INQ_PRF_FLIT0_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_3_1_INQ_PRF_FLIT0_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_3_1_INQ_PRF_FLIT0_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_1_INQ_PRF_FLIT0_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_2_INQ_PRF_FLIT0_FILTERING_MASK'} = {
    NAME => 'AR_RTR_3_2_INQ_PRF_FLIT0_FILTERING_MASK',
    LABEL => 'AR_RTR_3_2_INQ_PRF_FLIT0_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_2_INQ_PRF_FLIT0_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_2_INQ_PRF_FLIT0_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_3_2_INQ_PRF_FLIT0_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_3_2_INQ_PRF_FLIT0_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_2_INQ_PRF_FLIT0_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_3_INQ_PRF_FLIT0_FILTERING_MASK'} = {
    NAME => 'AR_RTR_3_3_INQ_PRF_FLIT0_FILTERING_MASK',
    LABEL => 'AR_RTR_3_3_INQ_PRF_FLIT0_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_3_INQ_PRF_FLIT0_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_3_INQ_PRF_FLIT0_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_3_3_INQ_PRF_FLIT0_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_3_3_INQ_PRF_FLIT0_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_3_INQ_PRF_FLIT0_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_4_INQ_PRF_FLIT0_FILTERING_MASK'} = {
    NAME => 'AR_RTR_3_4_INQ_PRF_FLIT0_FILTERING_MASK',
    LABEL => 'AR_RTR_3_4_INQ_PRF_FLIT0_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_4_INQ_PRF_FLIT0_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_4_INQ_PRF_FLIT0_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_3_4_INQ_PRF_FLIT0_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_3_4_INQ_PRF_FLIT0_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_4_INQ_PRF_FLIT0_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_5_INQ_PRF_FLIT0_FILTERING_MASK'} = {
    NAME => 'AR_RTR_3_5_INQ_PRF_FLIT0_FILTERING_MASK',
    LABEL => 'AR_RTR_3_5_INQ_PRF_FLIT0_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_5_INQ_PRF_FLIT0_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_5_INQ_PRF_FLIT0_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_3_5_INQ_PRF_FLIT0_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_3_5_INQ_PRF_FLIT0_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_5_INQ_PRF_FLIT0_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_6_INQ_PRF_FLIT0_FILTERING_MASK'} = {
    NAME => 'AR_RTR_3_6_INQ_PRF_FLIT0_FILTERING_MASK',
    LABEL => 'AR_RTR_3_6_INQ_PRF_FLIT0_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_6_INQ_PRF_FLIT0_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_6_INQ_PRF_FLIT0_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_3_6_INQ_PRF_FLIT0_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_3_6_INQ_PRF_FLIT0_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_6_INQ_PRF_FLIT0_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_7_INQ_PRF_FLIT0_FILTERING_MASK'} = {
    NAME => 'AR_RTR_3_7_INQ_PRF_FLIT0_FILTERING_MASK',
    LABEL => 'AR_RTR_3_7_INQ_PRF_FLIT0_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_7_INQ_PRF_FLIT0_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_7_INQ_PRF_FLIT0_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_3_7_INQ_PRF_FLIT0_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_3_7_INQ_PRF_FLIT0_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_7_INQ_PRF_FLIT0_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_0_INQ_PRF_FLIT0_FILTERING_MASK'} = {
    NAME => 'AR_RTR_4_0_INQ_PRF_FLIT0_FILTERING_MASK',
    LABEL => 'AR_RTR_4_0_INQ_PRF_FLIT0_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_0_INQ_PRF_FLIT0_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_0_INQ_PRF_FLIT0_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_4_0_INQ_PRF_FLIT0_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_4_0_INQ_PRF_FLIT0_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_0_INQ_PRF_FLIT0_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_1_INQ_PRF_FLIT0_FILTERING_MASK'} = {
    NAME => 'AR_RTR_4_1_INQ_PRF_FLIT0_FILTERING_MASK',
    LABEL => 'AR_RTR_4_1_INQ_PRF_FLIT0_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_1_INQ_PRF_FLIT0_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_1_INQ_PRF_FLIT0_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_4_1_INQ_PRF_FLIT0_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_4_1_INQ_PRF_FLIT0_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_1_INQ_PRF_FLIT0_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_2_INQ_PRF_FLIT0_FILTERING_MASK'} = {
    NAME => 'AR_RTR_4_2_INQ_PRF_FLIT0_FILTERING_MASK',
    LABEL => 'AR_RTR_4_2_INQ_PRF_FLIT0_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_2_INQ_PRF_FLIT0_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_2_INQ_PRF_FLIT0_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_4_2_INQ_PRF_FLIT0_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_4_2_INQ_PRF_FLIT0_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_2_INQ_PRF_FLIT0_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_3_INQ_PRF_FLIT0_FILTERING_MASK'} = {
    NAME => 'AR_RTR_4_3_INQ_PRF_FLIT0_FILTERING_MASK',
    LABEL => 'AR_RTR_4_3_INQ_PRF_FLIT0_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_3_INQ_PRF_FLIT0_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_3_INQ_PRF_FLIT0_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_4_3_INQ_PRF_FLIT0_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_4_3_INQ_PRF_FLIT0_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_3_INQ_PRF_FLIT0_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_4_INQ_PRF_FLIT0_FILTERING_MASK'} = {
    NAME => 'AR_RTR_4_4_INQ_PRF_FLIT0_FILTERING_MASK',
    LABEL => 'AR_RTR_4_4_INQ_PRF_FLIT0_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_4_INQ_PRF_FLIT0_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_4_INQ_PRF_FLIT0_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_4_4_INQ_PRF_FLIT0_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_4_4_INQ_PRF_FLIT0_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_4_INQ_PRF_FLIT0_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_5_INQ_PRF_FLIT0_FILTERING_MASK'} = {
    NAME => 'AR_RTR_4_5_INQ_PRF_FLIT0_FILTERING_MASK',
    LABEL => 'AR_RTR_4_5_INQ_PRF_FLIT0_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_5_INQ_PRF_FLIT0_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_5_INQ_PRF_FLIT0_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_4_5_INQ_PRF_FLIT0_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_4_5_INQ_PRF_FLIT0_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_5_INQ_PRF_FLIT0_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_6_INQ_PRF_FLIT0_FILTERING_MASK'} = {
    NAME => 'AR_RTR_4_6_INQ_PRF_FLIT0_FILTERING_MASK',
    LABEL => 'AR_RTR_4_6_INQ_PRF_FLIT0_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_6_INQ_PRF_FLIT0_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_6_INQ_PRF_FLIT0_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_4_6_INQ_PRF_FLIT0_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_4_6_INQ_PRF_FLIT0_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_6_INQ_PRF_FLIT0_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_7_INQ_PRF_FLIT0_FILTERING_MASK'} = {
    NAME => 'AR_RTR_4_7_INQ_PRF_FLIT0_FILTERING_MASK',
    LABEL => 'AR_RTR_4_7_INQ_PRF_FLIT0_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_7_INQ_PRF_FLIT0_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_7_INQ_PRF_FLIT0_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_4_7_INQ_PRF_FLIT0_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_4_7_INQ_PRF_FLIT0_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_7_INQ_PRF_FLIT0_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_0_INQ_PRF_FLIT1_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_0_0_INQ_PRF_FLIT1_FILTERING_SETUP',
    LABEL => 'AR_RTR_0_0_INQ_PRF_FLIT1_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_0_INQ_PRF_FLIT1_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_0_INQ_PRF_FLIT1_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_0_0_INQ_PRF_FLIT1_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_0_0_INQ_PRF_FLIT1_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC1_FILTER_FLIT1_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_0_INQ_PRF_FLIT1_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_0_INQ_PRF_FLIT1_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_0_0_INQ_PRF_FLIT1_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_0_0_INQ_PRF_FLIT1_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC1 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_0_INQ_PRF_FLIT1_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_0_INQ_PRF_FLIT1_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_0_0_INQ_PRF_FLIT1_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_0_0_INQ_PRF_FLIT1_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 1 to match the VC fieldof the header flit to 1',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_0_INQ_PRF_FLIT1_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_1_INQ_PRF_FLIT1_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_0_1_INQ_PRF_FLIT1_FILTERING_SETUP',
    LABEL => 'AR_RTR_0_1_INQ_PRF_FLIT1_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_1_INQ_PRF_FLIT1_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_1_INQ_PRF_FLIT1_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_0_1_INQ_PRF_FLIT1_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_0_1_INQ_PRF_FLIT1_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC1_FILTER_FLIT1_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_1_INQ_PRF_FLIT1_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_1_INQ_PRF_FLIT1_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_0_1_INQ_PRF_FLIT1_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_0_1_INQ_PRF_FLIT1_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC1 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_1_INQ_PRF_FLIT1_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_1_INQ_PRF_FLIT1_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_0_1_INQ_PRF_FLIT1_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_0_1_INQ_PRF_FLIT1_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 1 to match the VC fieldof the header flit to 1',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_1_INQ_PRF_FLIT1_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_2_INQ_PRF_FLIT1_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_0_2_INQ_PRF_FLIT1_FILTERING_SETUP',
    LABEL => 'AR_RTR_0_2_INQ_PRF_FLIT1_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_2_INQ_PRF_FLIT1_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_2_INQ_PRF_FLIT1_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_0_2_INQ_PRF_FLIT1_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_0_2_INQ_PRF_FLIT1_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC1_FILTER_FLIT1_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_2_INQ_PRF_FLIT1_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_2_INQ_PRF_FLIT1_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_0_2_INQ_PRF_FLIT1_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_0_2_INQ_PRF_FLIT1_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC1 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_2_INQ_PRF_FLIT1_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_2_INQ_PRF_FLIT1_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_0_2_INQ_PRF_FLIT1_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_0_2_INQ_PRF_FLIT1_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 1 to match the VC fieldof the header flit to 1',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_2_INQ_PRF_FLIT1_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_3_INQ_PRF_FLIT1_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_0_3_INQ_PRF_FLIT1_FILTERING_SETUP',
    LABEL => 'AR_RTR_0_3_INQ_PRF_FLIT1_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_3_INQ_PRF_FLIT1_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_3_INQ_PRF_FLIT1_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_0_3_INQ_PRF_FLIT1_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_0_3_INQ_PRF_FLIT1_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC1_FILTER_FLIT1_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_3_INQ_PRF_FLIT1_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_3_INQ_PRF_FLIT1_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_0_3_INQ_PRF_FLIT1_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_0_3_INQ_PRF_FLIT1_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC1 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_3_INQ_PRF_FLIT1_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_3_INQ_PRF_FLIT1_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_0_3_INQ_PRF_FLIT1_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_0_3_INQ_PRF_FLIT1_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 1 to match the VC fieldof the header flit to 1',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_3_INQ_PRF_FLIT1_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_4_INQ_PRF_FLIT1_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_0_4_INQ_PRF_FLIT1_FILTERING_SETUP',
    LABEL => 'AR_RTR_0_4_INQ_PRF_FLIT1_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_4_INQ_PRF_FLIT1_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_4_INQ_PRF_FLIT1_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_0_4_INQ_PRF_FLIT1_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_0_4_INQ_PRF_FLIT1_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC1_FILTER_FLIT1_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_4_INQ_PRF_FLIT1_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_4_INQ_PRF_FLIT1_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_0_4_INQ_PRF_FLIT1_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_0_4_INQ_PRF_FLIT1_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC1 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_4_INQ_PRF_FLIT1_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_4_INQ_PRF_FLIT1_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_0_4_INQ_PRF_FLIT1_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_0_4_INQ_PRF_FLIT1_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 1 to match the VC fieldof the header flit to 1',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_4_INQ_PRF_FLIT1_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_5_INQ_PRF_FLIT1_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_0_5_INQ_PRF_FLIT1_FILTERING_SETUP',
    LABEL => 'AR_RTR_0_5_INQ_PRF_FLIT1_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_5_INQ_PRF_FLIT1_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_5_INQ_PRF_FLIT1_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_0_5_INQ_PRF_FLIT1_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_0_5_INQ_PRF_FLIT1_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC1_FILTER_FLIT1_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_5_INQ_PRF_FLIT1_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_5_INQ_PRF_FLIT1_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_0_5_INQ_PRF_FLIT1_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_0_5_INQ_PRF_FLIT1_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC1 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_5_INQ_PRF_FLIT1_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_5_INQ_PRF_FLIT1_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_0_5_INQ_PRF_FLIT1_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_0_5_INQ_PRF_FLIT1_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 1 to match the VC fieldof the header flit to 1',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_5_INQ_PRF_FLIT1_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_6_INQ_PRF_FLIT1_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_0_6_INQ_PRF_FLIT1_FILTERING_SETUP',
    LABEL => 'AR_RTR_0_6_INQ_PRF_FLIT1_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_6_INQ_PRF_FLIT1_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_6_INQ_PRF_FLIT1_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_0_6_INQ_PRF_FLIT1_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_0_6_INQ_PRF_FLIT1_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC1_FILTER_FLIT1_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_6_INQ_PRF_FLIT1_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_6_INQ_PRF_FLIT1_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_0_6_INQ_PRF_FLIT1_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_0_6_INQ_PRF_FLIT1_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC1 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_6_INQ_PRF_FLIT1_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_6_INQ_PRF_FLIT1_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_0_6_INQ_PRF_FLIT1_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_0_6_INQ_PRF_FLIT1_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 1 to match the VC fieldof the header flit to 1',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_6_INQ_PRF_FLIT1_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_7_INQ_PRF_FLIT1_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_0_7_INQ_PRF_FLIT1_FILTERING_SETUP',
    LABEL => 'AR_RTR_0_7_INQ_PRF_FLIT1_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_7_INQ_PRF_FLIT1_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_7_INQ_PRF_FLIT1_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_0_7_INQ_PRF_FLIT1_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_0_7_INQ_PRF_FLIT1_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC1_FILTER_FLIT1_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_7_INQ_PRF_FLIT1_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_7_INQ_PRF_FLIT1_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_0_7_INQ_PRF_FLIT1_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_0_7_INQ_PRF_FLIT1_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC1 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_7_INQ_PRF_FLIT1_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_7_INQ_PRF_FLIT1_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_0_7_INQ_PRF_FLIT1_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_0_7_INQ_PRF_FLIT1_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 1 to match the VC fieldof the header flit to 1',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_7_INQ_PRF_FLIT1_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_0_INQ_PRF_FLIT1_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_1_0_INQ_PRF_FLIT1_FILTERING_SETUP',
    LABEL => 'AR_RTR_1_0_INQ_PRF_FLIT1_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_0_INQ_PRF_FLIT1_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_0_INQ_PRF_FLIT1_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_1_0_INQ_PRF_FLIT1_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_1_0_INQ_PRF_FLIT1_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC1_FILTER_FLIT1_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_0_INQ_PRF_FLIT1_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_0_INQ_PRF_FLIT1_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_1_0_INQ_PRF_FLIT1_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_1_0_INQ_PRF_FLIT1_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC1 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_0_INQ_PRF_FLIT1_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_0_INQ_PRF_FLIT1_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_1_0_INQ_PRF_FLIT1_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_1_0_INQ_PRF_FLIT1_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 1 to match the VC fieldof the header flit to 1',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_0_INQ_PRF_FLIT1_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_1_INQ_PRF_FLIT1_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_1_1_INQ_PRF_FLIT1_FILTERING_SETUP',
    LABEL => 'AR_RTR_1_1_INQ_PRF_FLIT1_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_1_INQ_PRF_FLIT1_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_1_INQ_PRF_FLIT1_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_1_1_INQ_PRF_FLIT1_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_1_1_INQ_PRF_FLIT1_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC1_FILTER_FLIT1_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_1_INQ_PRF_FLIT1_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_1_INQ_PRF_FLIT1_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_1_1_INQ_PRF_FLIT1_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_1_1_INQ_PRF_FLIT1_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC1 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_1_INQ_PRF_FLIT1_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_1_INQ_PRF_FLIT1_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_1_1_INQ_PRF_FLIT1_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_1_1_INQ_PRF_FLIT1_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 1 to match the VC fieldof the header flit to 1',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_1_INQ_PRF_FLIT1_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_2_INQ_PRF_FLIT1_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_1_2_INQ_PRF_FLIT1_FILTERING_SETUP',
    LABEL => 'AR_RTR_1_2_INQ_PRF_FLIT1_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_2_INQ_PRF_FLIT1_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_2_INQ_PRF_FLIT1_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_1_2_INQ_PRF_FLIT1_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_1_2_INQ_PRF_FLIT1_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC1_FILTER_FLIT1_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_2_INQ_PRF_FLIT1_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_2_INQ_PRF_FLIT1_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_1_2_INQ_PRF_FLIT1_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_1_2_INQ_PRF_FLIT1_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC1 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_2_INQ_PRF_FLIT1_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_2_INQ_PRF_FLIT1_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_1_2_INQ_PRF_FLIT1_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_1_2_INQ_PRF_FLIT1_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 1 to match the VC fieldof the header flit to 1',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_2_INQ_PRF_FLIT1_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_3_INQ_PRF_FLIT1_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_1_3_INQ_PRF_FLIT1_FILTERING_SETUP',
    LABEL => 'AR_RTR_1_3_INQ_PRF_FLIT1_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_3_INQ_PRF_FLIT1_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_3_INQ_PRF_FLIT1_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_1_3_INQ_PRF_FLIT1_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_1_3_INQ_PRF_FLIT1_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC1_FILTER_FLIT1_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_3_INQ_PRF_FLIT1_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_3_INQ_PRF_FLIT1_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_1_3_INQ_PRF_FLIT1_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_1_3_INQ_PRF_FLIT1_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC1 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_3_INQ_PRF_FLIT1_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_3_INQ_PRF_FLIT1_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_1_3_INQ_PRF_FLIT1_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_1_3_INQ_PRF_FLIT1_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 1 to match the VC fieldof the header flit to 1',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_3_INQ_PRF_FLIT1_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_4_INQ_PRF_FLIT1_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_1_4_INQ_PRF_FLIT1_FILTERING_SETUP',
    LABEL => 'AR_RTR_1_4_INQ_PRF_FLIT1_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_4_INQ_PRF_FLIT1_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_4_INQ_PRF_FLIT1_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_1_4_INQ_PRF_FLIT1_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_1_4_INQ_PRF_FLIT1_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC1_FILTER_FLIT1_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_4_INQ_PRF_FLIT1_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_4_INQ_PRF_FLIT1_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_1_4_INQ_PRF_FLIT1_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_1_4_INQ_PRF_FLIT1_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC1 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_4_INQ_PRF_FLIT1_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_4_INQ_PRF_FLIT1_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_1_4_INQ_PRF_FLIT1_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_1_4_INQ_PRF_FLIT1_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 1 to match the VC fieldof the header flit to 1',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_4_INQ_PRF_FLIT1_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_5_INQ_PRF_FLIT1_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_1_5_INQ_PRF_FLIT1_FILTERING_SETUP',
    LABEL => 'AR_RTR_1_5_INQ_PRF_FLIT1_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_5_INQ_PRF_FLIT1_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_5_INQ_PRF_FLIT1_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_1_5_INQ_PRF_FLIT1_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_1_5_INQ_PRF_FLIT1_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC1_FILTER_FLIT1_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_5_INQ_PRF_FLIT1_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_5_INQ_PRF_FLIT1_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_1_5_INQ_PRF_FLIT1_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_1_5_INQ_PRF_FLIT1_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC1 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_5_INQ_PRF_FLIT1_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_5_INQ_PRF_FLIT1_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_1_5_INQ_PRF_FLIT1_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_1_5_INQ_PRF_FLIT1_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 1 to match the VC fieldof the header flit to 1',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_5_INQ_PRF_FLIT1_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_6_INQ_PRF_FLIT1_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_1_6_INQ_PRF_FLIT1_FILTERING_SETUP',
    LABEL => 'AR_RTR_1_6_INQ_PRF_FLIT1_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_6_INQ_PRF_FLIT1_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_6_INQ_PRF_FLIT1_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_1_6_INQ_PRF_FLIT1_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_1_6_INQ_PRF_FLIT1_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC1_FILTER_FLIT1_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_6_INQ_PRF_FLIT1_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_6_INQ_PRF_FLIT1_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_1_6_INQ_PRF_FLIT1_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_1_6_INQ_PRF_FLIT1_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC1 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_6_INQ_PRF_FLIT1_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_6_INQ_PRF_FLIT1_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_1_6_INQ_PRF_FLIT1_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_1_6_INQ_PRF_FLIT1_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 1 to match the VC fieldof the header flit to 1',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_6_INQ_PRF_FLIT1_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_7_INQ_PRF_FLIT1_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_1_7_INQ_PRF_FLIT1_FILTERING_SETUP',
    LABEL => 'AR_RTR_1_7_INQ_PRF_FLIT1_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_7_INQ_PRF_FLIT1_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_7_INQ_PRF_FLIT1_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_1_7_INQ_PRF_FLIT1_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_1_7_INQ_PRF_FLIT1_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC1_FILTER_FLIT1_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_7_INQ_PRF_FLIT1_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_7_INQ_PRF_FLIT1_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_1_7_INQ_PRF_FLIT1_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_1_7_INQ_PRF_FLIT1_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC1 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_7_INQ_PRF_FLIT1_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_7_INQ_PRF_FLIT1_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_1_7_INQ_PRF_FLIT1_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_1_7_INQ_PRF_FLIT1_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 1 to match the VC fieldof the header flit to 1',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_7_INQ_PRF_FLIT1_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_0_INQ_PRF_FLIT1_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_2_0_INQ_PRF_FLIT1_FILTERING_SETUP',
    LABEL => 'AR_RTR_2_0_INQ_PRF_FLIT1_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_0_INQ_PRF_FLIT1_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_0_INQ_PRF_FLIT1_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_2_0_INQ_PRF_FLIT1_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_2_0_INQ_PRF_FLIT1_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC1_FILTER_FLIT1_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_0_INQ_PRF_FLIT1_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_0_INQ_PRF_FLIT1_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_2_0_INQ_PRF_FLIT1_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_2_0_INQ_PRF_FLIT1_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC1 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_0_INQ_PRF_FLIT1_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_0_INQ_PRF_FLIT1_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_2_0_INQ_PRF_FLIT1_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_2_0_INQ_PRF_FLIT1_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 1 to match the VC fieldof the header flit to 1',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_0_INQ_PRF_FLIT1_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_1_INQ_PRF_FLIT1_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_2_1_INQ_PRF_FLIT1_FILTERING_SETUP',
    LABEL => 'AR_RTR_2_1_INQ_PRF_FLIT1_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_1_INQ_PRF_FLIT1_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_1_INQ_PRF_FLIT1_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_2_1_INQ_PRF_FLIT1_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_2_1_INQ_PRF_FLIT1_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC1_FILTER_FLIT1_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_1_INQ_PRF_FLIT1_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_1_INQ_PRF_FLIT1_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_2_1_INQ_PRF_FLIT1_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_2_1_INQ_PRF_FLIT1_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC1 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_1_INQ_PRF_FLIT1_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_1_INQ_PRF_FLIT1_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_2_1_INQ_PRF_FLIT1_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_2_1_INQ_PRF_FLIT1_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 1 to match the VC fieldof the header flit to 1',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_1_INQ_PRF_FLIT1_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_2_INQ_PRF_FLIT1_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_2_2_INQ_PRF_FLIT1_FILTERING_SETUP',
    LABEL => 'AR_RTR_2_2_INQ_PRF_FLIT1_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_2_INQ_PRF_FLIT1_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_2_INQ_PRF_FLIT1_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_2_2_INQ_PRF_FLIT1_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_2_2_INQ_PRF_FLIT1_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC1_FILTER_FLIT1_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_2_INQ_PRF_FLIT1_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_2_INQ_PRF_FLIT1_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_2_2_INQ_PRF_FLIT1_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_2_2_INQ_PRF_FLIT1_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC1 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_2_INQ_PRF_FLIT1_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_2_INQ_PRF_FLIT1_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_2_2_INQ_PRF_FLIT1_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_2_2_INQ_PRF_FLIT1_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 1 to match the VC fieldof the header flit to 1',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_2_INQ_PRF_FLIT1_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_3_INQ_PRF_FLIT1_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_2_3_INQ_PRF_FLIT1_FILTERING_SETUP',
    LABEL => 'AR_RTR_2_3_INQ_PRF_FLIT1_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_3_INQ_PRF_FLIT1_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_3_INQ_PRF_FLIT1_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_2_3_INQ_PRF_FLIT1_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_2_3_INQ_PRF_FLIT1_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC1_FILTER_FLIT1_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_3_INQ_PRF_FLIT1_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_3_INQ_PRF_FLIT1_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_2_3_INQ_PRF_FLIT1_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_2_3_INQ_PRF_FLIT1_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC1 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_3_INQ_PRF_FLIT1_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_3_INQ_PRF_FLIT1_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_2_3_INQ_PRF_FLIT1_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_2_3_INQ_PRF_FLIT1_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 1 to match the VC fieldof the header flit to 1',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_3_INQ_PRF_FLIT1_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_4_INQ_PRF_FLIT1_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_2_4_INQ_PRF_FLIT1_FILTERING_SETUP',
    LABEL => 'AR_RTR_2_4_INQ_PRF_FLIT1_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_4_INQ_PRF_FLIT1_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_4_INQ_PRF_FLIT1_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_2_4_INQ_PRF_FLIT1_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_2_4_INQ_PRF_FLIT1_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC1_FILTER_FLIT1_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_4_INQ_PRF_FLIT1_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_4_INQ_PRF_FLIT1_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_2_4_INQ_PRF_FLIT1_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_2_4_INQ_PRF_FLIT1_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC1 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_4_INQ_PRF_FLIT1_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_4_INQ_PRF_FLIT1_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_2_4_INQ_PRF_FLIT1_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_2_4_INQ_PRF_FLIT1_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 1 to match the VC fieldof the header flit to 1',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_4_INQ_PRF_FLIT1_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_5_INQ_PRF_FLIT1_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_2_5_INQ_PRF_FLIT1_FILTERING_SETUP',
    LABEL => 'AR_RTR_2_5_INQ_PRF_FLIT1_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_5_INQ_PRF_FLIT1_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_5_INQ_PRF_FLIT1_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_2_5_INQ_PRF_FLIT1_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_2_5_INQ_PRF_FLIT1_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC1_FILTER_FLIT1_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_5_INQ_PRF_FLIT1_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_5_INQ_PRF_FLIT1_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_2_5_INQ_PRF_FLIT1_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_2_5_INQ_PRF_FLIT1_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC1 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_5_INQ_PRF_FLIT1_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_5_INQ_PRF_FLIT1_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_2_5_INQ_PRF_FLIT1_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_2_5_INQ_PRF_FLIT1_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 1 to match the VC fieldof the header flit to 1',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_5_INQ_PRF_FLIT1_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_6_INQ_PRF_FLIT1_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_2_6_INQ_PRF_FLIT1_FILTERING_SETUP',
    LABEL => 'AR_RTR_2_6_INQ_PRF_FLIT1_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_6_INQ_PRF_FLIT1_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_6_INQ_PRF_FLIT1_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_2_6_INQ_PRF_FLIT1_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_2_6_INQ_PRF_FLIT1_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC1_FILTER_FLIT1_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_6_INQ_PRF_FLIT1_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_6_INQ_PRF_FLIT1_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_2_6_INQ_PRF_FLIT1_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_2_6_INQ_PRF_FLIT1_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC1 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_6_INQ_PRF_FLIT1_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_6_INQ_PRF_FLIT1_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_2_6_INQ_PRF_FLIT1_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_2_6_INQ_PRF_FLIT1_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 1 to match the VC fieldof the header flit to 1',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_6_INQ_PRF_FLIT1_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_7_INQ_PRF_FLIT1_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_2_7_INQ_PRF_FLIT1_FILTERING_SETUP',
    LABEL => 'AR_RTR_2_7_INQ_PRF_FLIT1_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_7_INQ_PRF_FLIT1_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_7_INQ_PRF_FLIT1_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_2_7_INQ_PRF_FLIT1_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_2_7_INQ_PRF_FLIT1_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC1_FILTER_FLIT1_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_7_INQ_PRF_FLIT1_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_7_INQ_PRF_FLIT1_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_2_7_INQ_PRF_FLIT1_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_2_7_INQ_PRF_FLIT1_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC1 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_7_INQ_PRF_FLIT1_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_7_INQ_PRF_FLIT1_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_2_7_INQ_PRF_FLIT1_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_2_7_INQ_PRF_FLIT1_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 1 to match the VC fieldof the header flit to 1',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_7_INQ_PRF_FLIT1_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_0_INQ_PRF_FLIT1_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_3_0_INQ_PRF_FLIT1_FILTERING_SETUP',
    LABEL => 'AR_RTR_3_0_INQ_PRF_FLIT1_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_0_INQ_PRF_FLIT1_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_0_INQ_PRF_FLIT1_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_3_0_INQ_PRF_FLIT1_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_3_0_INQ_PRF_FLIT1_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC1_FILTER_FLIT1_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_0_INQ_PRF_FLIT1_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_0_INQ_PRF_FLIT1_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_3_0_INQ_PRF_FLIT1_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_3_0_INQ_PRF_FLIT1_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC1 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_0_INQ_PRF_FLIT1_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_0_INQ_PRF_FLIT1_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_3_0_INQ_PRF_FLIT1_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_3_0_INQ_PRF_FLIT1_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 1 to match the VC fieldof the header flit to 1',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_0_INQ_PRF_FLIT1_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_1_INQ_PRF_FLIT1_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_3_1_INQ_PRF_FLIT1_FILTERING_SETUP',
    LABEL => 'AR_RTR_3_1_INQ_PRF_FLIT1_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_1_INQ_PRF_FLIT1_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_1_INQ_PRF_FLIT1_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_3_1_INQ_PRF_FLIT1_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_3_1_INQ_PRF_FLIT1_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC1_FILTER_FLIT1_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_1_INQ_PRF_FLIT1_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_1_INQ_PRF_FLIT1_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_3_1_INQ_PRF_FLIT1_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_3_1_INQ_PRF_FLIT1_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC1 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_1_INQ_PRF_FLIT1_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_1_INQ_PRF_FLIT1_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_3_1_INQ_PRF_FLIT1_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_3_1_INQ_PRF_FLIT1_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 1 to match the VC fieldof the header flit to 1',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_1_INQ_PRF_FLIT1_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_2_INQ_PRF_FLIT1_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_3_2_INQ_PRF_FLIT1_FILTERING_SETUP',
    LABEL => 'AR_RTR_3_2_INQ_PRF_FLIT1_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_2_INQ_PRF_FLIT1_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_2_INQ_PRF_FLIT1_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_3_2_INQ_PRF_FLIT1_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_3_2_INQ_PRF_FLIT1_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC1_FILTER_FLIT1_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_2_INQ_PRF_FLIT1_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_2_INQ_PRF_FLIT1_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_3_2_INQ_PRF_FLIT1_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_3_2_INQ_PRF_FLIT1_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC1 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_2_INQ_PRF_FLIT1_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_2_INQ_PRF_FLIT1_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_3_2_INQ_PRF_FLIT1_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_3_2_INQ_PRF_FLIT1_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 1 to match the VC fieldof the header flit to 1',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_2_INQ_PRF_FLIT1_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_3_INQ_PRF_FLIT1_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_3_3_INQ_PRF_FLIT1_FILTERING_SETUP',
    LABEL => 'AR_RTR_3_3_INQ_PRF_FLIT1_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_3_INQ_PRF_FLIT1_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_3_INQ_PRF_FLIT1_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_3_3_INQ_PRF_FLIT1_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_3_3_INQ_PRF_FLIT1_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC1_FILTER_FLIT1_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_3_INQ_PRF_FLIT1_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_3_INQ_PRF_FLIT1_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_3_3_INQ_PRF_FLIT1_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_3_3_INQ_PRF_FLIT1_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC1 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_3_INQ_PRF_FLIT1_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_3_INQ_PRF_FLIT1_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_3_3_INQ_PRF_FLIT1_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_3_3_INQ_PRF_FLIT1_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 1 to match the VC fieldof the header flit to 1',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_3_INQ_PRF_FLIT1_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_4_INQ_PRF_FLIT1_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_3_4_INQ_PRF_FLIT1_FILTERING_SETUP',
    LABEL => 'AR_RTR_3_4_INQ_PRF_FLIT1_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_4_INQ_PRF_FLIT1_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_4_INQ_PRF_FLIT1_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_3_4_INQ_PRF_FLIT1_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_3_4_INQ_PRF_FLIT1_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC1_FILTER_FLIT1_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_4_INQ_PRF_FLIT1_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_4_INQ_PRF_FLIT1_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_3_4_INQ_PRF_FLIT1_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_3_4_INQ_PRF_FLIT1_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC1 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_4_INQ_PRF_FLIT1_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_4_INQ_PRF_FLIT1_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_3_4_INQ_PRF_FLIT1_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_3_4_INQ_PRF_FLIT1_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 1 to match the VC fieldof the header flit to 1',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_4_INQ_PRF_FLIT1_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_5_INQ_PRF_FLIT1_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_3_5_INQ_PRF_FLIT1_FILTERING_SETUP',
    LABEL => 'AR_RTR_3_5_INQ_PRF_FLIT1_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_5_INQ_PRF_FLIT1_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_5_INQ_PRF_FLIT1_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_3_5_INQ_PRF_FLIT1_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_3_5_INQ_PRF_FLIT1_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC1_FILTER_FLIT1_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_5_INQ_PRF_FLIT1_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_5_INQ_PRF_FLIT1_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_3_5_INQ_PRF_FLIT1_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_3_5_INQ_PRF_FLIT1_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC1 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_5_INQ_PRF_FLIT1_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_5_INQ_PRF_FLIT1_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_3_5_INQ_PRF_FLIT1_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_3_5_INQ_PRF_FLIT1_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 1 to match the VC fieldof the header flit to 1',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_5_INQ_PRF_FLIT1_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_6_INQ_PRF_FLIT1_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_3_6_INQ_PRF_FLIT1_FILTERING_SETUP',
    LABEL => 'AR_RTR_3_6_INQ_PRF_FLIT1_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_6_INQ_PRF_FLIT1_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_6_INQ_PRF_FLIT1_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_3_6_INQ_PRF_FLIT1_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_3_6_INQ_PRF_FLIT1_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC1_FILTER_FLIT1_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_6_INQ_PRF_FLIT1_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_6_INQ_PRF_FLIT1_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_3_6_INQ_PRF_FLIT1_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_3_6_INQ_PRF_FLIT1_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC1 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_6_INQ_PRF_FLIT1_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_6_INQ_PRF_FLIT1_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_3_6_INQ_PRF_FLIT1_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_3_6_INQ_PRF_FLIT1_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 1 to match the VC fieldof the header flit to 1',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_6_INQ_PRF_FLIT1_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_7_INQ_PRF_FLIT1_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_3_7_INQ_PRF_FLIT1_FILTERING_SETUP',
    LABEL => 'AR_RTR_3_7_INQ_PRF_FLIT1_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_7_INQ_PRF_FLIT1_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_7_INQ_PRF_FLIT1_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_3_7_INQ_PRF_FLIT1_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_3_7_INQ_PRF_FLIT1_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC1_FILTER_FLIT1_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_7_INQ_PRF_FLIT1_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_7_INQ_PRF_FLIT1_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_3_7_INQ_PRF_FLIT1_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_3_7_INQ_PRF_FLIT1_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC1 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_7_INQ_PRF_FLIT1_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_7_INQ_PRF_FLIT1_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_3_7_INQ_PRF_FLIT1_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_3_7_INQ_PRF_FLIT1_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 1 to match the VC fieldof the header flit to 1',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_7_INQ_PRF_FLIT1_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_0_INQ_PRF_FLIT1_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_4_0_INQ_PRF_FLIT1_FILTERING_SETUP',
    LABEL => 'AR_RTR_4_0_INQ_PRF_FLIT1_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_0_INQ_PRF_FLIT1_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_0_INQ_PRF_FLIT1_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_4_0_INQ_PRF_FLIT1_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_4_0_INQ_PRF_FLIT1_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC1_FILTER_FLIT1_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_0_INQ_PRF_FLIT1_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_0_INQ_PRF_FLIT1_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_4_0_INQ_PRF_FLIT1_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_4_0_INQ_PRF_FLIT1_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC1 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_0_INQ_PRF_FLIT1_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_0_INQ_PRF_FLIT1_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_4_0_INQ_PRF_FLIT1_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_4_0_INQ_PRF_FLIT1_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 1 to match the VC fieldof the header flit to 1',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_0_INQ_PRF_FLIT1_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_1_INQ_PRF_FLIT1_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_4_1_INQ_PRF_FLIT1_FILTERING_SETUP',
    LABEL => 'AR_RTR_4_1_INQ_PRF_FLIT1_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_1_INQ_PRF_FLIT1_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_1_INQ_PRF_FLIT1_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_4_1_INQ_PRF_FLIT1_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_4_1_INQ_PRF_FLIT1_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC1_FILTER_FLIT1_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_1_INQ_PRF_FLIT1_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_1_INQ_PRF_FLIT1_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_4_1_INQ_PRF_FLIT1_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_4_1_INQ_PRF_FLIT1_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC1 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_1_INQ_PRF_FLIT1_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_1_INQ_PRF_FLIT1_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_4_1_INQ_PRF_FLIT1_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_4_1_INQ_PRF_FLIT1_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 1 to match the VC fieldof the header flit to 1',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_1_INQ_PRF_FLIT1_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_2_INQ_PRF_FLIT1_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_4_2_INQ_PRF_FLIT1_FILTERING_SETUP',
    LABEL => 'AR_RTR_4_2_INQ_PRF_FLIT1_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_2_INQ_PRF_FLIT1_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_2_INQ_PRF_FLIT1_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_4_2_INQ_PRF_FLIT1_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_4_2_INQ_PRF_FLIT1_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC1_FILTER_FLIT1_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_2_INQ_PRF_FLIT1_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_2_INQ_PRF_FLIT1_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_4_2_INQ_PRF_FLIT1_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_4_2_INQ_PRF_FLIT1_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC1 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_2_INQ_PRF_FLIT1_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_2_INQ_PRF_FLIT1_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_4_2_INQ_PRF_FLIT1_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_4_2_INQ_PRF_FLIT1_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 1 to match the VC fieldof the header flit to 1',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_2_INQ_PRF_FLIT1_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_3_INQ_PRF_FLIT1_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_4_3_INQ_PRF_FLIT1_FILTERING_SETUP',
    LABEL => 'AR_RTR_4_3_INQ_PRF_FLIT1_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_3_INQ_PRF_FLIT1_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_3_INQ_PRF_FLIT1_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_4_3_INQ_PRF_FLIT1_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_4_3_INQ_PRF_FLIT1_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC1_FILTER_FLIT1_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_3_INQ_PRF_FLIT1_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_3_INQ_PRF_FLIT1_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_4_3_INQ_PRF_FLIT1_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_4_3_INQ_PRF_FLIT1_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC1 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_3_INQ_PRF_FLIT1_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_3_INQ_PRF_FLIT1_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_4_3_INQ_PRF_FLIT1_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_4_3_INQ_PRF_FLIT1_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 1 to match the VC fieldof the header flit to 1',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_3_INQ_PRF_FLIT1_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_4_INQ_PRF_FLIT1_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_4_4_INQ_PRF_FLIT1_FILTERING_SETUP',
    LABEL => 'AR_RTR_4_4_INQ_PRF_FLIT1_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_4_INQ_PRF_FLIT1_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_4_INQ_PRF_FLIT1_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_4_4_INQ_PRF_FLIT1_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_4_4_INQ_PRF_FLIT1_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC1_FILTER_FLIT1_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_4_INQ_PRF_FLIT1_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_4_INQ_PRF_FLIT1_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_4_4_INQ_PRF_FLIT1_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_4_4_INQ_PRF_FLIT1_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC1 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_4_INQ_PRF_FLIT1_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_4_INQ_PRF_FLIT1_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_4_4_INQ_PRF_FLIT1_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_4_4_INQ_PRF_FLIT1_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 1 to match the VC fieldof the header flit to 1',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_4_INQ_PRF_FLIT1_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_5_INQ_PRF_FLIT1_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_4_5_INQ_PRF_FLIT1_FILTERING_SETUP',
    LABEL => 'AR_RTR_4_5_INQ_PRF_FLIT1_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_5_INQ_PRF_FLIT1_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_5_INQ_PRF_FLIT1_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_4_5_INQ_PRF_FLIT1_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_4_5_INQ_PRF_FLIT1_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC1_FILTER_FLIT1_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_5_INQ_PRF_FLIT1_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_5_INQ_PRF_FLIT1_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_4_5_INQ_PRF_FLIT1_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_4_5_INQ_PRF_FLIT1_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC1 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_5_INQ_PRF_FLIT1_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_5_INQ_PRF_FLIT1_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_4_5_INQ_PRF_FLIT1_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_4_5_INQ_PRF_FLIT1_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 1 to match the VC fieldof the header flit to 1',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_5_INQ_PRF_FLIT1_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_6_INQ_PRF_FLIT1_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_4_6_INQ_PRF_FLIT1_FILTERING_SETUP',
    LABEL => 'AR_RTR_4_6_INQ_PRF_FLIT1_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_6_INQ_PRF_FLIT1_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_6_INQ_PRF_FLIT1_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_4_6_INQ_PRF_FLIT1_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_4_6_INQ_PRF_FLIT1_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC1_FILTER_FLIT1_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_6_INQ_PRF_FLIT1_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_6_INQ_PRF_FLIT1_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_4_6_INQ_PRF_FLIT1_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_4_6_INQ_PRF_FLIT1_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC1 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_6_INQ_PRF_FLIT1_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_6_INQ_PRF_FLIT1_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_4_6_INQ_PRF_FLIT1_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_4_6_INQ_PRF_FLIT1_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 1 to match the VC fieldof the header flit to 1',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_6_INQ_PRF_FLIT1_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_7_INQ_PRF_FLIT1_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_4_7_INQ_PRF_FLIT1_FILTERING_SETUP',
    LABEL => 'AR_RTR_4_7_INQ_PRF_FLIT1_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_7_INQ_PRF_FLIT1_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_7_INQ_PRF_FLIT1_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_4_7_INQ_PRF_FLIT1_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_4_7_INQ_PRF_FLIT1_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC1_FILTER_FLIT1_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_7_INQ_PRF_FLIT1_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_7_INQ_PRF_FLIT1_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_4_7_INQ_PRF_FLIT1_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_4_7_INQ_PRF_FLIT1_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC1 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_7_INQ_PRF_FLIT1_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_7_INQ_PRF_FLIT1_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_4_7_INQ_PRF_FLIT1_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_4_7_INQ_PRF_FLIT1_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 1 to match the VC fieldof the header flit to 1',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_7_INQ_PRF_FLIT1_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_0_INQ_PRF_FLIT1_FILTERING_MASK'} = {
    NAME => 'AR_RTR_0_0_INQ_PRF_FLIT1_FILTERING_MASK',
    LABEL => 'AR_RTR_0_0_INQ_PRF_FLIT1_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_0_INQ_PRF_FLIT1_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_0_INQ_PRF_FLIT1_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_0_0_INQ_PRF_FLIT1_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_0_0_INQ_PRF_FLIT1_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_0_INQ_PRF_FLIT1_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_1_INQ_PRF_FLIT1_FILTERING_MASK'} = {
    NAME => 'AR_RTR_0_1_INQ_PRF_FLIT1_FILTERING_MASK',
    LABEL => 'AR_RTR_0_1_INQ_PRF_FLIT1_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_1_INQ_PRF_FLIT1_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_1_INQ_PRF_FLIT1_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_0_1_INQ_PRF_FLIT1_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_0_1_INQ_PRF_FLIT1_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_1_INQ_PRF_FLIT1_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_2_INQ_PRF_FLIT1_FILTERING_MASK'} = {
    NAME => 'AR_RTR_0_2_INQ_PRF_FLIT1_FILTERING_MASK',
    LABEL => 'AR_RTR_0_2_INQ_PRF_FLIT1_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_2_INQ_PRF_FLIT1_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_2_INQ_PRF_FLIT1_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_0_2_INQ_PRF_FLIT1_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_0_2_INQ_PRF_FLIT1_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_2_INQ_PRF_FLIT1_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_3_INQ_PRF_FLIT1_FILTERING_MASK'} = {
    NAME => 'AR_RTR_0_3_INQ_PRF_FLIT1_FILTERING_MASK',
    LABEL => 'AR_RTR_0_3_INQ_PRF_FLIT1_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_3_INQ_PRF_FLIT1_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_3_INQ_PRF_FLIT1_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_0_3_INQ_PRF_FLIT1_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_0_3_INQ_PRF_FLIT1_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_3_INQ_PRF_FLIT1_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_4_INQ_PRF_FLIT1_FILTERING_MASK'} = {
    NAME => 'AR_RTR_0_4_INQ_PRF_FLIT1_FILTERING_MASK',
    LABEL => 'AR_RTR_0_4_INQ_PRF_FLIT1_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_4_INQ_PRF_FLIT1_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_4_INQ_PRF_FLIT1_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_0_4_INQ_PRF_FLIT1_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_0_4_INQ_PRF_FLIT1_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_4_INQ_PRF_FLIT1_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_5_INQ_PRF_FLIT1_FILTERING_MASK'} = {
    NAME => 'AR_RTR_0_5_INQ_PRF_FLIT1_FILTERING_MASK',
    LABEL => 'AR_RTR_0_5_INQ_PRF_FLIT1_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_5_INQ_PRF_FLIT1_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_5_INQ_PRF_FLIT1_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_0_5_INQ_PRF_FLIT1_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_0_5_INQ_PRF_FLIT1_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_5_INQ_PRF_FLIT1_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_6_INQ_PRF_FLIT1_FILTERING_MASK'} = {
    NAME => 'AR_RTR_0_6_INQ_PRF_FLIT1_FILTERING_MASK',
    LABEL => 'AR_RTR_0_6_INQ_PRF_FLIT1_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_6_INQ_PRF_FLIT1_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_6_INQ_PRF_FLIT1_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_0_6_INQ_PRF_FLIT1_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_0_6_INQ_PRF_FLIT1_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_6_INQ_PRF_FLIT1_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_7_INQ_PRF_FLIT1_FILTERING_MASK'} = {
    NAME => 'AR_RTR_0_7_INQ_PRF_FLIT1_FILTERING_MASK',
    LABEL => 'AR_RTR_0_7_INQ_PRF_FLIT1_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_7_INQ_PRF_FLIT1_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_7_INQ_PRF_FLIT1_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_0_7_INQ_PRF_FLIT1_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_0_7_INQ_PRF_FLIT1_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_7_INQ_PRF_FLIT1_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_0_INQ_PRF_FLIT1_FILTERING_MASK'} = {
    NAME => 'AR_RTR_1_0_INQ_PRF_FLIT1_FILTERING_MASK',
    LABEL => 'AR_RTR_1_0_INQ_PRF_FLIT1_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_0_INQ_PRF_FLIT1_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_0_INQ_PRF_FLIT1_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_1_0_INQ_PRF_FLIT1_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_1_0_INQ_PRF_FLIT1_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_0_INQ_PRF_FLIT1_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_1_INQ_PRF_FLIT1_FILTERING_MASK'} = {
    NAME => 'AR_RTR_1_1_INQ_PRF_FLIT1_FILTERING_MASK',
    LABEL => 'AR_RTR_1_1_INQ_PRF_FLIT1_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_1_INQ_PRF_FLIT1_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_1_INQ_PRF_FLIT1_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_1_1_INQ_PRF_FLIT1_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_1_1_INQ_PRF_FLIT1_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_1_INQ_PRF_FLIT1_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_2_INQ_PRF_FLIT1_FILTERING_MASK'} = {
    NAME => 'AR_RTR_1_2_INQ_PRF_FLIT1_FILTERING_MASK',
    LABEL => 'AR_RTR_1_2_INQ_PRF_FLIT1_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_2_INQ_PRF_FLIT1_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_2_INQ_PRF_FLIT1_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_1_2_INQ_PRF_FLIT1_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_1_2_INQ_PRF_FLIT1_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_2_INQ_PRF_FLIT1_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_3_INQ_PRF_FLIT1_FILTERING_MASK'} = {
    NAME => 'AR_RTR_1_3_INQ_PRF_FLIT1_FILTERING_MASK',
    LABEL => 'AR_RTR_1_3_INQ_PRF_FLIT1_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_3_INQ_PRF_FLIT1_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_3_INQ_PRF_FLIT1_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_1_3_INQ_PRF_FLIT1_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_1_3_INQ_PRF_FLIT1_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_3_INQ_PRF_FLIT1_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_4_INQ_PRF_FLIT1_FILTERING_MASK'} = {
    NAME => 'AR_RTR_1_4_INQ_PRF_FLIT1_FILTERING_MASK',
    LABEL => 'AR_RTR_1_4_INQ_PRF_FLIT1_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_4_INQ_PRF_FLIT1_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_4_INQ_PRF_FLIT1_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_1_4_INQ_PRF_FLIT1_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_1_4_INQ_PRF_FLIT1_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_4_INQ_PRF_FLIT1_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_5_INQ_PRF_FLIT1_FILTERING_MASK'} = {
    NAME => 'AR_RTR_1_5_INQ_PRF_FLIT1_FILTERING_MASK',
    LABEL => 'AR_RTR_1_5_INQ_PRF_FLIT1_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_5_INQ_PRF_FLIT1_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_5_INQ_PRF_FLIT1_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_1_5_INQ_PRF_FLIT1_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_1_5_INQ_PRF_FLIT1_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_5_INQ_PRF_FLIT1_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_6_INQ_PRF_FLIT1_FILTERING_MASK'} = {
    NAME => 'AR_RTR_1_6_INQ_PRF_FLIT1_FILTERING_MASK',
    LABEL => 'AR_RTR_1_6_INQ_PRF_FLIT1_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_6_INQ_PRF_FLIT1_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_6_INQ_PRF_FLIT1_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_1_6_INQ_PRF_FLIT1_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_1_6_INQ_PRF_FLIT1_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_6_INQ_PRF_FLIT1_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_7_INQ_PRF_FLIT1_FILTERING_MASK'} = {
    NAME => 'AR_RTR_1_7_INQ_PRF_FLIT1_FILTERING_MASK',
    LABEL => 'AR_RTR_1_7_INQ_PRF_FLIT1_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_7_INQ_PRF_FLIT1_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_7_INQ_PRF_FLIT1_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_1_7_INQ_PRF_FLIT1_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_1_7_INQ_PRF_FLIT1_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_7_INQ_PRF_FLIT1_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_0_INQ_PRF_FLIT1_FILTERING_MASK'} = {
    NAME => 'AR_RTR_2_0_INQ_PRF_FLIT1_FILTERING_MASK',
    LABEL => 'AR_RTR_2_0_INQ_PRF_FLIT1_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_0_INQ_PRF_FLIT1_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_0_INQ_PRF_FLIT1_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_2_0_INQ_PRF_FLIT1_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_2_0_INQ_PRF_FLIT1_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_0_INQ_PRF_FLIT1_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_1_INQ_PRF_FLIT1_FILTERING_MASK'} = {
    NAME => 'AR_RTR_2_1_INQ_PRF_FLIT1_FILTERING_MASK',
    LABEL => 'AR_RTR_2_1_INQ_PRF_FLIT1_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_1_INQ_PRF_FLIT1_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_1_INQ_PRF_FLIT1_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_2_1_INQ_PRF_FLIT1_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_2_1_INQ_PRF_FLIT1_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_1_INQ_PRF_FLIT1_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_2_INQ_PRF_FLIT1_FILTERING_MASK'} = {
    NAME => 'AR_RTR_2_2_INQ_PRF_FLIT1_FILTERING_MASK',
    LABEL => 'AR_RTR_2_2_INQ_PRF_FLIT1_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_2_INQ_PRF_FLIT1_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_2_INQ_PRF_FLIT1_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_2_2_INQ_PRF_FLIT1_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_2_2_INQ_PRF_FLIT1_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_2_INQ_PRF_FLIT1_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_3_INQ_PRF_FLIT1_FILTERING_MASK'} = {
    NAME => 'AR_RTR_2_3_INQ_PRF_FLIT1_FILTERING_MASK',
    LABEL => 'AR_RTR_2_3_INQ_PRF_FLIT1_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_3_INQ_PRF_FLIT1_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_3_INQ_PRF_FLIT1_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_2_3_INQ_PRF_FLIT1_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_2_3_INQ_PRF_FLIT1_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_3_INQ_PRF_FLIT1_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_4_INQ_PRF_FLIT1_FILTERING_MASK'} = {
    NAME => 'AR_RTR_2_4_INQ_PRF_FLIT1_FILTERING_MASK',
    LABEL => 'AR_RTR_2_4_INQ_PRF_FLIT1_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_4_INQ_PRF_FLIT1_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_4_INQ_PRF_FLIT1_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_2_4_INQ_PRF_FLIT1_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_2_4_INQ_PRF_FLIT1_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_4_INQ_PRF_FLIT1_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_5_INQ_PRF_FLIT1_FILTERING_MASK'} = {
    NAME => 'AR_RTR_2_5_INQ_PRF_FLIT1_FILTERING_MASK',
    LABEL => 'AR_RTR_2_5_INQ_PRF_FLIT1_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_5_INQ_PRF_FLIT1_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_5_INQ_PRF_FLIT1_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_2_5_INQ_PRF_FLIT1_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_2_5_INQ_PRF_FLIT1_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_5_INQ_PRF_FLIT1_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_6_INQ_PRF_FLIT1_FILTERING_MASK'} = {
    NAME => 'AR_RTR_2_6_INQ_PRF_FLIT1_FILTERING_MASK',
    LABEL => 'AR_RTR_2_6_INQ_PRF_FLIT1_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_6_INQ_PRF_FLIT1_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_6_INQ_PRF_FLIT1_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_2_6_INQ_PRF_FLIT1_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_2_6_INQ_PRF_FLIT1_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_6_INQ_PRF_FLIT1_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_7_INQ_PRF_FLIT1_FILTERING_MASK'} = {
    NAME => 'AR_RTR_2_7_INQ_PRF_FLIT1_FILTERING_MASK',
    LABEL => 'AR_RTR_2_7_INQ_PRF_FLIT1_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_7_INQ_PRF_FLIT1_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_7_INQ_PRF_FLIT1_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_2_7_INQ_PRF_FLIT1_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_2_7_INQ_PRF_FLIT1_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_7_INQ_PRF_FLIT1_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_0_INQ_PRF_FLIT1_FILTERING_MASK'} = {
    NAME => 'AR_RTR_3_0_INQ_PRF_FLIT1_FILTERING_MASK',
    LABEL => 'AR_RTR_3_0_INQ_PRF_FLIT1_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_0_INQ_PRF_FLIT1_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_0_INQ_PRF_FLIT1_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_3_0_INQ_PRF_FLIT1_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_3_0_INQ_PRF_FLIT1_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_0_INQ_PRF_FLIT1_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_1_INQ_PRF_FLIT1_FILTERING_MASK'} = {
    NAME => 'AR_RTR_3_1_INQ_PRF_FLIT1_FILTERING_MASK',
    LABEL => 'AR_RTR_3_1_INQ_PRF_FLIT1_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_1_INQ_PRF_FLIT1_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_1_INQ_PRF_FLIT1_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_3_1_INQ_PRF_FLIT1_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_3_1_INQ_PRF_FLIT1_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_1_INQ_PRF_FLIT1_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_2_INQ_PRF_FLIT1_FILTERING_MASK'} = {
    NAME => 'AR_RTR_3_2_INQ_PRF_FLIT1_FILTERING_MASK',
    LABEL => 'AR_RTR_3_2_INQ_PRF_FLIT1_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_2_INQ_PRF_FLIT1_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_2_INQ_PRF_FLIT1_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_3_2_INQ_PRF_FLIT1_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_3_2_INQ_PRF_FLIT1_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_2_INQ_PRF_FLIT1_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_3_INQ_PRF_FLIT1_FILTERING_MASK'} = {
    NAME => 'AR_RTR_3_3_INQ_PRF_FLIT1_FILTERING_MASK',
    LABEL => 'AR_RTR_3_3_INQ_PRF_FLIT1_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_3_INQ_PRF_FLIT1_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_3_INQ_PRF_FLIT1_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_3_3_INQ_PRF_FLIT1_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_3_3_INQ_PRF_FLIT1_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_3_INQ_PRF_FLIT1_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_4_INQ_PRF_FLIT1_FILTERING_MASK'} = {
    NAME => 'AR_RTR_3_4_INQ_PRF_FLIT1_FILTERING_MASK',
    LABEL => 'AR_RTR_3_4_INQ_PRF_FLIT1_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_4_INQ_PRF_FLIT1_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_4_INQ_PRF_FLIT1_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_3_4_INQ_PRF_FLIT1_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_3_4_INQ_PRF_FLIT1_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_4_INQ_PRF_FLIT1_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_5_INQ_PRF_FLIT1_FILTERING_MASK'} = {
    NAME => 'AR_RTR_3_5_INQ_PRF_FLIT1_FILTERING_MASK',
    LABEL => 'AR_RTR_3_5_INQ_PRF_FLIT1_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_5_INQ_PRF_FLIT1_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_5_INQ_PRF_FLIT1_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_3_5_INQ_PRF_FLIT1_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_3_5_INQ_PRF_FLIT1_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_5_INQ_PRF_FLIT1_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_6_INQ_PRF_FLIT1_FILTERING_MASK'} = {
    NAME => 'AR_RTR_3_6_INQ_PRF_FLIT1_FILTERING_MASK',
    LABEL => 'AR_RTR_3_6_INQ_PRF_FLIT1_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_6_INQ_PRF_FLIT1_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_6_INQ_PRF_FLIT1_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_3_6_INQ_PRF_FLIT1_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_3_6_INQ_PRF_FLIT1_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_6_INQ_PRF_FLIT1_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_7_INQ_PRF_FLIT1_FILTERING_MASK'} = {
    NAME => 'AR_RTR_3_7_INQ_PRF_FLIT1_FILTERING_MASK',
    LABEL => 'AR_RTR_3_7_INQ_PRF_FLIT1_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_7_INQ_PRF_FLIT1_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_7_INQ_PRF_FLIT1_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_3_7_INQ_PRF_FLIT1_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_3_7_INQ_PRF_FLIT1_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_7_INQ_PRF_FLIT1_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_0_INQ_PRF_FLIT1_FILTERING_MASK'} = {
    NAME => 'AR_RTR_4_0_INQ_PRF_FLIT1_FILTERING_MASK',
    LABEL => 'AR_RTR_4_0_INQ_PRF_FLIT1_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_0_INQ_PRF_FLIT1_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_0_INQ_PRF_FLIT1_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_4_0_INQ_PRF_FLIT1_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_4_0_INQ_PRF_FLIT1_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_0_INQ_PRF_FLIT1_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_1_INQ_PRF_FLIT1_FILTERING_MASK'} = {
    NAME => 'AR_RTR_4_1_INQ_PRF_FLIT1_FILTERING_MASK',
    LABEL => 'AR_RTR_4_1_INQ_PRF_FLIT1_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_1_INQ_PRF_FLIT1_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_1_INQ_PRF_FLIT1_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_4_1_INQ_PRF_FLIT1_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_4_1_INQ_PRF_FLIT1_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_1_INQ_PRF_FLIT1_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_2_INQ_PRF_FLIT1_FILTERING_MASK'} = {
    NAME => 'AR_RTR_4_2_INQ_PRF_FLIT1_FILTERING_MASK',
    LABEL => 'AR_RTR_4_2_INQ_PRF_FLIT1_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_2_INQ_PRF_FLIT1_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_2_INQ_PRF_FLIT1_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_4_2_INQ_PRF_FLIT1_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_4_2_INQ_PRF_FLIT1_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_2_INQ_PRF_FLIT1_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_3_INQ_PRF_FLIT1_FILTERING_MASK'} = {
    NAME => 'AR_RTR_4_3_INQ_PRF_FLIT1_FILTERING_MASK',
    LABEL => 'AR_RTR_4_3_INQ_PRF_FLIT1_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_3_INQ_PRF_FLIT1_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_3_INQ_PRF_FLIT1_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_4_3_INQ_PRF_FLIT1_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_4_3_INQ_PRF_FLIT1_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_3_INQ_PRF_FLIT1_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_4_INQ_PRF_FLIT1_FILTERING_MASK'} = {
    NAME => 'AR_RTR_4_4_INQ_PRF_FLIT1_FILTERING_MASK',
    LABEL => 'AR_RTR_4_4_INQ_PRF_FLIT1_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_4_INQ_PRF_FLIT1_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_4_INQ_PRF_FLIT1_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_4_4_INQ_PRF_FLIT1_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_4_4_INQ_PRF_FLIT1_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_4_INQ_PRF_FLIT1_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_5_INQ_PRF_FLIT1_FILTERING_MASK'} = {
    NAME => 'AR_RTR_4_5_INQ_PRF_FLIT1_FILTERING_MASK',
    LABEL => 'AR_RTR_4_5_INQ_PRF_FLIT1_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_5_INQ_PRF_FLIT1_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_5_INQ_PRF_FLIT1_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_4_5_INQ_PRF_FLIT1_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_4_5_INQ_PRF_FLIT1_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_5_INQ_PRF_FLIT1_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_6_INQ_PRF_FLIT1_FILTERING_MASK'} = {
    NAME => 'AR_RTR_4_6_INQ_PRF_FLIT1_FILTERING_MASK',
    LABEL => 'AR_RTR_4_6_INQ_PRF_FLIT1_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_6_INQ_PRF_FLIT1_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_6_INQ_PRF_FLIT1_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_4_6_INQ_PRF_FLIT1_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_4_6_INQ_PRF_FLIT1_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_6_INQ_PRF_FLIT1_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_7_INQ_PRF_FLIT1_FILTERING_MASK'} = {
    NAME => 'AR_RTR_4_7_INQ_PRF_FLIT1_FILTERING_MASK',
    LABEL => 'AR_RTR_4_7_INQ_PRF_FLIT1_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_7_INQ_PRF_FLIT1_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_7_INQ_PRF_FLIT1_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_4_7_INQ_PRF_FLIT1_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_4_7_INQ_PRF_FLIT1_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_7_INQ_PRF_FLIT1_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_0_INQ_PRF_FLIT2_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_0_0_INQ_PRF_FLIT2_FILTERING_SETUP',
    LABEL => 'AR_RTR_0_0_INQ_PRF_FLIT2_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_0_INQ_PRF_FLIT2_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_0_INQ_PRF_FLIT2_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_0_0_INQ_PRF_FLIT2_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_0_0_INQ_PRF_FLIT2_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC2_FILTER_FLIT2_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_0_INQ_PRF_FLIT2_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_0_INQ_PRF_FLIT2_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_0_0_INQ_PRF_FLIT2_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_0_0_INQ_PRF_FLIT2_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC2 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_0_INQ_PRF_FLIT2_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_0_INQ_PRF_FLIT2_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_0_0_INQ_PRF_FLIT2_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_0_0_INQ_PRF_FLIT2_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 2 to match the VC fieldof the header flit to 2',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_0_INQ_PRF_FLIT2_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_1_INQ_PRF_FLIT2_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_0_1_INQ_PRF_FLIT2_FILTERING_SETUP',
    LABEL => 'AR_RTR_0_1_INQ_PRF_FLIT2_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_1_INQ_PRF_FLIT2_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_1_INQ_PRF_FLIT2_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_0_1_INQ_PRF_FLIT2_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_0_1_INQ_PRF_FLIT2_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC2_FILTER_FLIT2_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_1_INQ_PRF_FLIT2_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_1_INQ_PRF_FLIT2_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_0_1_INQ_PRF_FLIT2_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_0_1_INQ_PRF_FLIT2_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC2 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_1_INQ_PRF_FLIT2_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_1_INQ_PRF_FLIT2_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_0_1_INQ_PRF_FLIT2_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_0_1_INQ_PRF_FLIT2_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 2 to match the VC fieldof the header flit to 2',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_1_INQ_PRF_FLIT2_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_2_INQ_PRF_FLIT2_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_0_2_INQ_PRF_FLIT2_FILTERING_SETUP',
    LABEL => 'AR_RTR_0_2_INQ_PRF_FLIT2_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_2_INQ_PRF_FLIT2_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_2_INQ_PRF_FLIT2_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_0_2_INQ_PRF_FLIT2_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_0_2_INQ_PRF_FLIT2_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC2_FILTER_FLIT2_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_2_INQ_PRF_FLIT2_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_2_INQ_PRF_FLIT2_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_0_2_INQ_PRF_FLIT2_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_0_2_INQ_PRF_FLIT2_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC2 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_2_INQ_PRF_FLIT2_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_2_INQ_PRF_FLIT2_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_0_2_INQ_PRF_FLIT2_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_0_2_INQ_PRF_FLIT2_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 2 to match the VC fieldof the header flit to 2',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_2_INQ_PRF_FLIT2_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_3_INQ_PRF_FLIT2_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_0_3_INQ_PRF_FLIT2_FILTERING_SETUP',
    LABEL => 'AR_RTR_0_3_INQ_PRF_FLIT2_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_3_INQ_PRF_FLIT2_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_3_INQ_PRF_FLIT2_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_0_3_INQ_PRF_FLIT2_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_0_3_INQ_PRF_FLIT2_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC2_FILTER_FLIT2_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_3_INQ_PRF_FLIT2_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_3_INQ_PRF_FLIT2_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_0_3_INQ_PRF_FLIT2_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_0_3_INQ_PRF_FLIT2_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC2 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_3_INQ_PRF_FLIT2_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_3_INQ_PRF_FLIT2_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_0_3_INQ_PRF_FLIT2_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_0_3_INQ_PRF_FLIT2_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 2 to match the VC fieldof the header flit to 2',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_3_INQ_PRF_FLIT2_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_4_INQ_PRF_FLIT2_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_0_4_INQ_PRF_FLIT2_FILTERING_SETUP',
    LABEL => 'AR_RTR_0_4_INQ_PRF_FLIT2_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_4_INQ_PRF_FLIT2_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_4_INQ_PRF_FLIT2_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_0_4_INQ_PRF_FLIT2_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_0_4_INQ_PRF_FLIT2_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC2_FILTER_FLIT2_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_4_INQ_PRF_FLIT2_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_4_INQ_PRF_FLIT2_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_0_4_INQ_PRF_FLIT2_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_0_4_INQ_PRF_FLIT2_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC2 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_4_INQ_PRF_FLIT2_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_4_INQ_PRF_FLIT2_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_0_4_INQ_PRF_FLIT2_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_0_4_INQ_PRF_FLIT2_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 2 to match the VC fieldof the header flit to 2',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_4_INQ_PRF_FLIT2_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_5_INQ_PRF_FLIT2_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_0_5_INQ_PRF_FLIT2_FILTERING_SETUP',
    LABEL => 'AR_RTR_0_5_INQ_PRF_FLIT2_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_5_INQ_PRF_FLIT2_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_5_INQ_PRF_FLIT2_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_0_5_INQ_PRF_FLIT2_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_0_5_INQ_PRF_FLIT2_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC2_FILTER_FLIT2_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_5_INQ_PRF_FLIT2_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_5_INQ_PRF_FLIT2_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_0_5_INQ_PRF_FLIT2_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_0_5_INQ_PRF_FLIT2_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC2 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_5_INQ_PRF_FLIT2_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_5_INQ_PRF_FLIT2_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_0_5_INQ_PRF_FLIT2_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_0_5_INQ_PRF_FLIT2_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 2 to match the VC fieldof the header flit to 2',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_5_INQ_PRF_FLIT2_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_6_INQ_PRF_FLIT2_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_0_6_INQ_PRF_FLIT2_FILTERING_SETUP',
    LABEL => 'AR_RTR_0_6_INQ_PRF_FLIT2_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_6_INQ_PRF_FLIT2_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_6_INQ_PRF_FLIT2_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_0_6_INQ_PRF_FLIT2_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_0_6_INQ_PRF_FLIT2_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC2_FILTER_FLIT2_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_6_INQ_PRF_FLIT2_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_6_INQ_PRF_FLIT2_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_0_6_INQ_PRF_FLIT2_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_0_6_INQ_PRF_FLIT2_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC2 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_6_INQ_PRF_FLIT2_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_6_INQ_PRF_FLIT2_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_0_6_INQ_PRF_FLIT2_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_0_6_INQ_PRF_FLIT2_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 2 to match the VC fieldof the header flit to 2',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_6_INQ_PRF_FLIT2_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_7_INQ_PRF_FLIT2_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_0_7_INQ_PRF_FLIT2_FILTERING_SETUP',
    LABEL => 'AR_RTR_0_7_INQ_PRF_FLIT2_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_7_INQ_PRF_FLIT2_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_7_INQ_PRF_FLIT2_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_0_7_INQ_PRF_FLIT2_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_0_7_INQ_PRF_FLIT2_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC2_FILTER_FLIT2_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_7_INQ_PRF_FLIT2_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_7_INQ_PRF_FLIT2_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_0_7_INQ_PRF_FLIT2_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_0_7_INQ_PRF_FLIT2_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC2 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_7_INQ_PRF_FLIT2_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_7_INQ_PRF_FLIT2_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_0_7_INQ_PRF_FLIT2_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_0_7_INQ_PRF_FLIT2_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 2 to match the VC fieldof the header flit to 2',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_7_INQ_PRF_FLIT2_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_0_INQ_PRF_FLIT2_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_1_0_INQ_PRF_FLIT2_FILTERING_SETUP',
    LABEL => 'AR_RTR_1_0_INQ_PRF_FLIT2_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_0_INQ_PRF_FLIT2_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_0_INQ_PRF_FLIT2_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_1_0_INQ_PRF_FLIT2_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_1_0_INQ_PRF_FLIT2_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC2_FILTER_FLIT2_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_0_INQ_PRF_FLIT2_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_0_INQ_PRF_FLIT2_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_1_0_INQ_PRF_FLIT2_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_1_0_INQ_PRF_FLIT2_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC2 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_0_INQ_PRF_FLIT2_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_0_INQ_PRF_FLIT2_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_1_0_INQ_PRF_FLIT2_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_1_0_INQ_PRF_FLIT2_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 2 to match the VC fieldof the header flit to 2',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_0_INQ_PRF_FLIT2_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_1_INQ_PRF_FLIT2_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_1_1_INQ_PRF_FLIT2_FILTERING_SETUP',
    LABEL => 'AR_RTR_1_1_INQ_PRF_FLIT2_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_1_INQ_PRF_FLIT2_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_1_INQ_PRF_FLIT2_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_1_1_INQ_PRF_FLIT2_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_1_1_INQ_PRF_FLIT2_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC2_FILTER_FLIT2_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_1_INQ_PRF_FLIT2_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_1_INQ_PRF_FLIT2_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_1_1_INQ_PRF_FLIT2_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_1_1_INQ_PRF_FLIT2_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC2 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_1_INQ_PRF_FLIT2_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_1_INQ_PRF_FLIT2_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_1_1_INQ_PRF_FLIT2_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_1_1_INQ_PRF_FLIT2_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 2 to match the VC fieldof the header flit to 2',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_1_INQ_PRF_FLIT2_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_2_INQ_PRF_FLIT2_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_1_2_INQ_PRF_FLIT2_FILTERING_SETUP',
    LABEL => 'AR_RTR_1_2_INQ_PRF_FLIT2_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_2_INQ_PRF_FLIT2_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_2_INQ_PRF_FLIT2_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_1_2_INQ_PRF_FLIT2_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_1_2_INQ_PRF_FLIT2_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC2_FILTER_FLIT2_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_2_INQ_PRF_FLIT2_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_2_INQ_PRF_FLIT2_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_1_2_INQ_PRF_FLIT2_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_1_2_INQ_PRF_FLIT2_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC2 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_2_INQ_PRF_FLIT2_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_2_INQ_PRF_FLIT2_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_1_2_INQ_PRF_FLIT2_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_1_2_INQ_PRF_FLIT2_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 2 to match the VC fieldof the header flit to 2',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_2_INQ_PRF_FLIT2_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_3_INQ_PRF_FLIT2_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_1_3_INQ_PRF_FLIT2_FILTERING_SETUP',
    LABEL => 'AR_RTR_1_3_INQ_PRF_FLIT2_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_3_INQ_PRF_FLIT2_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_3_INQ_PRF_FLIT2_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_1_3_INQ_PRF_FLIT2_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_1_3_INQ_PRF_FLIT2_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC2_FILTER_FLIT2_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_3_INQ_PRF_FLIT2_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_3_INQ_PRF_FLIT2_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_1_3_INQ_PRF_FLIT2_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_1_3_INQ_PRF_FLIT2_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC2 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_3_INQ_PRF_FLIT2_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_3_INQ_PRF_FLIT2_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_1_3_INQ_PRF_FLIT2_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_1_3_INQ_PRF_FLIT2_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 2 to match the VC fieldof the header flit to 2',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_3_INQ_PRF_FLIT2_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_4_INQ_PRF_FLIT2_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_1_4_INQ_PRF_FLIT2_FILTERING_SETUP',
    LABEL => 'AR_RTR_1_4_INQ_PRF_FLIT2_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_4_INQ_PRF_FLIT2_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_4_INQ_PRF_FLIT2_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_1_4_INQ_PRF_FLIT2_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_1_4_INQ_PRF_FLIT2_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC2_FILTER_FLIT2_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_4_INQ_PRF_FLIT2_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_4_INQ_PRF_FLIT2_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_1_4_INQ_PRF_FLIT2_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_1_4_INQ_PRF_FLIT2_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC2 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_4_INQ_PRF_FLIT2_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_4_INQ_PRF_FLIT2_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_1_4_INQ_PRF_FLIT2_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_1_4_INQ_PRF_FLIT2_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 2 to match the VC fieldof the header flit to 2',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_4_INQ_PRF_FLIT2_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_5_INQ_PRF_FLIT2_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_1_5_INQ_PRF_FLIT2_FILTERING_SETUP',
    LABEL => 'AR_RTR_1_5_INQ_PRF_FLIT2_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_5_INQ_PRF_FLIT2_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_5_INQ_PRF_FLIT2_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_1_5_INQ_PRF_FLIT2_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_1_5_INQ_PRF_FLIT2_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC2_FILTER_FLIT2_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_5_INQ_PRF_FLIT2_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_5_INQ_PRF_FLIT2_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_1_5_INQ_PRF_FLIT2_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_1_5_INQ_PRF_FLIT2_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC2 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_5_INQ_PRF_FLIT2_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_5_INQ_PRF_FLIT2_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_1_5_INQ_PRF_FLIT2_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_1_5_INQ_PRF_FLIT2_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 2 to match the VC fieldof the header flit to 2',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_5_INQ_PRF_FLIT2_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_6_INQ_PRF_FLIT2_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_1_6_INQ_PRF_FLIT2_FILTERING_SETUP',
    LABEL => 'AR_RTR_1_6_INQ_PRF_FLIT2_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_6_INQ_PRF_FLIT2_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_6_INQ_PRF_FLIT2_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_1_6_INQ_PRF_FLIT2_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_1_6_INQ_PRF_FLIT2_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC2_FILTER_FLIT2_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_6_INQ_PRF_FLIT2_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_6_INQ_PRF_FLIT2_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_1_6_INQ_PRF_FLIT2_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_1_6_INQ_PRF_FLIT2_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC2 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_6_INQ_PRF_FLIT2_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_6_INQ_PRF_FLIT2_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_1_6_INQ_PRF_FLIT2_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_1_6_INQ_PRF_FLIT2_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 2 to match the VC fieldof the header flit to 2',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_6_INQ_PRF_FLIT2_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_7_INQ_PRF_FLIT2_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_1_7_INQ_PRF_FLIT2_FILTERING_SETUP',
    LABEL => 'AR_RTR_1_7_INQ_PRF_FLIT2_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_7_INQ_PRF_FLIT2_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_7_INQ_PRF_FLIT2_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_1_7_INQ_PRF_FLIT2_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_1_7_INQ_PRF_FLIT2_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC2_FILTER_FLIT2_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_7_INQ_PRF_FLIT2_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_7_INQ_PRF_FLIT2_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_1_7_INQ_PRF_FLIT2_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_1_7_INQ_PRF_FLIT2_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC2 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_7_INQ_PRF_FLIT2_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_7_INQ_PRF_FLIT2_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_1_7_INQ_PRF_FLIT2_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_1_7_INQ_PRF_FLIT2_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 2 to match the VC fieldof the header flit to 2',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_7_INQ_PRF_FLIT2_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_0_INQ_PRF_FLIT2_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_2_0_INQ_PRF_FLIT2_FILTERING_SETUP',
    LABEL => 'AR_RTR_2_0_INQ_PRF_FLIT2_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_0_INQ_PRF_FLIT2_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_0_INQ_PRF_FLIT2_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_2_0_INQ_PRF_FLIT2_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_2_0_INQ_PRF_FLIT2_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC2_FILTER_FLIT2_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_0_INQ_PRF_FLIT2_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_0_INQ_PRF_FLIT2_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_2_0_INQ_PRF_FLIT2_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_2_0_INQ_PRF_FLIT2_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC2 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_0_INQ_PRF_FLIT2_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_0_INQ_PRF_FLIT2_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_2_0_INQ_PRF_FLIT2_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_2_0_INQ_PRF_FLIT2_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 2 to match the VC fieldof the header flit to 2',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_0_INQ_PRF_FLIT2_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_1_INQ_PRF_FLIT2_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_2_1_INQ_PRF_FLIT2_FILTERING_SETUP',
    LABEL => 'AR_RTR_2_1_INQ_PRF_FLIT2_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_1_INQ_PRF_FLIT2_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_1_INQ_PRF_FLIT2_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_2_1_INQ_PRF_FLIT2_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_2_1_INQ_PRF_FLIT2_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC2_FILTER_FLIT2_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_1_INQ_PRF_FLIT2_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_1_INQ_PRF_FLIT2_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_2_1_INQ_PRF_FLIT2_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_2_1_INQ_PRF_FLIT2_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC2 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_1_INQ_PRF_FLIT2_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_1_INQ_PRF_FLIT2_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_2_1_INQ_PRF_FLIT2_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_2_1_INQ_PRF_FLIT2_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 2 to match the VC fieldof the header flit to 2',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_1_INQ_PRF_FLIT2_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_2_INQ_PRF_FLIT2_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_2_2_INQ_PRF_FLIT2_FILTERING_SETUP',
    LABEL => 'AR_RTR_2_2_INQ_PRF_FLIT2_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_2_INQ_PRF_FLIT2_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_2_INQ_PRF_FLIT2_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_2_2_INQ_PRF_FLIT2_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_2_2_INQ_PRF_FLIT2_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC2_FILTER_FLIT2_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_2_INQ_PRF_FLIT2_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_2_INQ_PRF_FLIT2_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_2_2_INQ_PRF_FLIT2_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_2_2_INQ_PRF_FLIT2_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC2 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_2_INQ_PRF_FLIT2_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_2_INQ_PRF_FLIT2_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_2_2_INQ_PRF_FLIT2_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_2_2_INQ_PRF_FLIT2_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 2 to match the VC fieldof the header flit to 2',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_2_INQ_PRF_FLIT2_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_3_INQ_PRF_FLIT2_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_2_3_INQ_PRF_FLIT2_FILTERING_SETUP',
    LABEL => 'AR_RTR_2_3_INQ_PRF_FLIT2_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_3_INQ_PRF_FLIT2_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_3_INQ_PRF_FLIT2_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_2_3_INQ_PRF_FLIT2_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_2_3_INQ_PRF_FLIT2_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC2_FILTER_FLIT2_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_3_INQ_PRF_FLIT2_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_3_INQ_PRF_FLIT2_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_2_3_INQ_PRF_FLIT2_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_2_3_INQ_PRF_FLIT2_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC2 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_3_INQ_PRF_FLIT2_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_3_INQ_PRF_FLIT2_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_2_3_INQ_PRF_FLIT2_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_2_3_INQ_PRF_FLIT2_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 2 to match the VC fieldof the header flit to 2',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_3_INQ_PRF_FLIT2_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_4_INQ_PRF_FLIT2_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_2_4_INQ_PRF_FLIT2_FILTERING_SETUP',
    LABEL => 'AR_RTR_2_4_INQ_PRF_FLIT2_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_4_INQ_PRF_FLIT2_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_4_INQ_PRF_FLIT2_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_2_4_INQ_PRF_FLIT2_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_2_4_INQ_PRF_FLIT2_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC2_FILTER_FLIT2_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_4_INQ_PRF_FLIT2_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_4_INQ_PRF_FLIT2_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_2_4_INQ_PRF_FLIT2_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_2_4_INQ_PRF_FLIT2_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC2 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_4_INQ_PRF_FLIT2_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_4_INQ_PRF_FLIT2_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_2_4_INQ_PRF_FLIT2_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_2_4_INQ_PRF_FLIT2_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 2 to match the VC fieldof the header flit to 2',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_4_INQ_PRF_FLIT2_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_5_INQ_PRF_FLIT2_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_2_5_INQ_PRF_FLIT2_FILTERING_SETUP',
    LABEL => 'AR_RTR_2_5_INQ_PRF_FLIT2_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_5_INQ_PRF_FLIT2_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_5_INQ_PRF_FLIT2_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_2_5_INQ_PRF_FLIT2_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_2_5_INQ_PRF_FLIT2_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC2_FILTER_FLIT2_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_5_INQ_PRF_FLIT2_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_5_INQ_PRF_FLIT2_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_2_5_INQ_PRF_FLIT2_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_2_5_INQ_PRF_FLIT2_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC2 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_5_INQ_PRF_FLIT2_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_5_INQ_PRF_FLIT2_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_2_5_INQ_PRF_FLIT2_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_2_5_INQ_PRF_FLIT2_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 2 to match the VC fieldof the header flit to 2',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_5_INQ_PRF_FLIT2_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_6_INQ_PRF_FLIT2_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_2_6_INQ_PRF_FLIT2_FILTERING_SETUP',
    LABEL => 'AR_RTR_2_6_INQ_PRF_FLIT2_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_6_INQ_PRF_FLIT2_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_6_INQ_PRF_FLIT2_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_2_6_INQ_PRF_FLIT2_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_2_6_INQ_PRF_FLIT2_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC2_FILTER_FLIT2_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_6_INQ_PRF_FLIT2_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_6_INQ_PRF_FLIT2_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_2_6_INQ_PRF_FLIT2_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_2_6_INQ_PRF_FLIT2_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC2 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_6_INQ_PRF_FLIT2_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_6_INQ_PRF_FLIT2_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_2_6_INQ_PRF_FLIT2_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_2_6_INQ_PRF_FLIT2_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 2 to match the VC fieldof the header flit to 2',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_6_INQ_PRF_FLIT2_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_7_INQ_PRF_FLIT2_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_2_7_INQ_PRF_FLIT2_FILTERING_SETUP',
    LABEL => 'AR_RTR_2_7_INQ_PRF_FLIT2_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_7_INQ_PRF_FLIT2_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_7_INQ_PRF_FLIT2_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_2_7_INQ_PRF_FLIT2_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_2_7_INQ_PRF_FLIT2_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC2_FILTER_FLIT2_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_7_INQ_PRF_FLIT2_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_7_INQ_PRF_FLIT2_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_2_7_INQ_PRF_FLIT2_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_2_7_INQ_PRF_FLIT2_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC2 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_7_INQ_PRF_FLIT2_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_7_INQ_PRF_FLIT2_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_2_7_INQ_PRF_FLIT2_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_2_7_INQ_PRF_FLIT2_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 2 to match the VC fieldof the header flit to 2',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_7_INQ_PRF_FLIT2_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_0_INQ_PRF_FLIT2_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_3_0_INQ_PRF_FLIT2_FILTERING_SETUP',
    LABEL => 'AR_RTR_3_0_INQ_PRF_FLIT2_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_0_INQ_PRF_FLIT2_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_0_INQ_PRF_FLIT2_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_3_0_INQ_PRF_FLIT2_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_3_0_INQ_PRF_FLIT2_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC2_FILTER_FLIT2_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_0_INQ_PRF_FLIT2_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_0_INQ_PRF_FLIT2_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_3_0_INQ_PRF_FLIT2_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_3_0_INQ_PRF_FLIT2_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC2 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_0_INQ_PRF_FLIT2_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_0_INQ_PRF_FLIT2_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_3_0_INQ_PRF_FLIT2_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_3_0_INQ_PRF_FLIT2_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 2 to match the VC fieldof the header flit to 2',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_0_INQ_PRF_FLIT2_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_1_INQ_PRF_FLIT2_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_3_1_INQ_PRF_FLIT2_FILTERING_SETUP',
    LABEL => 'AR_RTR_3_1_INQ_PRF_FLIT2_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_1_INQ_PRF_FLIT2_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_1_INQ_PRF_FLIT2_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_3_1_INQ_PRF_FLIT2_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_3_1_INQ_PRF_FLIT2_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC2_FILTER_FLIT2_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_1_INQ_PRF_FLIT2_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_1_INQ_PRF_FLIT2_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_3_1_INQ_PRF_FLIT2_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_3_1_INQ_PRF_FLIT2_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC2 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_1_INQ_PRF_FLIT2_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_1_INQ_PRF_FLIT2_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_3_1_INQ_PRF_FLIT2_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_3_1_INQ_PRF_FLIT2_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 2 to match the VC fieldof the header flit to 2',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_1_INQ_PRF_FLIT2_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_2_INQ_PRF_FLIT2_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_3_2_INQ_PRF_FLIT2_FILTERING_SETUP',
    LABEL => 'AR_RTR_3_2_INQ_PRF_FLIT2_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_2_INQ_PRF_FLIT2_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_2_INQ_PRF_FLIT2_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_3_2_INQ_PRF_FLIT2_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_3_2_INQ_PRF_FLIT2_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC2_FILTER_FLIT2_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_2_INQ_PRF_FLIT2_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_2_INQ_PRF_FLIT2_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_3_2_INQ_PRF_FLIT2_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_3_2_INQ_PRF_FLIT2_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC2 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_2_INQ_PRF_FLIT2_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_2_INQ_PRF_FLIT2_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_3_2_INQ_PRF_FLIT2_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_3_2_INQ_PRF_FLIT2_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 2 to match the VC fieldof the header flit to 2',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_2_INQ_PRF_FLIT2_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_3_INQ_PRF_FLIT2_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_3_3_INQ_PRF_FLIT2_FILTERING_SETUP',
    LABEL => 'AR_RTR_3_3_INQ_PRF_FLIT2_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_3_INQ_PRF_FLIT2_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_3_INQ_PRF_FLIT2_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_3_3_INQ_PRF_FLIT2_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_3_3_INQ_PRF_FLIT2_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC2_FILTER_FLIT2_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_3_INQ_PRF_FLIT2_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_3_INQ_PRF_FLIT2_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_3_3_INQ_PRF_FLIT2_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_3_3_INQ_PRF_FLIT2_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC2 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_3_INQ_PRF_FLIT2_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_3_INQ_PRF_FLIT2_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_3_3_INQ_PRF_FLIT2_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_3_3_INQ_PRF_FLIT2_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 2 to match the VC fieldof the header flit to 2',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_3_INQ_PRF_FLIT2_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_4_INQ_PRF_FLIT2_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_3_4_INQ_PRF_FLIT2_FILTERING_SETUP',
    LABEL => 'AR_RTR_3_4_INQ_PRF_FLIT2_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_4_INQ_PRF_FLIT2_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_4_INQ_PRF_FLIT2_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_3_4_INQ_PRF_FLIT2_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_3_4_INQ_PRF_FLIT2_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC2_FILTER_FLIT2_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_4_INQ_PRF_FLIT2_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_4_INQ_PRF_FLIT2_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_3_4_INQ_PRF_FLIT2_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_3_4_INQ_PRF_FLIT2_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC2 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_4_INQ_PRF_FLIT2_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_4_INQ_PRF_FLIT2_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_3_4_INQ_PRF_FLIT2_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_3_4_INQ_PRF_FLIT2_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 2 to match the VC fieldof the header flit to 2',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_4_INQ_PRF_FLIT2_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_5_INQ_PRF_FLIT2_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_3_5_INQ_PRF_FLIT2_FILTERING_SETUP',
    LABEL => 'AR_RTR_3_5_INQ_PRF_FLIT2_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_5_INQ_PRF_FLIT2_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_5_INQ_PRF_FLIT2_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_3_5_INQ_PRF_FLIT2_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_3_5_INQ_PRF_FLIT2_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC2_FILTER_FLIT2_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_5_INQ_PRF_FLIT2_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_5_INQ_PRF_FLIT2_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_3_5_INQ_PRF_FLIT2_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_3_5_INQ_PRF_FLIT2_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC2 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_5_INQ_PRF_FLIT2_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_5_INQ_PRF_FLIT2_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_3_5_INQ_PRF_FLIT2_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_3_5_INQ_PRF_FLIT2_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 2 to match the VC fieldof the header flit to 2',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_5_INQ_PRF_FLIT2_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_6_INQ_PRF_FLIT2_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_3_6_INQ_PRF_FLIT2_FILTERING_SETUP',
    LABEL => 'AR_RTR_3_6_INQ_PRF_FLIT2_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_6_INQ_PRF_FLIT2_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_6_INQ_PRF_FLIT2_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_3_6_INQ_PRF_FLIT2_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_3_6_INQ_PRF_FLIT2_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC2_FILTER_FLIT2_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_6_INQ_PRF_FLIT2_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_6_INQ_PRF_FLIT2_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_3_6_INQ_PRF_FLIT2_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_3_6_INQ_PRF_FLIT2_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC2 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_6_INQ_PRF_FLIT2_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_6_INQ_PRF_FLIT2_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_3_6_INQ_PRF_FLIT2_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_3_6_INQ_PRF_FLIT2_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 2 to match the VC fieldof the header flit to 2',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_6_INQ_PRF_FLIT2_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_7_INQ_PRF_FLIT2_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_3_7_INQ_PRF_FLIT2_FILTERING_SETUP',
    LABEL => 'AR_RTR_3_7_INQ_PRF_FLIT2_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_7_INQ_PRF_FLIT2_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_7_INQ_PRF_FLIT2_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_3_7_INQ_PRF_FLIT2_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_3_7_INQ_PRF_FLIT2_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC2_FILTER_FLIT2_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_7_INQ_PRF_FLIT2_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_7_INQ_PRF_FLIT2_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_3_7_INQ_PRF_FLIT2_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_3_7_INQ_PRF_FLIT2_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC2 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_7_INQ_PRF_FLIT2_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_7_INQ_PRF_FLIT2_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_3_7_INQ_PRF_FLIT2_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_3_7_INQ_PRF_FLIT2_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 2 to match the VC fieldof the header flit to 2',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_7_INQ_PRF_FLIT2_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_0_INQ_PRF_FLIT2_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_4_0_INQ_PRF_FLIT2_FILTERING_SETUP',
    LABEL => 'AR_RTR_4_0_INQ_PRF_FLIT2_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_0_INQ_PRF_FLIT2_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_0_INQ_PRF_FLIT2_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_4_0_INQ_PRF_FLIT2_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_4_0_INQ_PRF_FLIT2_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC2_FILTER_FLIT2_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_0_INQ_PRF_FLIT2_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_0_INQ_PRF_FLIT2_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_4_0_INQ_PRF_FLIT2_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_4_0_INQ_PRF_FLIT2_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC2 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_0_INQ_PRF_FLIT2_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_0_INQ_PRF_FLIT2_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_4_0_INQ_PRF_FLIT2_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_4_0_INQ_PRF_FLIT2_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 2 to match the VC fieldof the header flit to 2',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_0_INQ_PRF_FLIT2_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_1_INQ_PRF_FLIT2_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_4_1_INQ_PRF_FLIT2_FILTERING_SETUP',
    LABEL => 'AR_RTR_4_1_INQ_PRF_FLIT2_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_1_INQ_PRF_FLIT2_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_1_INQ_PRF_FLIT2_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_4_1_INQ_PRF_FLIT2_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_4_1_INQ_PRF_FLIT2_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC2_FILTER_FLIT2_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_1_INQ_PRF_FLIT2_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_1_INQ_PRF_FLIT2_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_4_1_INQ_PRF_FLIT2_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_4_1_INQ_PRF_FLIT2_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC2 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_1_INQ_PRF_FLIT2_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_1_INQ_PRF_FLIT2_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_4_1_INQ_PRF_FLIT2_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_4_1_INQ_PRF_FLIT2_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 2 to match the VC fieldof the header flit to 2',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_1_INQ_PRF_FLIT2_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_2_INQ_PRF_FLIT2_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_4_2_INQ_PRF_FLIT2_FILTERING_SETUP',
    LABEL => 'AR_RTR_4_2_INQ_PRF_FLIT2_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_2_INQ_PRF_FLIT2_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_2_INQ_PRF_FLIT2_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_4_2_INQ_PRF_FLIT2_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_4_2_INQ_PRF_FLIT2_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC2_FILTER_FLIT2_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_2_INQ_PRF_FLIT2_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_2_INQ_PRF_FLIT2_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_4_2_INQ_PRF_FLIT2_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_4_2_INQ_PRF_FLIT2_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC2 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_2_INQ_PRF_FLIT2_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_2_INQ_PRF_FLIT2_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_4_2_INQ_PRF_FLIT2_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_4_2_INQ_PRF_FLIT2_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 2 to match the VC fieldof the header flit to 2',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_2_INQ_PRF_FLIT2_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_3_INQ_PRF_FLIT2_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_4_3_INQ_PRF_FLIT2_FILTERING_SETUP',
    LABEL => 'AR_RTR_4_3_INQ_PRF_FLIT2_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_3_INQ_PRF_FLIT2_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_3_INQ_PRF_FLIT2_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_4_3_INQ_PRF_FLIT2_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_4_3_INQ_PRF_FLIT2_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC2_FILTER_FLIT2_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_3_INQ_PRF_FLIT2_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_3_INQ_PRF_FLIT2_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_4_3_INQ_PRF_FLIT2_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_4_3_INQ_PRF_FLIT2_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC2 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_3_INQ_PRF_FLIT2_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_3_INQ_PRF_FLIT2_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_4_3_INQ_PRF_FLIT2_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_4_3_INQ_PRF_FLIT2_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 2 to match the VC fieldof the header flit to 2',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_3_INQ_PRF_FLIT2_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_4_INQ_PRF_FLIT2_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_4_4_INQ_PRF_FLIT2_FILTERING_SETUP',
    LABEL => 'AR_RTR_4_4_INQ_PRF_FLIT2_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_4_INQ_PRF_FLIT2_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_4_INQ_PRF_FLIT2_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_4_4_INQ_PRF_FLIT2_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_4_4_INQ_PRF_FLIT2_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC2_FILTER_FLIT2_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_4_INQ_PRF_FLIT2_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_4_INQ_PRF_FLIT2_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_4_4_INQ_PRF_FLIT2_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_4_4_INQ_PRF_FLIT2_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC2 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_4_INQ_PRF_FLIT2_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_4_INQ_PRF_FLIT2_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_4_4_INQ_PRF_FLIT2_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_4_4_INQ_PRF_FLIT2_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 2 to match the VC fieldof the header flit to 2',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_4_INQ_PRF_FLIT2_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_5_INQ_PRF_FLIT2_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_4_5_INQ_PRF_FLIT2_FILTERING_SETUP',
    LABEL => 'AR_RTR_4_5_INQ_PRF_FLIT2_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_5_INQ_PRF_FLIT2_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_5_INQ_PRF_FLIT2_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_4_5_INQ_PRF_FLIT2_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_4_5_INQ_PRF_FLIT2_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC2_FILTER_FLIT2_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_5_INQ_PRF_FLIT2_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_5_INQ_PRF_FLIT2_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_4_5_INQ_PRF_FLIT2_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_4_5_INQ_PRF_FLIT2_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC2 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_5_INQ_PRF_FLIT2_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_5_INQ_PRF_FLIT2_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_4_5_INQ_PRF_FLIT2_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_4_5_INQ_PRF_FLIT2_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 2 to match the VC fieldof the header flit to 2',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_5_INQ_PRF_FLIT2_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_6_INQ_PRF_FLIT2_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_4_6_INQ_PRF_FLIT2_FILTERING_SETUP',
    LABEL => 'AR_RTR_4_6_INQ_PRF_FLIT2_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_6_INQ_PRF_FLIT2_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_6_INQ_PRF_FLIT2_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_4_6_INQ_PRF_FLIT2_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_4_6_INQ_PRF_FLIT2_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC2_FILTER_FLIT2_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_6_INQ_PRF_FLIT2_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_6_INQ_PRF_FLIT2_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_4_6_INQ_PRF_FLIT2_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_4_6_INQ_PRF_FLIT2_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC2 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_6_INQ_PRF_FLIT2_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_6_INQ_PRF_FLIT2_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_4_6_INQ_PRF_FLIT2_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_4_6_INQ_PRF_FLIT2_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 2 to match the VC fieldof the header flit to 2',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_6_INQ_PRF_FLIT2_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_7_INQ_PRF_FLIT2_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_4_7_INQ_PRF_FLIT2_FILTERING_SETUP',
    LABEL => 'AR_RTR_4_7_INQ_PRF_FLIT2_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_7_INQ_PRF_FLIT2_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_7_INQ_PRF_FLIT2_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_4_7_INQ_PRF_FLIT2_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_4_7_INQ_PRF_FLIT2_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC2_FILTER_FLIT2_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_7_INQ_PRF_FLIT2_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_7_INQ_PRF_FLIT2_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_4_7_INQ_PRF_FLIT2_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_4_7_INQ_PRF_FLIT2_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC2 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_7_INQ_PRF_FLIT2_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_7_INQ_PRF_FLIT2_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_4_7_INQ_PRF_FLIT2_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_4_7_INQ_PRF_FLIT2_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 2 to match the VC fieldof the header flit to 2',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_7_INQ_PRF_FLIT2_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_0_INQ_PRF_FLIT2_FILTERING_MASK'} = {
    NAME => 'AR_RTR_0_0_INQ_PRF_FLIT2_FILTERING_MASK',
    LABEL => 'AR_RTR_0_0_INQ_PRF_FLIT2_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_0_INQ_PRF_FLIT2_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_0_INQ_PRF_FLIT2_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_0_0_INQ_PRF_FLIT2_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_0_0_INQ_PRF_FLIT2_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_0_INQ_PRF_FLIT2_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_1_INQ_PRF_FLIT2_FILTERING_MASK'} = {
    NAME => 'AR_RTR_0_1_INQ_PRF_FLIT2_FILTERING_MASK',
    LABEL => 'AR_RTR_0_1_INQ_PRF_FLIT2_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_1_INQ_PRF_FLIT2_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_1_INQ_PRF_FLIT2_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_0_1_INQ_PRF_FLIT2_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_0_1_INQ_PRF_FLIT2_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_1_INQ_PRF_FLIT2_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_2_INQ_PRF_FLIT2_FILTERING_MASK'} = {
    NAME => 'AR_RTR_0_2_INQ_PRF_FLIT2_FILTERING_MASK',
    LABEL => 'AR_RTR_0_2_INQ_PRF_FLIT2_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_2_INQ_PRF_FLIT2_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_2_INQ_PRF_FLIT2_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_0_2_INQ_PRF_FLIT2_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_0_2_INQ_PRF_FLIT2_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_2_INQ_PRF_FLIT2_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_3_INQ_PRF_FLIT2_FILTERING_MASK'} = {
    NAME => 'AR_RTR_0_3_INQ_PRF_FLIT2_FILTERING_MASK',
    LABEL => 'AR_RTR_0_3_INQ_PRF_FLIT2_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_3_INQ_PRF_FLIT2_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_3_INQ_PRF_FLIT2_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_0_3_INQ_PRF_FLIT2_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_0_3_INQ_PRF_FLIT2_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_3_INQ_PRF_FLIT2_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_4_INQ_PRF_FLIT2_FILTERING_MASK'} = {
    NAME => 'AR_RTR_0_4_INQ_PRF_FLIT2_FILTERING_MASK',
    LABEL => 'AR_RTR_0_4_INQ_PRF_FLIT2_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_4_INQ_PRF_FLIT2_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_4_INQ_PRF_FLIT2_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_0_4_INQ_PRF_FLIT2_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_0_4_INQ_PRF_FLIT2_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_4_INQ_PRF_FLIT2_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_5_INQ_PRF_FLIT2_FILTERING_MASK'} = {
    NAME => 'AR_RTR_0_5_INQ_PRF_FLIT2_FILTERING_MASK',
    LABEL => 'AR_RTR_0_5_INQ_PRF_FLIT2_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_5_INQ_PRF_FLIT2_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_5_INQ_PRF_FLIT2_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_0_5_INQ_PRF_FLIT2_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_0_5_INQ_PRF_FLIT2_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_5_INQ_PRF_FLIT2_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_6_INQ_PRF_FLIT2_FILTERING_MASK'} = {
    NAME => 'AR_RTR_0_6_INQ_PRF_FLIT2_FILTERING_MASK',
    LABEL => 'AR_RTR_0_6_INQ_PRF_FLIT2_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_6_INQ_PRF_FLIT2_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_6_INQ_PRF_FLIT2_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_0_6_INQ_PRF_FLIT2_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_0_6_INQ_PRF_FLIT2_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_6_INQ_PRF_FLIT2_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_7_INQ_PRF_FLIT2_FILTERING_MASK'} = {
    NAME => 'AR_RTR_0_7_INQ_PRF_FLIT2_FILTERING_MASK',
    LABEL => 'AR_RTR_0_7_INQ_PRF_FLIT2_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_7_INQ_PRF_FLIT2_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_7_INQ_PRF_FLIT2_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_0_7_INQ_PRF_FLIT2_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_0_7_INQ_PRF_FLIT2_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_7_INQ_PRF_FLIT2_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_0_INQ_PRF_FLIT2_FILTERING_MASK'} = {
    NAME => 'AR_RTR_1_0_INQ_PRF_FLIT2_FILTERING_MASK',
    LABEL => 'AR_RTR_1_0_INQ_PRF_FLIT2_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_0_INQ_PRF_FLIT2_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_0_INQ_PRF_FLIT2_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_1_0_INQ_PRF_FLIT2_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_1_0_INQ_PRF_FLIT2_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_0_INQ_PRF_FLIT2_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_1_INQ_PRF_FLIT2_FILTERING_MASK'} = {
    NAME => 'AR_RTR_1_1_INQ_PRF_FLIT2_FILTERING_MASK',
    LABEL => 'AR_RTR_1_1_INQ_PRF_FLIT2_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_1_INQ_PRF_FLIT2_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_1_INQ_PRF_FLIT2_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_1_1_INQ_PRF_FLIT2_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_1_1_INQ_PRF_FLIT2_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_1_INQ_PRF_FLIT2_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_2_INQ_PRF_FLIT2_FILTERING_MASK'} = {
    NAME => 'AR_RTR_1_2_INQ_PRF_FLIT2_FILTERING_MASK',
    LABEL => 'AR_RTR_1_2_INQ_PRF_FLIT2_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_2_INQ_PRF_FLIT2_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_2_INQ_PRF_FLIT2_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_1_2_INQ_PRF_FLIT2_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_1_2_INQ_PRF_FLIT2_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_2_INQ_PRF_FLIT2_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_3_INQ_PRF_FLIT2_FILTERING_MASK'} = {
    NAME => 'AR_RTR_1_3_INQ_PRF_FLIT2_FILTERING_MASK',
    LABEL => 'AR_RTR_1_3_INQ_PRF_FLIT2_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_3_INQ_PRF_FLIT2_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_3_INQ_PRF_FLIT2_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_1_3_INQ_PRF_FLIT2_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_1_3_INQ_PRF_FLIT2_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_3_INQ_PRF_FLIT2_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_4_INQ_PRF_FLIT2_FILTERING_MASK'} = {
    NAME => 'AR_RTR_1_4_INQ_PRF_FLIT2_FILTERING_MASK',
    LABEL => 'AR_RTR_1_4_INQ_PRF_FLIT2_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_4_INQ_PRF_FLIT2_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_4_INQ_PRF_FLIT2_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_1_4_INQ_PRF_FLIT2_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_1_4_INQ_PRF_FLIT2_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_4_INQ_PRF_FLIT2_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_5_INQ_PRF_FLIT2_FILTERING_MASK'} = {
    NAME => 'AR_RTR_1_5_INQ_PRF_FLIT2_FILTERING_MASK',
    LABEL => 'AR_RTR_1_5_INQ_PRF_FLIT2_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_5_INQ_PRF_FLIT2_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_5_INQ_PRF_FLIT2_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_1_5_INQ_PRF_FLIT2_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_1_5_INQ_PRF_FLIT2_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_5_INQ_PRF_FLIT2_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_6_INQ_PRF_FLIT2_FILTERING_MASK'} = {
    NAME => 'AR_RTR_1_6_INQ_PRF_FLIT2_FILTERING_MASK',
    LABEL => 'AR_RTR_1_6_INQ_PRF_FLIT2_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_6_INQ_PRF_FLIT2_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_6_INQ_PRF_FLIT2_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_1_6_INQ_PRF_FLIT2_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_1_6_INQ_PRF_FLIT2_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_6_INQ_PRF_FLIT2_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_7_INQ_PRF_FLIT2_FILTERING_MASK'} = {
    NAME => 'AR_RTR_1_7_INQ_PRF_FLIT2_FILTERING_MASK',
    LABEL => 'AR_RTR_1_7_INQ_PRF_FLIT2_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_7_INQ_PRF_FLIT2_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_7_INQ_PRF_FLIT2_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_1_7_INQ_PRF_FLIT2_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_1_7_INQ_PRF_FLIT2_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_7_INQ_PRF_FLIT2_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_0_INQ_PRF_FLIT2_FILTERING_MASK'} = {
    NAME => 'AR_RTR_2_0_INQ_PRF_FLIT2_FILTERING_MASK',
    LABEL => 'AR_RTR_2_0_INQ_PRF_FLIT2_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_0_INQ_PRF_FLIT2_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_0_INQ_PRF_FLIT2_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_2_0_INQ_PRF_FLIT2_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_2_0_INQ_PRF_FLIT2_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_0_INQ_PRF_FLIT2_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_1_INQ_PRF_FLIT2_FILTERING_MASK'} = {
    NAME => 'AR_RTR_2_1_INQ_PRF_FLIT2_FILTERING_MASK',
    LABEL => 'AR_RTR_2_1_INQ_PRF_FLIT2_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_1_INQ_PRF_FLIT2_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_1_INQ_PRF_FLIT2_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_2_1_INQ_PRF_FLIT2_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_2_1_INQ_PRF_FLIT2_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_1_INQ_PRF_FLIT2_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_2_INQ_PRF_FLIT2_FILTERING_MASK'} = {
    NAME => 'AR_RTR_2_2_INQ_PRF_FLIT2_FILTERING_MASK',
    LABEL => 'AR_RTR_2_2_INQ_PRF_FLIT2_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_2_INQ_PRF_FLIT2_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_2_INQ_PRF_FLIT2_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_2_2_INQ_PRF_FLIT2_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_2_2_INQ_PRF_FLIT2_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_2_INQ_PRF_FLIT2_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_3_INQ_PRF_FLIT2_FILTERING_MASK'} = {
    NAME => 'AR_RTR_2_3_INQ_PRF_FLIT2_FILTERING_MASK',
    LABEL => 'AR_RTR_2_3_INQ_PRF_FLIT2_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_3_INQ_PRF_FLIT2_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_3_INQ_PRF_FLIT2_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_2_3_INQ_PRF_FLIT2_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_2_3_INQ_PRF_FLIT2_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_3_INQ_PRF_FLIT2_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_4_INQ_PRF_FLIT2_FILTERING_MASK'} = {
    NAME => 'AR_RTR_2_4_INQ_PRF_FLIT2_FILTERING_MASK',
    LABEL => 'AR_RTR_2_4_INQ_PRF_FLIT2_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_4_INQ_PRF_FLIT2_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_4_INQ_PRF_FLIT2_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_2_4_INQ_PRF_FLIT2_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_2_4_INQ_PRF_FLIT2_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_4_INQ_PRF_FLIT2_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_5_INQ_PRF_FLIT2_FILTERING_MASK'} = {
    NAME => 'AR_RTR_2_5_INQ_PRF_FLIT2_FILTERING_MASK',
    LABEL => 'AR_RTR_2_5_INQ_PRF_FLIT2_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_5_INQ_PRF_FLIT2_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_5_INQ_PRF_FLIT2_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_2_5_INQ_PRF_FLIT2_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_2_5_INQ_PRF_FLIT2_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_5_INQ_PRF_FLIT2_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_6_INQ_PRF_FLIT2_FILTERING_MASK'} = {
    NAME => 'AR_RTR_2_6_INQ_PRF_FLIT2_FILTERING_MASK',
    LABEL => 'AR_RTR_2_6_INQ_PRF_FLIT2_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_6_INQ_PRF_FLIT2_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_6_INQ_PRF_FLIT2_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_2_6_INQ_PRF_FLIT2_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_2_6_INQ_PRF_FLIT2_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_6_INQ_PRF_FLIT2_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_7_INQ_PRF_FLIT2_FILTERING_MASK'} = {
    NAME => 'AR_RTR_2_7_INQ_PRF_FLIT2_FILTERING_MASK',
    LABEL => 'AR_RTR_2_7_INQ_PRF_FLIT2_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_7_INQ_PRF_FLIT2_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_7_INQ_PRF_FLIT2_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_2_7_INQ_PRF_FLIT2_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_2_7_INQ_PRF_FLIT2_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_7_INQ_PRF_FLIT2_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_0_INQ_PRF_FLIT2_FILTERING_MASK'} = {
    NAME => 'AR_RTR_3_0_INQ_PRF_FLIT2_FILTERING_MASK',
    LABEL => 'AR_RTR_3_0_INQ_PRF_FLIT2_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_0_INQ_PRF_FLIT2_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_0_INQ_PRF_FLIT2_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_3_0_INQ_PRF_FLIT2_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_3_0_INQ_PRF_FLIT2_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_0_INQ_PRF_FLIT2_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_1_INQ_PRF_FLIT2_FILTERING_MASK'} = {
    NAME => 'AR_RTR_3_1_INQ_PRF_FLIT2_FILTERING_MASK',
    LABEL => 'AR_RTR_3_1_INQ_PRF_FLIT2_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_1_INQ_PRF_FLIT2_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_1_INQ_PRF_FLIT2_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_3_1_INQ_PRF_FLIT2_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_3_1_INQ_PRF_FLIT2_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_1_INQ_PRF_FLIT2_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_2_INQ_PRF_FLIT2_FILTERING_MASK'} = {
    NAME => 'AR_RTR_3_2_INQ_PRF_FLIT2_FILTERING_MASK',
    LABEL => 'AR_RTR_3_2_INQ_PRF_FLIT2_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_2_INQ_PRF_FLIT2_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_2_INQ_PRF_FLIT2_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_3_2_INQ_PRF_FLIT2_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_3_2_INQ_PRF_FLIT2_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_2_INQ_PRF_FLIT2_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_3_INQ_PRF_FLIT2_FILTERING_MASK'} = {
    NAME => 'AR_RTR_3_3_INQ_PRF_FLIT2_FILTERING_MASK',
    LABEL => 'AR_RTR_3_3_INQ_PRF_FLIT2_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_3_INQ_PRF_FLIT2_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_3_INQ_PRF_FLIT2_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_3_3_INQ_PRF_FLIT2_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_3_3_INQ_PRF_FLIT2_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_3_INQ_PRF_FLIT2_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_4_INQ_PRF_FLIT2_FILTERING_MASK'} = {
    NAME => 'AR_RTR_3_4_INQ_PRF_FLIT2_FILTERING_MASK',
    LABEL => 'AR_RTR_3_4_INQ_PRF_FLIT2_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_4_INQ_PRF_FLIT2_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_4_INQ_PRF_FLIT2_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_3_4_INQ_PRF_FLIT2_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_3_4_INQ_PRF_FLIT2_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_4_INQ_PRF_FLIT2_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_5_INQ_PRF_FLIT2_FILTERING_MASK'} = {
    NAME => 'AR_RTR_3_5_INQ_PRF_FLIT2_FILTERING_MASK',
    LABEL => 'AR_RTR_3_5_INQ_PRF_FLIT2_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_5_INQ_PRF_FLIT2_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_5_INQ_PRF_FLIT2_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_3_5_INQ_PRF_FLIT2_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_3_5_INQ_PRF_FLIT2_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_5_INQ_PRF_FLIT2_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_6_INQ_PRF_FLIT2_FILTERING_MASK'} = {
    NAME => 'AR_RTR_3_6_INQ_PRF_FLIT2_FILTERING_MASK',
    LABEL => 'AR_RTR_3_6_INQ_PRF_FLIT2_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_6_INQ_PRF_FLIT2_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_6_INQ_PRF_FLIT2_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_3_6_INQ_PRF_FLIT2_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_3_6_INQ_PRF_FLIT2_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_6_INQ_PRF_FLIT2_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_7_INQ_PRF_FLIT2_FILTERING_MASK'} = {
    NAME => 'AR_RTR_3_7_INQ_PRF_FLIT2_FILTERING_MASK',
    LABEL => 'AR_RTR_3_7_INQ_PRF_FLIT2_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_7_INQ_PRF_FLIT2_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_7_INQ_PRF_FLIT2_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_3_7_INQ_PRF_FLIT2_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_3_7_INQ_PRF_FLIT2_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_7_INQ_PRF_FLIT2_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_0_INQ_PRF_FLIT2_FILTERING_MASK'} = {
    NAME => 'AR_RTR_4_0_INQ_PRF_FLIT2_FILTERING_MASK',
    LABEL => 'AR_RTR_4_0_INQ_PRF_FLIT2_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_0_INQ_PRF_FLIT2_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_0_INQ_PRF_FLIT2_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_4_0_INQ_PRF_FLIT2_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_4_0_INQ_PRF_FLIT2_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_0_INQ_PRF_FLIT2_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_1_INQ_PRF_FLIT2_FILTERING_MASK'} = {
    NAME => 'AR_RTR_4_1_INQ_PRF_FLIT2_FILTERING_MASK',
    LABEL => 'AR_RTR_4_1_INQ_PRF_FLIT2_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_1_INQ_PRF_FLIT2_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_1_INQ_PRF_FLIT2_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_4_1_INQ_PRF_FLIT2_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_4_1_INQ_PRF_FLIT2_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_1_INQ_PRF_FLIT2_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_2_INQ_PRF_FLIT2_FILTERING_MASK'} = {
    NAME => 'AR_RTR_4_2_INQ_PRF_FLIT2_FILTERING_MASK',
    LABEL => 'AR_RTR_4_2_INQ_PRF_FLIT2_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_2_INQ_PRF_FLIT2_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_2_INQ_PRF_FLIT2_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_4_2_INQ_PRF_FLIT2_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_4_2_INQ_PRF_FLIT2_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_2_INQ_PRF_FLIT2_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_3_INQ_PRF_FLIT2_FILTERING_MASK'} = {
    NAME => 'AR_RTR_4_3_INQ_PRF_FLIT2_FILTERING_MASK',
    LABEL => 'AR_RTR_4_3_INQ_PRF_FLIT2_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_3_INQ_PRF_FLIT2_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_3_INQ_PRF_FLIT2_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_4_3_INQ_PRF_FLIT2_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_4_3_INQ_PRF_FLIT2_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_3_INQ_PRF_FLIT2_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_4_INQ_PRF_FLIT2_FILTERING_MASK'} = {
    NAME => 'AR_RTR_4_4_INQ_PRF_FLIT2_FILTERING_MASK',
    LABEL => 'AR_RTR_4_4_INQ_PRF_FLIT2_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_4_INQ_PRF_FLIT2_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_4_INQ_PRF_FLIT2_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_4_4_INQ_PRF_FLIT2_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_4_4_INQ_PRF_FLIT2_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_4_INQ_PRF_FLIT2_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_5_INQ_PRF_FLIT2_FILTERING_MASK'} = {
    NAME => 'AR_RTR_4_5_INQ_PRF_FLIT2_FILTERING_MASK',
    LABEL => 'AR_RTR_4_5_INQ_PRF_FLIT2_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_5_INQ_PRF_FLIT2_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_5_INQ_PRF_FLIT2_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_4_5_INQ_PRF_FLIT2_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_4_5_INQ_PRF_FLIT2_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_5_INQ_PRF_FLIT2_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_6_INQ_PRF_FLIT2_FILTERING_MASK'} = {
    NAME => 'AR_RTR_4_6_INQ_PRF_FLIT2_FILTERING_MASK',
    LABEL => 'AR_RTR_4_6_INQ_PRF_FLIT2_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_6_INQ_PRF_FLIT2_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_6_INQ_PRF_FLIT2_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_4_6_INQ_PRF_FLIT2_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_4_6_INQ_PRF_FLIT2_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_6_INQ_PRF_FLIT2_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_7_INQ_PRF_FLIT2_FILTERING_MASK'} = {
    NAME => 'AR_RTR_4_7_INQ_PRF_FLIT2_FILTERING_MASK',
    LABEL => 'AR_RTR_4_7_INQ_PRF_FLIT2_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_7_INQ_PRF_FLIT2_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_7_INQ_PRF_FLIT2_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_4_7_INQ_PRF_FLIT2_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_4_7_INQ_PRF_FLIT2_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_7_INQ_PRF_FLIT2_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_0_INQ_PRF_FLIT3_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_0_0_INQ_PRF_FLIT3_FILTERING_SETUP',
    LABEL => 'AR_RTR_0_0_INQ_PRF_FLIT3_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_0_INQ_PRF_FLIT3_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_0_INQ_PRF_FLIT3_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_0_0_INQ_PRF_FLIT3_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_0_0_INQ_PRF_FLIT3_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC3_FILTER_FLIT3_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_0_INQ_PRF_FLIT3_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_0_INQ_PRF_FLIT3_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_0_0_INQ_PRF_FLIT3_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_0_0_INQ_PRF_FLIT3_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC3 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_0_INQ_PRF_FLIT3_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_0_INQ_PRF_FLIT3_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_0_0_INQ_PRF_FLIT3_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_0_0_INQ_PRF_FLIT3_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 3 to match the VC fieldof the header flit to 3',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_0_INQ_PRF_FLIT3_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_1_INQ_PRF_FLIT3_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_0_1_INQ_PRF_FLIT3_FILTERING_SETUP',
    LABEL => 'AR_RTR_0_1_INQ_PRF_FLIT3_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_1_INQ_PRF_FLIT3_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_1_INQ_PRF_FLIT3_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_0_1_INQ_PRF_FLIT3_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_0_1_INQ_PRF_FLIT3_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC3_FILTER_FLIT3_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_1_INQ_PRF_FLIT3_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_1_INQ_PRF_FLIT3_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_0_1_INQ_PRF_FLIT3_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_0_1_INQ_PRF_FLIT3_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC3 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_1_INQ_PRF_FLIT3_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_1_INQ_PRF_FLIT3_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_0_1_INQ_PRF_FLIT3_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_0_1_INQ_PRF_FLIT3_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 3 to match the VC fieldof the header flit to 3',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_1_INQ_PRF_FLIT3_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_2_INQ_PRF_FLIT3_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_0_2_INQ_PRF_FLIT3_FILTERING_SETUP',
    LABEL => 'AR_RTR_0_2_INQ_PRF_FLIT3_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_2_INQ_PRF_FLIT3_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_2_INQ_PRF_FLIT3_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_0_2_INQ_PRF_FLIT3_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_0_2_INQ_PRF_FLIT3_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC3_FILTER_FLIT3_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_2_INQ_PRF_FLIT3_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_2_INQ_PRF_FLIT3_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_0_2_INQ_PRF_FLIT3_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_0_2_INQ_PRF_FLIT3_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC3 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_2_INQ_PRF_FLIT3_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_2_INQ_PRF_FLIT3_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_0_2_INQ_PRF_FLIT3_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_0_2_INQ_PRF_FLIT3_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 3 to match the VC fieldof the header flit to 3',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_2_INQ_PRF_FLIT3_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_3_INQ_PRF_FLIT3_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_0_3_INQ_PRF_FLIT3_FILTERING_SETUP',
    LABEL => 'AR_RTR_0_3_INQ_PRF_FLIT3_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_3_INQ_PRF_FLIT3_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_3_INQ_PRF_FLIT3_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_0_3_INQ_PRF_FLIT3_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_0_3_INQ_PRF_FLIT3_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC3_FILTER_FLIT3_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_3_INQ_PRF_FLIT3_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_3_INQ_PRF_FLIT3_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_0_3_INQ_PRF_FLIT3_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_0_3_INQ_PRF_FLIT3_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC3 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_3_INQ_PRF_FLIT3_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_3_INQ_PRF_FLIT3_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_0_3_INQ_PRF_FLIT3_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_0_3_INQ_PRF_FLIT3_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 3 to match the VC fieldof the header flit to 3',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_3_INQ_PRF_FLIT3_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_4_INQ_PRF_FLIT3_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_0_4_INQ_PRF_FLIT3_FILTERING_SETUP',
    LABEL => 'AR_RTR_0_4_INQ_PRF_FLIT3_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_4_INQ_PRF_FLIT3_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_4_INQ_PRF_FLIT3_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_0_4_INQ_PRF_FLIT3_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_0_4_INQ_PRF_FLIT3_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC3_FILTER_FLIT3_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_4_INQ_PRF_FLIT3_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_4_INQ_PRF_FLIT3_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_0_4_INQ_PRF_FLIT3_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_0_4_INQ_PRF_FLIT3_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC3 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_4_INQ_PRF_FLIT3_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_4_INQ_PRF_FLIT3_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_0_4_INQ_PRF_FLIT3_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_0_4_INQ_PRF_FLIT3_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 3 to match the VC fieldof the header flit to 3',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_4_INQ_PRF_FLIT3_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_5_INQ_PRF_FLIT3_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_0_5_INQ_PRF_FLIT3_FILTERING_SETUP',
    LABEL => 'AR_RTR_0_5_INQ_PRF_FLIT3_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_5_INQ_PRF_FLIT3_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_5_INQ_PRF_FLIT3_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_0_5_INQ_PRF_FLIT3_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_0_5_INQ_PRF_FLIT3_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC3_FILTER_FLIT3_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_5_INQ_PRF_FLIT3_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_5_INQ_PRF_FLIT3_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_0_5_INQ_PRF_FLIT3_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_0_5_INQ_PRF_FLIT3_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC3 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_5_INQ_PRF_FLIT3_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_5_INQ_PRF_FLIT3_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_0_5_INQ_PRF_FLIT3_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_0_5_INQ_PRF_FLIT3_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 3 to match the VC fieldof the header flit to 3',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_5_INQ_PRF_FLIT3_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_6_INQ_PRF_FLIT3_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_0_6_INQ_PRF_FLIT3_FILTERING_SETUP',
    LABEL => 'AR_RTR_0_6_INQ_PRF_FLIT3_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_6_INQ_PRF_FLIT3_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_6_INQ_PRF_FLIT3_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_0_6_INQ_PRF_FLIT3_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_0_6_INQ_PRF_FLIT3_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC3_FILTER_FLIT3_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_6_INQ_PRF_FLIT3_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_6_INQ_PRF_FLIT3_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_0_6_INQ_PRF_FLIT3_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_0_6_INQ_PRF_FLIT3_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC3 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_6_INQ_PRF_FLIT3_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_6_INQ_PRF_FLIT3_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_0_6_INQ_PRF_FLIT3_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_0_6_INQ_PRF_FLIT3_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 3 to match the VC fieldof the header flit to 3',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_6_INQ_PRF_FLIT3_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_7_INQ_PRF_FLIT3_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_0_7_INQ_PRF_FLIT3_FILTERING_SETUP',
    LABEL => 'AR_RTR_0_7_INQ_PRF_FLIT3_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_7_INQ_PRF_FLIT3_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_7_INQ_PRF_FLIT3_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_0_7_INQ_PRF_FLIT3_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_0_7_INQ_PRF_FLIT3_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC3_FILTER_FLIT3_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_7_INQ_PRF_FLIT3_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_7_INQ_PRF_FLIT3_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_0_7_INQ_PRF_FLIT3_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_0_7_INQ_PRF_FLIT3_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC3 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_7_INQ_PRF_FLIT3_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_7_INQ_PRF_FLIT3_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_0_7_INQ_PRF_FLIT3_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_0_7_INQ_PRF_FLIT3_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 3 to match the VC fieldof the header flit to 3',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_7_INQ_PRF_FLIT3_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_0_INQ_PRF_FLIT3_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_1_0_INQ_PRF_FLIT3_FILTERING_SETUP',
    LABEL => 'AR_RTR_1_0_INQ_PRF_FLIT3_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_0_INQ_PRF_FLIT3_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_0_INQ_PRF_FLIT3_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_1_0_INQ_PRF_FLIT3_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_1_0_INQ_PRF_FLIT3_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC3_FILTER_FLIT3_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_0_INQ_PRF_FLIT3_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_0_INQ_PRF_FLIT3_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_1_0_INQ_PRF_FLIT3_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_1_0_INQ_PRF_FLIT3_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC3 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_0_INQ_PRF_FLIT3_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_0_INQ_PRF_FLIT3_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_1_0_INQ_PRF_FLIT3_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_1_0_INQ_PRF_FLIT3_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 3 to match the VC fieldof the header flit to 3',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_0_INQ_PRF_FLIT3_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_1_INQ_PRF_FLIT3_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_1_1_INQ_PRF_FLIT3_FILTERING_SETUP',
    LABEL => 'AR_RTR_1_1_INQ_PRF_FLIT3_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_1_INQ_PRF_FLIT3_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_1_INQ_PRF_FLIT3_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_1_1_INQ_PRF_FLIT3_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_1_1_INQ_PRF_FLIT3_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC3_FILTER_FLIT3_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_1_INQ_PRF_FLIT3_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_1_INQ_PRF_FLIT3_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_1_1_INQ_PRF_FLIT3_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_1_1_INQ_PRF_FLIT3_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC3 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_1_INQ_PRF_FLIT3_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_1_INQ_PRF_FLIT3_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_1_1_INQ_PRF_FLIT3_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_1_1_INQ_PRF_FLIT3_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 3 to match the VC fieldof the header flit to 3',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_1_INQ_PRF_FLIT3_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_2_INQ_PRF_FLIT3_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_1_2_INQ_PRF_FLIT3_FILTERING_SETUP',
    LABEL => 'AR_RTR_1_2_INQ_PRF_FLIT3_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_2_INQ_PRF_FLIT3_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_2_INQ_PRF_FLIT3_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_1_2_INQ_PRF_FLIT3_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_1_2_INQ_PRF_FLIT3_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC3_FILTER_FLIT3_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_2_INQ_PRF_FLIT3_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_2_INQ_PRF_FLIT3_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_1_2_INQ_PRF_FLIT3_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_1_2_INQ_PRF_FLIT3_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC3 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_2_INQ_PRF_FLIT3_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_2_INQ_PRF_FLIT3_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_1_2_INQ_PRF_FLIT3_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_1_2_INQ_PRF_FLIT3_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 3 to match the VC fieldof the header flit to 3',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_2_INQ_PRF_FLIT3_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_3_INQ_PRF_FLIT3_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_1_3_INQ_PRF_FLIT3_FILTERING_SETUP',
    LABEL => 'AR_RTR_1_3_INQ_PRF_FLIT3_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_3_INQ_PRF_FLIT3_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_3_INQ_PRF_FLIT3_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_1_3_INQ_PRF_FLIT3_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_1_3_INQ_PRF_FLIT3_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC3_FILTER_FLIT3_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_3_INQ_PRF_FLIT3_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_3_INQ_PRF_FLIT3_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_1_3_INQ_PRF_FLIT3_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_1_3_INQ_PRF_FLIT3_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC3 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_3_INQ_PRF_FLIT3_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_3_INQ_PRF_FLIT3_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_1_3_INQ_PRF_FLIT3_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_1_3_INQ_PRF_FLIT3_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 3 to match the VC fieldof the header flit to 3',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_3_INQ_PRF_FLIT3_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_4_INQ_PRF_FLIT3_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_1_4_INQ_PRF_FLIT3_FILTERING_SETUP',
    LABEL => 'AR_RTR_1_4_INQ_PRF_FLIT3_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_4_INQ_PRF_FLIT3_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_4_INQ_PRF_FLIT3_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_1_4_INQ_PRF_FLIT3_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_1_4_INQ_PRF_FLIT3_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC3_FILTER_FLIT3_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_4_INQ_PRF_FLIT3_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_4_INQ_PRF_FLIT3_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_1_4_INQ_PRF_FLIT3_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_1_4_INQ_PRF_FLIT3_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC3 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_4_INQ_PRF_FLIT3_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_4_INQ_PRF_FLIT3_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_1_4_INQ_PRF_FLIT3_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_1_4_INQ_PRF_FLIT3_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 3 to match the VC fieldof the header flit to 3',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_4_INQ_PRF_FLIT3_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_5_INQ_PRF_FLIT3_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_1_5_INQ_PRF_FLIT3_FILTERING_SETUP',
    LABEL => 'AR_RTR_1_5_INQ_PRF_FLIT3_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_5_INQ_PRF_FLIT3_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_5_INQ_PRF_FLIT3_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_1_5_INQ_PRF_FLIT3_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_1_5_INQ_PRF_FLIT3_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC3_FILTER_FLIT3_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_5_INQ_PRF_FLIT3_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_5_INQ_PRF_FLIT3_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_1_5_INQ_PRF_FLIT3_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_1_5_INQ_PRF_FLIT3_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC3 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_5_INQ_PRF_FLIT3_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_5_INQ_PRF_FLIT3_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_1_5_INQ_PRF_FLIT3_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_1_5_INQ_PRF_FLIT3_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 3 to match the VC fieldof the header flit to 3',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_5_INQ_PRF_FLIT3_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_6_INQ_PRF_FLIT3_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_1_6_INQ_PRF_FLIT3_FILTERING_SETUP',
    LABEL => 'AR_RTR_1_6_INQ_PRF_FLIT3_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_6_INQ_PRF_FLIT3_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_6_INQ_PRF_FLIT3_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_1_6_INQ_PRF_FLIT3_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_1_6_INQ_PRF_FLIT3_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC3_FILTER_FLIT3_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_6_INQ_PRF_FLIT3_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_6_INQ_PRF_FLIT3_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_1_6_INQ_PRF_FLIT3_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_1_6_INQ_PRF_FLIT3_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC3 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_6_INQ_PRF_FLIT3_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_6_INQ_PRF_FLIT3_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_1_6_INQ_PRF_FLIT3_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_1_6_INQ_PRF_FLIT3_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 3 to match the VC fieldof the header flit to 3',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_6_INQ_PRF_FLIT3_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_7_INQ_PRF_FLIT3_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_1_7_INQ_PRF_FLIT3_FILTERING_SETUP',
    LABEL => 'AR_RTR_1_7_INQ_PRF_FLIT3_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_7_INQ_PRF_FLIT3_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_7_INQ_PRF_FLIT3_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_1_7_INQ_PRF_FLIT3_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_1_7_INQ_PRF_FLIT3_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC3_FILTER_FLIT3_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_7_INQ_PRF_FLIT3_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_7_INQ_PRF_FLIT3_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_1_7_INQ_PRF_FLIT3_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_1_7_INQ_PRF_FLIT3_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC3 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_7_INQ_PRF_FLIT3_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_7_INQ_PRF_FLIT3_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_1_7_INQ_PRF_FLIT3_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_1_7_INQ_PRF_FLIT3_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 3 to match the VC fieldof the header flit to 3',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_7_INQ_PRF_FLIT3_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_0_INQ_PRF_FLIT3_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_2_0_INQ_PRF_FLIT3_FILTERING_SETUP',
    LABEL => 'AR_RTR_2_0_INQ_PRF_FLIT3_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_0_INQ_PRF_FLIT3_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_0_INQ_PRF_FLIT3_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_2_0_INQ_PRF_FLIT3_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_2_0_INQ_PRF_FLIT3_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC3_FILTER_FLIT3_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_0_INQ_PRF_FLIT3_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_0_INQ_PRF_FLIT3_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_2_0_INQ_PRF_FLIT3_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_2_0_INQ_PRF_FLIT3_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC3 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_0_INQ_PRF_FLIT3_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_0_INQ_PRF_FLIT3_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_2_0_INQ_PRF_FLIT3_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_2_0_INQ_PRF_FLIT3_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 3 to match the VC fieldof the header flit to 3',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_0_INQ_PRF_FLIT3_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_1_INQ_PRF_FLIT3_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_2_1_INQ_PRF_FLIT3_FILTERING_SETUP',
    LABEL => 'AR_RTR_2_1_INQ_PRF_FLIT3_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_1_INQ_PRF_FLIT3_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_1_INQ_PRF_FLIT3_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_2_1_INQ_PRF_FLIT3_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_2_1_INQ_PRF_FLIT3_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC3_FILTER_FLIT3_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_1_INQ_PRF_FLIT3_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_1_INQ_PRF_FLIT3_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_2_1_INQ_PRF_FLIT3_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_2_1_INQ_PRF_FLIT3_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC3 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_1_INQ_PRF_FLIT3_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_1_INQ_PRF_FLIT3_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_2_1_INQ_PRF_FLIT3_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_2_1_INQ_PRF_FLIT3_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 3 to match the VC fieldof the header flit to 3',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_1_INQ_PRF_FLIT3_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_2_INQ_PRF_FLIT3_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_2_2_INQ_PRF_FLIT3_FILTERING_SETUP',
    LABEL => 'AR_RTR_2_2_INQ_PRF_FLIT3_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_2_INQ_PRF_FLIT3_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_2_INQ_PRF_FLIT3_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_2_2_INQ_PRF_FLIT3_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_2_2_INQ_PRF_FLIT3_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC3_FILTER_FLIT3_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_2_INQ_PRF_FLIT3_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_2_INQ_PRF_FLIT3_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_2_2_INQ_PRF_FLIT3_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_2_2_INQ_PRF_FLIT3_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC3 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_2_INQ_PRF_FLIT3_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_2_INQ_PRF_FLIT3_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_2_2_INQ_PRF_FLIT3_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_2_2_INQ_PRF_FLIT3_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 3 to match the VC fieldof the header flit to 3',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_2_INQ_PRF_FLIT3_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_3_INQ_PRF_FLIT3_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_2_3_INQ_PRF_FLIT3_FILTERING_SETUP',
    LABEL => 'AR_RTR_2_3_INQ_PRF_FLIT3_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_3_INQ_PRF_FLIT3_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_3_INQ_PRF_FLIT3_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_2_3_INQ_PRF_FLIT3_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_2_3_INQ_PRF_FLIT3_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC3_FILTER_FLIT3_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_3_INQ_PRF_FLIT3_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_3_INQ_PRF_FLIT3_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_2_3_INQ_PRF_FLIT3_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_2_3_INQ_PRF_FLIT3_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC3 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_3_INQ_PRF_FLIT3_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_3_INQ_PRF_FLIT3_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_2_3_INQ_PRF_FLIT3_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_2_3_INQ_PRF_FLIT3_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 3 to match the VC fieldof the header flit to 3',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_3_INQ_PRF_FLIT3_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_4_INQ_PRF_FLIT3_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_2_4_INQ_PRF_FLIT3_FILTERING_SETUP',
    LABEL => 'AR_RTR_2_4_INQ_PRF_FLIT3_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_4_INQ_PRF_FLIT3_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_4_INQ_PRF_FLIT3_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_2_4_INQ_PRF_FLIT3_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_2_4_INQ_PRF_FLIT3_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC3_FILTER_FLIT3_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_4_INQ_PRF_FLIT3_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_4_INQ_PRF_FLIT3_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_2_4_INQ_PRF_FLIT3_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_2_4_INQ_PRF_FLIT3_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC3 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_4_INQ_PRF_FLIT3_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_4_INQ_PRF_FLIT3_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_2_4_INQ_PRF_FLIT3_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_2_4_INQ_PRF_FLIT3_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 3 to match the VC fieldof the header flit to 3',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_4_INQ_PRF_FLIT3_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_5_INQ_PRF_FLIT3_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_2_5_INQ_PRF_FLIT3_FILTERING_SETUP',
    LABEL => 'AR_RTR_2_5_INQ_PRF_FLIT3_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_5_INQ_PRF_FLIT3_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_5_INQ_PRF_FLIT3_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_2_5_INQ_PRF_FLIT3_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_2_5_INQ_PRF_FLIT3_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC3_FILTER_FLIT3_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_5_INQ_PRF_FLIT3_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_5_INQ_PRF_FLIT3_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_2_5_INQ_PRF_FLIT3_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_2_5_INQ_PRF_FLIT3_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC3 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_5_INQ_PRF_FLIT3_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_5_INQ_PRF_FLIT3_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_2_5_INQ_PRF_FLIT3_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_2_5_INQ_PRF_FLIT3_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 3 to match the VC fieldof the header flit to 3',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_5_INQ_PRF_FLIT3_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_6_INQ_PRF_FLIT3_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_2_6_INQ_PRF_FLIT3_FILTERING_SETUP',
    LABEL => 'AR_RTR_2_6_INQ_PRF_FLIT3_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_6_INQ_PRF_FLIT3_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_6_INQ_PRF_FLIT3_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_2_6_INQ_PRF_FLIT3_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_2_6_INQ_PRF_FLIT3_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC3_FILTER_FLIT3_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_6_INQ_PRF_FLIT3_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_6_INQ_PRF_FLIT3_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_2_6_INQ_PRF_FLIT3_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_2_6_INQ_PRF_FLIT3_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC3 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_6_INQ_PRF_FLIT3_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_6_INQ_PRF_FLIT3_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_2_6_INQ_PRF_FLIT3_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_2_6_INQ_PRF_FLIT3_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 3 to match the VC fieldof the header flit to 3',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_6_INQ_PRF_FLIT3_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_7_INQ_PRF_FLIT3_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_2_7_INQ_PRF_FLIT3_FILTERING_SETUP',
    LABEL => 'AR_RTR_2_7_INQ_PRF_FLIT3_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_7_INQ_PRF_FLIT3_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_7_INQ_PRF_FLIT3_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_2_7_INQ_PRF_FLIT3_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_2_7_INQ_PRF_FLIT3_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC3_FILTER_FLIT3_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_7_INQ_PRF_FLIT3_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_7_INQ_PRF_FLIT3_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_2_7_INQ_PRF_FLIT3_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_2_7_INQ_PRF_FLIT3_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC3 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_7_INQ_PRF_FLIT3_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_7_INQ_PRF_FLIT3_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_2_7_INQ_PRF_FLIT3_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_2_7_INQ_PRF_FLIT3_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 3 to match the VC fieldof the header flit to 3',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_7_INQ_PRF_FLIT3_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_0_INQ_PRF_FLIT3_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_3_0_INQ_PRF_FLIT3_FILTERING_SETUP',
    LABEL => 'AR_RTR_3_0_INQ_PRF_FLIT3_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_0_INQ_PRF_FLIT3_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_0_INQ_PRF_FLIT3_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_3_0_INQ_PRF_FLIT3_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_3_0_INQ_PRF_FLIT3_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC3_FILTER_FLIT3_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_0_INQ_PRF_FLIT3_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_0_INQ_PRF_FLIT3_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_3_0_INQ_PRF_FLIT3_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_3_0_INQ_PRF_FLIT3_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC3 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_0_INQ_PRF_FLIT3_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_0_INQ_PRF_FLIT3_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_3_0_INQ_PRF_FLIT3_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_3_0_INQ_PRF_FLIT3_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 3 to match the VC fieldof the header flit to 3',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_0_INQ_PRF_FLIT3_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_1_INQ_PRF_FLIT3_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_3_1_INQ_PRF_FLIT3_FILTERING_SETUP',
    LABEL => 'AR_RTR_3_1_INQ_PRF_FLIT3_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_1_INQ_PRF_FLIT3_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_1_INQ_PRF_FLIT3_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_3_1_INQ_PRF_FLIT3_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_3_1_INQ_PRF_FLIT3_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC3_FILTER_FLIT3_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_1_INQ_PRF_FLIT3_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_1_INQ_PRF_FLIT3_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_3_1_INQ_PRF_FLIT3_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_3_1_INQ_PRF_FLIT3_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC3 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_1_INQ_PRF_FLIT3_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_1_INQ_PRF_FLIT3_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_3_1_INQ_PRF_FLIT3_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_3_1_INQ_PRF_FLIT3_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 3 to match the VC fieldof the header flit to 3',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_1_INQ_PRF_FLIT3_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_2_INQ_PRF_FLIT3_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_3_2_INQ_PRF_FLIT3_FILTERING_SETUP',
    LABEL => 'AR_RTR_3_2_INQ_PRF_FLIT3_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_2_INQ_PRF_FLIT3_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_2_INQ_PRF_FLIT3_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_3_2_INQ_PRF_FLIT3_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_3_2_INQ_PRF_FLIT3_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC3_FILTER_FLIT3_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_2_INQ_PRF_FLIT3_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_2_INQ_PRF_FLIT3_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_3_2_INQ_PRF_FLIT3_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_3_2_INQ_PRF_FLIT3_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC3 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_2_INQ_PRF_FLIT3_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_2_INQ_PRF_FLIT3_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_3_2_INQ_PRF_FLIT3_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_3_2_INQ_PRF_FLIT3_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 3 to match the VC fieldof the header flit to 3',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_2_INQ_PRF_FLIT3_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_3_INQ_PRF_FLIT3_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_3_3_INQ_PRF_FLIT3_FILTERING_SETUP',
    LABEL => 'AR_RTR_3_3_INQ_PRF_FLIT3_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_3_INQ_PRF_FLIT3_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_3_INQ_PRF_FLIT3_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_3_3_INQ_PRF_FLIT3_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_3_3_INQ_PRF_FLIT3_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC3_FILTER_FLIT3_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_3_INQ_PRF_FLIT3_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_3_INQ_PRF_FLIT3_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_3_3_INQ_PRF_FLIT3_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_3_3_INQ_PRF_FLIT3_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC3 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_3_INQ_PRF_FLIT3_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_3_INQ_PRF_FLIT3_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_3_3_INQ_PRF_FLIT3_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_3_3_INQ_PRF_FLIT3_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 3 to match the VC fieldof the header flit to 3',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_3_INQ_PRF_FLIT3_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_4_INQ_PRF_FLIT3_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_3_4_INQ_PRF_FLIT3_FILTERING_SETUP',
    LABEL => 'AR_RTR_3_4_INQ_PRF_FLIT3_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_4_INQ_PRF_FLIT3_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_4_INQ_PRF_FLIT3_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_3_4_INQ_PRF_FLIT3_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_3_4_INQ_PRF_FLIT3_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC3_FILTER_FLIT3_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_4_INQ_PRF_FLIT3_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_4_INQ_PRF_FLIT3_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_3_4_INQ_PRF_FLIT3_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_3_4_INQ_PRF_FLIT3_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC3 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_4_INQ_PRF_FLIT3_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_4_INQ_PRF_FLIT3_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_3_4_INQ_PRF_FLIT3_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_3_4_INQ_PRF_FLIT3_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 3 to match the VC fieldof the header flit to 3',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_4_INQ_PRF_FLIT3_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_5_INQ_PRF_FLIT3_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_3_5_INQ_PRF_FLIT3_FILTERING_SETUP',
    LABEL => 'AR_RTR_3_5_INQ_PRF_FLIT3_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_5_INQ_PRF_FLIT3_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_5_INQ_PRF_FLIT3_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_3_5_INQ_PRF_FLIT3_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_3_5_INQ_PRF_FLIT3_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC3_FILTER_FLIT3_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_5_INQ_PRF_FLIT3_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_5_INQ_PRF_FLIT3_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_3_5_INQ_PRF_FLIT3_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_3_5_INQ_PRF_FLIT3_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC3 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_5_INQ_PRF_FLIT3_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_5_INQ_PRF_FLIT3_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_3_5_INQ_PRF_FLIT3_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_3_5_INQ_PRF_FLIT3_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 3 to match the VC fieldof the header flit to 3',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_5_INQ_PRF_FLIT3_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_6_INQ_PRF_FLIT3_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_3_6_INQ_PRF_FLIT3_FILTERING_SETUP',
    LABEL => 'AR_RTR_3_6_INQ_PRF_FLIT3_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_6_INQ_PRF_FLIT3_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_6_INQ_PRF_FLIT3_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_3_6_INQ_PRF_FLIT3_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_3_6_INQ_PRF_FLIT3_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC3_FILTER_FLIT3_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_6_INQ_PRF_FLIT3_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_6_INQ_PRF_FLIT3_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_3_6_INQ_PRF_FLIT3_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_3_6_INQ_PRF_FLIT3_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC3 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_6_INQ_PRF_FLIT3_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_6_INQ_PRF_FLIT3_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_3_6_INQ_PRF_FLIT3_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_3_6_INQ_PRF_FLIT3_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 3 to match the VC fieldof the header flit to 3',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_6_INQ_PRF_FLIT3_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_7_INQ_PRF_FLIT3_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_3_7_INQ_PRF_FLIT3_FILTERING_SETUP',
    LABEL => 'AR_RTR_3_7_INQ_PRF_FLIT3_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_7_INQ_PRF_FLIT3_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_7_INQ_PRF_FLIT3_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_3_7_INQ_PRF_FLIT3_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_3_7_INQ_PRF_FLIT3_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC3_FILTER_FLIT3_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_7_INQ_PRF_FLIT3_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_7_INQ_PRF_FLIT3_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_3_7_INQ_PRF_FLIT3_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_3_7_INQ_PRF_FLIT3_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC3 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_7_INQ_PRF_FLIT3_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_7_INQ_PRF_FLIT3_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_3_7_INQ_PRF_FLIT3_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_3_7_INQ_PRF_FLIT3_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 3 to match the VC fieldof the header flit to 3',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_7_INQ_PRF_FLIT3_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_0_INQ_PRF_FLIT3_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_4_0_INQ_PRF_FLIT3_FILTERING_SETUP',
    LABEL => 'AR_RTR_4_0_INQ_PRF_FLIT3_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_0_INQ_PRF_FLIT3_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_0_INQ_PRF_FLIT3_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_4_0_INQ_PRF_FLIT3_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_4_0_INQ_PRF_FLIT3_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC3_FILTER_FLIT3_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_0_INQ_PRF_FLIT3_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_0_INQ_PRF_FLIT3_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_4_0_INQ_PRF_FLIT3_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_4_0_INQ_PRF_FLIT3_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC3 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_0_INQ_PRF_FLIT3_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_0_INQ_PRF_FLIT3_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_4_0_INQ_PRF_FLIT3_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_4_0_INQ_PRF_FLIT3_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 3 to match the VC fieldof the header flit to 3',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_0_INQ_PRF_FLIT3_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_1_INQ_PRF_FLIT3_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_4_1_INQ_PRF_FLIT3_FILTERING_SETUP',
    LABEL => 'AR_RTR_4_1_INQ_PRF_FLIT3_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_1_INQ_PRF_FLIT3_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_1_INQ_PRF_FLIT3_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_4_1_INQ_PRF_FLIT3_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_4_1_INQ_PRF_FLIT3_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC3_FILTER_FLIT3_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_1_INQ_PRF_FLIT3_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_1_INQ_PRF_FLIT3_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_4_1_INQ_PRF_FLIT3_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_4_1_INQ_PRF_FLIT3_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC3 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_1_INQ_PRF_FLIT3_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_1_INQ_PRF_FLIT3_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_4_1_INQ_PRF_FLIT3_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_4_1_INQ_PRF_FLIT3_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 3 to match the VC fieldof the header flit to 3',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_1_INQ_PRF_FLIT3_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_2_INQ_PRF_FLIT3_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_4_2_INQ_PRF_FLIT3_FILTERING_SETUP',
    LABEL => 'AR_RTR_4_2_INQ_PRF_FLIT3_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_2_INQ_PRF_FLIT3_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_2_INQ_PRF_FLIT3_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_4_2_INQ_PRF_FLIT3_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_4_2_INQ_PRF_FLIT3_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC3_FILTER_FLIT3_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_2_INQ_PRF_FLIT3_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_2_INQ_PRF_FLIT3_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_4_2_INQ_PRF_FLIT3_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_4_2_INQ_PRF_FLIT3_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC3 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_2_INQ_PRF_FLIT3_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_2_INQ_PRF_FLIT3_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_4_2_INQ_PRF_FLIT3_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_4_2_INQ_PRF_FLIT3_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 3 to match the VC fieldof the header flit to 3',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_2_INQ_PRF_FLIT3_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_3_INQ_PRF_FLIT3_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_4_3_INQ_PRF_FLIT3_FILTERING_SETUP',
    LABEL => 'AR_RTR_4_3_INQ_PRF_FLIT3_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_3_INQ_PRF_FLIT3_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_3_INQ_PRF_FLIT3_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_4_3_INQ_PRF_FLIT3_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_4_3_INQ_PRF_FLIT3_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC3_FILTER_FLIT3_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_3_INQ_PRF_FLIT3_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_3_INQ_PRF_FLIT3_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_4_3_INQ_PRF_FLIT3_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_4_3_INQ_PRF_FLIT3_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC3 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_3_INQ_PRF_FLIT3_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_3_INQ_PRF_FLIT3_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_4_3_INQ_PRF_FLIT3_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_4_3_INQ_PRF_FLIT3_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 3 to match the VC fieldof the header flit to 3',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_3_INQ_PRF_FLIT3_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_4_INQ_PRF_FLIT3_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_4_4_INQ_PRF_FLIT3_FILTERING_SETUP',
    LABEL => 'AR_RTR_4_4_INQ_PRF_FLIT3_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_4_INQ_PRF_FLIT3_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_4_INQ_PRF_FLIT3_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_4_4_INQ_PRF_FLIT3_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_4_4_INQ_PRF_FLIT3_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC3_FILTER_FLIT3_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_4_INQ_PRF_FLIT3_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_4_INQ_PRF_FLIT3_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_4_4_INQ_PRF_FLIT3_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_4_4_INQ_PRF_FLIT3_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC3 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_4_INQ_PRF_FLIT3_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_4_INQ_PRF_FLIT3_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_4_4_INQ_PRF_FLIT3_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_4_4_INQ_PRF_FLIT3_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 3 to match the VC fieldof the header flit to 3',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_4_INQ_PRF_FLIT3_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_5_INQ_PRF_FLIT3_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_4_5_INQ_PRF_FLIT3_FILTERING_SETUP',
    LABEL => 'AR_RTR_4_5_INQ_PRF_FLIT3_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_5_INQ_PRF_FLIT3_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_5_INQ_PRF_FLIT3_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_4_5_INQ_PRF_FLIT3_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_4_5_INQ_PRF_FLIT3_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC3_FILTER_FLIT3_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_5_INQ_PRF_FLIT3_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_5_INQ_PRF_FLIT3_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_4_5_INQ_PRF_FLIT3_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_4_5_INQ_PRF_FLIT3_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC3 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_5_INQ_PRF_FLIT3_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_5_INQ_PRF_FLIT3_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_4_5_INQ_PRF_FLIT3_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_4_5_INQ_PRF_FLIT3_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 3 to match the VC fieldof the header flit to 3',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_5_INQ_PRF_FLIT3_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_6_INQ_PRF_FLIT3_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_4_6_INQ_PRF_FLIT3_FILTERING_SETUP',
    LABEL => 'AR_RTR_4_6_INQ_PRF_FLIT3_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_6_INQ_PRF_FLIT3_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_6_INQ_PRF_FLIT3_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_4_6_INQ_PRF_FLIT3_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_4_6_INQ_PRF_FLIT3_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC3_FILTER_FLIT3_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_6_INQ_PRF_FLIT3_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_6_INQ_PRF_FLIT3_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_4_6_INQ_PRF_FLIT3_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_4_6_INQ_PRF_FLIT3_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC3 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_6_INQ_PRF_FLIT3_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_6_INQ_PRF_FLIT3_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_4_6_INQ_PRF_FLIT3_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_4_6_INQ_PRF_FLIT3_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 3 to match the VC fieldof the header flit to 3',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_6_INQ_PRF_FLIT3_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_7_INQ_PRF_FLIT3_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_4_7_INQ_PRF_FLIT3_FILTERING_SETUP',
    LABEL => 'AR_RTR_4_7_INQ_PRF_FLIT3_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_7_INQ_PRF_FLIT3_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_7_INQ_PRF_FLIT3_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_4_7_INQ_PRF_FLIT3_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_4_7_INQ_PRF_FLIT3_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC3_FILTER_FLIT3_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_7_INQ_PRF_FLIT3_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_7_INQ_PRF_FLIT3_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_4_7_INQ_PRF_FLIT3_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_4_7_INQ_PRF_FLIT3_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC3 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_7_INQ_PRF_FLIT3_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_7_INQ_PRF_FLIT3_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_4_7_INQ_PRF_FLIT3_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_4_7_INQ_PRF_FLIT3_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 3 to match the VC fieldof the header flit to 3',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_7_INQ_PRF_FLIT3_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_0_INQ_PRF_FLIT3_FILTERING_MASK'} = {
    NAME => 'AR_RTR_0_0_INQ_PRF_FLIT3_FILTERING_MASK',
    LABEL => 'AR_RTR_0_0_INQ_PRF_FLIT3_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_0_INQ_PRF_FLIT3_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_0_INQ_PRF_FLIT3_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_0_0_INQ_PRF_FLIT3_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_0_0_INQ_PRF_FLIT3_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_0_INQ_PRF_FLIT3_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_1_INQ_PRF_FLIT3_FILTERING_MASK'} = {
    NAME => 'AR_RTR_0_1_INQ_PRF_FLIT3_FILTERING_MASK',
    LABEL => 'AR_RTR_0_1_INQ_PRF_FLIT3_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_1_INQ_PRF_FLIT3_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_1_INQ_PRF_FLIT3_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_0_1_INQ_PRF_FLIT3_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_0_1_INQ_PRF_FLIT3_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_1_INQ_PRF_FLIT3_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_2_INQ_PRF_FLIT3_FILTERING_MASK'} = {
    NAME => 'AR_RTR_0_2_INQ_PRF_FLIT3_FILTERING_MASK',
    LABEL => 'AR_RTR_0_2_INQ_PRF_FLIT3_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_2_INQ_PRF_FLIT3_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_2_INQ_PRF_FLIT3_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_0_2_INQ_PRF_FLIT3_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_0_2_INQ_PRF_FLIT3_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_2_INQ_PRF_FLIT3_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_3_INQ_PRF_FLIT3_FILTERING_MASK'} = {
    NAME => 'AR_RTR_0_3_INQ_PRF_FLIT3_FILTERING_MASK',
    LABEL => 'AR_RTR_0_3_INQ_PRF_FLIT3_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_3_INQ_PRF_FLIT3_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_3_INQ_PRF_FLIT3_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_0_3_INQ_PRF_FLIT3_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_0_3_INQ_PRF_FLIT3_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_3_INQ_PRF_FLIT3_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_4_INQ_PRF_FLIT3_FILTERING_MASK'} = {
    NAME => 'AR_RTR_0_4_INQ_PRF_FLIT3_FILTERING_MASK',
    LABEL => 'AR_RTR_0_4_INQ_PRF_FLIT3_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_4_INQ_PRF_FLIT3_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_4_INQ_PRF_FLIT3_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_0_4_INQ_PRF_FLIT3_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_0_4_INQ_PRF_FLIT3_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_4_INQ_PRF_FLIT3_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_5_INQ_PRF_FLIT3_FILTERING_MASK'} = {
    NAME => 'AR_RTR_0_5_INQ_PRF_FLIT3_FILTERING_MASK',
    LABEL => 'AR_RTR_0_5_INQ_PRF_FLIT3_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_5_INQ_PRF_FLIT3_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_5_INQ_PRF_FLIT3_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_0_5_INQ_PRF_FLIT3_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_0_5_INQ_PRF_FLIT3_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_5_INQ_PRF_FLIT3_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_6_INQ_PRF_FLIT3_FILTERING_MASK'} = {
    NAME => 'AR_RTR_0_6_INQ_PRF_FLIT3_FILTERING_MASK',
    LABEL => 'AR_RTR_0_6_INQ_PRF_FLIT3_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_6_INQ_PRF_FLIT3_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_6_INQ_PRF_FLIT3_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_0_6_INQ_PRF_FLIT3_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_0_6_INQ_PRF_FLIT3_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_6_INQ_PRF_FLIT3_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_7_INQ_PRF_FLIT3_FILTERING_MASK'} = {
    NAME => 'AR_RTR_0_7_INQ_PRF_FLIT3_FILTERING_MASK',
    LABEL => 'AR_RTR_0_7_INQ_PRF_FLIT3_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_7_INQ_PRF_FLIT3_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_7_INQ_PRF_FLIT3_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_0_7_INQ_PRF_FLIT3_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_0_7_INQ_PRF_FLIT3_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_7_INQ_PRF_FLIT3_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_0_INQ_PRF_FLIT3_FILTERING_MASK'} = {
    NAME => 'AR_RTR_1_0_INQ_PRF_FLIT3_FILTERING_MASK',
    LABEL => 'AR_RTR_1_0_INQ_PRF_FLIT3_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_0_INQ_PRF_FLIT3_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_0_INQ_PRF_FLIT3_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_1_0_INQ_PRF_FLIT3_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_1_0_INQ_PRF_FLIT3_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_0_INQ_PRF_FLIT3_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_1_INQ_PRF_FLIT3_FILTERING_MASK'} = {
    NAME => 'AR_RTR_1_1_INQ_PRF_FLIT3_FILTERING_MASK',
    LABEL => 'AR_RTR_1_1_INQ_PRF_FLIT3_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_1_INQ_PRF_FLIT3_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_1_INQ_PRF_FLIT3_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_1_1_INQ_PRF_FLIT3_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_1_1_INQ_PRF_FLIT3_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_1_INQ_PRF_FLIT3_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_2_INQ_PRF_FLIT3_FILTERING_MASK'} = {
    NAME => 'AR_RTR_1_2_INQ_PRF_FLIT3_FILTERING_MASK',
    LABEL => 'AR_RTR_1_2_INQ_PRF_FLIT3_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_2_INQ_PRF_FLIT3_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_2_INQ_PRF_FLIT3_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_1_2_INQ_PRF_FLIT3_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_1_2_INQ_PRF_FLIT3_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_2_INQ_PRF_FLIT3_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_3_INQ_PRF_FLIT3_FILTERING_MASK'} = {
    NAME => 'AR_RTR_1_3_INQ_PRF_FLIT3_FILTERING_MASK',
    LABEL => 'AR_RTR_1_3_INQ_PRF_FLIT3_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_3_INQ_PRF_FLIT3_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_3_INQ_PRF_FLIT3_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_1_3_INQ_PRF_FLIT3_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_1_3_INQ_PRF_FLIT3_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_3_INQ_PRF_FLIT3_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_4_INQ_PRF_FLIT3_FILTERING_MASK'} = {
    NAME => 'AR_RTR_1_4_INQ_PRF_FLIT3_FILTERING_MASK',
    LABEL => 'AR_RTR_1_4_INQ_PRF_FLIT3_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_4_INQ_PRF_FLIT3_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_4_INQ_PRF_FLIT3_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_1_4_INQ_PRF_FLIT3_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_1_4_INQ_PRF_FLIT3_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_4_INQ_PRF_FLIT3_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_5_INQ_PRF_FLIT3_FILTERING_MASK'} = {
    NAME => 'AR_RTR_1_5_INQ_PRF_FLIT3_FILTERING_MASK',
    LABEL => 'AR_RTR_1_5_INQ_PRF_FLIT3_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_5_INQ_PRF_FLIT3_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_5_INQ_PRF_FLIT3_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_1_5_INQ_PRF_FLIT3_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_1_5_INQ_PRF_FLIT3_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_5_INQ_PRF_FLIT3_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_6_INQ_PRF_FLIT3_FILTERING_MASK'} = {
    NAME => 'AR_RTR_1_6_INQ_PRF_FLIT3_FILTERING_MASK',
    LABEL => 'AR_RTR_1_6_INQ_PRF_FLIT3_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_6_INQ_PRF_FLIT3_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_6_INQ_PRF_FLIT3_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_1_6_INQ_PRF_FLIT3_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_1_6_INQ_PRF_FLIT3_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_6_INQ_PRF_FLIT3_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_7_INQ_PRF_FLIT3_FILTERING_MASK'} = {
    NAME => 'AR_RTR_1_7_INQ_PRF_FLIT3_FILTERING_MASK',
    LABEL => 'AR_RTR_1_7_INQ_PRF_FLIT3_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_7_INQ_PRF_FLIT3_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_7_INQ_PRF_FLIT3_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_1_7_INQ_PRF_FLIT3_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_1_7_INQ_PRF_FLIT3_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_7_INQ_PRF_FLIT3_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_0_INQ_PRF_FLIT3_FILTERING_MASK'} = {
    NAME => 'AR_RTR_2_0_INQ_PRF_FLIT3_FILTERING_MASK',
    LABEL => 'AR_RTR_2_0_INQ_PRF_FLIT3_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_0_INQ_PRF_FLIT3_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_0_INQ_PRF_FLIT3_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_2_0_INQ_PRF_FLIT3_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_2_0_INQ_PRF_FLIT3_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_0_INQ_PRF_FLIT3_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_1_INQ_PRF_FLIT3_FILTERING_MASK'} = {
    NAME => 'AR_RTR_2_1_INQ_PRF_FLIT3_FILTERING_MASK',
    LABEL => 'AR_RTR_2_1_INQ_PRF_FLIT3_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_1_INQ_PRF_FLIT3_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_1_INQ_PRF_FLIT3_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_2_1_INQ_PRF_FLIT3_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_2_1_INQ_PRF_FLIT3_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_1_INQ_PRF_FLIT3_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_2_INQ_PRF_FLIT3_FILTERING_MASK'} = {
    NAME => 'AR_RTR_2_2_INQ_PRF_FLIT3_FILTERING_MASK',
    LABEL => 'AR_RTR_2_2_INQ_PRF_FLIT3_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_2_INQ_PRF_FLIT3_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_2_INQ_PRF_FLIT3_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_2_2_INQ_PRF_FLIT3_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_2_2_INQ_PRF_FLIT3_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_2_INQ_PRF_FLIT3_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_3_INQ_PRF_FLIT3_FILTERING_MASK'} = {
    NAME => 'AR_RTR_2_3_INQ_PRF_FLIT3_FILTERING_MASK',
    LABEL => 'AR_RTR_2_3_INQ_PRF_FLIT3_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_3_INQ_PRF_FLIT3_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_3_INQ_PRF_FLIT3_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_2_3_INQ_PRF_FLIT3_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_2_3_INQ_PRF_FLIT3_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_3_INQ_PRF_FLIT3_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_4_INQ_PRF_FLIT3_FILTERING_MASK'} = {
    NAME => 'AR_RTR_2_4_INQ_PRF_FLIT3_FILTERING_MASK',
    LABEL => 'AR_RTR_2_4_INQ_PRF_FLIT3_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_4_INQ_PRF_FLIT3_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_4_INQ_PRF_FLIT3_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_2_4_INQ_PRF_FLIT3_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_2_4_INQ_PRF_FLIT3_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_4_INQ_PRF_FLIT3_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_5_INQ_PRF_FLIT3_FILTERING_MASK'} = {
    NAME => 'AR_RTR_2_5_INQ_PRF_FLIT3_FILTERING_MASK',
    LABEL => 'AR_RTR_2_5_INQ_PRF_FLIT3_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_5_INQ_PRF_FLIT3_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_5_INQ_PRF_FLIT3_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_2_5_INQ_PRF_FLIT3_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_2_5_INQ_PRF_FLIT3_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_5_INQ_PRF_FLIT3_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_6_INQ_PRF_FLIT3_FILTERING_MASK'} = {
    NAME => 'AR_RTR_2_6_INQ_PRF_FLIT3_FILTERING_MASK',
    LABEL => 'AR_RTR_2_6_INQ_PRF_FLIT3_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_6_INQ_PRF_FLIT3_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_6_INQ_PRF_FLIT3_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_2_6_INQ_PRF_FLIT3_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_2_6_INQ_PRF_FLIT3_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_6_INQ_PRF_FLIT3_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_7_INQ_PRF_FLIT3_FILTERING_MASK'} = {
    NAME => 'AR_RTR_2_7_INQ_PRF_FLIT3_FILTERING_MASK',
    LABEL => 'AR_RTR_2_7_INQ_PRF_FLIT3_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_7_INQ_PRF_FLIT3_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_7_INQ_PRF_FLIT3_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_2_7_INQ_PRF_FLIT3_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_2_7_INQ_PRF_FLIT3_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_7_INQ_PRF_FLIT3_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_0_INQ_PRF_FLIT3_FILTERING_MASK'} = {
    NAME => 'AR_RTR_3_0_INQ_PRF_FLIT3_FILTERING_MASK',
    LABEL => 'AR_RTR_3_0_INQ_PRF_FLIT3_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_0_INQ_PRF_FLIT3_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_0_INQ_PRF_FLIT3_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_3_0_INQ_PRF_FLIT3_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_3_0_INQ_PRF_FLIT3_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_0_INQ_PRF_FLIT3_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_1_INQ_PRF_FLIT3_FILTERING_MASK'} = {
    NAME => 'AR_RTR_3_1_INQ_PRF_FLIT3_FILTERING_MASK',
    LABEL => 'AR_RTR_3_1_INQ_PRF_FLIT3_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_1_INQ_PRF_FLIT3_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_1_INQ_PRF_FLIT3_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_3_1_INQ_PRF_FLIT3_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_3_1_INQ_PRF_FLIT3_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_1_INQ_PRF_FLIT3_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_2_INQ_PRF_FLIT3_FILTERING_MASK'} = {
    NAME => 'AR_RTR_3_2_INQ_PRF_FLIT3_FILTERING_MASK',
    LABEL => 'AR_RTR_3_2_INQ_PRF_FLIT3_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_2_INQ_PRF_FLIT3_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_2_INQ_PRF_FLIT3_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_3_2_INQ_PRF_FLIT3_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_3_2_INQ_PRF_FLIT3_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_2_INQ_PRF_FLIT3_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_3_INQ_PRF_FLIT3_FILTERING_MASK'} = {
    NAME => 'AR_RTR_3_3_INQ_PRF_FLIT3_FILTERING_MASK',
    LABEL => 'AR_RTR_3_3_INQ_PRF_FLIT3_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_3_INQ_PRF_FLIT3_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_3_INQ_PRF_FLIT3_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_3_3_INQ_PRF_FLIT3_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_3_3_INQ_PRF_FLIT3_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_3_INQ_PRF_FLIT3_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_4_INQ_PRF_FLIT3_FILTERING_MASK'} = {
    NAME => 'AR_RTR_3_4_INQ_PRF_FLIT3_FILTERING_MASK',
    LABEL => 'AR_RTR_3_4_INQ_PRF_FLIT3_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_4_INQ_PRF_FLIT3_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_4_INQ_PRF_FLIT3_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_3_4_INQ_PRF_FLIT3_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_3_4_INQ_PRF_FLIT3_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_4_INQ_PRF_FLIT3_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_5_INQ_PRF_FLIT3_FILTERING_MASK'} = {
    NAME => 'AR_RTR_3_5_INQ_PRF_FLIT3_FILTERING_MASK',
    LABEL => 'AR_RTR_3_5_INQ_PRF_FLIT3_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_5_INQ_PRF_FLIT3_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_5_INQ_PRF_FLIT3_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_3_5_INQ_PRF_FLIT3_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_3_5_INQ_PRF_FLIT3_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_5_INQ_PRF_FLIT3_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_6_INQ_PRF_FLIT3_FILTERING_MASK'} = {
    NAME => 'AR_RTR_3_6_INQ_PRF_FLIT3_FILTERING_MASK',
    LABEL => 'AR_RTR_3_6_INQ_PRF_FLIT3_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_6_INQ_PRF_FLIT3_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_6_INQ_PRF_FLIT3_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_3_6_INQ_PRF_FLIT3_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_3_6_INQ_PRF_FLIT3_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_6_INQ_PRF_FLIT3_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_7_INQ_PRF_FLIT3_FILTERING_MASK'} = {
    NAME => 'AR_RTR_3_7_INQ_PRF_FLIT3_FILTERING_MASK',
    LABEL => 'AR_RTR_3_7_INQ_PRF_FLIT3_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_7_INQ_PRF_FLIT3_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_7_INQ_PRF_FLIT3_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_3_7_INQ_PRF_FLIT3_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_3_7_INQ_PRF_FLIT3_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_7_INQ_PRF_FLIT3_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_0_INQ_PRF_FLIT3_FILTERING_MASK'} = {
    NAME => 'AR_RTR_4_0_INQ_PRF_FLIT3_FILTERING_MASK',
    LABEL => 'AR_RTR_4_0_INQ_PRF_FLIT3_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_0_INQ_PRF_FLIT3_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_0_INQ_PRF_FLIT3_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_4_0_INQ_PRF_FLIT3_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_4_0_INQ_PRF_FLIT3_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_0_INQ_PRF_FLIT3_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_1_INQ_PRF_FLIT3_FILTERING_MASK'} = {
    NAME => 'AR_RTR_4_1_INQ_PRF_FLIT3_FILTERING_MASK',
    LABEL => 'AR_RTR_4_1_INQ_PRF_FLIT3_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_1_INQ_PRF_FLIT3_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_1_INQ_PRF_FLIT3_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_4_1_INQ_PRF_FLIT3_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_4_1_INQ_PRF_FLIT3_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_1_INQ_PRF_FLIT3_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_2_INQ_PRF_FLIT3_FILTERING_MASK'} = {
    NAME => 'AR_RTR_4_2_INQ_PRF_FLIT3_FILTERING_MASK',
    LABEL => 'AR_RTR_4_2_INQ_PRF_FLIT3_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_2_INQ_PRF_FLIT3_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_2_INQ_PRF_FLIT3_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_4_2_INQ_PRF_FLIT3_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_4_2_INQ_PRF_FLIT3_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_2_INQ_PRF_FLIT3_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_3_INQ_PRF_FLIT3_FILTERING_MASK'} = {
    NAME => 'AR_RTR_4_3_INQ_PRF_FLIT3_FILTERING_MASK',
    LABEL => 'AR_RTR_4_3_INQ_PRF_FLIT3_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_3_INQ_PRF_FLIT3_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_3_INQ_PRF_FLIT3_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_4_3_INQ_PRF_FLIT3_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_4_3_INQ_PRF_FLIT3_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_3_INQ_PRF_FLIT3_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_4_INQ_PRF_FLIT3_FILTERING_MASK'} = {
    NAME => 'AR_RTR_4_4_INQ_PRF_FLIT3_FILTERING_MASK',
    LABEL => 'AR_RTR_4_4_INQ_PRF_FLIT3_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_4_INQ_PRF_FLIT3_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_4_INQ_PRF_FLIT3_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_4_4_INQ_PRF_FLIT3_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_4_4_INQ_PRF_FLIT3_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_4_INQ_PRF_FLIT3_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_5_INQ_PRF_FLIT3_FILTERING_MASK'} = {
    NAME => 'AR_RTR_4_5_INQ_PRF_FLIT3_FILTERING_MASK',
    LABEL => 'AR_RTR_4_5_INQ_PRF_FLIT3_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_5_INQ_PRF_FLIT3_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_5_INQ_PRF_FLIT3_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_4_5_INQ_PRF_FLIT3_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_4_5_INQ_PRF_FLIT3_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_5_INQ_PRF_FLIT3_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_6_INQ_PRF_FLIT3_FILTERING_MASK'} = {
    NAME => 'AR_RTR_4_6_INQ_PRF_FLIT3_FILTERING_MASK',
    LABEL => 'AR_RTR_4_6_INQ_PRF_FLIT3_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_6_INQ_PRF_FLIT3_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_6_INQ_PRF_FLIT3_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_4_6_INQ_PRF_FLIT3_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_4_6_INQ_PRF_FLIT3_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_6_INQ_PRF_FLIT3_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_7_INQ_PRF_FLIT3_FILTERING_MASK'} = {
    NAME => 'AR_RTR_4_7_INQ_PRF_FLIT3_FILTERING_MASK',
    LABEL => 'AR_RTR_4_7_INQ_PRF_FLIT3_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_7_INQ_PRF_FLIT3_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_7_INQ_PRF_FLIT3_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_4_7_INQ_PRF_FLIT3_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_4_7_INQ_PRF_FLIT3_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_7_INQ_PRF_FLIT3_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_0_INQ_PRF_FLIT4_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_0_0_INQ_PRF_FLIT4_FILTERING_SETUP',
    LABEL => 'AR_RTR_0_0_INQ_PRF_FLIT4_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_0_INQ_PRF_FLIT4_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_0_INQ_PRF_FLIT4_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_0_0_INQ_PRF_FLIT4_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_0_0_INQ_PRF_FLIT4_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC4_FILTER_FLIT4_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_0_INQ_PRF_FLIT4_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_0_INQ_PRF_FLIT4_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_0_0_INQ_PRF_FLIT4_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_0_0_INQ_PRF_FLIT4_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC4 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_0_INQ_PRF_FLIT4_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_0_INQ_PRF_FLIT4_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_0_0_INQ_PRF_FLIT4_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_0_0_INQ_PRF_FLIT4_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 4 to match the VC fieldof the header flit to 4',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_0_INQ_PRF_FLIT4_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_1_INQ_PRF_FLIT4_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_0_1_INQ_PRF_FLIT4_FILTERING_SETUP',
    LABEL => 'AR_RTR_0_1_INQ_PRF_FLIT4_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_1_INQ_PRF_FLIT4_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_1_INQ_PRF_FLIT4_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_0_1_INQ_PRF_FLIT4_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_0_1_INQ_PRF_FLIT4_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC4_FILTER_FLIT4_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_1_INQ_PRF_FLIT4_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_1_INQ_PRF_FLIT4_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_0_1_INQ_PRF_FLIT4_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_0_1_INQ_PRF_FLIT4_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC4 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_1_INQ_PRF_FLIT4_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_1_INQ_PRF_FLIT4_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_0_1_INQ_PRF_FLIT4_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_0_1_INQ_PRF_FLIT4_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 4 to match the VC fieldof the header flit to 4',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_1_INQ_PRF_FLIT4_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_2_INQ_PRF_FLIT4_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_0_2_INQ_PRF_FLIT4_FILTERING_SETUP',
    LABEL => 'AR_RTR_0_2_INQ_PRF_FLIT4_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_2_INQ_PRF_FLIT4_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_2_INQ_PRF_FLIT4_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_0_2_INQ_PRF_FLIT4_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_0_2_INQ_PRF_FLIT4_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC4_FILTER_FLIT4_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_2_INQ_PRF_FLIT4_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_2_INQ_PRF_FLIT4_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_0_2_INQ_PRF_FLIT4_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_0_2_INQ_PRF_FLIT4_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC4 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_2_INQ_PRF_FLIT4_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_2_INQ_PRF_FLIT4_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_0_2_INQ_PRF_FLIT4_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_0_2_INQ_PRF_FLIT4_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 4 to match the VC fieldof the header flit to 4',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_2_INQ_PRF_FLIT4_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_3_INQ_PRF_FLIT4_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_0_3_INQ_PRF_FLIT4_FILTERING_SETUP',
    LABEL => 'AR_RTR_0_3_INQ_PRF_FLIT4_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_3_INQ_PRF_FLIT4_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_3_INQ_PRF_FLIT4_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_0_3_INQ_PRF_FLIT4_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_0_3_INQ_PRF_FLIT4_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC4_FILTER_FLIT4_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_3_INQ_PRF_FLIT4_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_3_INQ_PRF_FLIT4_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_0_3_INQ_PRF_FLIT4_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_0_3_INQ_PRF_FLIT4_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC4 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_3_INQ_PRF_FLIT4_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_3_INQ_PRF_FLIT4_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_0_3_INQ_PRF_FLIT4_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_0_3_INQ_PRF_FLIT4_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 4 to match the VC fieldof the header flit to 4',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_3_INQ_PRF_FLIT4_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_4_INQ_PRF_FLIT4_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_0_4_INQ_PRF_FLIT4_FILTERING_SETUP',
    LABEL => 'AR_RTR_0_4_INQ_PRF_FLIT4_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_4_INQ_PRF_FLIT4_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_4_INQ_PRF_FLIT4_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_0_4_INQ_PRF_FLIT4_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_0_4_INQ_PRF_FLIT4_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC4_FILTER_FLIT4_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_4_INQ_PRF_FLIT4_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_4_INQ_PRF_FLIT4_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_0_4_INQ_PRF_FLIT4_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_0_4_INQ_PRF_FLIT4_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC4 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_4_INQ_PRF_FLIT4_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_4_INQ_PRF_FLIT4_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_0_4_INQ_PRF_FLIT4_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_0_4_INQ_PRF_FLIT4_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 4 to match the VC fieldof the header flit to 4',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_4_INQ_PRF_FLIT4_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_5_INQ_PRF_FLIT4_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_0_5_INQ_PRF_FLIT4_FILTERING_SETUP',
    LABEL => 'AR_RTR_0_5_INQ_PRF_FLIT4_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_5_INQ_PRF_FLIT4_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_5_INQ_PRF_FLIT4_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_0_5_INQ_PRF_FLIT4_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_0_5_INQ_PRF_FLIT4_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC4_FILTER_FLIT4_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_5_INQ_PRF_FLIT4_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_5_INQ_PRF_FLIT4_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_0_5_INQ_PRF_FLIT4_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_0_5_INQ_PRF_FLIT4_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC4 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_5_INQ_PRF_FLIT4_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_5_INQ_PRF_FLIT4_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_0_5_INQ_PRF_FLIT4_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_0_5_INQ_PRF_FLIT4_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 4 to match the VC fieldof the header flit to 4',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_5_INQ_PRF_FLIT4_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_6_INQ_PRF_FLIT4_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_0_6_INQ_PRF_FLIT4_FILTERING_SETUP',
    LABEL => 'AR_RTR_0_6_INQ_PRF_FLIT4_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_6_INQ_PRF_FLIT4_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_6_INQ_PRF_FLIT4_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_0_6_INQ_PRF_FLIT4_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_0_6_INQ_PRF_FLIT4_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC4_FILTER_FLIT4_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_6_INQ_PRF_FLIT4_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_6_INQ_PRF_FLIT4_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_0_6_INQ_PRF_FLIT4_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_0_6_INQ_PRF_FLIT4_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC4 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_6_INQ_PRF_FLIT4_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_6_INQ_PRF_FLIT4_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_0_6_INQ_PRF_FLIT4_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_0_6_INQ_PRF_FLIT4_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 4 to match the VC fieldof the header flit to 4',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_6_INQ_PRF_FLIT4_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_7_INQ_PRF_FLIT4_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_0_7_INQ_PRF_FLIT4_FILTERING_SETUP',
    LABEL => 'AR_RTR_0_7_INQ_PRF_FLIT4_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_7_INQ_PRF_FLIT4_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_7_INQ_PRF_FLIT4_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_0_7_INQ_PRF_FLIT4_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_0_7_INQ_PRF_FLIT4_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC4_FILTER_FLIT4_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_7_INQ_PRF_FLIT4_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_7_INQ_PRF_FLIT4_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_0_7_INQ_PRF_FLIT4_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_0_7_INQ_PRF_FLIT4_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC4 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_7_INQ_PRF_FLIT4_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_7_INQ_PRF_FLIT4_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_0_7_INQ_PRF_FLIT4_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_0_7_INQ_PRF_FLIT4_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 4 to match the VC fieldof the header flit to 4',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_7_INQ_PRF_FLIT4_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_0_INQ_PRF_FLIT4_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_1_0_INQ_PRF_FLIT4_FILTERING_SETUP',
    LABEL => 'AR_RTR_1_0_INQ_PRF_FLIT4_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_0_INQ_PRF_FLIT4_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_0_INQ_PRF_FLIT4_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_1_0_INQ_PRF_FLIT4_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_1_0_INQ_PRF_FLIT4_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC4_FILTER_FLIT4_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_0_INQ_PRF_FLIT4_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_0_INQ_PRF_FLIT4_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_1_0_INQ_PRF_FLIT4_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_1_0_INQ_PRF_FLIT4_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC4 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_0_INQ_PRF_FLIT4_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_0_INQ_PRF_FLIT4_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_1_0_INQ_PRF_FLIT4_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_1_0_INQ_PRF_FLIT4_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 4 to match the VC fieldof the header flit to 4',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_0_INQ_PRF_FLIT4_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_1_INQ_PRF_FLIT4_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_1_1_INQ_PRF_FLIT4_FILTERING_SETUP',
    LABEL => 'AR_RTR_1_1_INQ_PRF_FLIT4_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_1_INQ_PRF_FLIT4_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_1_INQ_PRF_FLIT4_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_1_1_INQ_PRF_FLIT4_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_1_1_INQ_PRF_FLIT4_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC4_FILTER_FLIT4_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_1_INQ_PRF_FLIT4_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_1_INQ_PRF_FLIT4_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_1_1_INQ_PRF_FLIT4_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_1_1_INQ_PRF_FLIT4_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC4 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_1_INQ_PRF_FLIT4_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_1_INQ_PRF_FLIT4_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_1_1_INQ_PRF_FLIT4_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_1_1_INQ_PRF_FLIT4_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 4 to match the VC fieldof the header flit to 4',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_1_INQ_PRF_FLIT4_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_2_INQ_PRF_FLIT4_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_1_2_INQ_PRF_FLIT4_FILTERING_SETUP',
    LABEL => 'AR_RTR_1_2_INQ_PRF_FLIT4_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_2_INQ_PRF_FLIT4_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_2_INQ_PRF_FLIT4_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_1_2_INQ_PRF_FLIT4_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_1_2_INQ_PRF_FLIT4_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC4_FILTER_FLIT4_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_2_INQ_PRF_FLIT4_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_2_INQ_PRF_FLIT4_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_1_2_INQ_PRF_FLIT4_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_1_2_INQ_PRF_FLIT4_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC4 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_2_INQ_PRF_FLIT4_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_2_INQ_PRF_FLIT4_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_1_2_INQ_PRF_FLIT4_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_1_2_INQ_PRF_FLIT4_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 4 to match the VC fieldof the header flit to 4',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_2_INQ_PRF_FLIT4_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_3_INQ_PRF_FLIT4_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_1_3_INQ_PRF_FLIT4_FILTERING_SETUP',
    LABEL => 'AR_RTR_1_3_INQ_PRF_FLIT4_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_3_INQ_PRF_FLIT4_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_3_INQ_PRF_FLIT4_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_1_3_INQ_PRF_FLIT4_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_1_3_INQ_PRF_FLIT4_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC4_FILTER_FLIT4_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_3_INQ_PRF_FLIT4_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_3_INQ_PRF_FLIT4_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_1_3_INQ_PRF_FLIT4_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_1_3_INQ_PRF_FLIT4_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC4 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_3_INQ_PRF_FLIT4_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_3_INQ_PRF_FLIT4_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_1_3_INQ_PRF_FLIT4_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_1_3_INQ_PRF_FLIT4_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 4 to match the VC fieldof the header flit to 4',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_3_INQ_PRF_FLIT4_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_4_INQ_PRF_FLIT4_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_1_4_INQ_PRF_FLIT4_FILTERING_SETUP',
    LABEL => 'AR_RTR_1_4_INQ_PRF_FLIT4_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_4_INQ_PRF_FLIT4_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_4_INQ_PRF_FLIT4_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_1_4_INQ_PRF_FLIT4_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_1_4_INQ_PRF_FLIT4_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC4_FILTER_FLIT4_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_4_INQ_PRF_FLIT4_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_4_INQ_PRF_FLIT4_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_1_4_INQ_PRF_FLIT4_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_1_4_INQ_PRF_FLIT4_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC4 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_4_INQ_PRF_FLIT4_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_4_INQ_PRF_FLIT4_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_1_4_INQ_PRF_FLIT4_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_1_4_INQ_PRF_FLIT4_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 4 to match the VC fieldof the header flit to 4',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_4_INQ_PRF_FLIT4_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_5_INQ_PRF_FLIT4_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_1_5_INQ_PRF_FLIT4_FILTERING_SETUP',
    LABEL => 'AR_RTR_1_5_INQ_PRF_FLIT4_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_5_INQ_PRF_FLIT4_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_5_INQ_PRF_FLIT4_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_1_5_INQ_PRF_FLIT4_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_1_5_INQ_PRF_FLIT4_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC4_FILTER_FLIT4_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_5_INQ_PRF_FLIT4_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_5_INQ_PRF_FLIT4_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_1_5_INQ_PRF_FLIT4_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_1_5_INQ_PRF_FLIT4_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC4 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_5_INQ_PRF_FLIT4_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_5_INQ_PRF_FLIT4_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_1_5_INQ_PRF_FLIT4_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_1_5_INQ_PRF_FLIT4_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 4 to match the VC fieldof the header flit to 4',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_5_INQ_PRF_FLIT4_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_6_INQ_PRF_FLIT4_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_1_6_INQ_PRF_FLIT4_FILTERING_SETUP',
    LABEL => 'AR_RTR_1_6_INQ_PRF_FLIT4_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_6_INQ_PRF_FLIT4_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_6_INQ_PRF_FLIT4_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_1_6_INQ_PRF_FLIT4_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_1_6_INQ_PRF_FLIT4_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC4_FILTER_FLIT4_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_6_INQ_PRF_FLIT4_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_6_INQ_PRF_FLIT4_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_1_6_INQ_PRF_FLIT4_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_1_6_INQ_PRF_FLIT4_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC4 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_6_INQ_PRF_FLIT4_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_6_INQ_PRF_FLIT4_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_1_6_INQ_PRF_FLIT4_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_1_6_INQ_PRF_FLIT4_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 4 to match the VC fieldof the header flit to 4',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_6_INQ_PRF_FLIT4_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_7_INQ_PRF_FLIT4_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_1_7_INQ_PRF_FLIT4_FILTERING_SETUP',
    LABEL => 'AR_RTR_1_7_INQ_PRF_FLIT4_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_7_INQ_PRF_FLIT4_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_7_INQ_PRF_FLIT4_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_1_7_INQ_PRF_FLIT4_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_1_7_INQ_PRF_FLIT4_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC4_FILTER_FLIT4_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_7_INQ_PRF_FLIT4_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_7_INQ_PRF_FLIT4_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_1_7_INQ_PRF_FLIT4_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_1_7_INQ_PRF_FLIT4_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC4 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_7_INQ_PRF_FLIT4_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_7_INQ_PRF_FLIT4_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_1_7_INQ_PRF_FLIT4_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_1_7_INQ_PRF_FLIT4_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 4 to match the VC fieldof the header flit to 4',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_7_INQ_PRF_FLIT4_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_0_INQ_PRF_FLIT4_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_2_0_INQ_PRF_FLIT4_FILTERING_SETUP',
    LABEL => 'AR_RTR_2_0_INQ_PRF_FLIT4_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_0_INQ_PRF_FLIT4_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_0_INQ_PRF_FLIT4_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_2_0_INQ_PRF_FLIT4_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_2_0_INQ_PRF_FLIT4_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC4_FILTER_FLIT4_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_0_INQ_PRF_FLIT4_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_0_INQ_PRF_FLIT4_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_2_0_INQ_PRF_FLIT4_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_2_0_INQ_PRF_FLIT4_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC4 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_0_INQ_PRF_FLIT4_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_0_INQ_PRF_FLIT4_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_2_0_INQ_PRF_FLIT4_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_2_0_INQ_PRF_FLIT4_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 4 to match the VC fieldof the header flit to 4',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_0_INQ_PRF_FLIT4_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_1_INQ_PRF_FLIT4_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_2_1_INQ_PRF_FLIT4_FILTERING_SETUP',
    LABEL => 'AR_RTR_2_1_INQ_PRF_FLIT4_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_1_INQ_PRF_FLIT4_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_1_INQ_PRF_FLIT4_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_2_1_INQ_PRF_FLIT4_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_2_1_INQ_PRF_FLIT4_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC4_FILTER_FLIT4_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_1_INQ_PRF_FLIT4_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_1_INQ_PRF_FLIT4_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_2_1_INQ_PRF_FLIT4_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_2_1_INQ_PRF_FLIT4_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC4 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_1_INQ_PRF_FLIT4_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_1_INQ_PRF_FLIT4_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_2_1_INQ_PRF_FLIT4_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_2_1_INQ_PRF_FLIT4_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 4 to match the VC fieldof the header flit to 4',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_1_INQ_PRF_FLIT4_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_2_INQ_PRF_FLIT4_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_2_2_INQ_PRF_FLIT4_FILTERING_SETUP',
    LABEL => 'AR_RTR_2_2_INQ_PRF_FLIT4_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_2_INQ_PRF_FLIT4_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_2_INQ_PRF_FLIT4_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_2_2_INQ_PRF_FLIT4_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_2_2_INQ_PRF_FLIT4_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC4_FILTER_FLIT4_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_2_INQ_PRF_FLIT4_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_2_INQ_PRF_FLIT4_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_2_2_INQ_PRF_FLIT4_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_2_2_INQ_PRF_FLIT4_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC4 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_2_INQ_PRF_FLIT4_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_2_INQ_PRF_FLIT4_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_2_2_INQ_PRF_FLIT4_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_2_2_INQ_PRF_FLIT4_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 4 to match the VC fieldof the header flit to 4',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_2_INQ_PRF_FLIT4_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_3_INQ_PRF_FLIT4_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_2_3_INQ_PRF_FLIT4_FILTERING_SETUP',
    LABEL => 'AR_RTR_2_3_INQ_PRF_FLIT4_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_3_INQ_PRF_FLIT4_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_3_INQ_PRF_FLIT4_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_2_3_INQ_PRF_FLIT4_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_2_3_INQ_PRF_FLIT4_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC4_FILTER_FLIT4_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_3_INQ_PRF_FLIT4_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_3_INQ_PRF_FLIT4_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_2_3_INQ_PRF_FLIT4_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_2_3_INQ_PRF_FLIT4_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC4 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_3_INQ_PRF_FLIT4_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_3_INQ_PRF_FLIT4_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_2_3_INQ_PRF_FLIT4_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_2_3_INQ_PRF_FLIT4_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 4 to match the VC fieldof the header flit to 4',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_3_INQ_PRF_FLIT4_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_4_INQ_PRF_FLIT4_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_2_4_INQ_PRF_FLIT4_FILTERING_SETUP',
    LABEL => 'AR_RTR_2_4_INQ_PRF_FLIT4_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_4_INQ_PRF_FLIT4_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_4_INQ_PRF_FLIT4_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_2_4_INQ_PRF_FLIT4_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_2_4_INQ_PRF_FLIT4_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC4_FILTER_FLIT4_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_4_INQ_PRF_FLIT4_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_4_INQ_PRF_FLIT4_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_2_4_INQ_PRF_FLIT4_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_2_4_INQ_PRF_FLIT4_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC4 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_4_INQ_PRF_FLIT4_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_4_INQ_PRF_FLIT4_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_2_4_INQ_PRF_FLIT4_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_2_4_INQ_PRF_FLIT4_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 4 to match the VC fieldof the header flit to 4',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_4_INQ_PRF_FLIT4_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_5_INQ_PRF_FLIT4_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_2_5_INQ_PRF_FLIT4_FILTERING_SETUP',
    LABEL => 'AR_RTR_2_5_INQ_PRF_FLIT4_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_5_INQ_PRF_FLIT4_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_5_INQ_PRF_FLIT4_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_2_5_INQ_PRF_FLIT4_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_2_5_INQ_PRF_FLIT4_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC4_FILTER_FLIT4_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_5_INQ_PRF_FLIT4_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_5_INQ_PRF_FLIT4_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_2_5_INQ_PRF_FLIT4_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_2_5_INQ_PRF_FLIT4_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC4 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_5_INQ_PRF_FLIT4_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_5_INQ_PRF_FLIT4_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_2_5_INQ_PRF_FLIT4_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_2_5_INQ_PRF_FLIT4_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 4 to match the VC fieldof the header flit to 4',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_5_INQ_PRF_FLIT4_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_6_INQ_PRF_FLIT4_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_2_6_INQ_PRF_FLIT4_FILTERING_SETUP',
    LABEL => 'AR_RTR_2_6_INQ_PRF_FLIT4_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_6_INQ_PRF_FLIT4_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_6_INQ_PRF_FLIT4_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_2_6_INQ_PRF_FLIT4_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_2_6_INQ_PRF_FLIT4_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC4_FILTER_FLIT4_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_6_INQ_PRF_FLIT4_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_6_INQ_PRF_FLIT4_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_2_6_INQ_PRF_FLIT4_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_2_6_INQ_PRF_FLIT4_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC4 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_6_INQ_PRF_FLIT4_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_6_INQ_PRF_FLIT4_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_2_6_INQ_PRF_FLIT4_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_2_6_INQ_PRF_FLIT4_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 4 to match the VC fieldof the header flit to 4',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_6_INQ_PRF_FLIT4_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_7_INQ_PRF_FLIT4_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_2_7_INQ_PRF_FLIT4_FILTERING_SETUP',
    LABEL => 'AR_RTR_2_7_INQ_PRF_FLIT4_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_7_INQ_PRF_FLIT4_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_7_INQ_PRF_FLIT4_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_2_7_INQ_PRF_FLIT4_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_2_7_INQ_PRF_FLIT4_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC4_FILTER_FLIT4_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_7_INQ_PRF_FLIT4_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_7_INQ_PRF_FLIT4_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_2_7_INQ_PRF_FLIT4_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_2_7_INQ_PRF_FLIT4_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC4 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_7_INQ_PRF_FLIT4_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_7_INQ_PRF_FLIT4_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_2_7_INQ_PRF_FLIT4_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_2_7_INQ_PRF_FLIT4_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 4 to match the VC fieldof the header flit to 4',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_7_INQ_PRF_FLIT4_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_0_INQ_PRF_FLIT4_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_3_0_INQ_PRF_FLIT4_FILTERING_SETUP',
    LABEL => 'AR_RTR_3_0_INQ_PRF_FLIT4_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_0_INQ_PRF_FLIT4_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_0_INQ_PRF_FLIT4_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_3_0_INQ_PRF_FLIT4_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_3_0_INQ_PRF_FLIT4_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC4_FILTER_FLIT4_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_0_INQ_PRF_FLIT4_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_0_INQ_PRF_FLIT4_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_3_0_INQ_PRF_FLIT4_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_3_0_INQ_PRF_FLIT4_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC4 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_0_INQ_PRF_FLIT4_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_0_INQ_PRF_FLIT4_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_3_0_INQ_PRF_FLIT4_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_3_0_INQ_PRF_FLIT4_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 4 to match the VC fieldof the header flit to 4',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_0_INQ_PRF_FLIT4_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_1_INQ_PRF_FLIT4_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_3_1_INQ_PRF_FLIT4_FILTERING_SETUP',
    LABEL => 'AR_RTR_3_1_INQ_PRF_FLIT4_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_1_INQ_PRF_FLIT4_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_1_INQ_PRF_FLIT4_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_3_1_INQ_PRF_FLIT4_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_3_1_INQ_PRF_FLIT4_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC4_FILTER_FLIT4_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_1_INQ_PRF_FLIT4_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_1_INQ_PRF_FLIT4_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_3_1_INQ_PRF_FLIT4_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_3_1_INQ_PRF_FLIT4_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC4 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_1_INQ_PRF_FLIT4_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_1_INQ_PRF_FLIT4_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_3_1_INQ_PRF_FLIT4_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_3_1_INQ_PRF_FLIT4_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 4 to match the VC fieldof the header flit to 4',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_1_INQ_PRF_FLIT4_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_2_INQ_PRF_FLIT4_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_3_2_INQ_PRF_FLIT4_FILTERING_SETUP',
    LABEL => 'AR_RTR_3_2_INQ_PRF_FLIT4_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_2_INQ_PRF_FLIT4_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_2_INQ_PRF_FLIT4_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_3_2_INQ_PRF_FLIT4_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_3_2_INQ_PRF_FLIT4_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC4_FILTER_FLIT4_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_2_INQ_PRF_FLIT4_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_2_INQ_PRF_FLIT4_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_3_2_INQ_PRF_FLIT4_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_3_2_INQ_PRF_FLIT4_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC4 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_2_INQ_PRF_FLIT4_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_2_INQ_PRF_FLIT4_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_3_2_INQ_PRF_FLIT4_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_3_2_INQ_PRF_FLIT4_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 4 to match the VC fieldof the header flit to 4',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_2_INQ_PRF_FLIT4_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_3_INQ_PRF_FLIT4_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_3_3_INQ_PRF_FLIT4_FILTERING_SETUP',
    LABEL => 'AR_RTR_3_3_INQ_PRF_FLIT4_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_3_INQ_PRF_FLIT4_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_3_INQ_PRF_FLIT4_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_3_3_INQ_PRF_FLIT4_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_3_3_INQ_PRF_FLIT4_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC4_FILTER_FLIT4_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_3_INQ_PRF_FLIT4_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_3_INQ_PRF_FLIT4_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_3_3_INQ_PRF_FLIT4_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_3_3_INQ_PRF_FLIT4_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC4 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_3_INQ_PRF_FLIT4_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_3_INQ_PRF_FLIT4_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_3_3_INQ_PRF_FLIT4_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_3_3_INQ_PRF_FLIT4_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 4 to match the VC fieldof the header flit to 4',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_3_INQ_PRF_FLIT4_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_4_INQ_PRF_FLIT4_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_3_4_INQ_PRF_FLIT4_FILTERING_SETUP',
    LABEL => 'AR_RTR_3_4_INQ_PRF_FLIT4_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_4_INQ_PRF_FLIT4_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_4_INQ_PRF_FLIT4_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_3_4_INQ_PRF_FLIT4_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_3_4_INQ_PRF_FLIT4_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC4_FILTER_FLIT4_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_4_INQ_PRF_FLIT4_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_4_INQ_PRF_FLIT4_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_3_4_INQ_PRF_FLIT4_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_3_4_INQ_PRF_FLIT4_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC4 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_4_INQ_PRF_FLIT4_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_4_INQ_PRF_FLIT4_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_3_4_INQ_PRF_FLIT4_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_3_4_INQ_PRF_FLIT4_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 4 to match the VC fieldof the header flit to 4',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_4_INQ_PRF_FLIT4_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_5_INQ_PRF_FLIT4_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_3_5_INQ_PRF_FLIT4_FILTERING_SETUP',
    LABEL => 'AR_RTR_3_5_INQ_PRF_FLIT4_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_5_INQ_PRF_FLIT4_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_5_INQ_PRF_FLIT4_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_3_5_INQ_PRF_FLIT4_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_3_5_INQ_PRF_FLIT4_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC4_FILTER_FLIT4_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_5_INQ_PRF_FLIT4_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_5_INQ_PRF_FLIT4_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_3_5_INQ_PRF_FLIT4_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_3_5_INQ_PRF_FLIT4_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC4 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_5_INQ_PRF_FLIT4_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_5_INQ_PRF_FLIT4_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_3_5_INQ_PRF_FLIT4_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_3_5_INQ_PRF_FLIT4_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 4 to match the VC fieldof the header flit to 4',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_5_INQ_PRF_FLIT4_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_6_INQ_PRF_FLIT4_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_3_6_INQ_PRF_FLIT4_FILTERING_SETUP',
    LABEL => 'AR_RTR_3_6_INQ_PRF_FLIT4_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_6_INQ_PRF_FLIT4_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_6_INQ_PRF_FLIT4_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_3_6_INQ_PRF_FLIT4_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_3_6_INQ_PRF_FLIT4_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC4_FILTER_FLIT4_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_6_INQ_PRF_FLIT4_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_6_INQ_PRF_FLIT4_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_3_6_INQ_PRF_FLIT4_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_3_6_INQ_PRF_FLIT4_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC4 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_6_INQ_PRF_FLIT4_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_6_INQ_PRF_FLIT4_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_3_6_INQ_PRF_FLIT4_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_3_6_INQ_PRF_FLIT4_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 4 to match the VC fieldof the header flit to 4',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_6_INQ_PRF_FLIT4_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_7_INQ_PRF_FLIT4_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_3_7_INQ_PRF_FLIT4_FILTERING_SETUP',
    LABEL => 'AR_RTR_3_7_INQ_PRF_FLIT4_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_7_INQ_PRF_FLIT4_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_7_INQ_PRF_FLIT4_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_3_7_INQ_PRF_FLIT4_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_3_7_INQ_PRF_FLIT4_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC4_FILTER_FLIT4_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_7_INQ_PRF_FLIT4_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_7_INQ_PRF_FLIT4_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_3_7_INQ_PRF_FLIT4_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_3_7_INQ_PRF_FLIT4_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC4 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_7_INQ_PRF_FLIT4_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_7_INQ_PRF_FLIT4_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_3_7_INQ_PRF_FLIT4_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_3_7_INQ_PRF_FLIT4_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 4 to match the VC fieldof the header flit to 4',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_7_INQ_PRF_FLIT4_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_0_INQ_PRF_FLIT4_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_4_0_INQ_PRF_FLIT4_FILTERING_SETUP',
    LABEL => 'AR_RTR_4_0_INQ_PRF_FLIT4_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_0_INQ_PRF_FLIT4_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_0_INQ_PRF_FLIT4_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_4_0_INQ_PRF_FLIT4_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_4_0_INQ_PRF_FLIT4_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC4_FILTER_FLIT4_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_0_INQ_PRF_FLIT4_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_0_INQ_PRF_FLIT4_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_4_0_INQ_PRF_FLIT4_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_4_0_INQ_PRF_FLIT4_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC4 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_0_INQ_PRF_FLIT4_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_0_INQ_PRF_FLIT4_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_4_0_INQ_PRF_FLIT4_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_4_0_INQ_PRF_FLIT4_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 4 to match the VC fieldof the header flit to 4',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_0_INQ_PRF_FLIT4_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_1_INQ_PRF_FLIT4_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_4_1_INQ_PRF_FLIT4_FILTERING_SETUP',
    LABEL => 'AR_RTR_4_1_INQ_PRF_FLIT4_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_1_INQ_PRF_FLIT4_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_1_INQ_PRF_FLIT4_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_4_1_INQ_PRF_FLIT4_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_4_1_INQ_PRF_FLIT4_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC4_FILTER_FLIT4_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_1_INQ_PRF_FLIT4_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_1_INQ_PRF_FLIT4_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_4_1_INQ_PRF_FLIT4_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_4_1_INQ_PRF_FLIT4_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC4 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_1_INQ_PRF_FLIT4_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_1_INQ_PRF_FLIT4_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_4_1_INQ_PRF_FLIT4_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_4_1_INQ_PRF_FLIT4_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 4 to match the VC fieldof the header flit to 4',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_1_INQ_PRF_FLIT4_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_2_INQ_PRF_FLIT4_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_4_2_INQ_PRF_FLIT4_FILTERING_SETUP',
    LABEL => 'AR_RTR_4_2_INQ_PRF_FLIT4_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_2_INQ_PRF_FLIT4_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_2_INQ_PRF_FLIT4_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_4_2_INQ_PRF_FLIT4_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_4_2_INQ_PRF_FLIT4_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC4_FILTER_FLIT4_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_2_INQ_PRF_FLIT4_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_2_INQ_PRF_FLIT4_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_4_2_INQ_PRF_FLIT4_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_4_2_INQ_PRF_FLIT4_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC4 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_2_INQ_PRF_FLIT4_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_2_INQ_PRF_FLIT4_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_4_2_INQ_PRF_FLIT4_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_4_2_INQ_PRF_FLIT4_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 4 to match the VC fieldof the header flit to 4',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_2_INQ_PRF_FLIT4_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_3_INQ_PRF_FLIT4_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_4_3_INQ_PRF_FLIT4_FILTERING_SETUP',
    LABEL => 'AR_RTR_4_3_INQ_PRF_FLIT4_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_3_INQ_PRF_FLIT4_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_3_INQ_PRF_FLIT4_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_4_3_INQ_PRF_FLIT4_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_4_3_INQ_PRF_FLIT4_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC4_FILTER_FLIT4_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_3_INQ_PRF_FLIT4_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_3_INQ_PRF_FLIT4_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_4_3_INQ_PRF_FLIT4_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_4_3_INQ_PRF_FLIT4_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC4 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_3_INQ_PRF_FLIT4_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_3_INQ_PRF_FLIT4_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_4_3_INQ_PRF_FLIT4_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_4_3_INQ_PRF_FLIT4_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 4 to match the VC fieldof the header flit to 4',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_3_INQ_PRF_FLIT4_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_4_INQ_PRF_FLIT4_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_4_4_INQ_PRF_FLIT4_FILTERING_SETUP',
    LABEL => 'AR_RTR_4_4_INQ_PRF_FLIT4_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_4_INQ_PRF_FLIT4_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_4_INQ_PRF_FLIT4_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_4_4_INQ_PRF_FLIT4_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_4_4_INQ_PRF_FLIT4_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC4_FILTER_FLIT4_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_4_INQ_PRF_FLIT4_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_4_INQ_PRF_FLIT4_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_4_4_INQ_PRF_FLIT4_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_4_4_INQ_PRF_FLIT4_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC4 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_4_INQ_PRF_FLIT4_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_4_INQ_PRF_FLIT4_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_4_4_INQ_PRF_FLIT4_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_4_4_INQ_PRF_FLIT4_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 4 to match the VC fieldof the header flit to 4',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_4_INQ_PRF_FLIT4_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_5_INQ_PRF_FLIT4_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_4_5_INQ_PRF_FLIT4_FILTERING_SETUP',
    LABEL => 'AR_RTR_4_5_INQ_PRF_FLIT4_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_5_INQ_PRF_FLIT4_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_5_INQ_PRF_FLIT4_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_4_5_INQ_PRF_FLIT4_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_4_5_INQ_PRF_FLIT4_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC4_FILTER_FLIT4_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_5_INQ_PRF_FLIT4_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_5_INQ_PRF_FLIT4_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_4_5_INQ_PRF_FLIT4_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_4_5_INQ_PRF_FLIT4_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC4 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_5_INQ_PRF_FLIT4_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_5_INQ_PRF_FLIT4_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_4_5_INQ_PRF_FLIT4_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_4_5_INQ_PRF_FLIT4_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 4 to match the VC fieldof the header flit to 4',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_5_INQ_PRF_FLIT4_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_6_INQ_PRF_FLIT4_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_4_6_INQ_PRF_FLIT4_FILTERING_SETUP',
    LABEL => 'AR_RTR_4_6_INQ_PRF_FLIT4_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_6_INQ_PRF_FLIT4_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_6_INQ_PRF_FLIT4_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_4_6_INQ_PRF_FLIT4_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_4_6_INQ_PRF_FLIT4_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC4_FILTER_FLIT4_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_6_INQ_PRF_FLIT4_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_6_INQ_PRF_FLIT4_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_4_6_INQ_PRF_FLIT4_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_4_6_INQ_PRF_FLIT4_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC4 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_6_INQ_PRF_FLIT4_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_6_INQ_PRF_FLIT4_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_4_6_INQ_PRF_FLIT4_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_4_6_INQ_PRF_FLIT4_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 4 to match the VC fieldof the header flit to 4',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_6_INQ_PRF_FLIT4_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_7_INQ_PRF_FLIT4_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_4_7_INQ_PRF_FLIT4_FILTERING_SETUP',
    LABEL => 'AR_RTR_4_7_INQ_PRF_FLIT4_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_7_INQ_PRF_FLIT4_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_7_INQ_PRF_FLIT4_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_4_7_INQ_PRF_FLIT4_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_4_7_INQ_PRF_FLIT4_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC4_FILTER_FLIT4_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_7_INQ_PRF_FLIT4_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_7_INQ_PRF_FLIT4_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_4_7_INQ_PRF_FLIT4_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_4_7_INQ_PRF_FLIT4_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC4 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_7_INQ_PRF_FLIT4_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_7_INQ_PRF_FLIT4_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_4_7_INQ_PRF_FLIT4_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_4_7_INQ_PRF_FLIT4_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 4 to match the VC fieldof the header flit to 4',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_7_INQ_PRF_FLIT4_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_0_INQ_PRF_FLIT4_FILTERING_MASK'} = {
    NAME => 'AR_RTR_0_0_INQ_PRF_FLIT4_FILTERING_MASK',
    LABEL => 'AR_RTR_0_0_INQ_PRF_FLIT4_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_0_INQ_PRF_FLIT4_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_0_INQ_PRF_FLIT4_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_0_0_INQ_PRF_FLIT4_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_0_0_INQ_PRF_FLIT4_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_0_INQ_PRF_FLIT4_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_1_INQ_PRF_FLIT4_FILTERING_MASK'} = {
    NAME => 'AR_RTR_0_1_INQ_PRF_FLIT4_FILTERING_MASK',
    LABEL => 'AR_RTR_0_1_INQ_PRF_FLIT4_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_1_INQ_PRF_FLIT4_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_1_INQ_PRF_FLIT4_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_0_1_INQ_PRF_FLIT4_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_0_1_INQ_PRF_FLIT4_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_1_INQ_PRF_FLIT4_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_2_INQ_PRF_FLIT4_FILTERING_MASK'} = {
    NAME => 'AR_RTR_0_2_INQ_PRF_FLIT4_FILTERING_MASK',
    LABEL => 'AR_RTR_0_2_INQ_PRF_FLIT4_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_2_INQ_PRF_FLIT4_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_2_INQ_PRF_FLIT4_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_0_2_INQ_PRF_FLIT4_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_0_2_INQ_PRF_FLIT4_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_2_INQ_PRF_FLIT4_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_3_INQ_PRF_FLIT4_FILTERING_MASK'} = {
    NAME => 'AR_RTR_0_3_INQ_PRF_FLIT4_FILTERING_MASK',
    LABEL => 'AR_RTR_0_3_INQ_PRF_FLIT4_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_3_INQ_PRF_FLIT4_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_3_INQ_PRF_FLIT4_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_0_3_INQ_PRF_FLIT4_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_0_3_INQ_PRF_FLIT4_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_3_INQ_PRF_FLIT4_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_4_INQ_PRF_FLIT4_FILTERING_MASK'} = {
    NAME => 'AR_RTR_0_4_INQ_PRF_FLIT4_FILTERING_MASK',
    LABEL => 'AR_RTR_0_4_INQ_PRF_FLIT4_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_4_INQ_PRF_FLIT4_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_4_INQ_PRF_FLIT4_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_0_4_INQ_PRF_FLIT4_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_0_4_INQ_PRF_FLIT4_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_4_INQ_PRF_FLIT4_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_5_INQ_PRF_FLIT4_FILTERING_MASK'} = {
    NAME => 'AR_RTR_0_5_INQ_PRF_FLIT4_FILTERING_MASK',
    LABEL => 'AR_RTR_0_5_INQ_PRF_FLIT4_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_5_INQ_PRF_FLIT4_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_5_INQ_PRF_FLIT4_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_0_5_INQ_PRF_FLIT4_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_0_5_INQ_PRF_FLIT4_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_5_INQ_PRF_FLIT4_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_6_INQ_PRF_FLIT4_FILTERING_MASK'} = {
    NAME => 'AR_RTR_0_6_INQ_PRF_FLIT4_FILTERING_MASK',
    LABEL => 'AR_RTR_0_6_INQ_PRF_FLIT4_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_6_INQ_PRF_FLIT4_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_6_INQ_PRF_FLIT4_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_0_6_INQ_PRF_FLIT4_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_0_6_INQ_PRF_FLIT4_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_6_INQ_PRF_FLIT4_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_7_INQ_PRF_FLIT4_FILTERING_MASK'} = {
    NAME => 'AR_RTR_0_7_INQ_PRF_FLIT4_FILTERING_MASK',
    LABEL => 'AR_RTR_0_7_INQ_PRF_FLIT4_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_7_INQ_PRF_FLIT4_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_7_INQ_PRF_FLIT4_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_0_7_INQ_PRF_FLIT4_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_0_7_INQ_PRF_FLIT4_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_7_INQ_PRF_FLIT4_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_0_INQ_PRF_FLIT4_FILTERING_MASK'} = {
    NAME => 'AR_RTR_1_0_INQ_PRF_FLIT4_FILTERING_MASK',
    LABEL => 'AR_RTR_1_0_INQ_PRF_FLIT4_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_0_INQ_PRF_FLIT4_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_0_INQ_PRF_FLIT4_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_1_0_INQ_PRF_FLIT4_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_1_0_INQ_PRF_FLIT4_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_0_INQ_PRF_FLIT4_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_1_INQ_PRF_FLIT4_FILTERING_MASK'} = {
    NAME => 'AR_RTR_1_1_INQ_PRF_FLIT4_FILTERING_MASK',
    LABEL => 'AR_RTR_1_1_INQ_PRF_FLIT4_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_1_INQ_PRF_FLIT4_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_1_INQ_PRF_FLIT4_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_1_1_INQ_PRF_FLIT4_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_1_1_INQ_PRF_FLIT4_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_1_INQ_PRF_FLIT4_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_2_INQ_PRF_FLIT4_FILTERING_MASK'} = {
    NAME => 'AR_RTR_1_2_INQ_PRF_FLIT4_FILTERING_MASK',
    LABEL => 'AR_RTR_1_2_INQ_PRF_FLIT4_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_2_INQ_PRF_FLIT4_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_2_INQ_PRF_FLIT4_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_1_2_INQ_PRF_FLIT4_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_1_2_INQ_PRF_FLIT4_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_2_INQ_PRF_FLIT4_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_3_INQ_PRF_FLIT4_FILTERING_MASK'} = {
    NAME => 'AR_RTR_1_3_INQ_PRF_FLIT4_FILTERING_MASK',
    LABEL => 'AR_RTR_1_3_INQ_PRF_FLIT4_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_3_INQ_PRF_FLIT4_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_3_INQ_PRF_FLIT4_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_1_3_INQ_PRF_FLIT4_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_1_3_INQ_PRF_FLIT4_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_3_INQ_PRF_FLIT4_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_4_INQ_PRF_FLIT4_FILTERING_MASK'} = {
    NAME => 'AR_RTR_1_4_INQ_PRF_FLIT4_FILTERING_MASK',
    LABEL => 'AR_RTR_1_4_INQ_PRF_FLIT4_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_4_INQ_PRF_FLIT4_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_4_INQ_PRF_FLIT4_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_1_4_INQ_PRF_FLIT4_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_1_4_INQ_PRF_FLIT4_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_4_INQ_PRF_FLIT4_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_5_INQ_PRF_FLIT4_FILTERING_MASK'} = {
    NAME => 'AR_RTR_1_5_INQ_PRF_FLIT4_FILTERING_MASK',
    LABEL => 'AR_RTR_1_5_INQ_PRF_FLIT4_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_5_INQ_PRF_FLIT4_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_5_INQ_PRF_FLIT4_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_1_5_INQ_PRF_FLIT4_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_1_5_INQ_PRF_FLIT4_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_5_INQ_PRF_FLIT4_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_6_INQ_PRF_FLIT4_FILTERING_MASK'} = {
    NAME => 'AR_RTR_1_6_INQ_PRF_FLIT4_FILTERING_MASK',
    LABEL => 'AR_RTR_1_6_INQ_PRF_FLIT4_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_6_INQ_PRF_FLIT4_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_6_INQ_PRF_FLIT4_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_1_6_INQ_PRF_FLIT4_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_1_6_INQ_PRF_FLIT4_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_6_INQ_PRF_FLIT4_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_7_INQ_PRF_FLIT4_FILTERING_MASK'} = {
    NAME => 'AR_RTR_1_7_INQ_PRF_FLIT4_FILTERING_MASK',
    LABEL => 'AR_RTR_1_7_INQ_PRF_FLIT4_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_7_INQ_PRF_FLIT4_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_7_INQ_PRF_FLIT4_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_1_7_INQ_PRF_FLIT4_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_1_7_INQ_PRF_FLIT4_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_7_INQ_PRF_FLIT4_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_0_INQ_PRF_FLIT4_FILTERING_MASK'} = {
    NAME => 'AR_RTR_2_0_INQ_PRF_FLIT4_FILTERING_MASK',
    LABEL => 'AR_RTR_2_0_INQ_PRF_FLIT4_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_0_INQ_PRF_FLIT4_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_0_INQ_PRF_FLIT4_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_2_0_INQ_PRF_FLIT4_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_2_0_INQ_PRF_FLIT4_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_0_INQ_PRF_FLIT4_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_1_INQ_PRF_FLIT4_FILTERING_MASK'} = {
    NAME => 'AR_RTR_2_1_INQ_PRF_FLIT4_FILTERING_MASK',
    LABEL => 'AR_RTR_2_1_INQ_PRF_FLIT4_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_1_INQ_PRF_FLIT4_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_1_INQ_PRF_FLIT4_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_2_1_INQ_PRF_FLIT4_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_2_1_INQ_PRF_FLIT4_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_1_INQ_PRF_FLIT4_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_2_INQ_PRF_FLIT4_FILTERING_MASK'} = {
    NAME => 'AR_RTR_2_2_INQ_PRF_FLIT4_FILTERING_MASK',
    LABEL => 'AR_RTR_2_2_INQ_PRF_FLIT4_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_2_INQ_PRF_FLIT4_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_2_INQ_PRF_FLIT4_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_2_2_INQ_PRF_FLIT4_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_2_2_INQ_PRF_FLIT4_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_2_INQ_PRF_FLIT4_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_3_INQ_PRF_FLIT4_FILTERING_MASK'} = {
    NAME => 'AR_RTR_2_3_INQ_PRF_FLIT4_FILTERING_MASK',
    LABEL => 'AR_RTR_2_3_INQ_PRF_FLIT4_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_3_INQ_PRF_FLIT4_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_3_INQ_PRF_FLIT4_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_2_3_INQ_PRF_FLIT4_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_2_3_INQ_PRF_FLIT4_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_3_INQ_PRF_FLIT4_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_4_INQ_PRF_FLIT4_FILTERING_MASK'} = {
    NAME => 'AR_RTR_2_4_INQ_PRF_FLIT4_FILTERING_MASK',
    LABEL => 'AR_RTR_2_4_INQ_PRF_FLIT4_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_4_INQ_PRF_FLIT4_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_4_INQ_PRF_FLIT4_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_2_4_INQ_PRF_FLIT4_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_2_4_INQ_PRF_FLIT4_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_4_INQ_PRF_FLIT4_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_5_INQ_PRF_FLIT4_FILTERING_MASK'} = {
    NAME => 'AR_RTR_2_5_INQ_PRF_FLIT4_FILTERING_MASK',
    LABEL => 'AR_RTR_2_5_INQ_PRF_FLIT4_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_5_INQ_PRF_FLIT4_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_5_INQ_PRF_FLIT4_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_2_5_INQ_PRF_FLIT4_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_2_5_INQ_PRF_FLIT4_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_5_INQ_PRF_FLIT4_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_6_INQ_PRF_FLIT4_FILTERING_MASK'} = {
    NAME => 'AR_RTR_2_6_INQ_PRF_FLIT4_FILTERING_MASK',
    LABEL => 'AR_RTR_2_6_INQ_PRF_FLIT4_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_6_INQ_PRF_FLIT4_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_6_INQ_PRF_FLIT4_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_2_6_INQ_PRF_FLIT4_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_2_6_INQ_PRF_FLIT4_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_6_INQ_PRF_FLIT4_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_7_INQ_PRF_FLIT4_FILTERING_MASK'} = {
    NAME => 'AR_RTR_2_7_INQ_PRF_FLIT4_FILTERING_MASK',
    LABEL => 'AR_RTR_2_7_INQ_PRF_FLIT4_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_7_INQ_PRF_FLIT4_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_7_INQ_PRF_FLIT4_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_2_7_INQ_PRF_FLIT4_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_2_7_INQ_PRF_FLIT4_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_7_INQ_PRF_FLIT4_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_0_INQ_PRF_FLIT4_FILTERING_MASK'} = {
    NAME => 'AR_RTR_3_0_INQ_PRF_FLIT4_FILTERING_MASK',
    LABEL => 'AR_RTR_3_0_INQ_PRF_FLIT4_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_0_INQ_PRF_FLIT4_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_0_INQ_PRF_FLIT4_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_3_0_INQ_PRF_FLIT4_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_3_0_INQ_PRF_FLIT4_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_0_INQ_PRF_FLIT4_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_1_INQ_PRF_FLIT4_FILTERING_MASK'} = {
    NAME => 'AR_RTR_3_1_INQ_PRF_FLIT4_FILTERING_MASK',
    LABEL => 'AR_RTR_3_1_INQ_PRF_FLIT4_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_1_INQ_PRF_FLIT4_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_1_INQ_PRF_FLIT4_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_3_1_INQ_PRF_FLIT4_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_3_1_INQ_PRF_FLIT4_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_1_INQ_PRF_FLIT4_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_2_INQ_PRF_FLIT4_FILTERING_MASK'} = {
    NAME => 'AR_RTR_3_2_INQ_PRF_FLIT4_FILTERING_MASK',
    LABEL => 'AR_RTR_3_2_INQ_PRF_FLIT4_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_2_INQ_PRF_FLIT4_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_2_INQ_PRF_FLIT4_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_3_2_INQ_PRF_FLIT4_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_3_2_INQ_PRF_FLIT4_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_2_INQ_PRF_FLIT4_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_3_INQ_PRF_FLIT4_FILTERING_MASK'} = {
    NAME => 'AR_RTR_3_3_INQ_PRF_FLIT4_FILTERING_MASK',
    LABEL => 'AR_RTR_3_3_INQ_PRF_FLIT4_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_3_INQ_PRF_FLIT4_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_3_INQ_PRF_FLIT4_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_3_3_INQ_PRF_FLIT4_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_3_3_INQ_PRF_FLIT4_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_3_INQ_PRF_FLIT4_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_4_INQ_PRF_FLIT4_FILTERING_MASK'} = {
    NAME => 'AR_RTR_3_4_INQ_PRF_FLIT4_FILTERING_MASK',
    LABEL => 'AR_RTR_3_4_INQ_PRF_FLIT4_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_4_INQ_PRF_FLIT4_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_4_INQ_PRF_FLIT4_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_3_4_INQ_PRF_FLIT4_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_3_4_INQ_PRF_FLIT4_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_4_INQ_PRF_FLIT4_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_5_INQ_PRF_FLIT4_FILTERING_MASK'} = {
    NAME => 'AR_RTR_3_5_INQ_PRF_FLIT4_FILTERING_MASK',
    LABEL => 'AR_RTR_3_5_INQ_PRF_FLIT4_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_5_INQ_PRF_FLIT4_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_5_INQ_PRF_FLIT4_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_3_5_INQ_PRF_FLIT4_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_3_5_INQ_PRF_FLIT4_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_5_INQ_PRF_FLIT4_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_6_INQ_PRF_FLIT4_FILTERING_MASK'} = {
    NAME => 'AR_RTR_3_6_INQ_PRF_FLIT4_FILTERING_MASK',
    LABEL => 'AR_RTR_3_6_INQ_PRF_FLIT4_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_6_INQ_PRF_FLIT4_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_6_INQ_PRF_FLIT4_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_3_6_INQ_PRF_FLIT4_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_3_6_INQ_PRF_FLIT4_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_6_INQ_PRF_FLIT4_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_7_INQ_PRF_FLIT4_FILTERING_MASK'} = {
    NAME => 'AR_RTR_3_7_INQ_PRF_FLIT4_FILTERING_MASK',
    LABEL => 'AR_RTR_3_7_INQ_PRF_FLIT4_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_7_INQ_PRF_FLIT4_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_7_INQ_PRF_FLIT4_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_3_7_INQ_PRF_FLIT4_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_3_7_INQ_PRF_FLIT4_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_7_INQ_PRF_FLIT4_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_0_INQ_PRF_FLIT4_FILTERING_MASK'} = {
    NAME => 'AR_RTR_4_0_INQ_PRF_FLIT4_FILTERING_MASK',
    LABEL => 'AR_RTR_4_0_INQ_PRF_FLIT4_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_0_INQ_PRF_FLIT4_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_0_INQ_PRF_FLIT4_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_4_0_INQ_PRF_FLIT4_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_4_0_INQ_PRF_FLIT4_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_0_INQ_PRF_FLIT4_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_1_INQ_PRF_FLIT4_FILTERING_MASK'} = {
    NAME => 'AR_RTR_4_1_INQ_PRF_FLIT4_FILTERING_MASK',
    LABEL => 'AR_RTR_4_1_INQ_PRF_FLIT4_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_1_INQ_PRF_FLIT4_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_1_INQ_PRF_FLIT4_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_4_1_INQ_PRF_FLIT4_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_4_1_INQ_PRF_FLIT4_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_1_INQ_PRF_FLIT4_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_2_INQ_PRF_FLIT4_FILTERING_MASK'} = {
    NAME => 'AR_RTR_4_2_INQ_PRF_FLIT4_FILTERING_MASK',
    LABEL => 'AR_RTR_4_2_INQ_PRF_FLIT4_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_2_INQ_PRF_FLIT4_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_2_INQ_PRF_FLIT4_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_4_2_INQ_PRF_FLIT4_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_4_2_INQ_PRF_FLIT4_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_2_INQ_PRF_FLIT4_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_3_INQ_PRF_FLIT4_FILTERING_MASK'} = {
    NAME => 'AR_RTR_4_3_INQ_PRF_FLIT4_FILTERING_MASK',
    LABEL => 'AR_RTR_4_3_INQ_PRF_FLIT4_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_3_INQ_PRF_FLIT4_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_3_INQ_PRF_FLIT4_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_4_3_INQ_PRF_FLIT4_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_4_3_INQ_PRF_FLIT4_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_3_INQ_PRF_FLIT4_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_4_INQ_PRF_FLIT4_FILTERING_MASK'} = {
    NAME => 'AR_RTR_4_4_INQ_PRF_FLIT4_FILTERING_MASK',
    LABEL => 'AR_RTR_4_4_INQ_PRF_FLIT4_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_4_INQ_PRF_FLIT4_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_4_INQ_PRF_FLIT4_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_4_4_INQ_PRF_FLIT4_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_4_4_INQ_PRF_FLIT4_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_4_INQ_PRF_FLIT4_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_5_INQ_PRF_FLIT4_FILTERING_MASK'} = {
    NAME => 'AR_RTR_4_5_INQ_PRF_FLIT4_FILTERING_MASK',
    LABEL => 'AR_RTR_4_5_INQ_PRF_FLIT4_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_5_INQ_PRF_FLIT4_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_5_INQ_PRF_FLIT4_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_4_5_INQ_PRF_FLIT4_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_4_5_INQ_PRF_FLIT4_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_5_INQ_PRF_FLIT4_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_6_INQ_PRF_FLIT4_FILTERING_MASK'} = {
    NAME => 'AR_RTR_4_6_INQ_PRF_FLIT4_FILTERING_MASK',
    LABEL => 'AR_RTR_4_6_INQ_PRF_FLIT4_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_6_INQ_PRF_FLIT4_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_6_INQ_PRF_FLIT4_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_4_6_INQ_PRF_FLIT4_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_4_6_INQ_PRF_FLIT4_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_6_INQ_PRF_FLIT4_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_7_INQ_PRF_FLIT4_FILTERING_MASK'} = {
    NAME => 'AR_RTR_4_7_INQ_PRF_FLIT4_FILTERING_MASK',
    LABEL => 'AR_RTR_4_7_INQ_PRF_FLIT4_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_7_INQ_PRF_FLIT4_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_7_INQ_PRF_FLIT4_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_4_7_INQ_PRF_FLIT4_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_4_7_INQ_PRF_FLIT4_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_7_INQ_PRF_FLIT4_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_0_INQ_PRF_FLIT5_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_0_0_INQ_PRF_FLIT5_FILTERING_SETUP',
    LABEL => 'AR_RTR_0_0_INQ_PRF_FLIT5_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_0_INQ_PRF_FLIT5_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_0_INQ_PRF_FLIT5_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_0_0_INQ_PRF_FLIT5_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_0_0_INQ_PRF_FLIT5_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC5_FILTER_FLIT5_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_0_INQ_PRF_FLIT5_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_0_INQ_PRF_FLIT5_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_0_0_INQ_PRF_FLIT5_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_0_0_INQ_PRF_FLIT5_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC5 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_0_INQ_PRF_FLIT5_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_0_INQ_PRF_FLIT5_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_0_0_INQ_PRF_FLIT5_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_0_0_INQ_PRF_FLIT5_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 5 to match the VC fieldof the header flit to 5',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_0_INQ_PRF_FLIT5_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_1_INQ_PRF_FLIT5_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_0_1_INQ_PRF_FLIT5_FILTERING_SETUP',
    LABEL => 'AR_RTR_0_1_INQ_PRF_FLIT5_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_1_INQ_PRF_FLIT5_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_1_INQ_PRF_FLIT5_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_0_1_INQ_PRF_FLIT5_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_0_1_INQ_PRF_FLIT5_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC5_FILTER_FLIT5_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_1_INQ_PRF_FLIT5_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_1_INQ_PRF_FLIT5_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_0_1_INQ_PRF_FLIT5_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_0_1_INQ_PRF_FLIT5_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC5 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_1_INQ_PRF_FLIT5_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_1_INQ_PRF_FLIT5_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_0_1_INQ_PRF_FLIT5_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_0_1_INQ_PRF_FLIT5_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 5 to match the VC fieldof the header flit to 5',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_1_INQ_PRF_FLIT5_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_2_INQ_PRF_FLIT5_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_0_2_INQ_PRF_FLIT5_FILTERING_SETUP',
    LABEL => 'AR_RTR_0_2_INQ_PRF_FLIT5_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_2_INQ_PRF_FLIT5_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_2_INQ_PRF_FLIT5_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_0_2_INQ_PRF_FLIT5_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_0_2_INQ_PRF_FLIT5_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC5_FILTER_FLIT5_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_2_INQ_PRF_FLIT5_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_2_INQ_PRF_FLIT5_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_0_2_INQ_PRF_FLIT5_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_0_2_INQ_PRF_FLIT5_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC5 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_2_INQ_PRF_FLIT5_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_2_INQ_PRF_FLIT5_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_0_2_INQ_PRF_FLIT5_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_0_2_INQ_PRF_FLIT5_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 5 to match the VC fieldof the header flit to 5',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_2_INQ_PRF_FLIT5_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_3_INQ_PRF_FLIT5_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_0_3_INQ_PRF_FLIT5_FILTERING_SETUP',
    LABEL => 'AR_RTR_0_3_INQ_PRF_FLIT5_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_3_INQ_PRF_FLIT5_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_3_INQ_PRF_FLIT5_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_0_3_INQ_PRF_FLIT5_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_0_3_INQ_PRF_FLIT5_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC5_FILTER_FLIT5_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_3_INQ_PRF_FLIT5_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_3_INQ_PRF_FLIT5_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_0_3_INQ_PRF_FLIT5_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_0_3_INQ_PRF_FLIT5_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC5 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_3_INQ_PRF_FLIT5_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_3_INQ_PRF_FLIT5_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_0_3_INQ_PRF_FLIT5_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_0_3_INQ_PRF_FLIT5_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 5 to match the VC fieldof the header flit to 5',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_3_INQ_PRF_FLIT5_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_4_INQ_PRF_FLIT5_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_0_4_INQ_PRF_FLIT5_FILTERING_SETUP',
    LABEL => 'AR_RTR_0_4_INQ_PRF_FLIT5_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_4_INQ_PRF_FLIT5_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_4_INQ_PRF_FLIT5_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_0_4_INQ_PRF_FLIT5_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_0_4_INQ_PRF_FLIT5_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC5_FILTER_FLIT5_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_4_INQ_PRF_FLIT5_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_4_INQ_PRF_FLIT5_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_0_4_INQ_PRF_FLIT5_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_0_4_INQ_PRF_FLIT5_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC5 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_4_INQ_PRF_FLIT5_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_4_INQ_PRF_FLIT5_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_0_4_INQ_PRF_FLIT5_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_0_4_INQ_PRF_FLIT5_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 5 to match the VC fieldof the header flit to 5',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_4_INQ_PRF_FLIT5_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_5_INQ_PRF_FLIT5_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_0_5_INQ_PRF_FLIT5_FILTERING_SETUP',
    LABEL => 'AR_RTR_0_5_INQ_PRF_FLIT5_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_5_INQ_PRF_FLIT5_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_5_INQ_PRF_FLIT5_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_0_5_INQ_PRF_FLIT5_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_0_5_INQ_PRF_FLIT5_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC5_FILTER_FLIT5_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_5_INQ_PRF_FLIT5_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_5_INQ_PRF_FLIT5_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_0_5_INQ_PRF_FLIT5_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_0_5_INQ_PRF_FLIT5_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC5 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_5_INQ_PRF_FLIT5_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_5_INQ_PRF_FLIT5_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_0_5_INQ_PRF_FLIT5_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_0_5_INQ_PRF_FLIT5_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 5 to match the VC fieldof the header flit to 5',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_5_INQ_PRF_FLIT5_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_6_INQ_PRF_FLIT5_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_0_6_INQ_PRF_FLIT5_FILTERING_SETUP',
    LABEL => 'AR_RTR_0_6_INQ_PRF_FLIT5_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_6_INQ_PRF_FLIT5_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_6_INQ_PRF_FLIT5_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_0_6_INQ_PRF_FLIT5_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_0_6_INQ_PRF_FLIT5_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC5_FILTER_FLIT5_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_6_INQ_PRF_FLIT5_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_6_INQ_PRF_FLIT5_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_0_6_INQ_PRF_FLIT5_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_0_6_INQ_PRF_FLIT5_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC5 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_6_INQ_PRF_FLIT5_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_6_INQ_PRF_FLIT5_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_0_6_INQ_PRF_FLIT5_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_0_6_INQ_PRF_FLIT5_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 5 to match the VC fieldof the header flit to 5',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_6_INQ_PRF_FLIT5_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_7_INQ_PRF_FLIT5_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_0_7_INQ_PRF_FLIT5_FILTERING_SETUP',
    LABEL => 'AR_RTR_0_7_INQ_PRF_FLIT5_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_7_INQ_PRF_FLIT5_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_7_INQ_PRF_FLIT5_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_0_7_INQ_PRF_FLIT5_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_0_7_INQ_PRF_FLIT5_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC5_FILTER_FLIT5_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_7_INQ_PRF_FLIT5_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_7_INQ_PRF_FLIT5_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_0_7_INQ_PRF_FLIT5_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_0_7_INQ_PRF_FLIT5_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC5 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_7_INQ_PRF_FLIT5_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_7_INQ_PRF_FLIT5_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_0_7_INQ_PRF_FLIT5_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_0_7_INQ_PRF_FLIT5_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 5 to match the VC fieldof the header flit to 5',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_7_INQ_PRF_FLIT5_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_0_INQ_PRF_FLIT5_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_1_0_INQ_PRF_FLIT5_FILTERING_SETUP',
    LABEL => 'AR_RTR_1_0_INQ_PRF_FLIT5_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_0_INQ_PRF_FLIT5_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_0_INQ_PRF_FLIT5_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_1_0_INQ_PRF_FLIT5_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_1_0_INQ_PRF_FLIT5_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC5_FILTER_FLIT5_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_0_INQ_PRF_FLIT5_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_0_INQ_PRF_FLIT5_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_1_0_INQ_PRF_FLIT5_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_1_0_INQ_PRF_FLIT5_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC5 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_0_INQ_PRF_FLIT5_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_0_INQ_PRF_FLIT5_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_1_0_INQ_PRF_FLIT5_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_1_0_INQ_PRF_FLIT5_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 5 to match the VC fieldof the header flit to 5',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_0_INQ_PRF_FLIT5_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_1_INQ_PRF_FLIT5_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_1_1_INQ_PRF_FLIT5_FILTERING_SETUP',
    LABEL => 'AR_RTR_1_1_INQ_PRF_FLIT5_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_1_INQ_PRF_FLIT5_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_1_INQ_PRF_FLIT5_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_1_1_INQ_PRF_FLIT5_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_1_1_INQ_PRF_FLIT5_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC5_FILTER_FLIT5_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_1_INQ_PRF_FLIT5_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_1_INQ_PRF_FLIT5_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_1_1_INQ_PRF_FLIT5_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_1_1_INQ_PRF_FLIT5_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC5 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_1_INQ_PRF_FLIT5_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_1_INQ_PRF_FLIT5_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_1_1_INQ_PRF_FLIT5_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_1_1_INQ_PRF_FLIT5_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 5 to match the VC fieldof the header flit to 5',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_1_INQ_PRF_FLIT5_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_2_INQ_PRF_FLIT5_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_1_2_INQ_PRF_FLIT5_FILTERING_SETUP',
    LABEL => 'AR_RTR_1_2_INQ_PRF_FLIT5_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_2_INQ_PRF_FLIT5_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_2_INQ_PRF_FLIT5_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_1_2_INQ_PRF_FLIT5_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_1_2_INQ_PRF_FLIT5_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC5_FILTER_FLIT5_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_2_INQ_PRF_FLIT5_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_2_INQ_PRF_FLIT5_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_1_2_INQ_PRF_FLIT5_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_1_2_INQ_PRF_FLIT5_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC5 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_2_INQ_PRF_FLIT5_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_2_INQ_PRF_FLIT5_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_1_2_INQ_PRF_FLIT5_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_1_2_INQ_PRF_FLIT5_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 5 to match the VC fieldof the header flit to 5',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_2_INQ_PRF_FLIT5_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_3_INQ_PRF_FLIT5_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_1_3_INQ_PRF_FLIT5_FILTERING_SETUP',
    LABEL => 'AR_RTR_1_3_INQ_PRF_FLIT5_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_3_INQ_PRF_FLIT5_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_3_INQ_PRF_FLIT5_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_1_3_INQ_PRF_FLIT5_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_1_3_INQ_PRF_FLIT5_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC5_FILTER_FLIT5_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_3_INQ_PRF_FLIT5_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_3_INQ_PRF_FLIT5_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_1_3_INQ_PRF_FLIT5_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_1_3_INQ_PRF_FLIT5_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC5 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_3_INQ_PRF_FLIT5_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_3_INQ_PRF_FLIT5_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_1_3_INQ_PRF_FLIT5_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_1_3_INQ_PRF_FLIT5_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 5 to match the VC fieldof the header flit to 5',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_3_INQ_PRF_FLIT5_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_4_INQ_PRF_FLIT5_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_1_4_INQ_PRF_FLIT5_FILTERING_SETUP',
    LABEL => 'AR_RTR_1_4_INQ_PRF_FLIT5_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_4_INQ_PRF_FLIT5_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_4_INQ_PRF_FLIT5_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_1_4_INQ_PRF_FLIT5_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_1_4_INQ_PRF_FLIT5_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC5_FILTER_FLIT5_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_4_INQ_PRF_FLIT5_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_4_INQ_PRF_FLIT5_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_1_4_INQ_PRF_FLIT5_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_1_4_INQ_PRF_FLIT5_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC5 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_4_INQ_PRF_FLIT5_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_4_INQ_PRF_FLIT5_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_1_4_INQ_PRF_FLIT5_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_1_4_INQ_PRF_FLIT5_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 5 to match the VC fieldof the header flit to 5',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_4_INQ_PRF_FLIT5_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_5_INQ_PRF_FLIT5_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_1_5_INQ_PRF_FLIT5_FILTERING_SETUP',
    LABEL => 'AR_RTR_1_5_INQ_PRF_FLIT5_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_5_INQ_PRF_FLIT5_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_5_INQ_PRF_FLIT5_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_1_5_INQ_PRF_FLIT5_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_1_5_INQ_PRF_FLIT5_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC5_FILTER_FLIT5_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_5_INQ_PRF_FLIT5_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_5_INQ_PRF_FLIT5_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_1_5_INQ_PRF_FLIT5_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_1_5_INQ_PRF_FLIT5_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC5 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_5_INQ_PRF_FLIT5_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_5_INQ_PRF_FLIT5_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_1_5_INQ_PRF_FLIT5_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_1_5_INQ_PRF_FLIT5_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 5 to match the VC fieldof the header flit to 5',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_5_INQ_PRF_FLIT5_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_6_INQ_PRF_FLIT5_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_1_6_INQ_PRF_FLIT5_FILTERING_SETUP',
    LABEL => 'AR_RTR_1_6_INQ_PRF_FLIT5_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_6_INQ_PRF_FLIT5_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_6_INQ_PRF_FLIT5_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_1_6_INQ_PRF_FLIT5_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_1_6_INQ_PRF_FLIT5_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC5_FILTER_FLIT5_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_6_INQ_PRF_FLIT5_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_6_INQ_PRF_FLIT5_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_1_6_INQ_PRF_FLIT5_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_1_6_INQ_PRF_FLIT5_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC5 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_6_INQ_PRF_FLIT5_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_6_INQ_PRF_FLIT5_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_1_6_INQ_PRF_FLIT5_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_1_6_INQ_PRF_FLIT5_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 5 to match the VC fieldof the header flit to 5',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_6_INQ_PRF_FLIT5_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_7_INQ_PRF_FLIT5_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_1_7_INQ_PRF_FLIT5_FILTERING_SETUP',
    LABEL => 'AR_RTR_1_7_INQ_PRF_FLIT5_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_7_INQ_PRF_FLIT5_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_7_INQ_PRF_FLIT5_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_1_7_INQ_PRF_FLIT5_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_1_7_INQ_PRF_FLIT5_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC5_FILTER_FLIT5_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_7_INQ_PRF_FLIT5_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_7_INQ_PRF_FLIT5_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_1_7_INQ_PRF_FLIT5_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_1_7_INQ_PRF_FLIT5_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC5 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_7_INQ_PRF_FLIT5_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_7_INQ_PRF_FLIT5_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_1_7_INQ_PRF_FLIT5_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_1_7_INQ_PRF_FLIT5_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 5 to match the VC fieldof the header flit to 5',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_7_INQ_PRF_FLIT5_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_0_INQ_PRF_FLIT5_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_2_0_INQ_PRF_FLIT5_FILTERING_SETUP',
    LABEL => 'AR_RTR_2_0_INQ_PRF_FLIT5_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_0_INQ_PRF_FLIT5_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_0_INQ_PRF_FLIT5_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_2_0_INQ_PRF_FLIT5_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_2_0_INQ_PRF_FLIT5_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC5_FILTER_FLIT5_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_0_INQ_PRF_FLIT5_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_0_INQ_PRF_FLIT5_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_2_0_INQ_PRF_FLIT5_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_2_0_INQ_PRF_FLIT5_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC5 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_0_INQ_PRF_FLIT5_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_0_INQ_PRF_FLIT5_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_2_0_INQ_PRF_FLIT5_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_2_0_INQ_PRF_FLIT5_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 5 to match the VC fieldof the header flit to 5',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_0_INQ_PRF_FLIT5_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_1_INQ_PRF_FLIT5_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_2_1_INQ_PRF_FLIT5_FILTERING_SETUP',
    LABEL => 'AR_RTR_2_1_INQ_PRF_FLIT5_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_1_INQ_PRF_FLIT5_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_1_INQ_PRF_FLIT5_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_2_1_INQ_PRF_FLIT5_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_2_1_INQ_PRF_FLIT5_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC5_FILTER_FLIT5_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_1_INQ_PRF_FLIT5_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_1_INQ_PRF_FLIT5_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_2_1_INQ_PRF_FLIT5_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_2_1_INQ_PRF_FLIT5_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC5 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_1_INQ_PRF_FLIT5_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_1_INQ_PRF_FLIT5_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_2_1_INQ_PRF_FLIT5_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_2_1_INQ_PRF_FLIT5_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 5 to match the VC fieldof the header flit to 5',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_1_INQ_PRF_FLIT5_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_2_INQ_PRF_FLIT5_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_2_2_INQ_PRF_FLIT5_FILTERING_SETUP',
    LABEL => 'AR_RTR_2_2_INQ_PRF_FLIT5_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_2_INQ_PRF_FLIT5_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_2_INQ_PRF_FLIT5_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_2_2_INQ_PRF_FLIT5_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_2_2_INQ_PRF_FLIT5_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC5_FILTER_FLIT5_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_2_INQ_PRF_FLIT5_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_2_INQ_PRF_FLIT5_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_2_2_INQ_PRF_FLIT5_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_2_2_INQ_PRF_FLIT5_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC5 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_2_INQ_PRF_FLIT5_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_2_INQ_PRF_FLIT5_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_2_2_INQ_PRF_FLIT5_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_2_2_INQ_PRF_FLIT5_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 5 to match the VC fieldof the header flit to 5',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_2_INQ_PRF_FLIT5_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_3_INQ_PRF_FLIT5_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_2_3_INQ_PRF_FLIT5_FILTERING_SETUP',
    LABEL => 'AR_RTR_2_3_INQ_PRF_FLIT5_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_3_INQ_PRF_FLIT5_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_3_INQ_PRF_FLIT5_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_2_3_INQ_PRF_FLIT5_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_2_3_INQ_PRF_FLIT5_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC5_FILTER_FLIT5_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_3_INQ_PRF_FLIT5_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_3_INQ_PRF_FLIT5_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_2_3_INQ_PRF_FLIT5_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_2_3_INQ_PRF_FLIT5_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC5 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_3_INQ_PRF_FLIT5_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_3_INQ_PRF_FLIT5_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_2_3_INQ_PRF_FLIT5_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_2_3_INQ_PRF_FLIT5_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 5 to match the VC fieldof the header flit to 5',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_3_INQ_PRF_FLIT5_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_4_INQ_PRF_FLIT5_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_2_4_INQ_PRF_FLIT5_FILTERING_SETUP',
    LABEL => 'AR_RTR_2_4_INQ_PRF_FLIT5_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_4_INQ_PRF_FLIT5_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_4_INQ_PRF_FLIT5_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_2_4_INQ_PRF_FLIT5_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_2_4_INQ_PRF_FLIT5_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC5_FILTER_FLIT5_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_4_INQ_PRF_FLIT5_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_4_INQ_PRF_FLIT5_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_2_4_INQ_PRF_FLIT5_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_2_4_INQ_PRF_FLIT5_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC5 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_4_INQ_PRF_FLIT5_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_4_INQ_PRF_FLIT5_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_2_4_INQ_PRF_FLIT5_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_2_4_INQ_PRF_FLIT5_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 5 to match the VC fieldof the header flit to 5',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_4_INQ_PRF_FLIT5_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_5_INQ_PRF_FLIT5_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_2_5_INQ_PRF_FLIT5_FILTERING_SETUP',
    LABEL => 'AR_RTR_2_5_INQ_PRF_FLIT5_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_5_INQ_PRF_FLIT5_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_5_INQ_PRF_FLIT5_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_2_5_INQ_PRF_FLIT5_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_2_5_INQ_PRF_FLIT5_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC5_FILTER_FLIT5_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_5_INQ_PRF_FLIT5_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_5_INQ_PRF_FLIT5_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_2_5_INQ_PRF_FLIT5_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_2_5_INQ_PRF_FLIT5_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC5 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_5_INQ_PRF_FLIT5_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_5_INQ_PRF_FLIT5_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_2_5_INQ_PRF_FLIT5_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_2_5_INQ_PRF_FLIT5_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 5 to match the VC fieldof the header flit to 5',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_5_INQ_PRF_FLIT5_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_6_INQ_PRF_FLIT5_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_2_6_INQ_PRF_FLIT5_FILTERING_SETUP',
    LABEL => 'AR_RTR_2_6_INQ_PRF_FLIT5_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_6_INQ_PRF_FLIT5_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_6_INQ_PRF_FLIT5_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_2_6_INQ_PRF_FLIT5_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_2_6_INQ_PRF_FLIT5_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC5_FILTER_FLIT5_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_6_INQ_PRF_FLIT5_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_6_INQ_PRF_FLIT5_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_2_6_INQ_PRF_FLIT5_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_2_6_INQ_PRF_FLIT5_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC5 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_6_INQ_PRF_FLIT5_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_6_INQ_PRF_FLIT5_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_2_6_INQ_PRF_FLIT5_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_2_6_INQ_PRF_FLIT5_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 5 to match the VC fieldof the header flit to 5',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_6_INQ_PRF_FLIT5_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_7_INQ_PRF_FLIT5_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_2_7_INQ_PRF_FLIT5_FILTERING_SETUP',
    LABEL => 'AR_RTR_2_7_INQ_PRF_FLIT5_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_7_INQ_PRF_FLIT5_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_7_INQ_PRF_FLIT5_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_2_7_INQ_PRF_FLIT5_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_2_7_INQ_PRF_FLIT5_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC5_FILTER_FLIT5_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_7_INQ_PRF_FLIT5_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_7_INQ_PRF_FLIT5_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_2_7_INQ_PRF_FLIT5_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_2_7_INQ_PRF_FLIT5_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC5 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_7_INQ_PRF_FLIT5_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_7_INQ_PRF_FLIT5_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_2_7_INQ_PRF_FLIT5_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_2_7_INQ_PRF_FLIT5_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 5 to match the VC fieldof the header flit to 5',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_7_INQ_PRF_FLIT5_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_0_INQ_PRF_FLIT5_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_3_0_INQ_PRF_FLIT5_FILTERING_SETUP',
    LABEL => 'AR_RTR_3_0_INQ_PRF_FLIT5_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_0_INQ_PRF_FLIT5_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_0_INQ_PRF_FLIT5_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_3_0_INQ_PRF_FLIT5_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_3_0_INQ_PRF_FLIT5_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC5_FILTER_FLIT5_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_0_INQ_PRF_FLIT5_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_0_INQ_PRF_FLIT5_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_3_0_INQ_PRF_FLIT5_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_3_0_INQ_PRF_FLIT5_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC5 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_0_INQ_PRF_FLIT5_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_0_INQ_PRF_FLIT5_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_3_0_INQ_PRF_FLIT5_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_3_0_INQ_PRF_FLIT5_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 5 to match the VC fieldof the header flit to 5',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_0_INQ_PRF_FLIT5_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_1_INQ_PRF_FLIT5_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_3_1_INQ_PRF_FLIT5_FILTERING_SETUP',
    LABEL => 'AR_RTR_3_1_INQ_PRF_FLIT5_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_1_INQ_PRF_FLIT5_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_1_INQ_PRF_FLIT5_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_3_1_INQ_PRF_FLIT5_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_3_1_INQ_PRF_FLIT5_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC5_FILTER_FLIT5_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_1_INQ_PRF_FLIT5_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_1_INQ_PRF_FLIT5_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_3_1_INQ_PRF_FLIT5_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_3_1_INQ_PRF_FLIT5_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC5 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_1_INQ_PRF_FLIT5_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_1_INQ_PRF_FLIT5_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_3_1_INQ_PRF_FLIT5_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_3_1_INQ_PRF_FLIT5_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 5 to match the VC fieldof the header flit to 5',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_1_INQ_PRF_FLIT5_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_2_INQ_PRF_FLIT5_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_3_2_INQ_PRF_FLIT5_FILTERING_SETUP',
    LABEL => 'AR_RTR_3_2_INQ_PRF_FLIT5_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_2_INQ_PRF_FLIT5_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_2_INQ_PRF_FLIT5_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_3_2_INQ_PRF_FLIT5_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_3_2_INQ_PRF_FLIT5_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC5_FILTER_FLIT5_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_2_INQ_PRF_FLIT5_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_2_INQ_PRF_FLIT5_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_3_2_INQ_PRF_FLIT5_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_3_2_INQ_PRF_FLIT5_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC5 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_2_INQ_PRF_FLIT5_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_2_INQ_PRF_FLIT5_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_3_2_INQ_PRF_FLIT5_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_3_2_INQ_PRF_FLIT5_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 5 to match the VC fieldof the header flit to 5',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_2_INQ_PRF_FLIT5_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_3_INQ_PRF_FLIT5_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_3_3_INQ_PRF_FLIT5_FILTERING_SETUP',
    LABEL => 'AR_RTR_3_3_INQ_PRF_FLIT5_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_3_INQ_PRF_FLIT5_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_3_INQ_PRF_FLIT5_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_3_3_INQ_PRF_FLIT5_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_3_3_INQ_PRF_FLIT5_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC5_FILTER_FLIT5_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_3_INQ_PRF_FLIT5_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_3_INQ_PRF_FLIT5_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_3_3_INQ_PRF_FLIT5_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_3_3_INQ_PRF_FLIT5_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC5 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_3_INQ_PRF_FLIT5_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_3_INQ_PRF_FLIT5_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_3_3_INQ_PRF_FLIT5_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_3_3_INQ_PRF_FLIT5_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 5 to match the VC fieldof the header flit to 5',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_3_INQ_PRF_FLIT5_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_4_INQ_PRF_FLIT5_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_3_4_INQ_PRF_FLIT5_FILTERING_SETUP',
    LABEL => 'AR_RTR_3_4_INQ_PRF_FLIT5_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_4_INQ_PRF_FLIT5_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_4_INQ_PRF_FLIT5_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_3_4_INQ_PRF_FLIT5_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_3_4_INQ_PRF_FLIT5_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC5_FILTER_FLIT5_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_4_INQ_PRF_FLIT5_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_4_INQ_PRF_FLIT5_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_3_4_INQ_PRF_FLIT5_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_3_4_INQ_PRF_FLIT5_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC5 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_4_INQ_PRF_FLIT5_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_4_INQ_PRF_FLIT5_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_3_4_INQ_PRF_FLIT5_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_3_4_INQ_PRF_FLIT5_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 5 to match the VC fieldof the header flit to 5',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_4_INQ_PRF_FLIT5_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_5_INQ_PRF_FLIT5_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_3_5_INQ_PRF_FLIT5_FILTERING_SETUP',
    LABEL => 'AR_RTR_3_5_INQ_PRF_FLIT5_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_5_INQ_PRF_FLIT5_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_5_INQ_PRF_FLIT5_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_3_5_INQ_PRF_FLIT5_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_3_5_INQ_PRF_FLIT5_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC5_FILTER_FLIT5_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_5_INQ_PRF_FLIT5_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_5_INQ_PRF_FLIT5_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_3_5_INQ_PRF_FLIT5_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_3_5_INQ_PRF_FLIT5_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC5 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_5_INQ_PRF_FLIT5_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_5_INQ_PRF_FLIT5_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_3_5_INQ_PRF_FLIT5_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_3_5_INQ_PRF_FLIT5_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 5 to match the VC fieldof the header flit to 5',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_5_INQ_PRF_FLIT5_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_6_INQ_PRF_FLIT5_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_3_6_INQ_PRF_FLIT5_FILTERING_SETUP',
    LABEL => 'AR_RTR_3_6_INQ_PRF_FLIT5_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_6_INQ_PRF_FLIT5_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_6_INQ_PRF_FLIT5_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_3_6_INQ_PRF_FLIT5_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_3_6_INQ_PRF_FLIT5_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC5_FILTER_FLIT5_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_6_INQ_PRF_FLIT5_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_6_INQ_PRF_FLIT5_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_3_6_INQ_PRF_FLIT5_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_3_6_INQ_PRF_FLIT5_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC5 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_6_INQ_PRF_FLIT5_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_6_INQ_PRF_FLIT5_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_3_6_INQ_PRF_FLIT5_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_3_6_INQ_PRF_FLIT5_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 5 to match the VC fieldof the header flit to 5',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_6_INQ_PRF_FLIT5_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_7_INQ_PRF_FLIT5_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_3_7_INQ_PRF_FLIT5_FILTERING_SETUP',
    LABEL => 'AR_RTR_3_7_INQ_PRF_FLIT5_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_7_INQ_PRF_FLIT5_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_7_INQ_PRF_FLIT5_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_3_7_INQ_PRF_FLIT5_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_3_7_INQ_PRF_FLIT5_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC5_FILTER_FLIT5_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_7_INQ_PRF_FLIT5_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_7_INQ_PRF_FLIT5_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_3_7_INQ_PRF_FLIT5_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_3_7_INQ_PRF_FLIT5_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC5 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_7_INQ_PRF_FLIT5_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_7_INQ_PRF_FLIT5_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_3_7_INQ_PRF_FLIT5_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_3_7_INQ_PRF_FLIT5_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 5 to match the VC fieldof the header flit to 5',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_7_INQ_PRF_FLIT5_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_0_INQ_PRF_FLIT5_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_4_0_INQ_PRF_FLIT5_FILTERING_SETUP',
    LABEL => 'AR_RTR_4_0_INQ_PRF_FLIT5_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_0_INQ_PRF_FLIT5_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_0_INQ_PRF_FLIT5_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_4_0_INQ_PRF_FLIT5_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_4_0_INQ_PRF_FLIT5_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC5_FILTER_FLIT5_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_0_INQ_PRF_FLIT5_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_0_INQ_PRF_FLIT5_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_4_0_INQ_PRF_FLIT5_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_4_0_INQ_PRF_FLIT5_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC5 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_0_INQ_PRF_FLIT5_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_0_INQ_PRF_FLIT5_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_4_0_INQ_PRF_FLIT5_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_4_0_INQ_PRF_FLIT5_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 5 to match the VC fieldof the header flit to 5',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_0_INQ_PRF_FLIT5_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_1_INQ_PRF_FLIT5_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_4_1_INQ_PRF_FLIT5_FILTERING_SETUP',
    LABEL => 'AR_RTR_4_1_INQ_PRF_FLIT5_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_1_INQ_PRF_FLIT5_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_1_INQ_PRF_FLIT5_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_4_1_INQ_PRF_FLIT5_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_4_1_INQ_PRF_FLIT5_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC5_FILTER_FLIT5_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_1_INQ_PRF_FLIT5_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_1_INQ_PRF_FLIT5_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_4_1_INQ_PRF_FLIT5_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_4_1_INQ_PRF_FLIT5_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC5 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_1_INQ_PRF_FLIT5_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_1_INQ_PRF_FLIT5_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_4_1_INQ_PRF_FLIT5_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_4_1_INQ_PRF_FLIT5_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 5 to match the VC fieldof the header flit to 5',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_1_INQ_PRF_FLIT5_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_2_INQ_PRF_FLIT5_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_4_2_INQ_PRF_FLIT5_FILTERING_SETUP',
    LABEL => 'AR_RTR_4_2_INQ_PRF_FLIT5_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_2_INQ_PRF_FLIT5_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_2_INQ_PRF_FLIT5_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_4_2_INQ_PRF_FLIT5_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_4_2_INQ_PRF_FLIT5_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC5_FILTER_FLIT5_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_2_INQ_PRF_FLIT5_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_2_INQ_PRF_FLIT5_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_4_2_INQ_PRF_FLIT5_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_4_2_INQ_PRF_FLIT5_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC5 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_2_INQ_PRF_FLIT5_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_2_INQ_PRF_FLIT5_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_4_2_INQ_PRF_FLIT5_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_4_2_INQ_PRF_FLIT5_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 5 to match the VC fieldof the header flit to 5',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_2_INQ_PRF_FLIT5_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_3_INQ_PRF_FLIT5_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_4_3_INQ_PRF_FLIT5_FILTERING_SETUP',
    LABEL => 'AR_RTR_4_3_INQ_PRF_FLIT5_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_3_INQ_PRF_FLIT5_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_3_INQ_PRF_FLIT5_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_4_3_INQ_PRF_FLIT5_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_4_3_INQ_PRF_FLIT5_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC5_FILTER_FLIT5_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_3_INQ_PRF_FLIT5_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_3_INQ_PRF_FLIT5_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_4_3_INQ_PRF_FLIT5_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_4_3_INQ_PRF_FLIT5_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC5 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_3_INQ_PRF_FLIT5_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_3_INQ_PRF_FLIT5_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_4_3_INQ_PRF_FLIT5_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_4_3_INQ_PRF_FLIT5_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 5 to match the VC fieldof the header flit to 5',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_3_INQ_PRF_FLIT5_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_4_INQ_PRF_FLIT5_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_4_4_INQ_PRF_FLIT5_FILTERING_SETUP',
    LABEL => 'AR_RTR_4_4_INQ_PRF_FLIT5_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_4_INQ_PRF_FLIT5_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_4_INQ_PRF_FLIT5_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_4_4_INQ_PRF_FLIT5_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_4_4_INQ_PRF_FLIT5_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC5_FILTER_FLIT5_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_4_INQ_PRF_FLIT5_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_4_INQ_PRF_FLIT5_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_4_4_INQ_PRF_FLIT5_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_4_4_INQ_PRF_FLIT5_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC5 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_4_INQ_PRF_FLIT5_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_4_INQ_PRF_FLIT5_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_4_4_INQ_PRF_FLIT5_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_4_4_INQ_PRF_FLIT5_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 5 to match the VC fieldof the header flit to 5',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_4_INQ_PRF_FLIT5_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_5_INQ_PRF_FLIT5_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_4_5_INQ_PRF_FLIT5_FILTERING_SETUP',
    LABEL => 'AR_RTR_4_5_INQ_PRF_FLIT5_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_5_INQ_PRF_FLIT5_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_5_INQ_PRF_FLIT5_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_4_5_INQ_PRF_FLIT5_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_4_5_INQ_PRF_FLIT5_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC5_FILTER_FLIT5_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_5_INQ_PRF_FLIT5_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_5_INQ_PRF_FLIT5_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_4_5_INQ_PRF_FLIT5_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_4_5_INQ_PRF_FLIT5_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC5 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_5_INQ_PRF_FLIT5_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_5_INQ_PRF_FLIT5_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_4_5_INQ_PRF_FLIT5_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_4_5_INQ_PRF_FLIT5_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 5 to match the VC fieldof the header flit to 5',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_5_INQ_PRF_FLIT5_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_6_INQ_PRF_FLIT5_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_4_6_INQ_PRF_FLIT5_FILTERING_SETUP',
    LABEL => 'AR_RTR_4_6_INQ_PRF_FLIT5_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_6_INQ_PRF_FLIT5_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_6_INQ_PRF_FLIT5_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_4_6_INQ_PRF_FLIT5_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_4_6_INQ_PRF_FLIT5_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC5_FILTER_FLIT5_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_6_INQ_PRF_FLIT5_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_6_INQ_PRF_FLIT5_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_4_6_INQ_PRF_FLIT5_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_4_6_INQ_PRF_FLIT5_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC5 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_6_INQ_PRF_FLIT5_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_6_INQ_PRF_FLIT5_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_4_6_INQ_PRF_FLIT5_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_4_6_INQ_PRF_FLIT5_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 5 to match the VC fieldof the header flit to 5',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_6_INQ_PRF_FLIT5_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_7_INQ_PRF_FLIT5_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_4_7_INQ_PRF_FLIT5_FILTERING_SETUP',
    LABEL => 'AR_RTR_4_7_INQ_PRF_FLIT5_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_7_INQ_PRF_FLIT5_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_7_INQ_PRF_FLIT5_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_4_7_INQ_PRF_FLIT5_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_4_7_INQ_PRF_FLIT5_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC5_FILTER_FLIT5_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_7_INQ_PRF_FLIT5_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_7_INQ_PRF_FLIT5_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_4_7_INQ_PRF_FLIT5_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_4_7_INQ_PRF_FLIT5_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC5 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_7_INQ_PRF_FLIT5_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_7_INQ_PRF_FLIT5_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_4_7_INQ_PRF_FLIT5_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_4_7_INQ_PRF_FLIT5_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 5 to match the VC fieldof the header flit to 5',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_7_INQ_PRF_FLIT5_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_0_INQ_PRF_FLIT5_FILTERING_MASK'} = {
    NAME => 'AR_RTR_0_0_INQ_PRF_FLIT5_FILTERING_MASK',
    LABEL => 'AR_RTR_0_0_INQ_PRF_FLIT5_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_0_INQ_PRF_FLIT5_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_0_INQ_PRF_FLIT5_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_0_0_INQ_PRF_FLIT5_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_0_0_INQ_PRF_FLIT5_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_0_INQ_PRF_FLIT5_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_1_INQ_PRF_FLIT5_FILTERING_MASK'} = {
    NAME => 'AR_RTR_0_1_INQ_PRF_FLIT5_FILTERING_MASK',
    LABEL => 'AR_RTR_0_1_INQ_PRF_FLIT5_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_1_INQ_PRF_FLIT5_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_1_INQ_PRF_FLIT5_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_0_1_INQ_PRF_FLIT5_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_0_1_INQ_PRF_FLIT5_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_1_INQ_PRF_FLIT5_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_2_INQ_PRF_FLIT5_FILTERING_MASK'} = {
    NAME => 'AR_RTR_0_2_INQ_PRF_FLIT5_FILTERING_MASK',
    LABEL => 'AR_RTR_0_2_INQ_PRF_FLIT5_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_2_INQ_PRF_FLIT5_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_2_INQ_PRF_FLIT5_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_0_2_INQ_PRF_FLIT5_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_0_2_INQ_PRF_FLIT5_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_2_INQ_PRF_FLIT5_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_3_INQ_PRF_FLIT5_FILTERING_MASK'} = {
    NAME => 'AR_RTR_0_3_INQ_PRF_FLIT5_FILTERING_MASK',
    LABEL => 'AR_RTR_0_3_INQ_PRF_FLIT5_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_3_INQ_PRF_FLIT5_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_3_INQ_PRF_FLIT5_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_0_3_INQ_PRF_FLIT5_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_0_3_INQ_PRF_FLIT5_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_3_INQ_PRF_FLIT5_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_4_INQ_PRF_FLIT5_FILTERING_MASK'} = {
    NAME => 'AR_RTR_0_4_INQ_PRF_FLIT5_FILTERING_MASK',
    LABEL => 'AR_RTR_0_4_INQ_PRF_FLIT5_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_4_INQ_PRF_FLIT5_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_4_INQ_PRF_FLIT5_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_0_4_INQ_PRF_FLIT5_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_0_4_INQ_PRF_FLIT5_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_4_INQ_PRF_FLIT5_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_5_INQ_PRF_FLIT5_FILTERING_MASK'} = {
    NAME => 'AR_RTR_0_5_INQ_PRF_FLIT5_FILTERING_MASK',
    LABEL => 'AR_RTR_0_5_INQ_PRF_FLIT5_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_5_INQ_PRF_FLIT5_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_5_INQ_PRF_FLIT5_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_0_5_INQ_PRF_FLIT5_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_0_5_INQ_PRF_FLIT5_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_5_INQ_PRF_FLIT5_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_6_INQ_PRF_FLIT5_FILTERING_MASK'} = {
    NAME => 'AR_RTR_0_6_INQ_PRF_FLIT5_FILTERING_MASK',
    LABEL => 'AR_RTR_0_6_INQ_PRF_FLIT5_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_6_INQ_PRF_FLIT5_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_6_INQ_PRF_FLIT5_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_0_6_INQ_PRF_FLIT5_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_0_6_INQ_PRF_FLIT5_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_6_INQ_PRF_FLIT5_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_7_INQ_PRF_FLIT5_FILTERING_MASK'} = {
    NAME => 'AR_RTR_0_7_INQ_PRF_FLIT5_FILTERING_MASK',
    LABEL => 'AR_RTR_0_7_INQ_PRF_FLIT5_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_7_INQ_PRF_FLIT5_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_7_INQ_PRF_FLIT5_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_0_7_INQ_PRF_FLIT5_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_0_7_INQ_PRF_FLIT5_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_7_INQ_PRF_FLIT5_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_0_INQ_PRF_FLIT5_FILTERING_MASK'} = {
    NAME => 'AR_RTR_1_0_INQ_PRF_FLIT5_FILTERING_MASK',
    LABEL => 'AR_RTR_1_0_INQ_PRF_FLIT5_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_0_INQ_PRF_FLIT5_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_0_INQ_PRF_FLIT5_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_1_0_INQ_PRF_FLIT5_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_1_0_INQ_PRF_FLIT5_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_0_INQ_PRF_FLIT5_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_1_INQ_PRF_FLIT5_FILTERING_MASK'} = {
    NAME => 'AR_RTR_1_1_INQ_PRF_FLIT5_FILTERING_MASK',
    LABEL => 'AR_RTR_1_1_INQ_PRF_FLIT5_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_1_INQ_PRF_FLIT5_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_1_INQ_PRF_FLIT5_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_1_1_INQ_PRF_FLIT5_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_1_1_INQ_PRF_FLIT5_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_1_INQ_PRF_FLIT5_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_2_INQ_PRF_FLIT5_FILTERING_MASK'} = {
    NAME => 'AR_RTR_1_2_INQ_PRF_FLIT5_FILTERING_MASK',
    LABEL => 'AR_RTR_1_2_INQ_PRF_FLIT5_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_2_INQ_PRF_FLIT5_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_2_INQ_PRF_FLIT5_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_1_2_INQ_PRF_FLIT5_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_1_2_INQ_PRF_FLIT5_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_2_INQ_PRF_FLIT5_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_3_INQ_PRF_FLIT5_FILTERING_MASK'} = {
    NAME => 'AR_RTR_1_3_INQ_PRF_FLIT5_FILTERING_MASK',
    LABEL => 'AR_RTR_1_3_INQ_PRF_FLIT5_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_3_INQ_PRF_FLIT5_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_3_INQ_PRF_FLIT5_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_1_3_INQ_PRF_FLIT5_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_1_3_INQ_PRF_FLIT5_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_3_INQ_PRF_FLIT5_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_4_INQ_PRF_FLIT5_FILTERING_MASK'} = {
    NAME => 'AR_RTR_1_4_INQ_PRF_FLIT5_FILTERING_MASK',
    LABEL => 'AR_RTR_1_4_INQ_PRF_FLIT5_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_4_INQ_PRF_FLIT5_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_4_INQ_PRF_FLIT5_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_1_4_INQ_PRF_FLIT5_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_1_4_INQ_PRF_FLIT5_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_4_INQ_PRF_FLIT5_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_5_INQ_PRF_FLIT5_FILTERING_MASK'} = {
    NAME => 'AR_RTR_1_5_INQ_PRF_FLIT5_FILTERING_MASK',
    LABEL => 'AR_RTR_1_5_INQ_PRF_FLIT5_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_5_INQ_PRF_FLIT5_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_5_INQ_PRF_FLIT5_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_1_5_INQ_PRF_FLIT5_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_1_5_INQ_PRF_FLIT5_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_5_INQ_PRF_FLIT5_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_6_INQ_PRF_FLIT5_FILTERING_MASK'} = {
    NAME => 'AR_RTR_1_6_INQ_PRF_FLIT5_FILTERING_MASK',
    LABEL => 'AR_RTR_1_6_INQ_PRF_FLIT5_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_6_INQ_PRF_FLIT5_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_6_INQ_PRF_FLIT5_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_1_6_INQ_PRF_FLIT5_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_1_6_INQ_PRF_FLIT5_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_6_INQ_PRF_FLIT5_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_7_INQ_PRF_FLIT5_FILTERING_MASK'} = {
    NAME => 'AR_RTR_1_7_INQ_PRF_FLIT5_FILTERING_MASK',
    LABEL => 'AR_RTR_1_7_INQ_PRF_FLIT5_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_7_INQ_PRF_FLIT5_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_7_INQ_PRF_FLIT5_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_1_7_INQ_PRF_FLIT5_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_1_7_INQ_PRF_FLIT5_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_7_INQ_PRF_FLIT5_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_0_INQ_PRF_FLIT5_FILTERING_MASK'} = {
    NAME => 'AR_RTR_2_0_INQ_PRF_FLIT5_FILTERING_MASK',
    LABEL => 'AR_RTR_2_0_INQ_PRF_FLIT5_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_0_INQ_PRF_FLIT5_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_0_INQ_PRF_FLIT5_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_2_0_INQ_PRF_FLIT5_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_2_0_INQ_PRF_FLIT5_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_0_INQ_PRF_FLIT5_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_1_INQ_PRF_FLIT5_FILTERING_MASK'} = {
    NAME => 'AR_RTR_2_1_INQ_PRF_FLIT5_FILTERING_MASK',
    LABEL => 'AR_RTR_2_1_INQ_PRF_FLIT5_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_1_INQ_PRF_FLIT5_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_1_INQ_PRF_FLIT5_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_2_1_INQ_PRF_FLIT5_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_2_1_INQ_PRF_FLIT5_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_1_INQ_PRF_FLIT5_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_2_INQ_PRF_FLIT5_FILTERING_MASK'} = {
    NAME => 'AR_RTR_2_2_INQ_PRF_FLIT5_FILTERING_MASK',
    LABEL => 'AR_RTR_2_2_INQ_PRF_FLIT5_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_2_INQ_PRF_FLIT5_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_2_INQ_PRF_FLIT5_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_2_2_INQ_PRF_FLIT5_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_2_2_INQ_PRF_FLIT5_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_2_INQ_PRF_FLIT5_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_3_INQ_PRF_FLIT5_FILTERING_MASK'} = {
    NAME => 'AR_RTR_2_3_INQ_PRF_FLIT5_FILTERING_MASK',
    LABEL => 'AR_RTR_2_3_INQ_PRF_FLIT5_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_3_INQ_PRF_FLIT5_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_3_INQ_PRF_FLIT5_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_2_3_INQ_PRF_FLIT5_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_2_3_INQ_PRF_FLIT5_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_3_INQ_PRF_FLIT5_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_4_INQ_PRF_FLIT5_FILTERING_MASK'} = {
    NAME => 'AR_RTR_2_4_INQ_PRF_FLIT5_FILTERING_MASK',
    LABEL => 'AR_RTR_2_4_INQ_PRF_FLIT5_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_4_INQ_PRF_FLIT5_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_4_INQ_PRF_FLIT5_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_2_4_INQ_PRF_FLIT5_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_2_4_INQ_PRF_FLIT5_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_4_INQ_PRF_FLIT5_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_5_INQ_PRF_FLIT5_FILTERING_MASK'} = {
    NAME => 'AR_RTR_2_5_INQ_PRF_FLIT5_FILTERING_MASK',
    LABEL => 'AR_RTR_2_5_INQ_PRF_FLIT5_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_5_INQ_PRF_FLIT5_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_5_INQ_PRF_FLIT5_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_2_5_INQ_PRF_FLIT5_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_2_5_INQ_PRF_FLIT5_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_5_INQ_PRF_FLIT5_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_6_INQ_PRF_FLIT5_FILTERING_MASK'} = {
    NAME => 'AR_RTR_2_6_INQ_PRF_FLIT5_FILTERING_MASK',
    LABEL => 'AR_RTR_2_6_INQ_PRF_FLIT5_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_6_INQ_PRF_FLIT5_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_6_INQ_PRF_FLIT5_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_2_6_INQ_PRF_FLIT5_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_2_6_INQ_PRF_FLIT5_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_6_INQ_PRF_FLIT5_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_7_INQ_PRF_FLIT5_FILTERING_MASK'} = {
    NAME => 'AR_RTR_2_7_INQ_PRF_FLIT5_FILTERING_MASK',
    LABEL => 'AR_RTR_2_7_INQ_PRF_FLIT5_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_7_INQ_PRF_FLIT5_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_7_INQ_PRF_FLIT5_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_2_7_INQ_PRF_FLIT5_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_2_7_INQ_PRF_FLIT5_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_7_INQ_PRF_FLIT5_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_0_INQ_PRF_FLIT5_FILTERING_MASK'} = {
    NAME => 'AR_RTR_3_0_INQ_PRF_FLIT5_FILTERING_MASK',
    LABEL => 'AR_RTR_3_0_INQ_PRF_FLIT5_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_0_INQ_PRF_FLIT5_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_0_INQ_PRF_FLIT5_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_3_0_INQ_PRF_FLIT5_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_3_0_INQ_PRF_FLIT5_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_0_INQ_PRF_FLIT5_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_1_INQ_PRF_FLIT5_FILTERING_MASK'} = {
    NAME => 'AR_RTR_3_1_INQ_PRF_FLIT5_FILTERING_MASK',
    LABEL => 'AR_RTR_3_1_INQ_PRF_FLIT5_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_1_INQ_PRF_FLIT5_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_1_INQ_PRF_FLIT5_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_3_1_INQ_PRF_FLIT5_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_3_1_INQ_PRF_FLIT5_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_1_INQ_PRF_FLIT5_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_2_INQ_PRF_FLIT5_FILTERING_MASK'} = {
    NAME => 'AR_RTR_3_2_INQ_PRF_FLIT5_FILTERING_MASK',
    LABEL => 'AR_RTR_3_2_INQ_PRF_FLIT5_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_2_INQ_PRF_FLIT5_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_2_INQ_PRF_FLIT5_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_3_2_INQ_PRF_FLIT5_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_3_2_INQ_PRF_FLIT5_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_2_INQ_PRF_FLIT5_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_3_INQ_PRF_FLIT5_FILTERING_MASK'} = {
    NAME => 'AR_RTR_3_3_INQ_PRF_FLIT5_FILTERING_MASK',
    LABEL => 'AR_RTR_3_3_INQ_PRF_FLIT5_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_3_INQ_PRF_FLIT5_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_3_INQ_PRF_FLIT5_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_3_3_INQ_PRF_FLIT5_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_3_3_INQ_PRF_FLIT5_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_3_INQ_PRF_FLIT5_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_4_INQ_PRF_FLIT5_FILTERING_MASK'} = {
    NAME => 'AR_RTR_3_4_INQ_PRF_FLIT5_FILTERING_MASK',
    LABEL => 'AR_RTR_3_4_INQ_PRF_FLIT5_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_4_INQ_PRF_FLIT5_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_4_INQ_PRF_FLIT5_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_3_4_INQ_PRF_FLIT5_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_3_4_INQ_PRF_FLIT5_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_4_INQ_PRF_FLIT5_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_5_INQ_PRF_FLIT5_FILTERING_MASK'} = {
    NAME => 'AR_RTR_3_5_INQ_PRF_FLIT5_FILTERING_MASK',
    LABEL => 'AR_RTR_3_5_INQ_PRF_FLIT5_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_5_INQ_PRF_FLIT5_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_5_INQ_PRF_FLIT5_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_3_5_INQ_PRF_FLIT5_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_3_5_INQ_PRF_FLIT5_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_5_INQ_PRF_FLIT5_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_6_INQ_PRF_FLIT5_FILTERING_MASK'} = {
    NAME => 'AR_RTR_3_6_INQ_PRF_FLIT5_FILTERING_MASK',
    LABEL => 'AR_RTR_3_6_INQ_PRF_FLIT5_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_6_INQ_PRF_FLIT5_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_6_INQ_PRF_FLIT5_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_3_6_INQ_PRF_FLIT5_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_3_6_INQ_PRF_FLIT5_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_6_INQ_PRF_FLIT5_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_7_INQ_PRF_FLIT5_FILTERING_MASK'} = {
    NAME => 'AR_RTR_3_7_INQ_PRF_FLIT5_FILTERING_MASK',
    LABEL => 'AR_RTR_3_7_INQ_PRF_FLIT5_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_7_INQ_PRF_FLIT5_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_7_INQ_PRF_FLIT5_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_3_7_INQ_PRF_FLIT5_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_3_7_INQ_PRF_FLIT5_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_7_INQ_PRF_FLIT5_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_0_INQ_PRF_FLIT5_FILTERING_MASK'} = {
    NAME => 'AR_RTR_4_0_INQ_PRF_FLIT5_FILTERING_MASK',
    LABEL => 'AR_RTR_4_0_INQ_PRF_FLIT5_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_0_INQ_PRF_FLIT5_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_0_INQ_PRF_FLIT5_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_4_0_INQ_PRF_FLIT5_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_4_0_INQ_PRF_FLIT5_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_0_INQ_PRF_FLIT5_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_1_INQ_PRF_FLIT5_FILTERING_MASK'} = {
    NAME => 'AR_RTR_4_1_INQ_PRF_FLIT5_FILTERING_MASK',
    LABEL => 'AR_RTR_4_1_INQ_PRF_FLIT5_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_1_INQ_PRF_FLIT5_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_1_INQ_PRF_FLIT5_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_4_1_INQ_PRF_FLIT5_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_4_1_INQ_PRF_FLIT5_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_1_INQ_PRF_FLIT5_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_2_INQ_PRF_FLIT5_FILTERING_MASK'} = {
    NAME => 'AR_RTR_4_2_INQ_PRF_FLIT5_FILTERING_MASK',
    LABEL => 'AR_RTR_4_2_INQ_PRF_FLIT5_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_2_INQ_PRF_FLIT5_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_2_INQ_PRF_FLIT5_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_4_2_INQ_PRF_FLIT5_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_4_2_INQ_PRF_FLIT5_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_2_INQ_PRF_FLIT5_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_3_INQ_PRF_FLIT5_FILTERING_MASK'} = {
    NAME => 'AR_RTR_4_3_INQ_PRF_FLIT5_FILTERING_MASK',
    LABEL => 'AR_RTR_4_3_INQ_PRF_FLIT5_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_3_INQ_PRF_FLIT5_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_3_INQ_PRF_FLIT5_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_4_3_INQ_PRF_FLIT5_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_4_3_INQ_PRF_FLIT5_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_3_INQ_PRF_FLIT5_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_4_INQ_PRF_FLIT5_FILTERING_MASK'} = {
    NAME => 'AR_RTR_4_4_INQ_PRF_FLIT5_FILTERING_MASK',
    LABEL => 'AR_RTR_4_4_INQ_PRF_FLIT5_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_4_INQ_PRF_FLIT5_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_4_INQ_PRF_FLIT5_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_4_4_INQ_PRF_FLIT5_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_4_4_INQ_PRF_FLIT5_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_4_INQ_PRF_FLIT5_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_5_INQ_PRF_FLIT5_FILTERING_MASK'} = {
    NAME => 'AR_RTR_4_5_INQ_PRF_FLIT5_FILTERING_MASK',
    LABEL => 'AR_RTR_4_5_INQ_PRF_FLIT5_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_5_INQ_PRF_FLIT5_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_5_INQ_PRF_FLIT5_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_4_5_INQ_PRF_FLIT5_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_4_5_INQ_PRF_FLIT5_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_5_INQ_PRF_FLIT5_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_6_INQ_PRF_FLIT5_FILTERING_MASK'} = {
    NAME => 'AR_RTR_4_6_INQ_PRF_FLIT5_FILTERING_MASK',
    LABEL => 'AR_RTR_4_6_INQ_PRF_FLIT5_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_6_INQ_PRF_FLIT5_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_6_INQ_PRF_FLIT5_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_4_6_INQ_PRF_FLIT5_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_4_6_INQ_PRF_FLIT5_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_6_INQ_PRF_FLIT5_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_7_INQ_PRF_FLIT5_FILTERING_MASK'} = {
    NAME => 'AR_RTR_4_7_INQ_PRF_FLIT5_FILTERING_MASK',
    LABEL => 'AR_RTR_4_7_INQ_PRF_FLIT5_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_7_INQ_PRF_FLIT5_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_7_INQ_PRF_FLIT5_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_4_7_INQ_PRF_FLIT5_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_4_7_INQ_PRF_FLIT5_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_7_INQ_PRF_FLIT5_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_0_INQ_PRF_FLIT6_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_0_0_INQ_PRF_FLIT6_FILTERING_SETUP',
    LABEL => 'AR_RTR_0_0_INQ_PRF_FLIT6_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_0_INQ_PRF_FLIT6_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_0_INQ_PRF_FLIT6_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_0_0_INQ_PRF_FLIT6_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_0_0_INQ_PRF_FLIT6_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC6_FILTER_FLIT6_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_0_INQ_PRF_FLIT6_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_0_INQ_PRF_FLIT6_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_0_0_INQ_PRF_FLIT6_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_0_0_INQ_PRF_FLIT6_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC6 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_0_INQ_PRF_FLIT6_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_0_INQ_PRF_FLIT6_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_0_0_INQ_PRF_FLIT6_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_0_0_INQ_PRF_FLIT6_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 6 to match the VC fieldof the header flit to 6',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_0_INQ_PRF_FLIT6_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_1_INQ_PRF_FLIT6_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_0_1_INQ_PRF_FLIT6_FILTERING_SETUP',
    LABEL => 'AR_RTR_0_1_INQ_PRF_FLIT6_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_1_INQ_PRF_FLIT6_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_1_INQ_PRF_FLIT6_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_0_1_INQ_PRF_FLIT6_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_0_1_INQ_PRF_FLIT6_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC6_FILTER_FLIT6_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_1_INQ_PRF_FLIT6_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_1_INQ_PRF_FLIT6_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_0_1_INQ_PRF_FLIT6_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_0_1_INQ_PRF_FLIT6_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC6 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_1_INQ_PRF_FLIT6_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_1_INQ_PRF_FLIT6_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_0_1_INQ_PRF_FLIT6_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_0_1_INQ_PRF_FLIT6_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 6 to match the VC fieldof the header flit to 6',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_1_INQ_PRF_FLIT6_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_2_INQ_PRF_FLIT6_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_0_2_INQ_PRF_FLIT6_FILTERING_SETUP',
    LABEL => 'AR_RTR_0_2_INQ_PRF_FLIT6_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_2_INQ_PRF_FLIT6_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_2_INQ_PRF_FLIT6_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_0_2_INQ_PRF_FLIT6_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_0_2_INQ_PRF_FLIT6_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC6_FILTER_FLIT6_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_2_INQ_PRF_FLIT6_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_2_INQ_PRF_FLIT6_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_0_2_INQ_PRF_FLIT6_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_0_2_INQ_PRF_FLIT6_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC6 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_2_INQ_PRF_FLIT6_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_2_INQ_PRF_FLIT6_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_0_2_INQ_PRF_FLIT6_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_0_2_INQ_PRF_FLIT6_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 6 to match the VC fieldof the header flit to 6',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_2_INQ_PRF_FLIT6_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_3_INQ_PRF_FLIT6_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_0_3_INQ_PRF_FLIT6_FILTERING_SETUP',
    LABEL => 'AR_RTR_0_3_INQ_PRF_FLIT6_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_3_INQ_PRF_FLIT6_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_3_INQ_PRF_FLIT6_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_0_3_INQ_PRF_FLIT6_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_0_3_INQ_PRF_FLIT6_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC6_FILTER_FLIT6_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_3_INQ_PRF_FLIT6_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_3_INQ_PRF_FLIT6_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_0_3_INQ_PRF_FLIT6_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_0_3_INQ_PRF_FLIT6_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC6 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_3_INQ_PRF_FLIT6_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_3_INQ_PRF_FLIT6_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_0_3_INQ_PRF_FLIT6_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_0_3_INQ_PRF_FLIT6_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 6 to match the VC fieldof the header flit to 6',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_3_INQ_PRF_FLIT6_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_4_INQ_PRF_FLIT6_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_0_4_INQ_PRF_FLIT6_FILTERING_SETUP',
    LABEL => 'AR_RTR_0_4_INQ_PRF_FLIT6_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_4_INQ_PRF_FLIT6_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_4_INQ_PRF_FLIT6_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_0_4_INQ_PRF_FLIT6_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_0_4_INQ_PRF_FLIT6_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC6_FILTER_FLIT6_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_4_INQ_PRF_FLIT6_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_4_INQ_PRF_FLIT6_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_0_4_INQ_PRF_FLIT6_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_0_4_INQ_PRF_FLIT6_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC6 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_4_INQ_PRF_FLIT6_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_4_INQ_PRF_FLIT6_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_0_4_INQ_PRF_FLIT6_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_0_4_INQ_PRF_FLIT6_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 6 to match the VC fieldof the header flit to 6',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_4_INQ_PRF_FLIT6_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_5_INQ_PRF_FLIT6_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_0_5_INQ_PRF_FLIT6_FILTERING_SETUP',
    LABEL => 'AR_RTR_0_5_INQ_PRF_FLIT6_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_5_INQ_PRF_FLIT6_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_5_INQ_PRF_FLIT6_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_0_5_INQ_PRF_FLIT6_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_0_5_INQ_PRF_FLIT6_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC6_FILTER_FLIT6_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_5_INQ_PRF_FLIT6_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_5_INQ_PRF_FLIT6_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_0_5_INQ_PRF_FLIT6_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_0_5_INQ_PRF_FLIT6_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC6 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_5_INQ_PRF_FLIT6_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_5_INQ_PRF_FLIT6_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_0_5_INQ_PRF_FLIT6_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_0_5_INQ_PRF_FLIT6_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 6 to match the VC fieldof the header flit to 6',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_5_INQ_PRF_FLIT6_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_6_INQ_PRF_FLIT6_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_0_6_INQ_PRF_FLIT6_FILTERING_SETUP',
    LABEL => 'AR_RTR_0_6_INQ_PRF_FLIT6_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_6_INQ_PRF_FLIT6_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_6_INQ_PRF_FLIT6_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_0_6_INQ_PRF_FLIT6_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_0_6_INQ_PRF_FLIT6_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC6_FILTER_FLIT6_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_6_INQ_PRF_FLIT6_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_6_INQ_PRF_FLIT6_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_0_6_INQ_PRF_FLIT6_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_0_6_INQ_PRF_FLIT6_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC6 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_6_INQ_PRF_FLIT6_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_6_INQ_PRF_FLIT6_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_0_6_INQ_PRF_FLIT6_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_0_6_INQ_PRF_FLIT6_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 6 to match the VC fieldof the header flit to 6',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_6_INQ_PRF_FLIT6_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_7_INQ_PRF_FLIT6_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_0_7_INQ_PRF_FLIT6_FILTERING_SETUP',
    LABEL => 'AR_RTR_0_7_INQ_PRF_FLIT6_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_7_INQ_PRF_FLIT6_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_7_INQ_PRF_FLIT6_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_0_7_INQ_PRF_FLIT6_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_0_7_INQ_PRF_FLIT6_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC6_FILTER_FLIT6_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_7_INQ_PRF_FLIT6_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_7_INQ_PRF_FLIT6_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_0_7_INQ_PRF_FLIT6_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_0_7_INQ_PRF_FLIT6_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC6 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_7_INQ_PRF_FLIT6_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_7_INQ_PRF_FLIT6_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_0_7_INQ_PRF_FLIT6_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_0_7_INQ_PRF_FLIT6_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 6 to match the VC fieldof the header flit to 6',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_7_INQ_PRF_FLIT6_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_0_INQ_PRF_FLIT6_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_1_0_INQ_PRF_FLIT6_FILTERING_SETUP',
    LABEL => 'AR_RTR_1_0_INQ_PRF_FLIT6_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_0_INQ_PRF_FLIT6_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_0_INQ_PRF_FLIT6_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_1_0_INQ_PRF_FLIT6_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_1_0_INQ_PRF_FLIT6_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC6_FILTER_FLIT6_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_0_INQ_PRF_FLIT6_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_0_INQ_PRF_FLIT6_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_1_0_INQ_PRF_FLIT6_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_1_0_INQ_PRF_FLIT6_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC6 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_0_INQ_PRF_FLIT6_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_0_INQ_PRF_FLIT6_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_1_0_INQ_PRF_FLIT6_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_1_0_INQ_PRF_FLIT6_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 6 to match the VC fieldof the header flit to 6',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_0_INQ_PRF_FLIT6_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_1_INQ_PRF_FLIT6_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_1_1_INQ_PRF_FLIT6_FILTERING_SETUP',
    LABEL => 'AR_RTR_1_1_INQ_PRF_FLIT6_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_1_INQ_PRF_FLIT6_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_1_INQ_PRF_FLIT6_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_1_1_INQ_PRF_FLIT6_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_1_1_INQ_PRF_FLIT6_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC6_FILTER_FLIT6_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_1_INQ_PRF_FLIT6_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_1_INQ_PRF_FLIT6_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_1_1_INQ_PRF_FLIT6_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_1_1_INQ_PRF_FLIT6_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC6 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_1_INQ_PRF_FLIT6_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_1_INQ_PRF_FLIT6_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_1_1_INQ_PRF_FLIT6_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_1_1_INQ_PRF_FLIT6_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 6 to match the VC fieldof the header flit to 6',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_1_INQ_PRF_FLIT6_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_2_INQ_PRF_FLIT6_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_1_2_INQ_PRF_FLIT6_FILTERING_SETUP',
    LABEL => 'AR_RTR_1_2_INQ_PRF_FLIT6_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_2_INQ_PRF_FLIT6_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_2_INQ_PRF_FLIT6_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_1_2_INQ_PRF_FLIT6_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_1_2_INQ_PRF_FLIT6_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC6_FILTER_FLIT6_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_2_INQ_PRF_FLIT6_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_2_INQ_PRF_FLIT6_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_1_2_INQ_PRF_FLIT6_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_1_2_INQ_PRF_FLIT6_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC6 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_2_INQ_PRF_FLIT6_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_2_INQ_PRF_FLIT6_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_1_2_INQ_PRF_FLIT6_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_1_2_INQ_PRF_FLIT6_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 6 to match the VC fieldof the header flit to 6',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_2_INQ_PRF_FLIT6_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_3_INQ_PRF_FLIT6_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_1_3_INQ_PRF_FLIT6_FILTERING_SETUP',
    LABEL => 'AR_RTR_1_3_INQ_PRF_FLIT6_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_3_INQ_PRF_FLIT6_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_3_INQ_PRF_FLIT6_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_1_3_INQ_PRF_FLIT6_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_1_3_INQ_PRF_FLIT6_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC6_FILTER_FLIT6_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_3_INQ_PRF_FLIT6_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_3_INQ_PRF_FLIT6_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_1_3_INQ_PRF_FLIT6_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_1_3_INQ_PRF_FLIT6_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC6 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_3_INQ_PRF_FLIT6_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_3_INQ_PRF_FLIT6_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_1_3_INQ_PRF_FLIT6_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_1_3_INQ_PRF_FLIT6_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 6 to match the VC fieldof the header flit to 6',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_3_INQ_PRF_FLIT6_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_4_INQ_PRF_FLIT6_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_1_4_INQ_PRF_FLIT6_FILTERING_SETUP',
    LABEL => 'AR_RTR_1_4_INQ_PRF_FLIT6_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_4_INQ_PRF_FLIT6_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_4_INQ_PRF_FLIT6_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_1_4_INQ_PRF_FLIT6_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_1_4_INQ_PRF_FLIT6_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC6_FILTER_FLIT6_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_4_INQ_PRF_FLIT6_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_4_INQ_PRF_FLIT6_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_1_4_INQ_PRF_FLIT6_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_1_4_INQ_PRF_FLIT6_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC6 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_4_INQ_PRF_FLIT6_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_4_INQ_PRF_FLIT6_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_1_4_INQ_PRF_FLIT6_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_1_4_INQ_PRF_FLIT6_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 6 to match the VC fieldof the header flit to 6',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_4_INQ_PRF_FLIT6_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_5_INQ_PRF_FLIT6_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_1_5_INQ_PRF_FLIT6_FILTERING_SETUP',
    LABEL => 'AR_RTR_1_5_INQ_PRF_FLIT6_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_5_INQ_PRF_FLIT6_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_5_INQ_PRF_FLIT6_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_1_5_INQ_PRF_FLIT6_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_1_5_INQ_PRF_FLIT6_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC6_FILTER_FLIT6_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_5_INQ_PRF_FLIT6_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_5_INQ_PRF_FLIT6_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_1_5_INQ_PRF_FLIT6_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_1_5_INQ_PRF_FLIT6_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC6 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_5_INQ_PRF_FLIT6_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_5_INQ_PRF_FLIT6_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_1_5_INQ_PRF_FLIT6_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_1_5_INQ_PRF_FLIT6_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 6 to match the VC fieldof the header flit to 6',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_5_INQ_PRF_FLIT6_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_6_INQ_PRF_FLIT6_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_1_6_INQ_PRF_FLIT6_FILTERING_SETUP',
    LABEL => 'AR_RTR_1_6_INQ_PRF_FLIT6_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_6_INQ_PRF_FLIT6_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_6_INQ_PRF_FLIT6_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_1_6_INQ_PRF_FLIT6_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_1_6_INQ_PRF_FLIT6_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC6_FILTER_FLIT6_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_6_INQ_PRF_FLIT6_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_6_INQ_PRF_FLIT6_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_1_6_INQ_PRF_FLIT6_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_1_6_INQ_PRF_FLIT6_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC6 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_6_INQ_PRF_FLIT6_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_6_INQ_PRF_FLIT6_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_1_6_INQ_PRF_FLIT6_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_1_6_INQ_PRF_FLIT6_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 6 to match the VC fieldof the header flit to 6',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_6_INQ_PRF_FLIT6_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_7_INQ_PRF_FLIT6_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_1_7_INQ_PRF_FLIT6_FILTERING_SETUP',
    LABEL => 'AR_RTR_1_7_INQ_PRF_FLIT6_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_7_INQ_PRF_FLIT6_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_7_INQ_PRF_FLIT6_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_1_7_INQ_PRF_FLIT6_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_1_7_INQ_PRF_FLIT6_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC6_FILTER_FLIT6_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_7_INQ_PRF_FLIT6_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_7_INQ_PRF_FLIT6_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_1_7_INQ_PRF_FLIT6_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_1_7_INQ_PRF_FLIT6_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC6 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_7_INQ_PRF_FLIT6_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_7_INQ_PRF_FLIT6_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_1_7_INQ_PRF_FLIT6_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_1_7_INQ_PRF_FLIT6_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 6 to match the VC fieldof the header flit to 6',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_7_INQ_PRF_FLIT6_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_0_INQ_PRF_FLIT6_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_2_0_INQ_PRF_FLIT6_FILTERING_SETUP',
    LABEL => 'AR_RTR_2_0_INQ_PRF_FLIT6_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_0_INQ_PRF_FLIT6_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_0_INQ_PRF_FLIT6_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_2_0_INQ_PRF_FLIT6_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_2_0_INQ_PRF_FLIT6_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC6_FILTER_FLIT6_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_0_INQ_PRF_FLIT6_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_0_INQ_PRF_FLIT6_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_2_0_INQ_PRF_FLIT6_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_2_0_INQ_PRF_FLIT6_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC6 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_0_INQ_PRF_FLIT6_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_0_INQ_PRF_FLIT6_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_2_0_INQ_PRF_FLIT6_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_2_0_INQ_PRF_FLIT6_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 6 to match the VC fieldof the header flit to 6',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_0_INQ_PRF_FLIT6_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_1_INQ_PRF_FLIT6_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_2_1_INQ_PRF_FLIT6_FILTERING_SETUP',
    LABEL => 'AR_RTR_2_1_INQ_PRF_FLIT6_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_1_INQ_PRF_FLIT6_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_1_INQ_PRF_FLIT6_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_2_1_INQ_PRF_FLIT6_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_2_1_INQ_PRF_FLIT6_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC6_FILTER_FLIT6_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_1_INQ_PRF_FLIT6_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_1_INQ_PRF_FLIT6_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_2_1_INQ_PRF_FLIT6_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_2_1_INQ_PRF_FLIT6_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC6 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_1_INQ_PRF_FLIT6_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_1_INQ_PRF_FLIT6_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_2_1_INQ_PRF_FLIT6_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_2_1_INQ_PRF_FLIT6_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 6 to match the VC fieldof the header flit to 6',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_1_INQ_PRF_FLIT6_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_2_INQ_PRF_FLIT6_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_2_2_INQ_PRF_FLIT6_FILTERING_SETUP',
    LABEL => 'AR_RTR_2_2_INQ_PRF_FLIT6_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_2_INQ_PRF_FLIT6_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_2_INQ_PRF_FLIT6_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_2_2_INQ_PRF_FLIT6_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_2_2_INQ_PRF_FLIT6_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC6_FILTER_FLIT6_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_2_INQ_PRF_FLIT6_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_2_INQ_PRF_FLIT6_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_2_2_INQ_PRF_FLIT6_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_2_2_INQ_PRF_FLIT6_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC6 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_2_INQ_PRF_FLIT6_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_2_INQ_PRF_FLIT6_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_2_2_INQ_PRF_FLIT6_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_2_2_INQ_PRF_FLIT6_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 6 to match the VC fieldof the header flit to 6',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_2_INQ_PRF_FLIT6_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_3_INQ_PRF_FLIT6_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_2_3_INQ_PRF_FLIT6_FILTERING_SETUP',
    LABEL => 'AR_RTR_2_3_INQ_PRF_FLIT6_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_3_INQ_PRF_FLIT6_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_3_INQ_PRF_FLIT6_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_2_3_INQ_PRF_FLIT6_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_2_3_INQ_PRF_FLIT6_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC6_FILTER_FLIT6_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_3_INQ_PRF_FLIT6_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_3_INQ_PRF_FLIT6_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_2_3_INQ_PRF_FLIT6_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_2_3_INQ_PRF_FLIT6_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC6 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_3_INQ_PRF_FLIT6_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_3_INQ_PRF_FLIT6_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_2_3_INQ_PRF_FLIT6_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_2_3_INQ_PRF_FLIT6_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 6 to match the VC fieldof the header flit to 6',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_3_INQ_PRF_FLIT6_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_4_INQ_PRF_FLIT6_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_2_4_INQ_PRF_FLIT6_FILTERING_SETUP',
    LABEL => 'AR_RTR_2_4_INQ_PRF_FLIT6_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_4_INQ_PRF_FLIT6_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_4_INQ_PRF_FLIT6_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_2_4_INQ_PRF_FLIT6_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_2_4_INQ_PRF_FLIT6_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC6_FILTER_FLIT6_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_4_INQ_PRF_FLIT6_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_4_INQ_PRF_FLIT6_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_2_4_INQ_PRF_FLIT6_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_2_4_INQ_PRF_FLIT6_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC6 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_4_INQ_PRF_FLIT6_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_4_INQ_PRF_FLIT6_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_2_4_INQ_PRF_FLIT6_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_2_4_INQ_PRF_FLIT6_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 6 to match the VC fieldof the header flit to 6',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_4_INQ_PRF_FLIT6_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_5_INQ_PRF_FLIT6_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_2_5_INQ_PRF_FLIT6_FILTERING_SETUP',
    LABEL => 'AR_RTR_2_5_INQ_PRF_FLIT6_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_5_INQ_PRF_FLIT6_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_5_INQ_PRF_FLIT6_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_2_5_INQ_PRF_FLIT6_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_2_5_INQ_PRF_FLIT6_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC6_FILTER_FLIT6_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_5_INQ_PRF_FLIT6_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_5_INQ_PRF_FLIT6_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_2_5_INQ_PRF_FLIT6_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_2_5_INQ_PRF_FLIT6_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC6 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_5_INQ_PRF_FLIT6_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_5_INQ_PRF_FLIT6_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_2_5_INQ_PRF_FLIT6_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_2_5_INQ_PRF_FLIT6_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 6 to match the VC fieldof the header flit to 6',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_5_INQ_PRF_FLIT6_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_6_INQ_PRF_FLIT6_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_2_6_INQ_PRF_FLIT6_FILTERING_SETUP',
    LABEL => 'AR_RTR_2_6_INQ_PRF_FLIT6_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_6_INQ_PRF_FLIT6_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_6_INQ_PRF_FLIT6_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_2_6_INQ_PRF_FLIT6_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_2_6_INQ_PRF_FLIT6_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC6_FILTER_FLIT6_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_6_INQ_PRF_FLIT6_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_6_INQ_PRF_FLIT6_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_2_6_INQ_PRF_FLIT6_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_2_6_INQ_PRF_FLIT6_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC6 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_6_INQ_PRF_FLIT6_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_6_INQ_PRF_FLIT6_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_2_6_INQ_PRF_FLIT6_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_2_6_INQ_PRF_FLIT6_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 6 to match the VC fieldof the header flit to 6',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_6_INQ_PRF_FLIT6_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_7_INQ_PRF_FLIT6_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_2_7_INQ_PRF_FLIT6_FILTERING_SETUP',
    LABEL => 'AR_RTR_2_7_INQ_PRF_FLIT6_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_7_INQ_PRF_FLIT6_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_7_INQ_PRF_FLIT6_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_2_7_INQ_PRF_FLIT6_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_2_7_INQ_PRF_FLIT6_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC6_FILTER_FLIT6_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_7_INQ_PRF_FLIT6_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_7_INQ_PRF_FLIT6_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_2_7_INQ_PRF_FLIT6_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_2_7_INQ_PRF_FLIT6_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC6 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_7_INQ_PRF_FLIT6_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_7_INQ_PRF_FLIT6_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_2_7_INQ_PRF_FLIT6_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_2_7_INQ_PRF_FLIT6_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 6 to match the VC fieldof the header flit to 6',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_7_INQ_PRF_FLIT6_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_0_INQ_PRF_FLIT6_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_3_0_INQ_PRF_FLIT6_FILTERING_SETUP',
    LABEL => 'AR_RTR_3_0_INQ_PRF_FLIT6_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_0_INQ_PRF_FLIT6_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_0_INQ_PRF_FLIT6_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_3_0_INQ_PRF_FLIT6_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_3_0_INQ_PRF_FLIT6_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC6_FILTER_FLIT6_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_0_INQ_PRF_FLIT6_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_0_INQ_PRF_FLIT6_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_3_0_INQ_PRF_FLIT6_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_3_0_INQ_PRF_FLIT6_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC6 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_0_INQ_PRF_FLIT6_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_0_INQ_PRF_FLIT6_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_3_0_INQ_PRF_FLIT6_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_3_0_INQ_PRF_FLIT6_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 6 to match the VC fieldof the header flit to 6',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_0_INQ_PRF_FLIT6_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_1_INQ_PRF_FLIT6_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_3_1_INQ_PRF_FLIT6_FILTERING_SETUP',
    LABEL => 'AR_RTR_3_1_INQ_PRF_FLIT6_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_1_INQ_PRF_FLIT6_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_1_INQ_PRF_FLIT6_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_3_1_INQ_PRF_FLIT6_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_3_1_INQ_PRF_FLIT6_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC6_FILTER_FLIT6_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_1_INQ_PRF_FLIT6_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_1_INQ_PRF_FLIT6_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_3_1_INQ_PRF_FLIT6_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_3_1_INQ_PRF_FLIT6_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC6 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_1_INQ_PRF_FLIT6_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_1_INQ_PRF_FLIT6_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_3_1_INQ_PRF_FLIT6_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_3_1_INQ_PRF_FLIT6_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 6 to match the VC fieldof the header flit to 6',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_1_INQ_PRF_FLIT6_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_2_INQ_PRF_FLIT6_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_3_2_INQ_PRF_FLIT6_FILTERING_SETUP',
    LABEL => 'AR_RTR_3_2_INQ_PRF_FLIT6_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_2_INQ_PRF_FLIT6_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_2_INQ_PRF_FLIT6_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_3_2_INQ_PRF_FLIT6_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_3_2_INQ_PRF_FLIT6_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC6_FILTER_FLIT6_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_2_INQ_PRF_FLIT6_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_2_INQ_PRF_FLIT6_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_3_2_INQ_PRF_FLIT6_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_3_2_INQ_PRF_FLIT6_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC6 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_2_INQ_PRF_FLIT6_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_2_INQ_PRF_FLIT6_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_3_2_INQ_PRF_FLIT6_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_3_2_INQ_PRF_FLIT6_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 6 to match the VC fieldof the header flit to 6',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_2_INQ_PRF_FLIT6_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_3_INQ_PRF_FLIT6_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_3_3_INQ_PRF_FLIT6_FILTERING_SETUP',
    LABEL => 'AR_RTR_3_3_INQ_PRF_FLIT6_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_3_INQ_PRF_FLIT6_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_3_INQ_PRF_FLIT6_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_3_3_INQ_PRF_FLIT6_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_3_3_INQ_PRF_FLIT6_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC6_FILTER_FLIT6_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_3_INQ_PRF_FLIT6_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_3_INQ_PRF_FLIT6_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_3_3_INQ_PRF_FLIT6_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_3_3_INQ_PRF_FLIT6_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC6 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_3_INQ_PRF_FLIT6_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_3_INQ_PRF_FLIT6_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_3_3_INQ_PRF_FLIT6_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_3_3_INQ_PRF_FLIT6_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 6 to match the VC fieldof the header flit to 6',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_3_INQ_PRF_FLIT6_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_4_INQ_PRF_FLIT6_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_3_4_INQ_PRF_FLIT6_FILTERING_SETUP',
    LABEL => 'AR_RTR_3_4_INQ_PRF_FLIT6_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_4_INQ_PRF_FLIT6_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_4_INQ_PRF_FLIT6_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_3_4_INQ_PRF_FLIT6_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_3_4_INQ_PRF_FLIT6_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC6_FILTER_FLIT6_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_4_INQ_PRF_FLIT6_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_4_INQ_PRF_FLIT6_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_3_4_INQ_PRF_FLIT6_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_3_4_INQ_PRF_FLIT6_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC6 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_4_INQ_PRF_FLIT6_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_4_INQ_PRF_FLIT6_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_3_4_INQ_PRF_FLIT6_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_3_4_INQ_PRF_FLIT6_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 6 to match the VC fieldof the header flit to 6',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_4_INQ_PRF_FLIT6_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_5_INQ_PRF_FLIT6_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_3_5_INQ_PRF_FLIT6_FILTERING_SETUP',
    LABEL => 'AR_RTR_3_5_INQ_PRF_FLIT6_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_5_INQ_PRF_FLIT6_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_5_INQ_PRF_FLIT6_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_3_5_INQ_PRF_FLIT6_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_3_5_INQ_PRF_FLIT6_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC6_FILTER_FLIT6_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_5_INQ_PRF_FLIT6_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_5_INQ_PRF_FLIT6_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_3_5_INQ_PRF_FLIT6_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_3_5_INQ_PRF_FLIT6_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC6 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_5_INQ_PRF_FLIT6_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_5_INQ_PRF_FLIT6_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_3_5_INQ_PRF_FLIT6_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_3_5_INQ_PRF_FLIT6_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 6 to match the VC fieldof the header flit to 6',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_5_INQ_PRF_FLIT6_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_6_INQ_PRF_FLIT6_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_3_6_INQ_PRF_FLIT6_FILTERING_SETUP',
    LABEL => 'AR_RTR_3_6_INQ_PRF_FLIT6_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_6_INQ_PRF_FLIT6_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_6_INQ_PRF_FLIT6_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_3_6_INQ_PRF_FLIT6_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_3_6_INQ_PRF_FLIT6_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC6_FILTER_FLIT6_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_6_INQ_PRF_FLIT6_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_6_INQ_PRF_FLIT6_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_3_6_INQ_PRF_FLIT6_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_3_6_INQ_PRF_FLIT6_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC6 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_6_INQ_PRF_FLIT6_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_6_INQ_PRF_FLIT6_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_3_6_INQ_PRF_FLIT6_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_3_6_INQ_PRF_FLIT6_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 6 to match the VC fieldof the header flit to 6',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_6_INQ_PRF_FLIT6_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_7_INQ_PRF_FLIT6_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_3_7_INQ_PRF_FLIT6_FILTERING_SETUP',
    LABEL => 'AR_RTR_3_7_INQ_PRF_FLIT6_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_7_INQ_PRF_FLIT6_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_7_INQ_PRF_FLIT6_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_3_7_INQ_PRF_FLIT6_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_3_7_INQ_PRF_FLIT6_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC6_FILTER_FLIT6_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_7_INQ_PRF_FLIT6_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_7_INQ_PRF_FLIT6_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_3_7_INQ_PRF_FLIT6_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_3_7_INQ_PRF_FLIT6_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC6 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_7_INQ_PRF_FLIT6_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_7_INQ_PRF_FLIT6_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_3_7_INQ_PRF_FLIT6_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_3_7_INQ_PRF_FLIT6_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 6 to match the VC fieldof the header flit to 6',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_7_INQ_PRF_FLIT6_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_0_INQ_PRF_FLIT6_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_4_0_INQ_PRF_FLIT6_FILTERING_SETUP',
    LABEL => 'AR_RTR_4_0_INQ_PRF_FLIT6_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_0_INQ_PRF_FLIT6_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_0_INQ_PRF_FLIT6_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_4_0_INQ_PRF_FLIT6_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_4_0_INQ_PRF_FLIT6_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC6_FILTER_FLIT6_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_0_INQ_PRF_FLIT6_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_0_INQ_PRF_FLIT6_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_4_0_INQ_PRF_FLIT6_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_4_0_INQ_PRF_FLIT6_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC6 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_0_INQ_PRF_FLIT6_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_0_INQ_PRF_FLIT6_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_4_0_INQ_PRF_FLIT6_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_4_0_INQ_PRF_FLIT6_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 6 to match the VC fieldof the header flit to 6',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_0_INQ_PRF_FLIT6_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_1_INQ_PRF_FLIT6_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_4_1_INQ_PRF_FLIT6_FILTERING_SETUP',
    LABEL => 'AR_RTR_4_1_INQ_PRF_FLIT6_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_1_INQ_PRF_FLIT6_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_1_INQ_PRF_FLIT6_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_4_1_INQ_PRF_FLIT6_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_4_1_INQ_PRF_FLIT6_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC6_FILTER_FLIT6_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_1_INQ_PRF_FLIT6_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_1_INQ_PRF_FLIT6_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_4_1_INQ_PRF_FLIT6_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_4_1_INQ_PRF_FLIT6_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC6 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_1_INQ_PRF_FLIT6_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_1_INQ_PRF_FLIT6_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_4_1_INQ_PRF_FLIT6_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_4_1_INQ_PRF_FLIT6_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 6 to match the VC fieldof the header flit to 6',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_1_INQ_PRF_FLIT6_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_2_INQ_PRF_FLIT6_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_4_2_INQ_PRF_FLIT6_FILTERING_SETUP',
    LABEL => 'AR_RTR_4_2_INQ_PRF_FLIT6_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_2_INQ_PRF_FLIT6_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_2_INQ_PRF_FLIT6_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_4_2_INQ_PRF_FLIT6_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_4_2_INQ_PRF_FLIT6_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC6_FILTER_FLIT6_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_2_INQ_PRF_FLIT6_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_2_INQ_PRF_FLIT6_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_4_2_INQ_PRF_FLIT6_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_4_2_INQ_PRF_FLIT6_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC6 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_2_INQ_PRF_FLIT6_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_2_INQ_PRF_FLIT6_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_4_2_INQ_PRF_FLIT6_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_4_2_INQ_PRF_FLIT6_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 6 to match the VC fieldof the header flit to 6',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_2_INQ_PRF_FLIT6_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_3_INQ_PRF_FLIT6_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_4_3_INQ_PRF_FLIT6_FILTERING_SETUP',
    LABEL => 'AR_RTR_4_3_INQ_PRF_FLIT6_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_3_INQ_PRF_FLIT6_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_3_INQ_PRF_FLIT6_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_4_3_INQ_PRF_FLIT6_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_4_3_INQ_PRF_FLIT6_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC6_FILTER_FLIT6_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_3_INQ_PRF_FLIT6_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_3_INQ_PRF_FLIT6_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_4_3_INQ_PRF_FLIT6_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_4_3_INQ_PRF_FLIT6_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC6 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_3_INQ_PRF_FLIT6_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_3_INQ_PRF_FLIT6_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_4_3_INQ_PRF_FLIT6_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_4_3_INQ_PRF_FLIT6_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 6 to match the VC fieldof the header flit to 6',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_3_INQ_PRF_FLIT6_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_4_INQ_PRF_FLIT6_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_4_4_INQ_PRF_FLIT6_FILTERING_SETUP',
    LABEL => 'AR_RTR_4_4_INQ_PRF_FLIT6_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_4_INQ_PRF_FLIT6_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_4_INQ_PRF_FLIT6_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_4_4_INQ_PRF_FLIT6_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_4_4_INQ_PRF_FLIT6_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC6_FILTER_FLIT6_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_4_INQ_PRF_FLIT6_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_4_INQ_PRF_FLIT6_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_4_4_INQ_PRF_FLIT6_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_4_4_INQ_PRF_FLIT6_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC6 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_4_INQ_PRF_FLIT6_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_4_INQ_PRF_FLIT6_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_4_4_INQ_PRF_FLIT6_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_4_4_INQ_PRF_FLIT6_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 6 to match the VC fieldof the header flit to 6',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_4_INQ_PRF_FLIT6_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_5_INQ_PRF_FLIT6_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_4_5_INQ_PRF_FLIT6_FILTERING_SETUP',
    LABEL => 'AR_RTR_4_5_INQ_PRF_FLIT6_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_5_INQ_PRF_FLIT6_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_5_INQ_PRF_FLIT6_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_4_5_INQ_PRF_FLIT6_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_4_5_INQ_PRF_FLIT6_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC6_FILTER_FLIT6_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_5_INQ_PRF_FLIT6_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_5_INQ_PRF_FLIT6_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_4_5_INQ_PRF_FLIT6_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_4_5_INQ_PRF_FLIT6_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC6 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_5_INQ_PRF_FLIT6_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_5_INQ_PRF_FLIT6_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_4_5_INQ_PRF_FLIT6_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_4_5_INQ_PRF_FLIT6_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 6 to match the VC fieldof the header flit to 6',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_5_INQ_PRF_FLIT6_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_6_INQ_PRF_FLIT6_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_4_6_INQ_PRF_FLIT6_FILTERING_SETUP',
    LABEL => 'AR_RTR_4_6_INQ_PRF_FLIT6_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_6_INQ_PRF_FLIT6_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_6_INQ_PRF_FLIT6_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_4_6_INQ_PRF_FLIT6_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_4_6_INQ_PRF_FLIT6_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC6_FILTER_FLIT6_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_6_INQ_PRF_FLIT6_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_6_INQ_PRF_FLIT6_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_4_6_INQ_PRF_FLIT6_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_4_6_INQ_PRF_FLIT6_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC6 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_6_INQ_PRF_FLIT6_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_6_INQ_PRF_FLIT6_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_4_6_INQ_PRF_FLIT6_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_4_6_INQ_PRF_FLIT6_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 6 to match the VC fieldof the header flit to 6',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_6_INQ_PRF_FLIT6_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_7_INQ_PRF_FLIT6_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_4_7_INQ_PRF_FLIT6_FILTERING_SETUP',
    LABEL => 'AR_RTR_4_7_INQ_PRF_FLIT6_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_7_INQ_PRF_FLIT6_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_7_INQ_PRF_FLIT6_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_4_7_INQ_PRF_FLIT6_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_4_7_INQ_PRF_FLIT6_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC6_FILTER_FLIT6_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_7_INQ_PRF_FLIT6_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_7_INQ_PRF_FLIT6_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_4_7_INQ_PRF_FLIT6_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_4_7_INQ_PRF_FLIT6_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC6 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_7_INQ_PRF_FLIT6_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_7_INQ_PRF_FLIT6_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_4_7_INQ_PRF_FLIT6_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_4_7_INQ_PRF_FLIT6_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 6 to match the VC fieldof the header flit to 6',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_7_INQ_PRF_FLIT6_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_0_INQ_PRF_FLIT6_FILTERING_MASK'} = {
    NAME => 'AR_RTR_0_0_INQ_PRF_FLIT6_FILTERING_MASK',
    LABEL => 'AR_RTR_0_0_INQ_PRF_FLIT6_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_0_INQ_PRF_FLIT6_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_0_INQ_PRF_FLIT6_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_0_0_INQ_PRF_FLIT6_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_0_0_INQ_PRF_FLIT6_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_0_INQ_PRF_FLIT6_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_1_INQ_PRF_FLIT6_FILTERING_MASK'} = {
    NAME => 'AR_RTR_0_1_INQ_PRF_FLIT6_FILTERING_MASK',
    LABEL => 'AR_RTR_0_1_INQ_PRF_FLIT6_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_1_INQ_PRF_FLIT6_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_1_INQ_PRF_FLIT6_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_0_1_INQ_PRF_FLIT6_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_0_1_INQ_PRF_FLIT6_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_1_INQ_PRF_FLIT6_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_2_INQ_PRF_FLIT6_FILTERING_MASK'} = {
    NAME => 'AR_RTR_0_2_INQ_PRF_FLIT6_FILTERING_MASK',
    LABEL => 'AR_RTR_0_2_INQ_PRF_FLIT6_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_2_INQ_PRF_FLIT6_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_2_INQ_PRF_FLIT6_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_0_2_INQ_PRF_FLIT6_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_0_2_INQ_PRF_FLIT6_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_2_INQ_PRF_FLIT6_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_3_INQ_PRF_FLIT6_FILTERING_MASK'} = {
    NAME => 'AR_RTR_0_3_INQ_PRF_FLIT6_FILTERING_MASK',
    LABEL => 'AR_RTR_0_3_INQ_PRF_FLIT6_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_3_INQ_PRF_FLIT6_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_3_INQ_PRF_FLIT6_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_0_3_INQ_PRF_FLIT6_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_0_3_INQ_PRF_FLIT6_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_3_INQ_PRF_FLIT6_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_4_INQ_PRF_FLIT6_FILTERING_MASK'} = {
    NAME => 'AR_RTR_0_4_INQ_PRF_FLIT6_FILTERING_MASK',
    LABEL => 'AR_RTR_0_4_INQ_PRF_FLIT6_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_4_INQ_PRF_FLIT6_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_4_INQ_PRF_FLIT6_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_0_4_INQ_PRF_FLIT6_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_0_4_INQ_PRF_FLIT6_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_4_INQ_PRF_FLIT6_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_5_INQ_PRF_FLIT6_FILTERING_MASK'} = {
    NAME => 'AR_RTR_0_5_INQ_PRF_FLIT6_FILTERING_MASK',
    LABEL => 'AR_RTR_0_5_INQ_PRF_FLIT6_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_5_INQ_PRF_FLIT6_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_5_INQ_PRF_FLIT6_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_0_5_INQ_PRF_FLIT6_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_0_5_INQ_PRF_FLIT6_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_5_INQ_PRF_FLIT6_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_6_INQ_PRF_FLIT6_FILTERING_MASK'} = {
    NAME => 'AR_RTR_0_6_INQ_PRF_FLIT6_FILTERING_MASK',
    LABEL => 'AR_RTR_0_6_INQ_PRF_FLIT6_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_6_INQ_PRF_FLIT6_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_6_INQ_PRF_FLIT6_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_0_6_INQ_PRF_FLIT6_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_0_6_INQ_PRF_FLIT6_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_6_INQ_PRF_FLIT6_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_7_INQ_PRF_FLIT6_FILTERING_MASK'} = {
    NAME => 'AR_RTR_0_7_INQ_PRF_FLIT6_FILTERING_MASK',
    LABEL => 'AR_RTR_0_7_INQ_PRF_FLIT6_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_7_INQ_PRF_FLIT6_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_7_INQ_PRF_FLIT6_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_0_7_INQ_PRF_FLIT6_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_0_7_INQ_PRF_FLIT6_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_7_INQ_PRF_FLIT6_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_0_INQ_PRF_FLIT6_FILTERING_MASK'} = {
    NAME => 'AR_RTR_1_0_INQ_PRF_FLIT6_FILTERING_MASK',
    LABEL => 'AR_RTR_1_0_INQ_PRF_FLIT6_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_0_INQ_PRF_FLIT6_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_0_INQ_PRF_FLIT6_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_1_0_INQ_PRF_FLIT6_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_1_0_INQ_PRF_FLIT6_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_0_INQ_PRF_FLIT6_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_1_INQ_PRF_FLIT6_FILTERING_MASK'} = {
    NAME => 'AR_RTR_1_1_INQ_PRF_FLIT6_FILTERING_MASK',
    LABEL => 'AR_RTR_1_1_INQ_PRF_FLIT6_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_1_INQ_PRF_FLIT6_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_1_INQ_PRF_FLIT6_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_1_1_INQ_PRF_FLIT6_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_1_1_INQ_PRF_FLIT6_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_1_INQ_PRF_FLIT6_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_2_INQ_PRF_FLIT6_FILTERING_MASK'} = {
    NAME => 'AR_RTR_1_2_INQ_PRF_FLIT6_FILTERING_MASK',
    LABEL => 'AR_RTR_1_2_INQ_PRF_FLIT6_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_2_INQ_PRF_FLIT6_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_2_INQ_PRF_FLIT6_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_1_2_INQ_PRF_FLIT6_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_1_2_INQ_PRF_FLIT6_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_2_INQ_PRF_FLIT6_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_3_INQ_PRF_FLIT6_FILTERING_MASK'} = {
    NAME => 'AR_RTR_1_3_INQ_PRF_FLIT6_FILTERING_MASK',
    LABEL => 'AR_RTR_1_3_INQ_PRF_FLIT6_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_3_INQ_PRF_FLIT6_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_3_INQ_PRF_FLIT6_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_1_3_INQ_PRF_FLIT6_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_1_3_INQ_PRF_FLIT6_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_3_INQ_PRF_FLIT6_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_4_INQ_PRF_FLIT6_FILTERING_MASK'} = {
    NAME => 'AR_RTR_1_4_INQ_PRF_FLIT6_FILTERING_MASK',
    LABEL => 'AR_RTR_1_4_INQ_PRF_FLIT6_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_4_INQ_PRF_FLIT6_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_4_INQ_PRF_FLIT6_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_1_4_INQ_PRF_FLIT6_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_1_4_INQ_PRF_FLIT6_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_4_INQ_PRF_FLIT6_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_5_INQ_PRF_FLIT6_FILTERING_MASK'} = {
    NAME => 'AR_RTR_1_5_INQ_PRF_FLIT6_FILTERING_MASK',
    LABEL => 'AR_RTR_1_5_INQ_PRF_FLIT6_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_5_INQ_PRF_FLIT6_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_5_INQ_PRF_FLIT6_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_1_5_INQ_PRF_FLIT6_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_1_5_INQ_PRF_FLIT6_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_5_INQ_PRF_FLIT6_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_6_INQ_PRF_FLIT6_FILTERING_MASK'} = {
    NAME => 'AR_RTR_1_6_INQ_PRF_FLIT6_FILTERING_MASK',
    LABEL => 'AR_RTR_1_6_INQ_PRF_FLIT6_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_6_INQ_PRF_FLIT6_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_6_INQ_PRF_FLIT6_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_1_6_INQ_PRF_FLIT6_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_1_6_INQ_PRF_FLIT6_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_6_INQ_PRF_FLIT6_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_7_INQ_PRF_FLIT6_FILTERING_MASK'} = {
    NAME => 'AR_RTR_1_7_INQ_PRF_FLIT6_FILTERING_MASK',
    LABEL => 'AR_RTR_1_7_INQ_PRF_FLIT6_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_7_INQ_PRF_FLIT6_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_7_INQ_PRF_FLIT6_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_1_7_INQ_PRF_FLIT6_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_1_7_INQ_PRF_FLIT6_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_7_INQ_PRF_FLIT6_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_0_INQ_PRF_FLIT6_FILTERING_MASK'} = {
    NAME => 'AR_RTR_2_0_INQ_PRF_FLIT6_FILTERING_MASK',
    LABEL => 'AR_RTR_2_0_INQ_PRF_FLIT6_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_0_INQ_PRF_FLIT6_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_0_INQ_PRF_FLIT6_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_2_0_INQ_PRF_FLIT6_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_2_0_INQ_PRF_FLIT6_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_0_INQ_PRF_FLIT6_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_1_INQ_PRF_FLIT6_FILTERING_MASK'} = {
    NAME => 'AR_RTR_2_1_INQ_PRF_FLIT6_FILTERING_MASK',
    LABEL => 'AR_RTR_2_1_INQ_PRF_FLIT6_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_1_INQ_PRF_FLIT6_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_1_INQ_PRF_FLIT6_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_2_1_INQ_PRF_FLIT6_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_2_1_INQ_PRF_FLIT6_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_1_INQ_PRF_FLIT6_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_2_INQ_PRF_FLIT6_FILTERING_MASK'} = {
    NAME => 'AR_RTR_2_2_INQ_PRF_FLIT6_FILTERING_MASK',
    LABEL => 'AR_RTR_2_2_INQ_PRF_FLIT6_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_2_INQ_PRF_FLIT6_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_2_INQ_PRF_FLIT6_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_2_2_INQ_PRF_FLIT6_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_2_2_INQ_PRF_FLIT6_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_2_INQ_PRF_FLIT6_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_3_INQ_PRF_FLIT6_FILTERING_MASK'} = {
    NAME => 'AR_RTR_2_3_INQ_PRF_FLIT6_FILTERING_MASK',
    LABEL => 'AR_RTR_2_3_INQ_PRF_FLIT6_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_3_INQ_PRF_FLIT6_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_3_INQ_PRF_FLIT6_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_2_3_INQ_PRF_FLIT6_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_2_3_INQ_PRF_FLIT6_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_3_INQ_PRF_FLIT6_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_4_INQ_PRF_FLIT6_FILTERING_MASK'} = {
    NAME => 'AR_RTR_2_4_INQ_PRF_FLIT6_FILTERING_MASK',
    LABEL => 'AR_RTR_2_4_INQ_PRF_FLIT6_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_4_INQ_PRF_FLIT6_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_4_INQ_PRF_FLIT6_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_2_4_INQ_PRF_FLIT6_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_2_4_INQ_PRF_FLIT6_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_4_INQ_PRF_FLIT6_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_5_INQ_PRF_FLIT6_FILTERING_MASK'} = {
    NAME => 'AR_RTR_2_5_INQ_PRF_FLIT6_FILTERING_MASK',
    LABEL => 'AR_RTR_2_5_INQ_PRF_FLIT6_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_5_INQ_PRF_FLIT6_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_5_INQ_PRF_FLIT6_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_2_5_INQ_PRF_FLIT6_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_2_5_INQ_PRF_FLIT6_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_5_INQ_PRF_FLIT6_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_6_INQ_PRF_FLIT6_FILTERING_MASK'} = {
    NAME => 'AR_RTR_2_6_INQ_PRF_FLIT6_FILTERING_MASK',
    LABEL => 'AR_RTR_2_6_INQ_PRF_FLIT6_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_6_INQ_PRF_FLIT6_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_6_INQ_PRF_FLIT6_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_2_6_INQ_PRF_FLIT6_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_2_6_INQ_PRF_FLIT6_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_6_INQ_PRF_FLIT6_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_7_INQ_PRF_FLIT6_FILTERING_MASK'} = {
    NAME => 'AR_RTR_2_7_INQ_PRF_FLIT6_FILTERING_MASK',
    LABEL => 'AR_RTR_2_7_INQ_PRF_FLIT6_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_7_INQ_PRF_FLIT6_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_7_INQ_PRF_FLIT6_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_2_7_INQ_PRF_FLIT6_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_2_7_INQ_PRF_FLIT6_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_7_INQ_PRF_FLIT6_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_0_INQ_PRF_FLIT6_FILTERING_MASK'} = {
    NAME => 'AR_RTR_3_0_INQ_PRF_FLIT6_FILTERING_MASK',
    LABEL => 'AR_RTR_3_0_INQ_PRF_FLIT6_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_0_INQ_PRF_FLIT6_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_0_INQ_PRF_FLIT6_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_3_0_INQ_PRF_FLIT6_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_3_0_INQ_PRF_FLIT6_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_0_INQ_PRF_FLIT6_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_1_INQ_PRF_FLIT6_FILTERING_MASK'} = {
    NAME => 'AR_RTR_3_1_INQ_PRF_FLIT6_FILTERING_MASK',
    LABEL => 'AR_RTR_3_1_INQ_PRF_FLIT6_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_1_INQ_PRF_FLIT6_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_1_INQ_PRF_FLIT6_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_3_1_INQ_PRF_FLIT6_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_3_1_INQ_PRF_FLIT6_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_1_INQ_PRF_FLIT6_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_2_INQ_PRF_FLIT6_FILTERING_MASK'} = {
    NAME => 'AR_RTR_3_2_INQ_PRF_FLIT6_FILTERING_MASK',
    LABEL => 'AR_RTR_3_2_INQ_PRF_FLIT6_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_2_INQ_PRF_FLIT6_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_2_INQ_PRF_FLIT6_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_3_2_INQ_PRF_FLIT6_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_3_2_INQ_PRF_FLIT6_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_2_INQ_PRF_FLIT6_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_3_INQ_PRF_FLIT6_FILTERING_MASK'} = {
    NAME => 'AR_RTR_3_3_INQ_PRF_FLIT6_FILTERING_MASK',
    LABEL => 'AR_RTR_3_3_INQ_PRF_FLIT6_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_3_INQ_PRF_FLIT6_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_3_INQ_PRF_FLIT6_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_3_3_INQ_PRF_FLIT6_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_3_3_INQ_PRF_FLIT6_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_3_INQ_PRF_FLIT6_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_4_INQ_PRF_FLIT6_FILTERING_MASK'} = {
    NAME => 'AR_RTR_3_4_INQ_PRF_FLIT6_FILTERING_MASK',
    LABEL => 'AR_RTR_3_4_INQ_PRF_FLIT6_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_4_INQ_PRF_FLIT6_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_4_INQ_PRF_FLIT6_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_3_4_INQ_PRF_FLIT6_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_3_4_INQ_PRF_FLIT6_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_4_INQ_PRF_FLIT6_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_5_INQ_PRF_FLIT6_FILTERING_MASK'} = {
    NAME => 'AR_RTR_3_5_INQ_PRF_FLIT6_FILTERING_MASK',
    LABEL => 'AR_RTR_3_5_INQ_PRF_FLIT6_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_5_INQ_PRF_FLIT6_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_5_INQ_PRF_FLIT6_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_3_5_INQ_PRF_FLIT6_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_3_5_INQ_PRF_FLIT6_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_5_INQ_PRF_FLIT6_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_6_INQ_PRF_FLIT6_FILTERING_MASK'} = {
    NAME => 'AR_RTR_3_6_INQ_PRF_FLIT6_FILTERING_MASK',
    LABEL => 'AR_RTR_3_6_INQ_PRF_FLIT6_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_6_INQ_PRF_FLIT6_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_6_INQ_PRF_FLIT6_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_3_6_INQ_PRF_FLIT6_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_3_6_INQ_PRF_FLIT6_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_6_INQ_PRF_FLIT6_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_7_INQ_PRF_FLIT6_FILTERING_MASK'} = {
    NAME => 'AR_RTR_3_7_INQ_PRF_FLIT6_FILTERING_MASK',
    LABEL => 'AR_RTR_3_7_INQ_PRF_FLIT6_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_7_INQ_PRF_FLIT6_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_7_INQ_PRF_FLIT6_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_3_7_INQ_PRF_FLIT6_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_3_7_INQ_PRF_FLIT6_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_7_INQ_PRF_FLIT6_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_0_INQ_PRF_FLIT6_FILTERING_MASK'} = {
    NAME => 'AR_RTR_4_0_INQ_PRF_FLIT6_FILTERING_MASK',
    LABEL => 'AR_RTR_4_0_INQ_PRF_FLIT6_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_0_INQ_PRF_FLIT6_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_0_INQ_PRF_FLIT6_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_4_0_INQ_PRF_FLIT6_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_4_0_INQ_PRF_FLIT6_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_0_INQ_PRF_FLIT6_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_1_INQ_PRF_FLIT6_FILTERING_MASK'} = {
    NAME => 'AR_RTR_4_1_INQ_PRF_FLIT6_FILTERING_MASK',
    LABEL => 'AR_RTR_4_1_INQ_PRF_FLIT6_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_1_INQ_PRF_FLIT6_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_1_INQ_PRF_FLIT6_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_4_1_INQ_PRF_FLIT6_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_4_1_INQ_PRF_FLIT6_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_1_INQ_PRF_FLIT6_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_2_INQ_PRF_FLIT6_FILTERING_MASK'} = {
    NAME => 'AR_RTR_4_2_INQ_PRF_FLIT6_FILTERING_MASK',
    LABEL => 'AR_RTR_4_2_INQ_PRF_FLIT6_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_2_INQ_PRF_FLIT6_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_2_INQ_PRF_FLIT6_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_4_2_INQ_PRF_FLIT6_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_4_2_INQ_PRF_FLIT6_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_2_INQ_PRF_FLIT6_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_3_INQ_PRF_FLIT6_FILTERING_MASK'} = {
    NAME => 'AR_RTR_4_3_INQ_PRF_FLIT6_FILTERING_MASK',
    LABEL => 'AR_RTR_4_3_INQ_PRF_FLIT6_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_3_INQ_PRF_FLIT6_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_3_INQ_PRF_FLIT6_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_4_3_INQ_PRF_FLIT6_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_4_3_INQ_PRF_FLIT6_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_3_INQ_PRF_FLIT6_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_4_INQ_PRF_FLIT6_FILTERING_MASK'} = {
    NAME => 'AR_RTR_4_4_INQ_PRF_FLIT6_FILTERING_MASK',
    LABEL => 'AR_RTR_4_4_INQ_PRF_FLIT6_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_4_INQ_PRF_FLIT6_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_4_INQ_PRF_FLIT6_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_4_4_INQ_PRF_FLIT6_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_4_4_INQ_PRF_FLIT6_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_4_INQ_PRF_FLIT6_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_5_INQ_PRF_FLIT6_FILTERING_MASK'} = {
    NAME => 'AR_RTR_4_5_INQ_PRF_FLIT6_FILTERING_MASK',
    LABEL => 'AR_RTR_4_5_INQ_PRF_FLIT6_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_5_INQ_PRF_FLIT6_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_5_INQ_PRF_FLIT6_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_4_5_INQ_PRF_FLIT6_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_4_5_INQ_PRF_FLIT6_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_5_INQ_PRF_FLIT6_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_6_INQ_PRF_FLIT6_FILTERING_MASK'} = {
    NAME => 'AR_RTR_4_6_INQ_PRF_FLIT6_FILTERING_MASK',
    LABEL => 'AR_RTR_4_6_INQ_PRF_FLIT6_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_6_INQ_PRF_FLIT6_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_6_INQ_PRF_FLIT6_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_4_6_INQ_PRF_FLIT6_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_4_6_INQ_PRF_FLIT6_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_6_INQ_PRF_FLIT6_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_7_INQ_PRF_FLIT6_FILTERING_MASK'} = {
    NAME => 'AR_RTR_4_7_INQ_PRF_FLIT6_FILTERING_MASK',
    LABEL => 'AR_RTR_4_7_INQ_PRF_FLIT6_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_7_INQ_PRF_FLIT6_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_7_INQ_PRF_FLIT6_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_4_7_INQ_PRF_FLIT6_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_4_7_INQ_PRF_FLIT6_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_7_INQ_PRF_FLIT6_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_0_INQ_PRF_FLIT7_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_0_0_INQ_PRF_FLIT7_FILTERING_SETUP',
    LABEL => 'AR_RTR_0_0_INQ_PRF_FLIT7_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_0_INQ_PRF_FLIT7_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_0_INQ_PRF_FLIT7_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_0_0_INQ_PRF_FLIT7_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_0_0_INQ_PRF_FLIT7_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC7_FILTER_FLIT7_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_0_INQ_PRF_FLIT7_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_0_INQ_PRF_FLIT7_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_0_0_INQ_PRF_FLIT7_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_0_0_INQ_PRF_FLIT7_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC7 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_0_INQ_PRF_FLIT7_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_0_INQ_PRF_FLIT7_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_0_0_INQ_PRF_FLIT7_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_0_0_INQ_PRF_FLIT7_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 7 to match the VC fieldof the header flit to 7',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_0_INQ_PRF_FLIT7_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_1_INQ_PRF_FLIT7_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_0_1_INQ_PRF_FLIT7_FILTERING_SETUP',
    LABEL => 'AR_RTR_0_1_INQ_PRF_FLIT7_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_1_INQ_PRF_FLIT7_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_1_INQ_PRF_FLIT7_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_0_1_INQ_PRF_FLIT7_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_0_1_INQ_PRF_FLIT7_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC7_FILTER_FLIT7_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_1_INQ_PRF_FLIT7_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_1_INQ_PRF_FLIT7_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_0_1_INQ_PRF_FLIT7_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_0_1_INQ_PRF_FLIT7_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC7 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_1_INQ_PRF_FLIT7_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_1_INQ_PRF_FLIT7_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_0_1_INQ_PRF_FLIT7_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_0_1_INQ_PRF_FLIT7_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 7 to match the VC fieldof the header flit to 7',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_1_INQ_PRF_FLIT7_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_2_INQ_PRF_FLIT7_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_0_2_INQ_PRF_FLIT7_FILTERING_SETUP',
    LABEL => 'AR_RTR_0_2_INQ_PRF_FLIT7_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_2_INQ_PRF_FLIT7_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_2_INQ_PRF_FLIT7_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_0_2_INQ_PRF_FLIT7_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_0_2_INQ_PRF_FLIT7_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC7_FILTER_FLIT7_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_2_INQ_PRF_FLIT7_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_2_INQ_PRF_FLIT7_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_0_2_INQ_PRF_FLIT7_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_0_2_INQ_PRF_FLIT7_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC7 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_2_INQ_PRF_FLIT7_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_2_INQ_PRF_FLIT7_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_0_2_INQ_PRF_FLIT7_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_0_2_INQ_PRF_FLIT7_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 7 to match the VC fieldof the header flit to 7',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_2_INQ_PRF_FLIT7_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_3_INQ_PRF_FLIT7_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_0_3_INQ_PRF_FLIT7_FILTERING_SETUP',
    LABEL => 'AR_RTR_0_3_INQ_PRF_FLIT7_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_3_INQ_PRF_FLIT7_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_3_INQ_PRF_FLIT7_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_0_3_INQ_PRF_FLIT7_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_0_3_INQ_PRF_FLIT7_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC7_FILTER_FLIT7_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_3_INQ_PRF_FLIT7_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_3_INQ_PRF_FLIT7_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_0_3_INQ_PRF_FLIT7_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_0_3_INQ_PRF_FLIT7_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC7 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_3_INQ_PRF_FLIT7_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_3_INQ_PRF_FLIT7_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_0_3_INQ_PRF_FLIT7_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_0_3_INQ_PRF_FLIT7_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 7 to match the VC fieldof the header flit to 7',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_3_INQ_PRF_FLIT7_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_4_INQ_PRF_FLIT7_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_0_4_INQ_PRF_FLIT7_FILTERING_SETUP',
    LABEL => 'AR_RTR_0_4_INQ_PRF_FLIT7_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_4_INQ_PRF_FLIT7_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_4_INQ_PRF_FLIT7_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_0_4_INQ_PRF_FLIT7_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_0_4_INQ_PRF_FLIT7_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC7_FILTER_FLIT7_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_4_INQ_PRF_FLIT7_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_4_INQ_PRF_FLIT7_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_0_4_INQ_PRF_FLIT7_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_0_4_INQ_PRF_FLIT7_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC7 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_4_INQ_PRF_FLIT7_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_4_INQ_PRF_FLIT7_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_0_4_INQ_PRF_FLIT7_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_0_4_INQ_PRF_FLIT7_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 7 to match the VC fieldof the header flit to 7',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_4_INQ_PRF_FLIT7_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_5_INQ_PRF_FLIT7_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_0_5_INQ_PRF_FLIT7_FILTERING_SETUP',
    LABEL => 'AR_RTR_0_5_INQ_PRF_FLIT7_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_5_INQ_PRF_FLIT7_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_5_INQ_PRF_FLIT7_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_0_5_INQ_PRF_FLIT7_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_0_5_INQ_PRF_FLIT7_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC7_FILTER_FLIT7_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_5_INQ_PRF_FLIT7_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_5_INQ_PRF_FLIT7_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_0_5_INQ_PRF_FLIT7_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_0_5_INQ_PRF_FLIT7_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC7 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_5_INQ_PRF_FLIT7_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_5_INQ_PRF_FLIT7_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_0_5_INQ_PRF_FLIT7_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_0_5_INQ_PRF_FLIT7_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 7 to match the VC fieldof the header flit to 7',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_5_INQ_PRF_FLIT7_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_6_INQ_PRF_FLIT7_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_0_6_INQ_PRF_FLIT7_FILTERING_SETUP',
    LABEL => 'AR_RTR_0_6_INQ_PRF_FLIT7_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_6_INQ_PRF_FLIT7_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_6_INQ_PRF_FLIT7_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_0_6_INQ_PRF_FLIT7_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_0_6_INQ_PRF_FLIT7_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC7_FILTER_FLIT7_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_6_INQ_PRF_FLIT7_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_6_INQ_PRF_FLIT7_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_0_6_INQ_PRF_FLIT7_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_0_6_INQ_PRF_FLIT7_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC7 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_6_INQ_PRF_FLIT7_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_6_INQ_PRF_FLIT7_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_0_6_INQ_PRF_FLIT7_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_0_6_INQ_PRF_FLIT7_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 7 to match the VC fieldof the header flit to 7',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_6_INQ_PRF_FLIT7_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_7_INQ_PRF_FLIT7_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_0_7_INQ_PRF_FLIT7_FILTERING_SETUP',
    LABEL => 'AR_RTR_0_7_INQ_PRF_FLIT7_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_7_INQ_PRF_FLIT7_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_7_INQ_PRF_FLIT7_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_0_7_INQ_PRF_FLIT7_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_0_7_INQ_PRF_FLIT7_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC7_FILTER_FLIT7_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_7_INQ_PRF_FLIT7_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_7_INQ_PRF_FLIT7_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_0_7_INQ_PRF_FLIT7_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_0_7_INQ_PRF_FLIT7_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC7 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_7_INQ_PRF_FLIT7_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_7_INQ_PRF_FLIT7_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_0_7_INQ_PRF_FLIT7_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_0_7_INQ_PRF_FLIT7_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 7 to match the VC fieldof the header flit to 7',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_7_INQ_PRF_FLIT7_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_0_INQ_PRF_FLIT7_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_1_0_INQ_PRF_FLIT7_FILTERING_SETUP',
    LABEL => 'AR_RTR_1_0_INQ_PRF_FLIT7_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_0_INQ_PRF_FLIT7_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_0_INQ_PRF_FLIT7_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_1_0_INQ_PRF_FLIT7_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_1_0_INQ_PRF_FLIT7_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC7_FILTER_FLIT7_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_0_INQ_PRF_FLIT7_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_0_INQ_PRF_FLIT7_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_1_0_INQ_PRF_FLIT7_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_1_0_INQ_PRF_FLIT7_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC7 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_0_INQ_PRF_FLIT7_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_0_INQ_PRF_FLIT7_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_1_0_INQ_PRF_FLIT7_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_1_0_INQ_PRF_FLIT7_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 7 to match the VC fieldof the header flit to 7',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_0_INQ_PRF_FLIT7_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_1_INQ_PRF_FLIT7_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_1_1_INQ_PRF_FLIT7_FILTERING_SETUP',
    LABEL => 'AR_RTR_1_1_INQ_PRF_FLIT7_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_1_INQ_PRF_FLIT7_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_1_INQ_PRF_FLIT7_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_1_1_INQ_PRF_FLIT7_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_1_1_INQ_PRF_FLIT7_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC7_FILTER_FLIT7_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_1_INQ_PRF_FLIT7_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_1_INQ_PRF_FLIT7_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_1_1_INQ_PRF_FLIT7_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_1_1_INQ_PRF_FLIT7_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC7 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_1_INQ_PRF_FLIT7_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_1_INQ_PRF_FLIT7_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_1_1_INQ_PRF_FLIT7_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_1_1_INQ_PRF_FLIT7_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 7 to match the VC fieldof the header flit to 7',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_1_INQ_PRF_FLIT7_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_2_INQ_PRF_FLIT7_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_1_2_INQ_PRF_FLIT7_FILTERING_SETUP',
    LABEL => 'AR_RTR_1_2_INQ_PRF_FLIT7_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_2_INQ_PRF_FLIT7_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_2_INQ_PRF_FLIT7_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_1_2_INQ_PRF_FLIT7_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_1_2_INQ_PRF_FLIT7_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC7_FILTER_FLIT7_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_2_INQ_PRF_FLIT7_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_2_INQ_PRF_FLIT7_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_1_2_INQ_PRF_FLIT7_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_1_2_INQ_PRF_FLIT7_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC7 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_2_INQ_PRF_FLIT7_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_2_INQ_PRF_FLIT7_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_1_2_INQ_PRF_FLIT7_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_1_2_INQ_PRF_FLIT7_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 7 to match the VC fieldof the header flit to 7',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_2_INQ_PRF_FLIT7_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_3_INQ_PRF_FLIT7_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_1_3_INQ_PRF_FLIT7_FILTERING_SETUP',
    LABEL => 'AR_RTR_1_3_INQ_PRF_FLIT7_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_3_INQ_PRF_FLIT7_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_3_INQ_PRF_FLIT7_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_1_3_INQ_PRF_FLIT7_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_1_3_INQ_PRF_FLIT7_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC7_FILTER_FLIT7_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_3_INQ_PRF_FLIT7_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_3_INQ_PRF_FLIT7_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_1_3_INQ_PRF_FLIT7_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_1_3_INQ_PRF_FLIT7_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC7 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_3_INQ_PRF_FLIT7_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_3_INQ_PRF_FLIT7_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_1_3_INQ_PRF_FLIT7_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_1_3_INQ_PRF_FLIT7_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 7 to match the VC fieldof the header flit to 7',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_3_INQ_PRF_FLIT7_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_4_INQ_PRF_FLIT7_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_1_4_INQ_PRF_FLIT7_FILTERING_SETUP',
    LABEL => 'AR_RTR_1_4_INQ_PRF_FLIT7_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_4_INQ_PRF_FLIT7_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_4_INQ_PRF_FLIT7_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_1_4_INQ_PRF_FLIT7_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_1_4_INQ_PRF_FLIT7_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC7_FILTER_FLIT7_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_4_INQ_PRF_FLIT7_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_4_INQ_PRF_FLIT7_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_1_4_INQ_PRF_FLIT7_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_1_4_INQ_PRF_FLIT7_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC7 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_4_INQ_PRF_FLIT7_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_4_INQ_PRF_FLIT7_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_1_4_INQ_PRF_FLIT7_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_1_4_INQ_PRF_FLIT7_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 7 to match the VC fieldof the header flit to 7',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_4_INQ_PRF_FLIT7_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_5_INQ_PRF_FLIT7_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_1_5_INQ_PRF_FLIT7_FILTERING_SETUP',
    LABEL => 'AR_RTR_1_5_INQ_PRF_FLIT7_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_5_INQ_PRF_FLIT7_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_5_INQ_PRF_FLIT7_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_1_5_INQ_PRF_FLIT7_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_1_5_INQ_PRF_FLIT7_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC7_FILTER_FLIT7_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_5_INQ_PRF_FLIT7_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_5_INQ_PRF_FLIT7_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_1_5_INQ_PRF_FLIT7_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_1_5_INQ_PRF_FLIT7_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC7 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_5_INQ_PRF_FLIT7_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_5_INQ_PRF_FLIT7_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_1_5_INQ_PRF_FLIT7_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_1_5_INQ_PRF_FLIT7_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 7 to match the VC fieldof the header flit to 7',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_5_INQ_PRF_FLIT7_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_6_INQ_PRF_FLIT7_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_1_6_INQ_PRF_FLIT7_FILTERING_SETUP',
    LABEL => 'AR_RTR_1_6_INQ_PRF_FLIT7_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_6_INQ_PRF_FLIT7_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_6_INQ_PRF_FLIT7_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_1_6_INQ_PRF_FLIT7_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_1_6_INQ_PRF_FLIT7_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC7_FILTER_FLIT7_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_6_INQ_PRF_FLIT7_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_6_INQ_PRF_FLIT7_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_1_6_INQ_PRF_FLIT7_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_1_6_INQ_PRF_FLIT7_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC7 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_6_INQ_PRF_FLIT7_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_6_INQ_PRF_FLIT7_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_1_6_INQ_PRF_FLIT7_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_1_6_INQ_PRF_FLIT7_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 7 to match the VC fieldof the header flit to 7',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_6_INQ_PRF_FLIT7_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_7_INQ_PRF_FLIT7_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_1_7_INQ_PRF_FLIT7_FILTERING_SETUP',
    LABEL => 'AR_RTR_1_7_INQ_PRF_FLIT7_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_7_INQ_PRF_FLIT7_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_7_INQ_PRF_FLIT7_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_1_7_INQ_PRF_FLIT7_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_1_7_INQ_PRF_FLIT7_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC7_FILTER_FLIT7_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_7_INQ_PRF_FLIT7_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_7_INQ_PRF_FLIT7_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_1_7_INQ_PRF_FLIT7_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_1_7_INQ_PRF_FLIT7_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC7 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_7_INQ_PRF_FLIT7_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_7_INQ_PRF_FLIT7_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_1_7_INQ_PRF_FLIT7_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_1_7_INQ_PRF_FLIT7_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 7 to match the VC fieldof the header flit to 7',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_7_INQ_PRF_FLIT7_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_0_INQ_PRF_FLIT7_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_2_0_INQ_PRF_FLIT7_FILTERING_SETUP',
    LABEL => 'AR_RTR_2_0_INQ_PRF_FLIT7_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_0_INQ_PRF_FLIT7_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_0_INQ_PRF_FLIT7_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_2_0_INQ_PRF_FLIT7_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_2_0_INQ_PRF_FLIT7_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC7_FILTER_FLIT7_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_0_INQ_PRF_FLIT7_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_0_INQ_PRF_FLIT7_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_2_0_INQ_PRF_FLIT7_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_2_0_INQ_PRF_FLIT7_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC7 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_0_INQ_PRF_FLIT7_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_0_INQ_PRF_FLIT7_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_2_0_INQ_PRF_FLIT7_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_2_0_INQ_PRF_FLIT7_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 7 to match the VC fieldof the header flit to 7',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_0_INQ_PRF_FLIT7_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_1_INQ_PRF_FLIT7_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_2_1_INQ_PRF_FLIT7_FILTERING_SETUP',
    LABEL => 'AR_RTR_2_1_INQ_PRF_FLIT7_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_1_INQ_PRF_FLIT7_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_1_INQ_PRF_FLIT7_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_2_1_INQ_PRF_FLIT7_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_2_1_INQ_PRF_FLIT7_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC7_FILTER_FLIT7_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_1_INQ_PRF_FLIT7_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_1_INQ_PRF_FLIT7_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_2_1_INQ_PRF_FLIT7_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_2_1_INQ_PRF_FLIT7_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC7 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_1_INQ_PRF_FLIT7_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_1_INQ_PRF_FLIT7_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_2_1_INQ_PRF_FLIT7_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_2_1_INQ_PRF_FLIT7_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 7 to match the VC fieldof the header flit to 7',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_1_INQ_PRF_FLIT7_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_2_INQ_PRF_FLIT7_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_2_2_INQ_PRF_FLIT7_FILTERING_SETUP',
    LABEL => 'AR_RTR_2_2_INQ_PRF_FLIT7_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_2_INQ_PRF_FLIT7_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_2_INQ_PRF_FLIT7_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_2_2_INQ_PRF_FLIT7_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_2_2_INQ_PRF_FLIT7_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC7_FILTER_FLIT7_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_2_INQ_PRF_FLIT7_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_2_INQ_PRF_FLIT7_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_2_2_INQ_PRF_FLIT7_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_2_2_INQ_PRF_FLIT7_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC7 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_2_INQ_PRF_FLIT7_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_2_INQ_PRF_FLIT7_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_2_2_INQ_PRF_FLIT7_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_2_2_INQ_PRF_FLIT7_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 7 to match the VC fieldof the header flit to 7',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_2_INQ_PRF_FLIT7_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_3_INQ_PRF_FLIT7_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_2_3_INQ_PRF_FLIT7_FILTERING_SETUP',
    LABEL => 'AR_RTR_2_3_INQ_PRF_FLIT7_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_3_INQ_PRF_FLIT7_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_3_INQ_PRF_FLIT7_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_2_3_INQ_PRF_FLIT7_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_2_3_INQ_PRF_FLIT7_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC7_FILTER_FLIT7_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_3_INQ_PRF_FLIT7_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_3_INQ_PRF_FLIT7_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_2_3_INQ_PRF_FLIT7_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_2_3_INQ_PRF_FLIT7_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC7 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_3_INQ_PRF_FLIT7_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_3_INQ_PRF_FLIT7_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_2_3_INQ_PRF_FLIT7_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_2_3_INQ_PRF_FLIT7_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 7 to match the VC fieldof the header flit to 7',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_3_INQ_PRF_FLIT7_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_4_INQ_PRF_FLIT7_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_2_4_INQ_PRF_FLIT7_FILTERING_SETUP',
    LABEL => 'AR_RTR_2_4_INQ_PRF_FLIT7_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_4_INQ_PRF_FLIT7_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_4_INQ_PRF_FLIT7_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_2_4_INQ_PRF_FLIT7_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_2_4_INQ_PRF_FLIT7_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC7_FILTER_FLIT7_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_4_INQ_PRF_FLIT7_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_4_INQ_PRF_FLIT7_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_2_4_INQ_PRF_FLIT7_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_2_4_INQ_PRF_FLIT7_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC7 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_4_INQ_PRF_FLIT7_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_4_INQ_PRF_FLIT7_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_2_4_INQ_PRF_FLIT7_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_2_4_INQ_PRF_FLIT7_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 7 to match the VC fieldof the header flit to 7',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_4_INQ_PRF_FLIT7_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_5_INQ_PRF_FLIT7_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_2_5_INQ_PRF_FLIT7_FILTERING_SETUP',
    LABEL => 'AR_RTR_2_5_INQ_PRF_FLIT7_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_5_INQ_PRF_FLIT7_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_5_INQ_PRF_FLIT7_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_2_5_INQ_PRF_FLIT7_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_2_5_INQ_PRF_FLIT7_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC7_FILTER_FLIT7_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_5_INQ_PRF_FLIT7_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_5_INQ_PRF_FLIT7_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_2_5_INQ_PRF_FLIT7_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_2_5_INQ_PRF_FLIT7_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC7 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_5_INQ_PRF_FLIT7_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_5_INQ_PRF_FLIT7_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_2_5_INQ_PRF_FLIT7_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_2_5_INQ_PRF_FLIT7_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 7 to match the VC fieldof the header flit to 7',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_5_INQ_PRF_FLIT7_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_6_INQ_PRF_FLIT7_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_2_6_INQ_PRF_FLIT7_FILTERING_SETUP',
    LABEL => 'AR_RTR_2_6_INQ_PRF_FLIT7_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_6_INQ_PRF_FLIT7_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_6_INQ_PRF_FLIT7_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_2_6_INQ_PRF_FLIT7_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_2_6_INQ_PRF_FLIT7_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC7_FILTER_FLIT7_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_6_INQ_PRF_FLIT7_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_6_INQ_PRF_FLIT7_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_2_6_INQ_PRF_FLIT7_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_2_6_INQ_PRF_FLIT7_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC7 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_6_INQ_PRF_FLIT7_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_6_INQ_PRF_FLIT7_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_2_6_INQ_PRF_FLIT7_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_2_6_INQ_PRF_FLIT7_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 7 to match the VC fieldof the header flit to 7',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_6_INQ_PRF_FLIT7_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_7_INQ_PRF_FLIT7_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_2_7_INQ_PRF_FLIT7_FILTERING_SETUP',
    LABEL => 'AR_RTR_2_7_INQ_PRF_FLIT7_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_7_INQ_PRF_FLIT7_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_7_INQ_PRF_FLIT7_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_2_7_INQ_PRF_FLIT7_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_2_7_INQ_PRF_FLIT7_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC7_FILTER_FLIT7_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_7_INQ_PRF_FLIT7_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_7_INQ_PRF_FLIT7_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_2_7_INQ_PRF_FLIT7_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_2_7_INQ_PRF_FLIT7_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC7 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_7_INQ_PRF_FLIT7_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_7_INQ_PRF_FLIT7_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_2_7_INQ_PRF_FLIT7_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_2_7_INQ_PRF_FLIT7_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 7 to match the VC fieldof the header flit to 7',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_7_INQ_PRF_FLIT7_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_0_INQ_PRF_FLIT7_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_3_0_INQ_PRF_FLIT7_FILTERING_SETUP',
    LABEL => 'AR_RTR_3_0_INQ_PRF_FLIT7_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_0_INQ_PRF_FLIT7_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_0_INQ_PRF_FLIT7_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_3_0_INQ_PRF_FLIT7_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_3_0_INQ_PRF_FLIT7_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC7_FILTER_FLIT7_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_0_INQ_PRF_FLIT7_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_0_INQ_PRF_FLIT7_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_3_0_INQ_PRF_FLIT7_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_3_0_INQ_PRF_FLIT7_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC7 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_0_INQ_PRF_FLIT7_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_0_INQ_PRF_FLIT7_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_3_0_INQ_PRF_FLIT7_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_3_0_INQ_PRF_FLIT7_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 7 to match the VC fieldof the header flit to 7',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_0_INQ_PRF_FLIT7_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_1_INQ_PRF_FLIT7_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_3_1_INQ_PRF_FLIT7_FILTERING_SETUP',
    LABEL => 'AR_RTR_3_1_INQ_PRF_FLIT7_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_1_INQ_PRF_FLIT7_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_1_INQ_PRF_FLIT7_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_3_1_INQ_PRF_FLIT7_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_3_1_INQ_PRF_FLIT7_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC7_FILTER_FLIT7_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_1_INQ_PRF_FLIT7_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_1_INQ_PRF_FLIT7_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_3_1_INQ_PRF_FLIT7_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_3_1_INQ_PRF_FLIT7_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC7 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_1_INQ_PRF_FLIT7_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_1_INQ_PRF_FLIT7_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_3_1_INQ_PRF_FLIT7_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_3_1_INQ_PRF_FLIT7_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 7 to match the VC fieldof the header flit to 7',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_1_INQ_PRF_FLIT7_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_2_INQ_PRF_FLIT7_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_3_2_INQ_PRF_FLIT7_FILTERING_SETUP',
    LABEL => 'AR_RTR_3_2_INQ_PRF_FLIT7_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_2_INQ_PRF_FLIT7_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_2_INQ_PRF_FLIT7_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_3_2_INQ_PRF_FLIT7_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_3_2_INQ_PRF_FLIT7_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC7_FILTER_FLIT7_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_2_INQ_PRF_FLIT7_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_2_INQ_PRF_FLIT7_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_3_2_INQ_PRF_FLIT7_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_3_2_INQ_PRF_FLIT7_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC7 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_2_INQ_PRF_FLIT7_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_2_INQ_PRF_FLIT7_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_3_2_INQ_PRF_FLIT7_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_3_2_INQ_PRF_FLIT7_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 7 to match the VC fieldof the header flit to 7',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_2_INQ_PRF_FLIT7_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_3_INQ_PRF_FLIT7_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_3_3_INQ_PRF_FLIT7_FILTERING_SETUP',
    LABEL => 'AR_RTR_3_3_INQ_PRF_FLIT7_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_3_INQ_PRF_FLIT7_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_3_INQ_PRF_FLIT7_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_3_3_INQ_PRF_FLIT7_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_3_3_INQ_PRF_FLIT7_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC7_FILTER_FLIT7_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_3_INQ_PRF_FLIT7_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_3_INQ_PRF_FLIT7_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_3_3_INQ_PRF_FLIT7_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_3_3_INQ_PRF_FLIT7_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC7 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_3_INQ_PRF_FLIT7_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_3_INQ_PRF_FLIT7_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_3_3_INQ_PRF_FLIT7_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_3_3_INQ_PRF_FLIT7_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 7 to match the VC fieldof the header flit to 7',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_3_INQ_PRF_FLIT7_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_4_INQ_PRF_FLIT7_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_3_4_INQ_PRF_FLIT7_FILTERING_SETUP',
    LABEL => 'AR_RTR_3_4_INQ_PRF_FLIT7_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_4_INQ_PRF_FLIT7_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_4_INQ_PRF_FLIT7_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_3_4_INQ_PRF_FLIT7_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_3_4_INQ_PRF_FLIT7_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC7_FILTER_FLIT7_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_4_INQ_PRF_FLIT7_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_4_INQ_PRF_FLIT7_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_3_4_INQ_PRF_FLIT7_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_3_4_INQ_PRF_FLIT7_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC7 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_4_INQ_PRF_FLIT7_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_4_INQ_PRF_FLIT7_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_3_4_INQ_PRF_FLIT7_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_3_4_INQ_PRF_FLIT7_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 7 to match the VC fieldof the header flit to 7',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_4_INQ_PRF_FLIT7_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_5_INQ_PRF_FLIT7_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_3_5_INQ_PRF_FLIT7_FILTERING_SETUP',
    LABEL => 'AR_RTR_3_5_INQ_PRF_FLIT7_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_5_INQ_PRF_FLIT7_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_5_INQ_PRF_FLIT7_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_3_5_INQ_PRF_FLIT7_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_3_5_INQ_PRF_FLIT7_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC7_FILTER_FLIT7_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_5_INQ_PRF_FLIT7_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_5_INQ_PRF_FLIT7_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_3_5_INQ_PRF_FLIT7_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_3_5_INQ_PRF_FLIT7_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC7 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_5_INQ_PRF_FLIT7_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_5_INQ_PRF_FLIT7_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_3_5_INQ_PRF_FLIT7_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_3_5_INQ_PRF_FLIT7_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 7 to match the VC fieldof the header flit to 7',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_5_INQ_PRF_FLIT7_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_6_INQ_PRF_FLIT7_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_3_6_INQ_PRF_FLIT7_FILTERING_SETUP',
    LABEL => 'AR_RTR_3_6_INQ_PRF_FLIT7_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_6_INQ_PRF_FLIT7_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_6_INQ_PRF_FLIT7_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_3_6_INQ_PRF_FLIT7_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_3_6_INQ_PRF_FLIT7_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC7_FILTER_FLIT7_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_6_INQ_PRF_FLIT7_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_6_INQ_PRF_FLIT7_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_3_6_INQ_PRF_FLIT7_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_3_6_INQ_PRF_FLIT7_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC7 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_6_INQ_PRF_FLIT7_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_6_INQ_PRF_FLIT7_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_3_6_INQ_PRF_FLIT7_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_3_6_INQ_PRF_FLIT7_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 7 to match the VC fieldof the header flit to 7',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_6_INQ_PRF_FLIT7_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_7_INQ_PRF_FLIT7_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_3_7_INQ_PRF_FLIT7_FILTERING_SETUP',
    LABEL => 'AR_RTR_3_7_INQ_PRF_FLIT7_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_7_INQ_PRF_FLIT7_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_7_INQ_PRF_FLIT7_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_3_7_INQ_PRF_FLIT7_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_3_7_INQ_PRF_FLIT7_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC7_FILTER_FLIT7_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_7_INQ_PRF_FLIT7_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_7_INQ_PRF_FLIT7_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_3_7_INQ_PRF_FLIT7_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_3_7_INQ_PRF_FLIT7_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC7 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_7_INQ_PRF_FLIT7_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_7_INQ_PRF_FLIT7_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_3_7_INQ_PRF_FLIT7_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_3_7_INQ_PRF_FLIT7_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 7 to match the VC fieldof the header flit to 7',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_7_INQ_PRF_FLIT7_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_0_INQ_PRF_FLIT7_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_4_0_INQ_PRF_FLIT7_FILTERING_SETUP',
    LABEL => 'AR_RTR_4_0_INQ_PRF_FLIT7_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_0_INQ_PRF_FLIT7_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_0_INQ_PRF_FLIT7_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_4_0_INQ_PRF_FLIT7_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_4_0_INQ_PRF_FLIT7_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC7_FILTER_FLIT7_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_0_INQ_PRF_FLIT7_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_0_INQ_PRF_FLIT7_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_4_0_INQ_PRF_FLIT7_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_4_0_INQ_PRF_FLIT7_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC7 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_0_INQ_PRF_FLIT7_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_0_INQ_PRF_FLIT7_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_4_0_INQ_PRF_FLIT7_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_4_0_INQ_PRF_FLIT7_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 7 to match the VC fieldof the header flit to 7',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_0_INQ_PRF_FLIT7_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_1_INQ_PRF_FLIT7_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_4_1_INQ_PRF_FLIT7_FILTERING_SETUP',
    LABEL => 'AR_RTR_4_1_INQ_PRF_FLIT7_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_1_INQ_PRF_FLIT7_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_1_INQ_PRF_FLIT7_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_4_1_INQ_PRF_FLIT7_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_4_1_INQ_PRF_FLIT7_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC7_FILTER_FLIT7_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_1_INQ_PRF_FLIT7_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_1_INQ_PRF_FLIT7_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_4_1_INQ_PRF_FLIT7_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_4_1_INQ_PRF_FLIT7_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC7 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_1_INQ_PRF_FLIT7_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_1_INQ_PRF_FLIT7_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_4_1_INQ_PRF_FLIT7_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_4_1_INQ_PRF_FLIT7_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 7 to match the VC fieldof the header flit to 7',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_1_INQ_PRF_FLIT7_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_2_INQ_PRF_FLIT7_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_4_2_INQ_PRF_FLIT7_FILTERING_SETUP',
    LABEL => 'AR_RTR_4_2_INQ_PRF_FLIT7_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_2_INQ_PRF_FLIT7_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_2_INQ_PRF_FLIT7_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_4_2_INQ_PRF_FLIT7_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_4_2_INQ_PRF_FLIT7_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC7_FILTER_FLIT7_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_2_INQ_PRF_FLIT7_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_2_INQ_PRF_FLIT7_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_4_2_INQ_PRF_FLIT7_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_4_2_INQ_PRF_FLIT7_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC7 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_2_INQ_PRF_FLIT7_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_2_INQ_PRF_FLIT7_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_4_2_INQ_PRF_FLIT7_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_4_2_INQ_PRF_FLIT7_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 7 to match the VC fieldof the header flit to 7',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_2_INQ_PRF_FLIT7_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_3_INQ_PRF_FLIT7_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_4_3_INQ_PRF_FLIT7_FILTERING_SETUP',
    LABEL => 'AR_RTR_4_3_INQ_PRF_FLIT7_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_3_INQ_PRF_FLIT7_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_3_INQ_PRF_FLIT7_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_4_3_INQ_PRF_FLIT7_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_4_3_INQ_PRF_FLIT7_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC7_FILTER_FLIT7_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_3_INQ_PRF_FLIT7_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_3_INQ_PRF_FLIT7_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_4_3_INQ_PRF_FLIT7_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_4_3_INQ_PRF_FLIT7_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC7 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_3_INQ_PRF_FLIT7_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_3_INQ_PRF_FLIT7_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_4_3_INQ_PRF_FLIT7_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_4_3_INQ_PRF_FLIT7_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 7 to match the VC fieldof the header flit to 7',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_3_INQ_PRF_FLIT7_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_4_INQ_PRF_FLIT7_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_4_4_INQ_PRF_FLIT7_FILTERING_SETUP',
    LABEL => 'AR_RTR_4_4_INQ_PRF_FLIT7_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_4_INQ_PRF_FLIT7_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_4_INQ_PRF_FLIT7_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_4_4_INQ_PRF_FLIT7_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_4_4_INQ_PRF_FLIT7_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC7_FILTER_FLIT7_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_4_INQ_PRF_FLIT7_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_4_INQ_PRF_FLIT7_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_4_4_INQ_PRF_FLIT7_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_4_4_INQ_PRF_FLIT7_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC7 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_4_INQ_PRF_FLIT7_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_4_INQ_PRF_FLIT7_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_4_4_INQ_PRF_FLIT7_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_4_4_INQ_PRF_FLIT7_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 7 to match the VC fieldof the header flit to 7',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_4_INQ_PRF_FLIT7_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_5_INQ_PRF_FLIT7_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_4_5_INQ_PRF_FLIT7_FILTERING_SETUP',
    LABEL => 'AR_RTR_4_5_INQ_PRF_FLIT7_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_5_INQ_PRF_FLIT7_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_5_INQ_PRF_FLIT7_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_4_5_INQ_PRF_FLIT7_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_4_5_INQ_PRF_FLIT7_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC7_FILTER_FLIT7_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_5_INQ_PRF_FLIT7_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_5_INQ_PRF_FLIT7_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_4_5_INQ_PRF_FLIT7_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_4_5_INQ_PRF_FLIT7_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC7 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_5_INQ_PRF_FLIT7_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_5_INQ_PRF_FLIT7_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_4_5_INQ_PRF_FLIT7_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_4_5_INQ_PRF_FLIT7_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 7 to match the VC fieldof the header flit to 7',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_5_INQ_PRF_FLIT7_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_6_INQ_PRF_FLIT7_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_4_6_INQ_PRF_FLIT7_FILTERING_SETUP',
    LABEL => 'AR_RTR_4_6_INQ_PRF_FLIT7_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_6_INQ_PRF_FLIT7_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_6_INQ_PRF_FLIT7_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_4_6_INQ_PRF_FLIT7_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_4_6_INQ_PRF_FLIT7_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC7_FILTER_FLIT7_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_6_INQ_PRF_FLIT7_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_6_INQ_PRF_FLIT7_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_4_6_INQ_PRF_FLIT7_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_4_6_INQ_PRF_FLIT7_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC7 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_6_INQ_PRF_FLIT7_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_6_INQ_PRF_FLIT7_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_4_6_INQ_PRF_FLIT7_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_4_6_INQ_PRF_FLIT7_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 7 to match the VC fieldof the header flit to 7',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_6_INQ_PRF_FLIT7_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_7_INQ_PRF_FLIT7_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_4_7_INQ_PRF_FLIT7_FILTERING_SETUP',
    LABEL => 'AR_RTR_4_7_INQ_PRF_FLIT7_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_7_INQ_PRF_FLIT7_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_7_INQ_PRF_FLIT7_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_4_7_INQ_PRF_FLIT7_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_4_7_INQ_PRF_FLIT7_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_INQ_PRF_INCOMING_PKT_VC7_FILTER_FLIT7_CNT is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_7_INQ_PRF_FLIT7_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_7_INQ_PRF_FLIT7_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_4_7_INQ_PRF_FLIT7_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_4_7_INQ_PRF_FLIT7_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* For mode 0 operation, the counter is programmed to count the number of incoming VC7 packets, this pointer is set to point to the header flit, or 5h0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_7_INQ_PRF_FLIT7_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_7_INQ_PRF_FLIT7_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_4_7_INQ_PRF_FLIT7_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_4_7_INQ_PRF_FLIT7_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* During mode 0 operation, this is set to 7 to match the VC fieldof the header flit to 7',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_7_INQ_PRF_FLIT7_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_0_INQ_PRF_FLIT7_FILTERING_MASK'} = {
    NAME => 'AR_RTR_0_0_INQ_PRF_FLIT7_FILTERING_MASK',
    LABEL => 'AR_RTR_0_0_INQ_PRF_FLIT7_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_0_INQ_PRF_FLIT7_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_0_INQ_PRF_FLIT7_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_0_0_INQ_PRF_FLIT7_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_0_0_INQ_PRF_FLIT7_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_0_INQ_PRF_FLIT7_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_1_INQ_PRF_FLIT7_FILTERING_MASK'} = {
    NAME => 'AR_RTR_0_1_INQ_PRF_FLIT7_FILTERING_MASK',
    LABEL => 'AR_RTR_0_1_INQ_PRF_FLIT7_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_1_INQ_PRF_FLIT7_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_1_INQ_PRF_FLIT7_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_0_1_INQ_PRF_FLIT7_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_0_1_INQ_PRF_FLIT7_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_1_INQ_PRF_FLIT7_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_2_INQ_PRF_FLIT7_FILTERING_MASK'} = {
    NAME => 'AR_RTR_0_2_INQ_PRF_FLIT7_FILTERING_MASK',
    LABEL => 'AR_RTR_0_2_INQ_PRF_FLIT7_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_2_INQ_PRF_FLIT7_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_2_INQ_PRF_FLIT7_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_0_2_INQ_PRF_FLIT7_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_0_2_INQ_PRF_FLIT7_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_2_INQ_PRF_FLIT7_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_3_INQ_PRF_FLIT7_FILTERING_MASK'} = {
    NAME => 'AR_RTR_0_3_INQ_PRF_FLIT7_FILTERING_MASK',
    LABEL => 'AR_RTR_0_3_INQ_PRF_FLIT7_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_3_INQ_PRF_FLIT7_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_3_INQ_PRF_FLIT7_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_0_3_INQ_PRF_FLIT7_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_0_3_INQ_PRF_FLIT7_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_3_INQ_PRF_FLIT7_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_4_INQ_PRF_FLIT7_FILTERING_MASK'} = {
    NAME => 'AR_RTR_0_4_INQ_PRF_FLIT7_FILTERING_MASK',
    LABEL => 'AR_RTR_0_4_INQ_PRF_FLIT7_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_4_INQ_PRF_FLIT7_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_4_INQ_PRF_FLIT7_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_0_4_INQ_PRF_FLIT7_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_0_4_INQ_PRF_FLIT7_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_4_INQ_PRF_FLIT7_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_5_INQ_PRF_FLIT7_FILTERING_MASK'} = {
    NAME => 'AR_RTR_0_5_INQ_PRF_FLIT7_FILTERING_MASK',
    LABEL => 'AR_RTR_0_5_INQ_PRF_FLIT7_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_5_INQ_PRF_FLIT7_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_5_INQ_PRF_FLIT7_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_0_5_INQ_PRF_FLIT7_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_0_5_INQ_PRF_FLIT7_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_5_INQ_PRF_FLIT7_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_6_INQ_PRF_FLIT7_FILTERING_MASK'} = {
    NAME => 'AR_RTR_0_6_INQ_PRF_FLIT7_FILTERING_MASK',
    LABEL => 'AR_RTR_0_6_INQ_PRF_FLIT7_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_6_INQ_PRF_FLIT7_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_6_INQ_PRF_FLIT7_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_0_6_INQ_PRF_FLIT7_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_0_6_INQ_PRF_FLIT7_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_6_INQ_PRF_FLIT7_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_7_INQ_PRF_FLIT7_FILTERING_MASK'} = {
    NAME => 'AR_RTR_0_7_INQ_PRF_FLIT7_FILTERING_MASK',
    LABEL => 'AR_RTR_0_7_INQ_PRF_FLIT7_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_7_INQ_PRF_FLIT7_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_7_INQ_PRF_FLIT7_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_0_7_INQ_PRF_FLIT7_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_0_7_INQ_PRF_FLIT7_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_7_INQ_PRF_FLIT7_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_0_INQ_PRF_FLIT7_FILTERING_MASK'} = {
    NAME => 'AR_RTR_1_0_INQ_PRF_FLIT7_FILTERING_MASK',
    LABEL => 'AR_RTR_1_0_INQ_PRF_FLIT7_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_0_INQ_PRF_FLIT7_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_0_INQ_PRF_FLIT7_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_1_0_INQ_PRF_FLIT7_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_1_0_INQ_PRF_FLIT7_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_0_INQ_PRF_FLIT7_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_1_INQ_PRF_FLIT7_FILTERING_MASK'} = {
    NAME => 'AR_RTR_1_1_INQ_PRF_FLIT7_FILTERING_MASK',
    LABEL => 'AR_RTR_1_1_INQ_PRF_FLIT7_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_1_INQ_PRF_FLIT7_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_1_INQ_PRF_FLIT7_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_1_1_INQ_PRF_FLIT7_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_1_1_INQ_PRF_FLIT7_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_1_INQ_PRF_FLIT7_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_2_INQ_PRF_FLIT7_FILTERING_MASK'} = {
    NAME => 'AR_RTR_1_2_INQ_PRF_FLIT7_FILTERING_MASK',
    LABEL => 'AR_RTR_1_2_INQ_PRF_FLIT7_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_2_INQ_PRF_FLIT7_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_2_INQ_PRF_FLIT7_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_1_2_INQ_PRF_FLIT7_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_1_2_INQ_PRF_FLIT7_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_2_INQ_PRF_FLIT7_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_3_INQ_PRF_FLIT7_FILTERING_MASK'} = {
    NAME => 'AR_RTR_1_3_INQ_PRF_FLIT7_FILTERING_MASK',
    LABEL => 'AR_RTR_1_3_INQ_PRF_FLIT7_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_3_INQ_PRF_FLIT7_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_3_INQ_PRF_FLIT7_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_1_3_INQ_PRF_FLIT7_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_1_3_INQ_PRF_FLIT7_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_3_INQ_PRF_FLIT7_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_4_INQ_PRF_FLIT7_FILTERING_MASK'} = {
    NAME => 'AR_RTR_1_4_INQ_PRF_FLIT7_FILTERING_MASK',
    LABEL => 'AR_RTR_1_4_INQ_PRF_FLIT7_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_4_INQ_PRF_FLIT7_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_4_INQ_PRF_FLIT7_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_1_4_INQ_PRF_FLIT7_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_1_4_INQ_PRF_FLIT7_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_4_INQ_PRF_FLIT7_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_5_INQ_PRF_FLIT7_FILTERING_MASK'} = {
    NAME => 'AR_RTR_1_5_INQ_PRF_FLIT7_FILTERING_MASK',
    LABEL => 'AR_RTR_1_5_INQ_PRF_FLIT7_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_5_INQ_PRF_FLIT7_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_5_INQ_PRF_FLIT7_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_1_5_INQ_PRF_FLIT7_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_1_5_INQ_PRF_FLIT7_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_5_INQ_PRF_FLIT7_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_6_INQ_PRF_FLIT7_FILTERING_MASK'} = {
    NAME => 'AR_RTR_1_6_INQ_PRF_FLIT7_FILTERING_MASK',
    LABEL => 'AR_RTR_1_6_INQ_PRF_FLIT7_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_6_INQ_PRF_FLIT7_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_6_INQ_PRF_FLIT7_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_1_6_INQ_PRF_FLIT7_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_1_6_INQ_PRF_FLIT7_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_6_INQ_PRF_FLIT7_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_7_INQ_PRF_FLIT7_FILTERING_MASK'} = {
    NAME => 'AR_RTR_1_7_INQ_PRF_FLIT7_FILTERING_MASK',
    LABEL => 'AR_RTR_1_7_INQ_PRF_FLIT7_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_7_INQ_PRF_FLIT7_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_7_INQ_PRF_FLIT7_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_1_7_INQ_PRF_FLIT7_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_1_7_INQ_PRF_FLIT7_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_7_INQ_PRF_FLIT7_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_0_INQ_PRF_FLIT7_FILTERING_MASK'} = {
    NAME => 'AR_RTR_2_0_INQ_PRF_FLIT7_FILTERING_MASK',
    LABEL => 'AR_RTR_2_0_INQ_PRF_FLIT7_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_0_INQ_PRF_FLIT7_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_0_INQ_PRF_FLIT7_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_2_0_INQ_PRF_FLIT7_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_2_0_INQ_PRF_FLIT7_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_0_INQ_PRF_FLIT7_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_1_INQ_PRF_FLIT7_FILTERING_MASK'} = {
    NAME => 'AR_RTR_2_1_INQ_PRF_FLIT7_FILTERING_MASK',
    LABEL => 'AR_RTR_2_1_INQ_PRF_FLIT7_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_1_INQ_PRF_FLIT7_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_1_INQ_PRF_FLIT7_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_2_1_INQ_PRF_FLIT7_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_2_1_INQ_PRF_FLIT7_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_1_INQ_PRF_FLIT7_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_2_INQ_PRF_FLIT7_FILTERING_MASK'} = {
    NAME => 'AR_RTR_2_2_INQ_PRF_FLIT7_FILTERING_MASK',
    LABEL => 'AR_RTR_2_2_INQ_PRF_FLIT7_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_2_INQ_PRF_FLIT7_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_2_INQ_PRF_FLIT7_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_2_2_INQ_PRF_FLIT7_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_2_2_INQ_PRF_FLIT7_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_2_INQ_PRF_FLIT7_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_3_INQ_PRF_FLIT7_FILTERING_MASK'} = {
    NAME => 'AR_RTR_2_3_INQ_PRF_FLIT7_FILTERING_MASK',
    LABEL => 'AR_RTR_2_3_INQ_PRF_FLIT7_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_3_INQ_PRF_FLIT7_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_3_INQ_PRF_FLIT7_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_2_3_INQ_PRF_FLIT7_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_2_3_INQ_PRF_FLIT7_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_3_INQ_PRF_FLIT7_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_4_INQ_PRF_FLIT7_FILTERING_MASK'} = {
    NAME => 'AR_RTR_2_4_INQ_PRF_FLIT7_FILTERING_MASK',
    LABEL => 'AR_RTR_2_4_INQ_PRF_FLIT7_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_4_INQ_PRF_FLIT7_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_4_INQ_PRF_FLIT7_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_2_4_INQ_PRF_FLIT7_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_2_4_INQ_PRF_FLIT7_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_4_INQ_PRF_FLIT7_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_5_INQ_PRF_FLIT7_FILTERING_MASK'} = {
    NAME => 'AR_RTR_2_5_INQ_PRF_FLIT7_FILTERING_MASK',
    LABEL => 'AR_RTR_2_5_INQ_PRF_FLIT7_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_5_INQ_PRF_FLIT7_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_5_INQ_PRF_FLIT7_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_2_5_INQ_PRF_FLIT7_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_2_5_INQ_PRF_FLIT7_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_5_INQ_PRF_FLIT7_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_6_INQ_PRF_FLIT7_FILTERING_MASK'} = {
    NAME => 'AR_RTR_2_6_INQ_PRF_FLIT7_FILTERING_MASK',
    LABEL => 'AR_RTR_2_6_INQ_PRF_FLIT7_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_6_INQ_PRF_FLIT7_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_6_INQ_PRF_FLIT7_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_2_6_INQ_PRF_FLIT7_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_2_6_INQ_PRF_FLIT7_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_6_INQ_PRF_FLIT7_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_7_INQ_PRF_FLIT7_FILTERING_MASK'} = {
    NAME => 'AR_RTR_2_7_INQ_PRF_FLIT7_FILTERING_MASK',
    LABEL => 'AR_RTR_2_7_INQ_PRF_FLIT7_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_7_INQ_PRF_FLIT7_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_7_INQ_PRF_FLIT7_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_2_7_INQ_PRF_FLIT7_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_2_7_INQ_PRF_FLIT7_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_7_INQ_PRF_FLIT7_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_0_INQ_PRF_FLIT7_FILTERING_MASK'} = {
    NAME => 'AR_RTR_3_0_INQ_PRF_FLIT7_FILTERING_MASK',
    LABEL => 'AR_RTR_3_0_INQ_PRF_FLIT7_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_0_INQ_PRF_FLIT7_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_0_INQ_PRF_FLIT7_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_3_0_INQ_PRF_FLIT7_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_3_0_INQ_PRF_FLIT7_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_0_INQ_PRF_FLIT7_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_1_INQ_PRF_FLIT7_FILTERING_MASK'} = {
    NAME => 'AR_RTR_3_1_INQ_PRF_FLIT7_FILTERING_MASK',
    LABEL => 'AR_RTR_3_1_INQ_PRF_FLIT7_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_1_INQ_PRF_FLIT7_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_1_INQ_PRF_FLIT7_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_3_1_INQ_PRF_FLIT7_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_3_1_INQ_PRF_FLIT7_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_1_INQ_PRF_FLIT7_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_2_INQ_PRF_FLIT7_FILTERING_MASK'} = {
    NAME => 'AR_RTR_3_2_INQ_PRF_FLIT7_FILTERING_MASK',
    LABEL => 'AR_RTR_3_2_INQ_PRF_FLIT7_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_2_INQ_PRF_FLIT7_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_2_INQ_PRF_FLIT7_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_3_2_INQ_PRF_FLIT7_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_3_2_INQ_PRF_FLIT7_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_2_INQ_PRF_FLIT7_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_3_INQ_PRF_FLIT7_FILTERING_MASK'} = {
    NAME => 'AR_RTR_3_3_INQ_PRF_FLIT7_FILTERING_MASK',
    LABEL => 'AR_RTR_3_3_INQ_PRF_FLIT7_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_3_INQ_PRF_FLIT7_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_3_INQ_PRF_FLIT7_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_3_3_INQ_PRF_FLIT7_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_3_3_INQ_PRF_FLIT7_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_3_INQ_PRF_FLIT7_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_4_INQ_PRF_FLIT7_FILTERING_MASK'} = {
    NAME => 'AR_RTR_3_4_INQ_PRF_FLIT7_FILTERING_MASK',
    LABEL => 'AR_RTR_3_4_INQ_PRF_FLIT7_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_4_INQ_PRF_FLIT7_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_4_INQ_PRF_FLIT7_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_3_4_INQ_PRF_FLIT7_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_3_4_INQ_PRF_FLIT7_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_4_INQ_PRF_FLIT7_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_5_INQ_PRF_FLIT7_FILTERING_MASK'} = {
    NAME => 'AR_RTR_3_5_INQ_PRF_FLIT7_FILTERING_MASK',
    LABEL => 'AR_RTR_3_5_INQ_PRF_FLIT7_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_5_INQ_PRF_FLIT7_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_5_INQ_PRF_FLIT7_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_3_5_INQ_PRF_FLIT7_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_3_5_INQ_PRF_FLIT7_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_5_INQ_PRF_FLIT7_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_6_INQ_PRF_FLIT7_FILTERING_MASK'} = {
    NAME => 'AR_RTR_3_6_INQ_PRF_FLIT7_FILTERING_MASK',
    LABEL => 'AR_RTR_3_6_INQ_PRF_FLIT7_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_6_INQ_PRF_FLIT7_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_6_INQ_PRF_FLIT7_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_3_6_INQ_PRF_FLIT7_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_3_6_INQ_PRF_FLIT7_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_6_INQ_PRF_FLIT7_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_7_INQ_PRF_FLIT7_FILTERING_MASK'} = {
    NAME => 'AR_RTR_3_7_INQ_PRF_FLIT7_FILTERING_MASK',
    LABEL => 'AR_RTR_3_7_INQ_PRF_FLIT7_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_7_INQ_PRF_FLIT7_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_7_INQ_PRF_FLIT7_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_3_7_INQ_PRF_FLIT7_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_3_7_INQ_PRF_FLIT7_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_7_INQ_PRF_FLIT7_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_0_INQ_PRF_FLIT7_FILTERING_MASK'} = {
    NAME => 'AR_RTR_4_0_INQ_PRF_FLIT7_FILTERING_MASK',
    LABEL => 'AR_RTR_4_0_INQ_PRF_FLIT7_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_0_INQ_PRF_FLIT7_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_0_INQ_PRF_FLIT7_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_4_0_INQ_PRF_FLIT7_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_4_0_INQ_PRF_FLIT7_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_0_INQ_PRF_FLIT7_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_1_INQ_PRF_FLIT7_FILTERING_MASK'} = {
    NAME => 'AR_RTR_4_1_INQ_PRF_FLIT7_FILTERING_MASK',
    LABEL => 'AR_RTR_4_1_INQ_PRF_FLIT7_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_1_INQ_PRF_FLIT7_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_1_INQ_PRF_FLIT7_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_4_1_INQ_PRF_FLIT7_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_4_1_INQ_PRF_FLIT7_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_1_INQ_PRF_FLIT7_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_2_INQ_PRF_FLIT7_FILTERING_MASK'} = {
    NAME => 'AR_RTR_4_2_INQ_PRF_FLIT7_FILTERING_MASK',
    LABEL => 'AR_RTR_4_2_INQ_PRF_FLIT7_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_2_INQ_PRF_FLIT7_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_2_INQ_PRF_FLIT7_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_4_2_INQ_PRF_FLIT7_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_4_2_INQ_PRF_FLIT7_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_2_INQ_PRF_FLIT7_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_3_INQ_PRF_FLIT7_FILTERING_MASK'} = {
    NAME => 'AR_RTR_4_3_INQ_PRF_FLIT7_FILTERING_MASK',
    LABEL => 'AR_RTR_4_3_INQ_PRF_FLIT7_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_3_INQ_PRF_FLIT7_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_3_INQ_PRF_FLIT7_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_4_3_INQ_PRF_FLIT7_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_4_3_INQ_PRF_FLIT7_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_3_INQ_PRF_FLIT7_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_4_INQ_PRF_FLIT7_FILTERING_MASK'} = {
    NAME => 'AR_RTR_4_4_INQ_PRF_FLIT7_FILTERING_MASK',
    LABEL => 'AR_RTR_4_4_INQ_PRF_FLIT7_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_4_INQ_PRF_FLIT7_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_4_INQ_PRF_FLIT7_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_4_4_INQ_PRF_FLIT7_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_4_4_INQ_PRF_FLIT7_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_4_INQ_PRF_FLIT7_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_5_INQ_PRF_FLIT7_FILTERING_MASK'} = {
    NAME => 'AR_RTR_4_5_INQ_PRF_FLIT7_FILTERING_MASK',
    LABEL => 'AR_RTR_4_5_INQ_PRF_FLIT7_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_5_INQ_PRF_FLIT7_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_5_INQ_PRF_FLIT7_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_4_5_INQ_PRF_FLIT7_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_4_5_INQ_PRF_FLIT7_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_5_INQ_PRF_FLIT7_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_6_INQ_PRF_FLIT7_FILTERING_MASK'} = {
    NAME => 'AR_RTR_4_6_INQ_PRF_FLIT7_FILTERING_MASK',
    LABEL => 'AR_RTR_4_6_INQ_PRF_FLIT7_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_6_INQ_PRF_FLIT7_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_6_INQ_PRF_FLIT7_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_4_6_INQ_PRF_FLIT7_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_4_6_INQ_PRF_FLIT7_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_6_INQ_PRF_FLIT7_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_7_INQ_PRF_FLIT7_FILTERING_MASK'} = {
    NAME => 'AR_RTR_4_7_INQ_PRF_FLIT7_FILTERING_MASK',
    LABEL => 'AR_RTR_4_7_INQ_PRF_FLIT7_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_7_INQ_PRF_FLIT7_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_7_INQ_PRF_FLIT7_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_4_7_INQ_PRF_FLIT7_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_4_7_INQ_PRF_FLIT7_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare in mode 0 and mode 1 operations',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_7_INQ_PRF_FLIT7_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_0_INQ_PRF_INCOMING_PKT_VC0_FILTER_FLIT0_CNT'} = {
    NAME => 'AR_RTR_0_0_INQ_PRF_INCOMING_PKT_VC0_FILTER_FLIT0_CNT',
    LABEL => 'AR_RTR_0_0_INQ_PRF_INCOMING_PKT_VC0_FILTER_FLIT0_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT0_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_0_INQ_PRF_INCOMING_PKT_VC0_FILTER_FLIT0_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_1_INQ_PRF_INCOMING_PKT_VC0_FILTER_FLIT0_CNT'} = {
    NAME => 'AR_RTR_0_1_INQ_PRF_INCOMING_PKT_VC0_FILTER_FLIT0_CNT',
    LABEL => 'AR_RTR_0_1_INQ_PRF_INCOMING_PKT_VC0_FILTER_FLIT0_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT0_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_1_INQ_PRF_INCOMING_PKT_VC0_FILTER_FLIT0_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_2_INQ_PRF_INCOMING_PKT_VC0_FILTER_FLIT0_CNT'} = {
    NAME => 'AR_RTR_0_2_INQ_PRF_INCOMING_PKT_VC0_FILTER_FLIT0_CNT',
    LABEL => 'AR_RTR_0_2_INQ_PRF_INCOMING_PKT_VC0_FILTER_FLIT0_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT0_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_2_INQ_PRF_INCOMING_PKT_VC0_FILTER_FLIT0_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_3_INQ_PRF_INCOMING_PKT_VC0_FILTER_FLIT0_CNT'} = {
    NAME => 'AR_RTR_0_3_INQ_PRF_INCOMING_PKT_VC0_FILTER_FLIT0_CNT',
    LABEL => 'AR_RTR_0_3_INQ_PRF_INCOMING_PKT_VC0_FILTER_FLIT0_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT0_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_3_INQ_PRF_INCOMING_PKT_VC0_FILTER_FLIT0_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_4_INQ_PRF_INCOMING_PKT_VC0_FILTER_FLIT0_CNT'} = {
    NAME => 'AR_RTR_0_4_INQ_PRF_INCOMING_PKT_VC0_FILTER_FLIT0_CNT',
    LABEL => 'AR_RTR_0_4_INQ_PRF_INCOMING_PKT_VC0_FILTER_FLIT0_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT0_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_4_INQ_PRF_INCOMING_PKT_VC0_FILTER_FLIT0_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_5_INQ_PRF_INCOMING_PKT_VC0_FILTER_FLIT0_CNT'} = {
    NAME => 'AR_RTR_0_5_INQ_PRF_INCOMING_PKT_VC0_FILTER_FLIT0_CNT',
    LABEL => 'AR_RTR_0_5_INQ_PRF_INCOMING_PKT_VC0_FILTER_FLIT0_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT0_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_5_INQ_PRF_INCOMING_PKT_VC0_FILTER_FLIT0_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_6_INQ_PRF_INCOMING_PKT_VC0_FILTER_FLIT0_CNT'} = {
    NAME => 'AR_RTR_0_6_INQ_PRF_INCOMING_PKT_VC0_FILTER_FLIT0_CNT',
    LABEL => 'AR_RTR_0_6_INQ_PRF_INCOMING_PKT_VC0_FILTER_FLIT0_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT0_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_6_INQ_PRF_INCOMING_PKT_VC0_FILTER_FLIT0_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_7_INQ_PRF_INCOMING_PKT_VC0_FILTER_FLIT0_CNT'} = {
    NAME => 'AR_RTR_0_7_INQ_PRF_INCOMING_PKT_VC0_FILTER_FLIT0_CNT',
    LABEL => 'AR_RTR_0_7_INQ_PRF_INCOMING_PKT_VC0_FILTER_FLIT0_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT0_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_7_INQ_PRF_INCOMING_PKT_VC0_FILTER_FLIT0_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_0_INQ_PRF_INCOMING_PKT_VC0_FILTER_FLIT0_CNT'} = {
    NAME => 'AR_RTR_1_0_INQ_PRF_INCOMING_PKT_VC0_FILTER_FLIT0_CNT',
    LABEL => 'AR_RTR_1_0_INQ_PRF_INCOMING_PKT_VC0_FILTER_FLIT0_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT0_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_0_INQ_PRF_INCOMING_PKT_VC0_FILTER_FLIT0_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_1_INQ_PRF_INCOMING_PKT_VC0_FILTER_FLIT0_CNT'} = {
    NAME => 'AR_RTR_1_1_INQ_PRF_INCOMING_PKT_VC0_FILTER_FLIT0_CNT',
    LABEL => 'AR_RTR_1_1_INQ_PRF_INCOMING_PKT_VC0_FILTER_FLIT0_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT0_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_1_INQ_PRF_INCOMING_PKT_VC0_FILTER_FLIT0_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_2_INQ_PRF_INCOMING_PKT_VC0_FILTER_FLIT0_CNT'} = {
    NAME => 'AR_RTR_1_2_INQ_PRF_INCOMING_PKT_VC0_FILTER_FLIT0_CNT',
    LABEL => 'AR_RTR_1_2_INQ_PRF_INCOMING_PKT_VC0_FILTER_FLIT0_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT0_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_2_INQ_PRF_INCOMING_PKT_VC0_FILTER_FLIT0_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_3_INQ_PRF_INCOMING_PKT_VC0_FILTER_FLIT0_CNT'} = {
    NAME => 'AR_RTR_1_3_INQ_PRF_INCOMING_PKT_VC0_FILTER_FLIT0_CNT',
    LABEL => 'AR_RTR_1_3_INQ_PRF_INCOMING_PKT_VC0_FILTER_FLIT0_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT0_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_3_INQ_PRF_INCOMING_PKT_VC0_FILTER_FLIT0_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_4_INQ_PRF_INCOMING_PKT_VC0_FILTER_FLIT0_CNT'} = {
    NAME => 'AR_RTR_1_4_INQ_PRF_INCOMING_PKT_VC0_FILTER_FLIT0_CNT',
    LABEL => 'AR_RTR_1_4_INQ_PRF_INCOMING_PKT_VC0_FILTER_FLIT0_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT0_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_4_INQ_PRF_INCOMING_PKT_VC0_FILTER_FLIT0_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_5_INQ_PRF_INCOMING_PKT_VC0_FILTER_FLIT0_CNT'} = {
    NAME => 'AR_RTR_1_5_INQ_PRF_INCOMING_PKT_VC0_FILTER_FLIT0_CNT',
    LABEL => 'AR_RTR_1_5_INQ_PRF_INCOMING_PKT_VC0_FILTER_FLIT0_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT0_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_5_INQ_PRF_INCOMING_PKT_VC0_FILTER_FLIT0_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_6_INQ_PRF_INCOMING_PKT_VC0_FILTER_FLIT0_CNT'} = {
    NAME => 'AR_RTR_1_6_INQ_PRF_INCOMING_PKT_VC0_FILTER_FLIT0_CNT',
    LABEL => 'AR_RTR_1_6_INQ_PRF_INCOMING_PKT_VC0_FILTER_FLIT0_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT0_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_6_INQ_PRF_INCOMING_PKT_VC0_FILTER_FLIT0_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_7_INQ_PRF_INCOMING_PKT_VC0_FILTER_FLIT0_CNT'} = {
    NAME => 'AR_RTR_1_7_INQ_PRF_INCOMING_PKT_VC0_FILTER_FLIT0_CNT',
    LABEL => 'AR_RTR_1_7_INQ_PRF_INCOMING_PKT_VC0_FILTER_FLIT0_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT0_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_7_INQ_PRF_INCOMING_PKT_VC0_FILTER_FLIT0_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_0_INQ_PRF_INCOMING_PKT_VC0_FILTER_FLIT0_CNT'} = {
    NAME => 'AR_RTR_2_0_INQ_PRF_INCOMING_PKT_VC0_FILTER_FLIT0_CNT',
    LABEL => 'AR_RTR_2_0_INQ_PRF_INCOMING_PKT_VC0_FILTER_FLIT0_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT0_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_0_INQ_PRF_INCOMING_PKT_VC0_FILTER_FLIT0_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_1_INQ_PRF_INCOMING_PKT_VC0_FILTER_FLIT0_CNT'} = {
    NAME => 'AR_RTR_2_1_INQ_PRF_INCOMING_PKT_VC0_FILTER_FLIT0_CNT',
    LABEL => 'AR_RTR_2_1_INQ_PRF_INCOMING_PKT_VC0_FILTER_FLIT0_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT0_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_1_INQ_PRF_INCOMING_PKT_VC0_FILTER_FLIT0_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_2_INQ_PRF_INCOMING_PKT_VC0_FILTER_FLIT0_CNT'} = {
    NAME => 'AR_RTR_2_2_INQ_PRF_INCOMING_PKT_VC0_FILTER_FLIT0_CNT',
    LABEL => 'AR_RTR_2_2_INQ_PRF_INCOMING_PKT_VC0_FILTER_FLIT0_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT0_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_2_INQ_PRF_INCOMING_PKT_VC0_FILTER_FLIT0_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_3_INQ_PRF_INCOMING_PKT_VC0_FILTER_FLIT0_CNT'} = {
    NAME => 'AR_RTR_2_3_INQ_PRF_INCOMING_PKT_VC0_FILTER_FLIT0_CNT',
    LABEL => 'AR_RTR_2_3_INQ_PRF_INCOMING_PKT_VC0_FILTER_FLIT0_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT0_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_3_INQ_PRF_INCOMING_PKT_VC0_FILTER_FLIT0_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_4_INQ_PRF_INCOMING_PKT_VC0_FILTER_FLIT0_CNT'} = {
    NAME => 'AR_RTR_2_4_INQ_PRF_INCOMING_PKT_VC0_FILTER_FLIT0_CNT',
    LABEL => 'AR_RTR_2_4_INQ_PRF_INCOMING_PKT_VC0_FILTER_FLIT0_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT0_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_4_INQ_PRF_INCOMING_PKT_VC0_FILTER_FLIT0_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_5_INQ_PRF_INCOMING_PKT_VC0_FILTER_FLIT0_CNT'} = {
    NAME => 'AR_RTR_2_5_INQ_PRF_INCOMING_PKT_VC0_FILTER_FLIT0_CNT',
    LABEL => 'AR_RTR_2_5_INQ_PRF_INCOMING_PKT_VC0_FILTER_FLIT0_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT0_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_5_INQ_PRF_INCOMING_PKT_VC0_FILTER_FLIT0_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_6_INQ_PRF_INCOMING_PKT_VC0_FILTER_FLIT0_CNT'} = {
    NAME => 'AR_RTR_2_6_INQ_PRF_INCOMING_PKT_VC0_FILTER_FLIT0_CNT',
    LABEL => 'AR_RTR_2_6_INQ_PRF_INCOMING_PKT_VC0_FILTER_FLIT0_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT0_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_6_INQ_PRF_INCOMING_PKT_VC0_FILTER_FLIT0_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_7_INQ_PRF_INCOMING_PKT_VC0_FILTER_FLIT0_CNT'} = {
    NAME => 'AR_RTR_2_7_INQ_PRF_INCOMING_PKT_VC0_FILTER_FLIT0_CNT',
    LABEL => 'AR_RTR_2_7_INQ_PRF_INCOMING_PKT_VC0_FILTER_FLIT0_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT0_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_7_INQ_PRF_INCOMING_PKT_VC0_FILTER_FLIT0_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_0_INQ_PRF_INCOMING_PKT_VC0_FILTER_FLIT0_CNT'} = {
    NAME => 'AR_RTR_3_0_INQ_PRF_INCOMING_PKT_VC0_FILTER_FLIT0_CNT',
    LABEL => 'AR_RTR_3_0_INQ_PRF_INCOMING_PKT_VC0_FILTER_FLIT0_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT0_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_0_INQ_PRF_INCOMING_PKT_VC0_FILTER_FLIT0_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_1_INQ_PRF_INCOMING_PKT_VC0_FILTER_FLIT0_CNT'} = {
    NAME => 'AR_RTR_3_1_INQ_PRF_INCOMING_PKT_VC0_FILTER_FLIT0_CNT',
    LABEL => 'AR_RTR_3_1_INQ_PRF_INCOMING_PKT_VC0_FILTER_FLIT0_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT0_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_1_INQ_PRF_INCOMING_PKT_VC0_FILTER_FLIT0_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_2_INQ_PRF_INCOMING_PKT_VC0_FILTER_FLIT0_CNT'} = {
    NAME => 'AR_RTR_3_2_INQ_PRF_INCOMING_PKT_VC0_FILTER_FLIT0_CNT',
    LABEL => 'AR_RTR_3_2_INQ_PRF_INCOMING_PKT_VC0_FILTER_FLIT0_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT0_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_2_INQ_PRF_INCOMING_PKT_VC0_FILTER_FLIT0_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_3_INQ_PRF_INCOMING_PKT_VC0_FILTER_FLIT0_CNT'} = {
    NAME => 'AR_RTR_3_3_INQ_PRF_INCOMING_PKT_VC0_FILTER_FLIT0_CNT',
    LABEL => 'AR_RTR_3_3_INQ_PRF_INCOMING_PKT_VC0_FILTER_FLIT0_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT0_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_3_INQ_PRF_INCOMING_PKT_VC0_FILTER_FLIT0_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_4_INQ_PRF_INCOMING_PKT_VC0_FILTER_FLIT0_CNT'} = {
    NAME => 'AR_RTR_3_4_INQ_PRF_INCOMING_PKT_VC0_FILTER_FLIT0_CNT',
    LABEL => 'AR_RTR_3_4_INQ_PRF_INCOMING_PKT_VC0_FILTER_FLIT0_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT0_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_4_INQ_PRF_INCOMING_PKT_VC0_FILTER_FLIT0_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_5_INQ_PRF_INCOMING_PKT_VC0_FILTER_FLIT0_CNT'} = {
    NAME => 'AR_RTR_3_5_INQ_PRF_INCOMING_PKT_VC0_FILTER_FLIT0_CNT',
    LABEL => 'AR_RTR_3_5_INQ_PRF_INCOMING_PKT_VC0_FILTER_FLIT0_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT0_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_5_INQ_PRF_INCOMING_PKT_VC0_FILTER_FLIT0_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_6_INQ_PRF_INCOMING_PKT_VC0_FILTER_FLIT0_CNT'} = {
    NAME => 'AR_RTR_3_6_INQ_PRF_INCOMING_PKT_VC0_FILTER_FLIT0_CNT',
    LABEL => 'AR_RTR_3_6_INQ_PRF_INCOMING_PKT_VC0_FILTER_FLIT0_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT0_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_6_INQ_PRF_INCOMING_PKT_VC0_FILTER_FLIT0_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_7_INQ_PRF_INCOMING_PKT_VC0_FILTER_FLIT0_CNT'} = {
    NAME => 'AR_RTR_3_7_INQ_PRF_INCOMING_PKT_VC0_FILTER_FLIT0_CNT',
    LABEL => 'AR_RTR_3_7_INQ_PRF_INCOMING_PKT_VC0_FILTER_FLIT0_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT0_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_7_INQ_PRF_INCOMING_PKT_VC0_FILTER_FLIT0_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_0_INQ_PRF_INCOMING_PKT_VC0_FILTER_FLIT0_CNT'} = {
    NAME => 'AR_RTR_4_0_INQ_PRF_INCOMING_PKT_VC0_FILTER_FLIT0_CNT',
    LABEL => 'AR_RTR_4_0_INQ_PRF_INCOMING_PKT_VC0_FILTER_FLIT0_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT0_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_0_INQ_PRF_INCOMING_PKT_VC0_FILTER_FLIT0_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_1_INQ_PRF_INCOMING_PKT_VC0_FILTER_FLIT0_CNT'} = {
    NAME => 'AR_RTR_4_1_INQ_PRF_INCOMING_PKT_VC0_FILTER_FLIT0_CNT',
    LABEL => 'AR_RTR_4_1_INQ_PRF_INCOMING_PKT_VC0_FILTER_FLIT0_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT0_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_1_INQ_PRF_INCOMING_PKT_VC0_FILTER_FLIT0_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_2_INQ_PRF_INCOMING_PKT_VC0_FILTER_FLIT0_CNT'} = {
    NAME => 'AR_RTR_4_2_INQ_PRF_INCOMING_PKT_VC0_FILTER_FLIT0_CNT',
    LABEL => 'AR_RTR_4_2_INQ_PRF_INCOMING_PKT_VC0_FILTER_FLIT0_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT0_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_2_INQ_PRF_INCOMING_PKT_VC0_FILTER_FLIT0_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_3_INQ_PRF_INCOMING_PKT_VC0_FILTER_FLIT0_CNT'} = {
    NAME => 'AR_RTR_4_3_INQ_PRF_INCOMING_PKT_VC0_FILTER_FLIT0_CNT',
    LABEL => 'AR_RTR_4_3_INQ_PRF_INCOMING_PKT_VC0_FILTER_FLIT0_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT0_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_3_INQ_PRF_INCOMING_PKT_VC0_FILTER_FLIT0_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_4_INQ_PRF_INCOMING_PKT_VC0_FILTER_FLIT0_CNT'} = {
    NAME => 'AR_RTR_4_4_INQ_PRF_INCOMING_PKT_VC0_FILTER_FLIT0_CNT',
    LABEL => 'AR_RTR_4_4_INQ_PRF_INCOMING_PKT_VC0_FILTER_FLIT0_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT0_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_4_INQ_PRF_INCOMING_PKT_VC0_FILTER_FLIT0_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_5_INQ_PRF_INCOMING_PKT_VC0_FILTER_FLIT0_CNT'} = {
    NAME => 'AR_RTR_4_5_INQ_PRF_INCOMING_PKT_VC0_FILTER_FLIT0_CNT',
    LABEL => 'AR_RTR_4_5_INQ_PRF_INCOMING_PKT_VC0_FILTER_FLIT0_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT0_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_5_INQ_PRF_INCOMING_PKT_VC0_FILTER_FLIT0_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_6_INQ_PRF_INCOMING_PKT_VC0_FILTER_FLIT0_CNT'} = {
    NAME => 'AR_RTR_4_6_INQ_PRF_INCOMING_PKT_VC0_FILTER_FLIT0_CNT',
    LABEL => 'AR_RTR_4_6_INQ_PRF_INCOMING_PKT_VC0_FILTER_FLIT0_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT0_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_6_INQ_PRF_INCOMING_PKT_VC0_FILTER_FLIT0_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_7_INQ_PRF_INCOMING_PKT_VC0_FILTER_FLIT0_CNT'} = {
    NAME => 'AR_RTR_4_7_INQ_PRF_INCOMING_PKT_VC0_FILTER_FLIT0_CNT',
    LABEL => 'AR_RTR_4_7_INQ_PRF_INCOMING_PKT_VC0_FILTER_FLIT0_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT0_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_7_INQ_PRF_INCOMING_PKT_VC0_FILTER_FLIT0_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_0_INQ_PRF_INCOMING_PKT_VC1_FILTER_FLIT1_CNT'} = {
    NAME => 'AR_RTR_0_0_INQ_PRF_INCOMING_PKT_VC1_FILTER_FLIT1_CNT',
    LABEL => 'AR_RTR_0_0_INQ_PRF_INCOMING_PKT_VC1_FILTER_FLIT1_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT1_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_0_INQ_PRF_INCOMING_PKT_VC1_FILTER_FLIT1_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_1_INQ_PRF_INCOMING_PKT_VC1_FILTER_FLIT1_CNT'} = {
    NAME => 'AR_RTR_0_1_INQ_PRF_INCOMING_PKT_VC1_FILTER_FLIT1_CNT',
    LABEL => 'AR_RTR_0_1_INQ_PRF_INCOMING_PKT_VC1_FILTER_FLIT1_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT1_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_1_INQ_PRF_INCOMING_PKT_VC1_FILTER_FLIT1_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_2_INQ_PRF_INCOMING_PKT_VC1_FILTER_FLIT1_CNT'} = {
    NAME => 'AR_RTR_0_2_INQ_PRF_INCOMING_PKT_VC1_FILTER_FLIT1_CNT',
    LABEL => 'AR_RTR_0_2_INQ_PRF_INCOMING_PKT_VC1_FILTER_FLIT1_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT1_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_2_INQ_PRF_INCOMING_PKT_VC1_FILTER_FLIT1_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_3_INQ_PRF_INCOMING_PKT_VC1_FILTER_FLIT1_CNT'} = {
    NAME => 'AR_RTR_0_3_INQ_PRF_INCOMING_PKT_VC1_FILTER_FLIT1_CNT',
    LABEL => 'AR_RTR_0_3_INQ_PRF_INCOMING_PKT_VC1_FILTER_FLIT1_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT1_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_3_INQ_PRF_INCOMING_PKT_VC1_FILTER_FLIT1_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_4_INQ_PRF_INCOMING_PKT_VC1_FILTER_FLIT1_CNT'} = {
    NAME => 'AR_RTR_0_4_INQ_PRF_INCOMING_PKT_VC1_FILTER_FLIT1_CNT',
    LABEL => 'AR_RTR_0_4_INQ_PRF_INCOMING_PKT_VC1_FILTER_FLIT1_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT1_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_4_INQ_PRF_INCOMING_PKT_VC1_FILTER_FLIT1_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_5_INQ_PRF_INCOMING_PKT_VC1_FILTER_FLIT1_CNT'} = {
    NAME => 'AR_RTR_0_5_INQ_PRF_INCOMING_PKT_VC1_FILTER_FLIT1_CNT',
    LABEL => 'AR_RTR_0_5_INQ_PRF_INCOMING_PKT_VC1_FILTER_FLIT1_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT1_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_5_INQ_PRF_INCOMING_PKT_VC1_FILTER_FLIT1_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_6_INQ_PRF_INCOMING_PKT_VC1_FILTER_FLIT1_CNT'} = {
    NAME => 'AR_RTR_0_6_INQ_PRF_INCOMING_PKT_VC1_FILTER_FLIT1_CNT',
    LABEL => 'AR_RTR_0_6_INQ_PRF_INCOMING_PKT_VC1_FILTER_FLIT1_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT1_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_6_INQ_PRF_INCOMING_PKT_VC1_FILTER_FLIT1_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_7_INQ_PRF_INCOMING_PKT_VC1_FILTER_FLIT1_CNT'} = {
    NAME => 'AR_RTR_0_7_INQ_PRF_INCOMING_PKT_VC1_FILTER_FLIT1_CNT',
    LABEL => 'AR_RTR_0_7_INQ_PRF_INCOMING_PKT_VC1_FILTER_FLIT1_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT1_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_7_INQ_PRF_INCOMING_PKT_VC1_FILTER_FLIT1_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_0_INQ_PRF_INCOMING_PKT_VC1_FILTER_FLIT1_CNT'} = {
    NAME => 'AR_RTR_1_0_INQ_PRF_INCOMING_PKT_VC1_FILTER_FLIT1_CNT',
    LABEL => 'AR_RTR_1_0_INQ_PRF_INCOMING_PKT_VC1_FILTER_FLIT1_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT1_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_0_INQ_PRF_INCOMING_PKT_VC1_FILTER_FLIT1_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_1_INQ_PRF_INCOMING_PKT_VC1_FILTER_FLIT1_CNT'} = {
    NAME => 'AR_RTR_1_1_INQ_PRF_INCOMING_PKT_VC1_FILTER_FLIT1_CNT',
    LABEL => 'AR_RTR_1_1_INQ_PRF_INCOMING_PKT_VC1_FILTER_FLIT1_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT1_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_1_INQ_PRF_INCOMING_PKT_VC1_FILTER_FLIT1_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_2_INQ_PRF_INCOMING_PKT_VC1_FILTER_FLIT1_CNT'} = {
    NAME => 'AR_RTR_1_2_INQ_PRF_INCOMING_PKT_VC1_FILTER_FLIT1_CNT',
    LABEL => 'AR_RTR_1_2_INQ_PRF_INCOMING_PKT_VC1_FILTER_FLIT1_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT1_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_2_INQ_PRF_INCOMING_PKT_VC1_FILTER_FLIT1_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_3_INQ_PRF_INCOMING_PKT_VC1_FILTER_FLIT1_CNT'} = {
    NAME => 'AR_RTR_1_3_INQ_PRF_INCOMING_PKT_VC1_FILTER_FLIT1_CNT',
    LABEL => 'AR_RTR_1_3_INQ_PRF_INCOMING_PKT_VC1_FILTER_FLIT1_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT1_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_3_INQ_PRF_INCOMING_PKT_VC1_FILTER_FLIT1_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_4_INQ_PRF_INCOMING_PKT_VC1_FILTER_FLIT1_CNT'} = {
    NAME => 'AR_RTR_1_4_INQ_PRF_INCOMING_PKT_VC1_FILTER_FLIT1_CNT',
    LABEL => 'AR_RTR_1_4_INQ_PRF_INCOMING_PKT_VC1_FILTER_FLIT1_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT1_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_4_INQ_PRF_INCOMING_PKT_VC1_FILTER_FLIT1_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_5_INQ_PRF_INCOMING_PKT_VC1_FILTER_FLIT1_CNT'} = {
    NAME => 'AR_RTR_1_5_INQ_PRF_INCOMING_PKT_VC1_FILTER_FLIT1_CNT',
    LABEL => 'AR_RTR_1_5_INQ_PRF_INCOMING_PKT_VC1_FILTER_FLIT1_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT1_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_5_INQ_PRF_INCOMING_PKT_VC1_FILTER_FLIT1_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_6_INQ_PRF_INCOMING_PKT_VC1_FILTER_FLIT1_CNT'} = {
    NAME => 'AR_RTR_1_6_INQ_PRF_INCOMING_PKT_VC1_FILTER_FLIT1_CNT',
    LABEL => 'AR_RTR_1_6_INQ_PRF_INCOMING_PKT_VC1_FILTER_FLIT1_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT1_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_6_INQ_PRF_INCOMING_PKT_VC1_FILTER_FLIT1_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_7_INQ_PRF_INCOMING_PKT_VC1_FILTER_FLIT1_CNT'} = {
    NAME => 'AR_RTR_1_7_INQ_PRF_INCOMING_PKT_VC1_FILTER_FLIT1_CNT',
    LABEL => 'AR_RTR_1_7_INQ_PRF_INCOMING_PKT_VC1_FILTER_FLIT1_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT1_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_7_INQ_PRF_INCOMING_PKT_VC1_FILTER_FLIT1_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_0_INQ_PRF_INCOMING_PKT_VC1_FILTER_FLIT1_CNT'} = {
    NAME => 'AR_RTR_2_0_INQ_PRF_INCOMING_PKT_VC1_FILTER_FLIT1_CNT',
    LABEL => 'AR_RTR_2_0_INQ_PRF_INCOMING_PKT_VC1_FILTER_FLIT1_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT1_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_0_INQ_PRF_INCOMING_PKT_VC1_FILTER_FLIT1_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_1_INQ_PRF_INCOMING_PKT_VC1_FILTER_FLIT1_CNT'} = {
    NAME => 'AR_RTR_2_1_INQ_PRF_INCOMING_PKT_VC1_FILTER_FLIT1_CNT',
    LABEL => 'AR_RTR_2_1_INQ_PRF_INCOMING_PKT_VC1_FILTER_FLIT1_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT1_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_1_INQ_PRF_INCOMING_PKT_VC1_FILTER_FLIT1_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_2_INQ_PRF_INCOMING_PKT_VC1_FILTER_FLIT1_CNT'} = {
    NAME => 'AR_RTR_2_2_INQ_PRF_INCOMING_PKT_VC1_FILTER_FLIT1_CNT',
    LABEL => 'AR_RTR_2_2_INQ_PRF_INCOMING_PKT_VC1_FILTER_FLIT1_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT1_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_2_INQ_PRF_INCOMING_PKT_VC1_FILTER_FLIT1_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_3_INQ_PRF_INCOMING_PKT_VC1_FILTER_FLIT1_CNT'} = {
    NAME => 'AR_RTR_2_3_INQ_PRF_INCOMING_PKT_VC1_FILTER_FLIT1_CNT',
    LABEL => 'AR_RTR_2_3_INQ_PRF_INCOMING_PKT_VC1_FILTER_FLIT1_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT1_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_3_INQ_PRF_INCOMING_PKT_VC1_FILTER_FLIT1_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_4_INQ_PRF_INCOMING_PKT_VC1_FILTER_FLIT1_CNT'} = {
    NAME => 'AR_RTR_2_4_INQ_PRF_INCOMING_PKT_VC1_FILTER_FLIT1_CNT',
    LABEL => 'AR_RTR_2_4_INQ_PRF_INCOMING_PKT_VC1_FILTER_FLIT1_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT1_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_4_INQ_PRF_INCOMING_PKT_VC1_FILTER_FLIT1_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_5_INQ_PRF_INCOMING_PKT_VC1_FILTER_FLIT1_CNT'} = {
    NAME => 'AR_RTR_2_5_INQ_PRF_INCOMING_PKT_VC1_FILTER_FLIT1_CNT',
    LABEL => 'AR_RTR_2_5_INQ_PRF_INCOMING_PKT_VC1_FILTER_FLIT1_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT1_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_5_INQ_PRF_INCOMING_PKT_VC1_FILTER_FLIT1_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_6_INQ_PRF_INCOMING_PKT_VC1_FILTER_FLIT1_CNT'} = {
    NAME => 'AR_RTR_2_6_INQ_PRF_INCOMING_PKT_VC1_FILTER_FLIT1_CNT',
    LABEL => 'AR_RTR_2_6_INQ_PRF_INCOMING_PKT_VC1_FILTER_FLIT1_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT1_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_6_INQ_PRF_INCOMING_PKT_VC1_FILTER_FLIT1_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_7_INQ_PRF_INCOMING_PKT_VC1_FILTER_FLIT1_CNT'} = {
    NAME => 'AR_RTR_2_7_INQ_PRF_INCOMING_PKT_VC1_FILTER_FLIT1_CNT',
    LABEL => 'AR_RTR_2_7_INQ_PRF_INCOMING_PKT_VC1_FILTER_FLIT1_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT1_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_7_INQ_PRF_INCOMING_PKT_VC1_FILTER_FLIT1_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_0_INQ_PRF_INCOMING_PKT_VC1_FILTER_FLIT1_CNT'} = {
    NAME => 'AR_RTR_3_0_INQ_PRF_INCOMING_PKT_VC1_FILTER_FLIT1_CNT',
    LABEL => 'AR_RTR_3_0_INQ_PRF_INCOMING_PKT_VC1_FILTER_FLIT1_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT1_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_0_INQ_PRF_INCOMING_PKT_VC1_FILTER_FLIT1_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_1_INQ_PRF_INCOMING_PKT_VC1_FILTER_FLIT1_CNT'} = {
    NAME => 'AR_RTR_3_1_INQ_PRF_INCOMING_PKT_VC1_FILTER_FLIT1_CNT',
    LABEL => 'AR_RTR_3_1_INQ_PRF_INCOMING_PKT_VC1_FILTER_FLIT1_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT1_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_1_INQ_PRF_INCOMING_PKT_VC1_FILTER_FLIT1_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_2_INQ_PRF_INCOMING_PKT_VC1_FILTER_FLIT1_CNT'} = {
    NAME => 'AR_RTR_3_2_INQ_PRF_INCOMING_PKT_VC1_FILTER_FLIT1_CNT',
    LABEL => 'AR_RTR_3_2_INQ_PRF_INCOMING_PKT_VC1_FILTER_FLIT1_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT1_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_2_INQ_PRF_INCOMING_PKT_VC1_FILTER_FLIT1_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_3_INQ_PRF_INCOMING_PKT_VC1_FILTER_FLIT1_CNT'} = {
    NAME => 'AR_RTR_3_3_INQ_PRF_INCOMING_PKT_VC1_FILTER_FLIT1_CNT',
    LABEL => 'AR_RTR_3_3_INQ_PRF_INCOMING_PKT_VC1_FILTER_FLIT1_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT1_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_3_INQ_PRF_INCOMING_PKT_VC1_FILTER_FLIT1_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_4_INQ_PRF_INCOMING_PKT_VC1_FILTER_FLIT1_CNT'} = {
    NAME => 'AR_RTR_3_4_INQ_PRF_INCOMING_PKT_VC1_FILTER_FLIT1_CNT',
    LABEL => 'AR_RTR_3_4_INQ_PRF_INCOMING_PKT_VC1_FILTER_FLIT1_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT1_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_4_INQ_PRF_INCOMING_PKT_VC1_FILTER_FLIT1_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_5_INQ_PRF_INCOMING_PKT_VC1_FILTER_FLIT1_CNT'} = {
    NAME => 'AR_RTR_3_5_INQ_PRF_INCOMING_PKT_VC1_FILTER_FLIT1_CNT',
    LABEL => 'AR_RTR_3_5_INQ_PRF_INCOMING_PKT_VC1_FILTER_FLIT1_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT1_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_5_INQ_PRF_INCOMING_PKT_VC1_FILTER_FLIT1_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_6_INQ_PRF_INCOMING_PKT_VC1_FILTER_FLIT1_CNT'} = {
    NAME => 'AR_RTR_3_6_INQ_PRF_INCOMING_PKT_VC1_FILTER_FLIT1_CNT',
    LABEL => 'AR_RTR_3_6_INQ_PRF_INCOMING_PKT_VC1_FILTER_FLIT1_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT1_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_6_INQ_PRF_INCOMING_PKT_VC1_FILTER_FLIT1_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_7_INQ_PRF_INCOMING_PKT_VC1_FILTER_FLIT1_CNT'} = {
    NAME => 'AR_RTR_3_7_INQ_PRF_INCOMING_PKT_VC1_FILTER_FLIT1_CNT',
    LABEL => 'AR_RTR_3_7_INQ_PRF_INCOMING_PKT_VC1_FILTER_FLIT1_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT1_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_7_INQ_PRF_INCOMING_PKT_VC1_FILTER_FLIT1_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_0_INQ_PRF_INCOMING_PKT_VC1_FILTER_FLIT1_CNT'} = {
    NAME => 'AR_RTR_4_0_INQ_PRF_INCOMING_PKT_VC1_FILTER_FLIT1_CNT',
    LABEL => 'AR_RTR_4_0_INQ_PRF_INCOMING_PKT_VC1_FILTER_FLIT1_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT1_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_0_INQ_PRF_INCOMING_PKT_VC1_FILTER_FLIT1_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_1_INQ_PRF_INCOMING_PKT_VC1_FILTER_FLIT1_CNT'} = {
    NAME => 'AR_RTR_4_1_INQ_PRF_INCOMING_PKT_VC1_FILTER_FLIT1_CNT',
    LABEL => 'AR_RTR_4_1_INQ_PRF_INCOMING_PKT_VC1_FILTER_FLIT1_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT1_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_1_INQ_PRF_INCOMING_PKT_VC1_FILTER_FLIT1_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_2_INQ_PRF_INCOMING_PKT_VC1_FILTER_FLIT1_CNT'} = {
    NAME => 'AR_RTR_4_2_INQ_PRF_INCOMING_PKT_VC1_FILTER_FLIT1_CNT',
    LABEL => 'AR_RTR_4_2_INQ_PRF_INCOMING_PKT_VC1_FILTER_FLIT1_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT1_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_2_INQ_PRF_INCOMING_PKT_VC1_FILTER_FLIT1_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_3_INQ_PRF_INCOMING_PKT_VC1_FILTER_FLIT1_CNT'} = {
    NAME => 'AR_RTR_4_3_INQ_PRF_INCOMING_PKT_VC1_FILTER_FLIT1_CNT',
    LABEL => 'AR_RTR_4_3_INQ_PRF_INCOMING_PKT_VC1_FILTER_FLIT1_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT1_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_3_INQ_PRF_INCOMING_PKT_VC1_FILTER_FLIT1_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_4_INQ_PRF_INCOMING_PKT_VC1_FILTER_FLIT1_CNT'} = {
    NAME => 'AR_RTR_4_4_INQ_PRF_INCOMING_PKT_VC1_FILTER_FLIT1_CNT',
    LABEL => 'AR_RTR_4_4_INQ_PRF_INCOMING_PKT_VC1_FILTER_FLIT1_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT1_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_4_INQ_PRF_INCOMING_PKT_VC1_FILTER_FLIT1_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_5_INQ_PRF_INCOMING_PKT_VC1_FILTER_FLIT1_CNT'} = {
    NAME => 'AR_RTR_4_5_INQ_PRF_INCOMING_PKT_VC1_FILTER_FLIT1_CNT',
    LABEL => 'AR_RTR_4_5_INQ_PRF_INCOMING_PKT_VC1_FILTER_FLIT1_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT1_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_5_INQ_PRF_INCOMING_PKT_VC1_FILTER_FLIT1_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_6_INQ_PRF_INCOMING_PKT_VC1_FILTER_FLIT1_CNT'} = {
    NAME => 'AR_RTR_4_6_INQ_PRF_INCOMING_PKT_VC1_FILTER_FLIT1_CNT',
    LABEL => 'AR_RTR_4_6_INQ_PRF_INCOMING_PKT_VC1_FILTER_FLIT1_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT1_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_6_INQ_PRF_INCOMING_PKT_VC1_FILTER_FLIT1_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_7_INQ_PRF_INCOMING_PKT_VC1_FILTER_FLIT1_CNT'} = {
    NAME => 'AR_RTR_4_7_INQ_PRF_INCOMING_PKT_VC1_FILTER_FLIT1_CNT',
    LABEL => 'AR_RTR_4_7_INQ_PRF_INCOMING_PKT_VC1_FILTER_FLIT1_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT1_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_7_INQ_PRF_INCOMING_PKT_VC1_FILTER_FLIT1_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_0_INQ_PRF_INCOMING_PKT_VC2_FILTER_FLIT2_CNT'} = {
    NAME => 'AR_RTR_0_0_INQ_PRF_INCOMING_PKT_VC2_FILTER_FLIT2_CNT',
    LABEL => 'AR_RTR_0_0_INQ_PRF_INCOMING_PKT_VC2_FILTER_FLIT2_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT2_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_0_INQ_PRF_INCOMING_PKT_VC2_FILTER_FLIT2_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_1_INQ_PRF_INCOMING_PKT_VC2_FILTER_FLIT2_CNT'} = {
    NAME => 'AR_RTR_0_1_INQ_PRF_INCOMING_PKT_VC2_FILTER_FLIT2_CNT',
    LABEL => 'AR_RTR_0_1_INQ_PRF_INCOMING_PKT_VC2_FILTER_FLIT2_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT2_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_1_INQ_PRF_INCOMING_PKT_VC2_FILTER_FLIT2_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_2_INQ_PRF_INCOMING_PKT_VC2_FILTER_FLIT2_CNT'} = {
    NAME => 'AR_RTR_0_2_INQ_PRF_INCOMING_PKT_VC2_FILTER_FLIT2_CNT',
    LABEL => 'AR_RTR_0_2_INQ_PRF_INCOMING_PKT_VC2_FILTER_FLIT2_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT2_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_2_INQ_PRF_INCOMING_PKT_VC2_FILTER_FLIT2_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_3_INQ_PRF_INCOMING_PKT_VC2_FILTER_FLIT2_CNT'} = {
    NAME => 'AR_RTR_0_3_INQ_PRF_INCOMING_PKT_VC2_FILTER_FLIT2_CNT',
    LABEL => 'AR_RTR_0_3_INQ_PRF_INCOMING_PKT_VC2_FILTER_FLIT2_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT2_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_3_INQ_PRF_INCOMING_PKT_VC2_FILTER_FLIT2_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_4_INQ_PRF_INCOMING_PKT_VC2_FILTER_FLIT2_CNT'} = {
    NAME => 'AR_RTR_0_4_INQ_PRF_INCOMING_PKT_VC2_FILTER_FLIT2_CNT',
    LABEL => 'AR_RTR_0_4_INQ_PRF_INCOMING_PKT_VC2_FILTER_FLIT2_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT2_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_4_INQ_PRF_INCOMING_PKT_VC2_FILTER_FLIT2_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_5_INQ_PRF_INCOMING_PKT_VC2_FILTER_FLIT2_CNT'} = {
    NAME => 'AR_RTR_0_5_INQ_PRF_INCOMING_PKT_VC2_FILTER_FLIT2_CNT',
    LABEL => 'AR_RTR_0_5_INQ_PRF_INCOMING_PKT_VC2_FILTER_FLIT2_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT2_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_5_INQ_PRF_INCOMING_PKT_VC2_FILTER_FLIT2_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_6_INQ_PRF_INCOMING_PKT_VC2_FILTER_FLIT2_CNT'} = {
    NAME => 'AR_RTR_0_6_INQ_PRF_INCOMING_PKT_VC2_FILTER_FLIT2_CNT',
    LABEL => 'AR_RTR_0_6_INQ_PRF_INCOMING_PKT_VC2_FILTER_FLIT2_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT2_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_6_INQ_PRF_INCOMING_PKT_VC2_FILTER_FLIT2_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_7_INQ_PRF_INCOMING_PKT_VC2_FILTER_FLIT2_CNT'} = {
    NAME => 'AR_RTR_0_7_INQ_PRF_INCOMING_PKT_VC2_FILTER_FLIT2_CNT',
    LABEL => 'AR_RTR_0_7_INQ_PRF_INCOMING_PKT_VC2_FILTER_FLIT2_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT2_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_7_INQ_PRF_INCOMING_PKT_VC2_FILTER_FLIT2_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_0_INQ_PRF_INCOMING_PKT_VC2_FILTER_FLIT2_CNT'} = {
    NAME => 'AR_RTR_1_0_INQ_PRF_INCOMING_PKT_VC2_FILTER_FLIT2_CNT',
    LABEL => 'AR_RTR_1_0_INQ_PRF_INCOMING_PKT_VC2_FILTER_FLIT2_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT2_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_0_INQ_PRF_INCOMING_PKT_VC2_FILTER_FLIT2_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_1_INQ_PRF_INCOMING_PKT_VC2_FILTER_FLIT2_CNT'} = {
    NAME => 'AR_RTR_1_1_INQ_PRF_INCOMING_PKT_VC2_FILTER_FLIT2_CNT',
    LABEL => 'AR_RTR_1_1_INQ_PRF_INCOMING_PKT_VC2_FILTER_FLIT2_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT2_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_1_INQ_PRF_INCOMING_PKT_VC2_FILTER_FLIT2_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_2_INQ_PRF_INCOMING_PKT_VC2_FILTER_FLIT2_CNT'} = {
    NAME => 'AR_RTR_1_2_INQ_PRF_INCOMING_PKT_VC2_FILTER_FLIT2_CNT',
    LABEL => 'AR_RTR_1_2_INQ_PRF_INCOMING_PKT_VC2_FILTER_FLIT2_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT2_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_2_INQ_PRF_INCOMING_PKT_VC2_FILTER_FLIT2_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_3_INQ_PRF_INCOMING_PKT_VC2_FILTER_FLIT2_CNT'} = {
    NAME => 'AR_RTR_1_3_INQ_PRF_INCOMING_PKT_VC2_FILTER_FLIT2_CNT',
    LABEL => 'AR_RTR_1_3_INQ_PRF_INCOMING_PKT_VC2_FILTER_FLIT2_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT2_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_3_INQ_PRF_INCOMING_PKT_VC2_FILTER_FLIT2_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_4_INQ_PRF_INCOMING_PKT_VC2_FILTER_FLIT2_CNT'} = {
    NAME => 'AR_RTR_1_4_INQ_PRF_INCOMING_PKT_VC2_FILTER_FLIT2_CNT',
    LABEL => 'AR_RTR_1_4_INQ_PRF_INCOMING_PKT_VC2_FILTER_FLIT2_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT2_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_4_INQ_PRF_INCOMING_PKT_VC2_FILTER_FLIT2_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_5_INQ_PRF_INCOMING_PKT_VC2_FILTER_FLIT2_CNT'} = {
    NAME => 'AR_RTR_1_5_INQ_PRF_INCOMING_PKT_VC2_FILTER_FLIT2_CNT',
    LABEL => 'AR_RTR_1_5_INQ_PRF_INCOMING_PKT_VC2_FILTER_FLIT2_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT2_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_5_INQ_PRF_INCOMING_PKT_VC2_FILTER_FLIT2_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_6_INQ_PRF_INCOMING_PKT_VC2_FILTER_FLIT2_CNT'} = {
    NAME => 'AR_RTR_1_6_INQ_PRF_INCOMING_PKT_VC2_FILTER_FLIT2_CNT',
    LABEL => 'AR_RTR_1_6_INQ_PRF_INCOMING_PKT_VC2_FILTER_FLIT2_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT2_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_6_INQ_PRF_INCOMING_PKT_VC2_FILTER_FLIT2_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_7_INQ_PRF_INCOMING_PKT_VC2_FILTER_FLIT2_CNT'} = {
    NAME => 'AR_RTR_1_7_INQ_PRF_INCOMING_PKT_VC2_FILTER_FLIT2_CNT',
    LABEL => 'AR_RTR_1_7_INQ_PRF_INCOMING_PKT_VC2_FILTER_FLIT2_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT2_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_7_INQ_PRF_INCOMING_PKT_VC2_FILTER_FLIT2_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_0_INQ_PRF_INCOMING_PKT_VC2_FILTER_FLIT2_CNT'} = {
    NAME => 'AR_RTR_2_0_INQ_PRF_INCOMING_PKT_VC2_FILTER_FLIT2_CNT',
    LABEL => 'AR_RTR_2_0_INQ_PRF_INCOMING_PKT_VC2_FILTER_FLIT2_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT2_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_0_INQ_PRF_INCOMING_PKT_VC2_FILTER_FLIT2_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_1_INQ_PRF_INCOMING_PKT_VC2_FILTER_FLIT2_CNT'} = {
    NAME => 'AR_RTR_2_1_INQ_PRF_INCOMING_PKT_VC2_FILTER_FLIT2_CNT',
    LABEL => 'AR_RTR_2_1_INQ_PRF_INCOMING_PKT_VC2_FILTER_FLIT2_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT2_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_1_INQ_PRF_INCOMING_PKT_VC2_FILTER_FLIT2_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_2_INQ_PRF_INCOMING_PKT_VC2_FILTER_FLIT2_CNT'} = {
    NAME => 'AR_RTR_2_2_INQ_PRF_INCOMING_PKT_VC2_FILTER_FLIT2_CNT',
    LABEL => 'AR_RTR_2_2_INQ_PRF_INCOMING_PKT_VC2_FILTER_FLIT2_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT2_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_2_INQ_PRF_INCOMING_PKT_VC2_FILTER_FLIT2_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_3_INQ_PRF_INCOMING_PKT_VC2_FILTER_FLIT2_CNT'} = {
    NAME => 'AR_RTR_2_3_INQ_PRF_INCOMING_PKT_VC2_FILTER_FLIT2_CNT',
    LABEL => 'AR_RTR_2_3_INQ_PRF_INCOMING_PKT_VC2_FILTER_FLIT2_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT2_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_3_INQ_PRF_INCOMING_PKT_VC2_FILTER_FLIT2_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_4_INQ_PRF_INCOMING_PKT_VC2_FILTER_FLIT2_CNT'} = {
    NAME => 'AR_RTR_2_4_INQ_PRF_INCOMING_PKT_VC2_FILTER_FLIT2_CNT',
    LABEL => 'AR_RTR_2_4_INQ_PRF_INCOMING_PKT_VC2_FILTER_FLIT2_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT2_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_4_INQ_PRF_INCOMING_PKT_VC2_FILTER_FLIT2_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_5_INQ_PRF_INCOMING_PKT_VC2_FILTER_FLIT2_CNT'} = {
    NAME => 'AR_RTR_2_5_INQ_PRF_INCOMING_PKT_VC2_FILTER_FLIT2_CNT',
    LABEL => 'AR_RTR_2_5_INQ_PRF_INCOMING_PKT_VC2_FILTER_FLIT2_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT2_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_5_INQ_PRF_INCOMING_PKT_VC2_FILTER_FLIT2_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_6_INQ_PRF_INCOMING_PKT_VC2_FILTER_FLIT2_CNT'} = {
    NAME => 'AR_RTR_2_6_INQ_PRF_INCOMING_PKT_VC2_FILTER_FLIT2_CNT',
    LABEL => 'AR_RTR_2_6_INQ_PRF_INCOMING_PKT_VC2_FILTER_FLIT2_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT2_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_6_INQ_PRF_INCOMING_PKT_VC2_FILTER_FLIT2_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_7_INQ_PRF_INCOMING_PKT_VC2_FILTER_FLIT2_CNT'} = {
    NAME => 'AR_RTR_2_7_INQ_PRF_INCOMING_PKT_VC2_FILTER_FLIT2_CNT',
    LABEL => 'AR_RTR_2_7_INQ_PRF_INCOMING_PKT_VC2_FILTER_FLIT2_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT2_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_7_INQ_PRF_INCOMING_PKT_VC2_FILTER_FLIT2_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_0_INQ_PRF_INCOMING_PKT_VC2_FILTER_FLIT2_CNT'} = {
    NAME => 'AR_RTR_3_0_INQ_PRF_INCOMING_PKT_VC2_FILTER_FLIT2_CNT',
    LABEL => 'AR_RTR_3_0_INQ_PRF_INCOMING_PKT_VC2_FILTER_FLIT2_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT2_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_0_INQ_PRF_INCOMING_PKT_VC2_FILTER_FLIT2_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_1_INQ_PRF_INCOMING_PKT_VC2_FILTER_FLIT2_CNT'} = {
    NAME => 'AR_RTR_3_1_INQ_PRF_INCOMING_PKT_VC2_FILTER_FLIT2_CNT',
    LABEL => 'AR_RTR_3_1_INQ_PRF_INCOMING_PKT_VC2_FILTER_FLIT2_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT2_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_1_INQ_PRF_INCOMING_PKT_VC2_FILTER_FLIT2_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_2_INQ_PRF_INCOMING_PKT_VC2_FILTER_FLIT2_CNT'} = {
    NAME => 'AR_RTR_3_2_INQ_PRF_INCOMING_PKT_VC2_FILTER_FLIT2_CNT',
    LABEL => 'AR_RTR_3_2_INQ_PRF_INCOMING_PKT_VC2_FILTER_FLIT2_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT2_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_2_INQ_PRF_INCOMING_PKT_VC2_FILTER_FLIT2_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_3_INQ_PRF_INCOMING_PKT_VC2_FILTER_FLIT2_CNT'} = {
    NAME => 'AR_RTR_3_3_INQ_PRF_INCOMING_PKT_VC2_FILTER_FLIT2_CNT',
    LABEL => 'AR_RTR_3_3_INQ_PRF_INCOMING_PKT_VC2_FILTER_FLIT2_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT2_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_3_INQ_PRF_INCOMING_PKT_VC2_FILTER_FLIT2_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_4_INQ_PRF_INCOMING_PKT_VC2_FILTER_FLIT2_CNT'} = {
    NAME => 'AR_RTR_3_4_INQ_PRF_INCOMING_PKT_VC2_FILTER_FLIT2_CNT',
    LABEL => 'AR_RTR_3_4_INQ_PRF_INCOMING_PKT_VC2_FILTER_FLIT2_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT2_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_4_INQ_PRF_INCOMING_PKT_VC2_FILTER_FLIT2_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_5_INQ_PRF_INCOMING_PKT_VC2_FILTER_FLIT2_CNT'} = {
    NAME => 'AR_RTR_3_5_INQ_PRF_INCOMING_PKT_VC2_FILTER_FLIT2_CNT',
    LABEL => 'AR_RTR_3_5_INQ_PRF_INCOMING_PKT_VC2_FILTER_FLIT2_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT2_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_5_INQ_PRF_INCOMING_PKT_VC2_FILTER_FLIT2_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_6_INQ_PRF_INCOMING_PKT_VC2_FILTER_FLIT2_CNT'} = {
    NAME => 'AR_RTR_3_6_INQ_PRF_INCOMING_PKT_VC2_FILTER_FLIT2_CNT',
    LABEL => 'AR_RTR_3_6_INQ_PRF_INCOMING_PKT_VC2_FILTER_FLIT2_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT2_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_6_INQ_PRF_INCOMING_PKT_VC2_FILTER_FLIT2_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_7_INQ_PRF_INCOMING_PKT_VC2_FILTER_FLIT2_CNT'} = {
    NAME => 'AR_RTR_3_7_INQ_PRF_INCOMING_PKT_VC2_FILTER_FLIT2_CNT',
    LABEL => 'AR_RTR_3_7_INQ_PRF_INCOMING_PKT_VC2_FILTER_FLIT2_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT2_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_7_INQ_PRF_INCOMING_PKT_VC2_FILTER_FLIT2_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_0_INQ_PRF_INCOMING_PKT_VC2_FILTER_FLIT2_CNT'} = {
    NAME => 'AR_RTR_4_0_INQ_PRF_INCOMING_PKT_VC2_FILTER_FLIT2_CNT',
    LABEL => 'AR_RTR_4_0_INQ_PRF_INCOMING_PKT_VC2_FILTER_FLIT2_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT2_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_0_INQ_PRF_INCOMING_PKT_VC2_FILTER_FLIT2_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_1_INQ_PRF_INCOMING_PKT_VC2_FILTER_FLIT2_CNT'} = {
    NAME => 'AR_RTR_4_1_INQ_PRF_INCOMING_PKT_VC2_FILTER_FLIT2_CNT',
    LABEL => 'AR_RTR_4_1_INQ_PRF_INCOMING_PKT_VC2_FILTER_FLIT2_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT2_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_1_INQ_PRF_INCOMING_PKT_VC2_FILTER_FLIT2_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_2_INQ_PRF_INCOMING_PKT_VC2_FILTER_FLIT2_CNT'} = {
    NAME => 'AR_RTR_4_2_INQ_PRF_INCOMING_PKT_VC2_FILTER_FLIT2_CNT',
    LABEL => 'AR_RTR_4_2_INQ_PRF_INCOMING_PKT_VC2_FILTER_FLIT2_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT2_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_2_INQ_PRF_INCOMING_PKT_VC2_FILTER_FLIT2_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_3_INQ_PRF_INCOMING_PKT_VC2_FILTER_FLIT2_CNT'} = {
    NAME => 'AR_RTR_4_3_INQ_PRF_INCOMING_PKT_VC2_FILTER_FLIT2_CNT',
    LABEL => 'AR_RTR_4_3_INQ_PRF_INCOMING_PKT_VC2_FILTER_FLIT2_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT2_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_3_INQ_PRF_INCOMING_PKT_VC2_FILTER_FLIT2_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_4_INQ_PRF_INCOMING_PKT_VC2_FILTER_FLIT2_CNT'} = {
    NAME => 'AR_RTR_4_4_INQ_PRF_INCOMING_PKT_VC2_FILTER_FLIT2_CNT',
    LABEL => 'AR_RTR_4_4_INQ_PRF_INCOMING_PKT_VC2_FILTER_FLIT2_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT2_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_4_INQ_PRF_INCOMING_PKT_VC2_FILTER_FLIT2_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_5_INQ_PRF_INCOMING_PKT_VC2_FILTER_FLIT2_CNT'} = {
    NAME => 'AR_RTR_4_5_INQ_PRF_INCOMING_PKT_VC2_FILTER_FLIT2_CNT',
    LABEL => 'AR_RTR_4_5_INQ_PRF_INCOMING_PKT_VC2_FILTER_FLIT2_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT2_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_5_INQ_PRF_INCOMING_PKT_VC2_FILTER_FLIT2_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_6_INQ_PRF_INCOMING_PKT_VC2_FILTER_FLIT2_CNT'} = {
    NAME => 'AR_RTR_4_6_INQ_PRF_INCOMING_PKT_VC2_FILTER_FLIT2_CNT',
    LABEL => 'AR_RTR_4_6_INQ_PRF_INCOMING_PKT_VC2_FILTER_FLIT2_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT2_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_6_INQ_PRF_INCOMING_PKT_VC2_FILTER_FLIT2_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_7_INQ_PRF_INCOMING_PKT_VC2_FILTER_FLIT2_CNT'} = {
    NAME => 'AR_RTR_4_7_INQ_PRF_INCOMING_PKT_VC2_FILTER_FLIT2_CNT',
    LABEL => 'AR_RTR_4_7_INQ_PRF_INCOMING_PKT_VC2_FILTER_FLIT2_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT2_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_7_INQ_PRF_INCOMING_PKT_VC2_FILTER_FLIT2_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_0_INQ_PRF_INCOMING_PKT_VC3_FILTER_FLIT3_CNT'} = {
    NAME => 'AR_RTR_0_0_INQ_PRF_INCOMING_PKT_VC3_FILTER_FLIT3_CNT',
    LABEL => 'AR_RTR_0_0_INQ_PRF_INCOMING_PKT_VC3_FILTER_FLIT3_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT3_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_0_INQ_PRF_INCOMING_PKT_VC3_FILTER_FLIT3_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_1_INQ_PRF_INCOMING_PKT_VC3_FILTER_FLIT3_CNT'} = {
    NAME => 'AR_RTR_0_1_INQ_PRF_INCOMING_PKT_VC3_FILTER_FLIT3_CNT',
    LABEL => 'AR_RTR_0_1_INQ_PRF_INCOMING_PKT_VC3_FILTER_FLIT3_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT3_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_1_INQ_PRF_INCOMING_PKT_VC3_FILTER_FLIT3_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_2_INQ_PRF_INCOMING_PKT_VC3_FILTER_FLIT3_CNT'} = {
    NAME => 'AR_RTR_0_2_INQ_PRF_INCOMING_PKT_VC3_FILTER_FLIT3_CNT',
    LABEL => 'AR_RTR_0_2_INQ_PRF_INCOMING_PKT_VC3_FILTER_FLIT3_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT3_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_2_INQ_PRF_INCOMING_PKT_VC3_FILTER_FLIT3_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_3_INQ_PRF_INCOMING_PKT_VC3_FILTER_FLIT3_CNT'} = {
    NAME => 'AR_RTR_0_3_INQ_PRF_INCOMING_PKT_VC3_FILTER_FLIT3_CNT',
    LABEL => 'AR_RTR_0_3_INQ_PRF_INCOMING_PKT_VC3_FILTER_FLIT3_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT3_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_3_INQ_PRF_INCOMING_PKT_VC3_FILTER_FLIT3_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_4_INQ_PRF_INCOMING_PKT_VC3_FILTER_FLIT3_CNT'} = {
    NAME => 'AR_RTR_0_4_INQ_PRF_INCOMING_PKT_VC3_FILTER_FLIT3_CNT',
    LABEL => 'AR_RTR_0_4_INQ_PRF_INCOMING_PKT_VC3_FILTER_FLIT3_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT3_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_4_INQ_PRF_INCOMING_PKT_VC3_FILTER_FLIT3_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_5_INQ_PRF_INCOMING_PKT_VC3_FILTER_FLIT3_CNT'} = {
    NAME => 'AR_RTR_0_5_INQ_PRF_INCOMING_PKT_VC3_FILTER_FLIT3_CNT',
    LABEL => 'AR_RTR_0_5_INQ_PRF_INCOMING_PKT_VC3_FILTER_FLIT3_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT3_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_5_INQ_PRF_INCOMING_PKT_VC3_FILTER_FLIT3_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_6_INQ_PRF_INCOMING_PKT_VC3_FILTER_FLIT3_CNT'} = {
    NAME => 'AR_RTR_0_6_INQ_PRF_INCOMING_PKT_VC3_FILTER_FLIT3_CNT',
    LABEL => 'AR_RTR_0_6_INQ_PRF_INCOMING_PKT_VC3_FILTER_FLIT3_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT3_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_6_INQ_PRF_INCOMING_PKT_VC3_FILTER_FLIT3_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_7_INQ_PRF_INCOMING_PKT_VC3_FILTER_FLIT3_CNT'} = {
    NAME => 'AR_RTR_0_7_INQ_PRF_INCOMING_PKT_VC3_FILTER_FLIT3_CNT',
    LABEL => 'AR_RTR_0_7_INQ_PRF_INCOMING_PKT_VC3_FILTER_FLIT3_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT3_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_7_INQ_PRF_INCOMING_PKT_VC3_FILTER_FLIT3_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_0_INQ_PRF_INCOMING_PKT_VC3_FILTER_FLIT3_CNT'} = {
    NAME => 'AR_RTR_1_0_INQ_PRF_INCOMING_PKT_VC3_FILTER_FLIT3_CNT',
    LABEL => 'AR_RTR_1_0_INQ_PRF_INCOMING_PKT_VC3_FILTER_FLIT3_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT3_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_0_INQ_PRF_INCOMING_PKT_VC3_FILTER_FLIT3_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_1_INQ_PRF_INCOMING_PKT_VC3_FILTER_FLIT3_CNT'} = {
    NAME => 'AR_RTR_1_1_INQ_PRF_INCOMING_PKT_VC3_FILTER_FLIT3_CNT',
    LABEL => 'AR_RTR_1_1_INQ_PRF_INCOMING_PKT_VC3_FILTER_FLIT3_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT3_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_1_INQ_PRF_INCOMING_PKT_VC3_FILTER_FLIT3_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_2_INQ_PRF_INCOMING_PKT_VC3_FILTER_FLIT3_CNT'} = {
    NAME => 'AR_RTR_1_2_INQ_PRF_INCOMING_PKT_VC3_FILTER_FLIT3_CNT',
    LABEL => 'AR_RTR_1_2_INQ_PRF_INCOMING_PKT_VC3_FILTER_FLIT3_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT3_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_2_INQ_PRF_INCOMING_PKT_VC3_FILTER_FLIT3_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_3_INQ_PRF_INCOMING_PKT_VC3_FILTER_FLIT3_CNT'} = {
    NAME => 'AR_RTR_1_3_INQ_PRF_INCOMING_PKT_VC3_FILTER_FLIT3_CNT',
    LABEL => 'AR_RTR_1_3_INQ_PRF_INCOMING_PKT_VC3_FILTER_FLIT3_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT3_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_3_INQ_PRF_INCOMING_PKT_VC3_FILTER_FLIT3_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_4_INQ_PRF_INCOMING_PKT_VC3_FILTER_FLIT3_CNT'} = {
    NAME => 'AR_RTR_1_4_INQ_PRF_INCOMING_PKT_VC3_FILTER_FLIT3_CNT',
    LABEL => 'AR_RTR_1_4_INQ_PRF_INCOMING_PKT_VC3_FILTER_FLIT3_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT3_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_4_INQ_PRF_INCOMING_PKT_VC3_FILTER_FLIT3_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_5_INQ_PRF_INCOMING_PKT_VC3_FILTER_FLIT3_CNT'} = {
    NAME => 'AR_RTR_1_5_INQ_PRF_INCOMING_PKT_VC3_FILTER_FLIT3_CNT',
    LABEL => 'AR_RTR_1_5_INQ_PRF_INCOMING_PKT_VC3_FILTER_FLIT3_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT3_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_5_INQ_PRF_INCOMING_PKT_VC3_FILTER_FLIT3_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_6_INQ_PRF_INCOMING_PKT_VC3_FILTER_FLIT3_CNT'} = {
    NAME => 'AR_RTR_1_6_INQ_PRF_INCOMING_PKT_VC3_FILTER_FLIT3_CNT',
    LABEL => 'AR_RTR_1_6_INQ_PRF_INCOMING_PKT_VC3_FILTER_FLIT3_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT3_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_6_INQ_PRF_INCOMING_PKT_VC3_FILTER_FLIT3_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_7_INQ_PRF_INCOMING_PKT_VC3_FILTER_FLIT3_CNT'} = {
    NAME => 'AR_RTR_1_7_INQ_PRF_INCOMING_PKT_VC3_FILTER_FLIT3_CNT',
    LABEL => 'AR_RTR_1_7_INQ_PRF_INCOMING_PKT_VC3_FILTER_FLIT3_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT3_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_7_INQ_PRF_INCOMING_PKT_VC3_FILTER_FLIT3_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_0_INQ_PRF_INCOMING_PKT_VC3_FILTER_FLIT3_CNT'} = {
    NAME => 'AR_RTR_2_0_INQ_PRF_INCOMING_PKT_VC3_FILTER_FLIT3_CNT',
    LABEL => 'AR_RTR_2_0_INQ_PRF_INCOMING_PKT_VC3_FILTER_FLIT3_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT3_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_0_INQ_PRF_INCOMING_PKT_VC3_FILTER_FLIT3_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_1_INQ_PRF_INCOMING_PKT_VC3_FILTER_FLIT3_CNT'} = {
    NAME => 'AR_RTR_2_1_INQ_PRF_INCOMING_PKT_VC3_FILTER_FLIT3_CNT',
    LABEL => 'AR_RTR_2_1_INQ_PRF_INCOMING_PKT_VC3_FILTER_FLIT3_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT3_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_1_INQ_PRF_INCOMING_PKT_VC3_FILTER_FLIT3_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_2_INQ_PRF_INCOMING_PKT_VC3_FILTER_FLIT3_CNT'} = {
    NAME => 'AR_RTR_2_2_INQ_PRF_INCOMING_PKT_VC3_FILTER_FLIT3_CNT',
    LABEL => 'AR_RTR_2_2_INQ_PRF_INCOMING_PKT_VC3_FILTER_FLIT3_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT3_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_2_INQ_PRF_INCOMING_PKT_VC3_FILTER_FLIT3_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_3_INQ_PRF_INCOMING_PKT_VC3_FILTER_FLIT3_CNT'} = {
    NAME => 'AR_RTR_2_3_INQ_PRF_INCOMING_PKT_VC3_FILTER_FLIT3_CNT',
    LABEL => 'AR_RTR_2_3_INQ_PRF_INCOMING_PKT_VC3_FILTER_FLIT3_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT3_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_3_INQ_PRF_INCOMING_PKT_VC3_FILTER_FLIT3_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_4_INQ_PRF_INCOMING_PKT_VC3_FILTER_FLIT3_CNT'} = {
    NAME => 'AR_RTR_2_4_INQ_PRF_INCOMING_PKT_VC3_FILTER_FLIT3_CNT',
    LABEL => 'AR_RTR_2_4_INQ_PRF_INCOMING_PKT_VC3_FILTER_FLIT3_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT3_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_4_INQ_PRF_INCOMING_PKT_VC3_FILTER_FLIT3_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_5_INQ_PRF_INCOMING_PKT_VC3_FILTER_FLIT3_CNT'} = {
    NAME => 'AR_RTR_2_5_INQ_PRF_INCOMING_PKT_VC3_FILTER_FLIT3_CNT',
    LABEL => 'AR_RTR_2_5_INQ_PRF_INCOMING_PKT_VC3_FILTER_FLIT3_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT3_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_5_INQ_PRF_INCOMING_PKT_VC3_FILTER_FLIT3_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_6_INQ_PRF_INCOMING_PKT_VC3_FILTER_FLIT3_CNT'} = {
    NAME => 'AR_RTR_2_6_INQ_PRF_INCOMING_PKT_VC3_FILTER_FLIT3_CNT',
    LABEL => 'AR_RTR_2_6_INQ_PRF_INCOMING_PKT_VC3_FILTER_FLIT3_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT3_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_6_INQ_PRF_INCOMING_PKT_VC3_FILTER_FLIT3_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_7_INQ_PRF_INCOMING_PKT_VC3_FILTER_FLIT3_CNT'} = {
    NAME => 'AR_RTR_2_7_INQ_PRF_INCOMING_PKT_VC3_FILTER_FLIT3_CNT',
    LABEL => 'AR_RTR_2_7_INQ_PRF_INCOMING_PKT_VC3_FILTER_FLIT3_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT3_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_7_INQ_PRF_INCOMING_PKT_VC3_FILTER_FLIT3_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_0_INQ_PRF_INCOMING_PKT_VC3_FILTER_FLIT3_CNT'} = {
    NAME => 'AR_RTR_3_0_INQ_PRF_INCOMING_PKT_VC3_FILTER_FLIT3_CNT',
    LABEL => 'AR_RTR_3_0_INQ_PRF_INCOMING_PKT_VC3_FILTER_FLIT3_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT3_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_0_INQ_PRF_INCOMING_PKT_VC3_FILTER_FLIT3_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_1_INQ_PRF_INCOMING_PKT_VC3_FILTER_FLIT3_CNT'} = {
    NAME => 'AR_RTR_3_1_INQ_PRF_INCOMING_PKT_VC3_FILTER_FLIT3_CNT',
    LABEL => 'AR_RTR_3_1_INQ_PRF_INCOMING_PKT_VC3_FILTER_FLIT3_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT3_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_1_INQ_PRF_INCOMING_PKT_VC3_FILTER_FLIT3_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_2_INQ_PRF_INCOMING_PKT_VC3_FILTER_FLIT3_CNT'} = {
    NAME => 'AR_RTR_3_2_INQ_PRF_INCOMING_PKT_VC3_FILTER_FLIT3_CNT',
    LABEL => 'AR_RTR_3_2_INQ_PRF_INCOMING_PKT_VC3_FILTER_FLIT3_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT3_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_2_INQ_PRF_INCOMING_PKT_VC3_FILTER_FLIT3_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_3_INQ_PRF_INCOMING_PKT_VC3_FILTER_FLIT3_CNT'} = {
    NAME => 'AR_RTR_3_3_INQ_PRF_INCOMING_PKT_VC3_FILTER_FLIT3_CNT',
    LABEL => 'AR_RTR_3_3_INQ_PRF_INCOMING_PKT_VC3_FILTER_FLIT3_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT3_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_3_INQ_PRF_INCOMING_PKT_VC3_FILTER_FLIT3_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_4_INQ_PRF_INCOMING_PKT_VC3_FILTER_FLIT3_CNT'} = {
    NAME => 'AR_RTR_3_4_INQ_PRF_INCOMING_PKT_VC3_FILTER_FLIT3_CNT',
    LABEL => 'AR_RTR_3_4_INQ_PRF_INCOMING_PKT_VC3_FILTER_FLIT3_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT3_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_4_INQ_PRF_INCOMING_PKT_VC3_FILTER_FLIT3_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_5_INQ_PRF_INCOMING_PKT_VC3_FILTER_FLIT3_CNT'} = {
    NAME => 'AR_RTR_3_5_INQ_PRF_INCOMING_PKT_VC3_FILTER_FLIT3_CNT',
    LABEL => 'AR_RTR_3_5_INQ_PRF_INCOMING_PKT_VC3_FILTER_FLIT3_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT3_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_5_INQ_PRF_INCOMING_PKT_VC3_FILTER_FLIT3_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_6_INQ_PRF_INCOMING_PKT_VC3_FILTER_FLIT3_CNT'} = {
    NAME => 'AR_RTR_3_6_INQ_PRF_INCOMING_PKT_VC3_FILTER_FLIT3_CNT',
    LABEL => 'AR_RTR_3_6_INQ_PRF_INCOMING_PKT_VC3_FILTER_FLIT3_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT3_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_6_INQ_PRF_INCOMING_PKT_VC3_FILTER_FLIT3_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_7_INQ_PRF_INCOMING_PKT_VC3_FILTER_FLIT3_CNT'} = {
    NAME => 'AR_RTR_3_7_INQ_PRF_INCOMING_PKT_VC3_FILTER_FLIT3_CNT',
    LABEL => 'AR_RTR_3_7_INQ_PRF_INCOMING_PKT_VC3_FILTER_FLIT3_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT3_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_7_INQ_PRF_INCOMING_PKT_VC3_FILTER_FLIT3_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_0_INQ_PRF_INCOMING_PKT_VC3_FILTER_FLIT3_CNT'} = {
    NAME => 'AR_RTR_4_0_INQ_PRF_INCOMING_PKT_VC3_FILTER_FLIT3_CNT',
    LABEL => 'AR_RTR_4_0_INQ_PRF_INCOMING_PKT_VC3_FILTER_FLIT3_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT3_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_0_INQ_PRF_INCOMING_PKT_VC3_FILTER_FLIT3_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_1_INQ_PRF_INCOMING_PKT_VC3_FILTER_FLIT3_CNT'} = {
    NAME => 'AR_RTR_4_1_INQ_PRF_INCOMING_PKT_VC3_FILTER_FLIT3_CNT',
    LABEL => 'AR_RTR_4_1_INQ_PRF_INCOMING_PKT_VC3_FILTER_FLIT3_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT3_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_1_INQ_PRF_INCOMING_PKT_VC3_FILTER_FLIT3_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_2_INQ_PRF_INCOMING_PKT_VC3_FILTER_FLIT3_CNT'} = {
    NAME => 'AR_RTR_4_2_INQ_PRF_INCOMING_PKT_VC3_FILTER_FLIT3_CNT',
    LABEL => 'AR_RTR_4_2_INQ_PRF_INCOMING_PKT_VC3_FILTER_FLIT3_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT3_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_2_INQ_PRF_INCOMING_PKT_VC3_FILTER_FLIT3_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_3_INQ_PRF_INCOMING_PKT_VC3_FILTER_FLIT3_CNT'} = {
    NAME => 'AR_RTR_4_3_INQ_PRF_INCOMING_PKT_VC3_FILTER_FLIT3_CNT',
    LABEL => 'AR_RTR_4_3_INQ_PRF_INCOMING_PKT_VC3_FILTER_FLIT3_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT3_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_3_INQ_PRF_INCOMING_PKT_VC3_FILTER_FLIT3_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_4_INQ_PRF_INCOMING_PKT_VC3_FILTER_FLIT3_CNT'} = {
    NAME => 'AR_RTR_4_4_INQ_PRF_INCOMING_PKT_VC3_FILTER_FLIT3_CNT',
    LABEL => 'AR_RTR_4_4_INQ_PRF_INCOMING_PKT_VC3_FILTER_FLIT3_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT3_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_4_INQ_PRF_INCOMING_PKT_VC3_FILTER_FLIT3_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_5_INQ_PRF_INCOMING_PKT_VC3_FILTER_FLIT3_CNT'} = {
    NAME => 'AR_RTR_4_5_INQ_PRF_INCOMING_PKT_VC3_FILTER_FLIT3_CNT',
    LABEL => 'AR_RTR_4_5_INQ_PRF_INCOMING_PKT_VC3_FILTER_FLIT3_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT3_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_5_INQ_PRF_INCOMING_PKT_VC3_FILTER_FLIT3_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_6_INQ_PRF_INCOMING_PKT_VC3_FILTER_FLIT3_CNT'} = {
    NAME => 'AR_RTR_4_6_INQ_PRF_INCOMING_PKT_VC3_FILTER_FLIT3_CNT',
    LABEL => 'AR_RTR_4_6_INQ_PRF_INCOMING_PKT_VC3_FILTER_FLIT3_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT3_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_6_INQ_PRF_INCOMING_PKT_VC3_FILTER_FLIT3_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_7_INQ_PRF_INCOMING_PKT_VC3_FILTER_FLIT3_CNT'} = {
    NAME => 'AR_RTR_4_7_INQ_PRF_INCOMING_PKT_VC3_FILTER_FLIT3_CNT',
    LABEL => 'AR_RTR_4_7_INQ_PRF_INCOMING_PKT_VC3_FILTER_FLIT3_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT3_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_7_INQ_PRF_INCOMING_PKT_VC3_FILTER_FLIT3_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_0_INQ_PRF_INCOMING_PKT_VC4_FILTER_FLIT4_CNT'} = {
    NAME => 'AR_RTR_0_0_INQ_PRF_INCOMING_PKT_VC4_FILTER_FLIT4_CNT',
    LABEL => 'AR_RTR_0_0_INQ_PRF_INCOMING_PKT_VC4_FILTER_FLIT4_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT4_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_0_INQ_PRF_INCOMING_PKT_VC4_FILTER_FLIT4_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_1_INQ_PRF_INCOMING_PKT_VC4_FILTER_FLIT4_CNT'} = {
    NAME => 'AR_RTR_0_1_INQ_PRF_INCOMING_PKT_VC4_FILTER_FLIT4_CNT',
    LABEL => 'AR_RTR_0_1_INQ_PRF_INCOMING_PKT_VC4_FILTER_FLIT4_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT4_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_1_INQ_PRF_INCOMING_PKT_VC4_FILTER_FLIT4_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_2_INQ_PRF_INCOMING_PKT_VC4_FILTER_FLIT4_CNT'} = {
    NAME => 'AR_RTR_0_2_INQ_PRF_INCOMING_PKT_VC4_FILTER_FLIT4_CNT',
    LABEL => 'AR_RTR_0_2_INQ_PRF_INCOMING_PKT_VC4_FILTER_FLIT4_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT4_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_2_INQ_PRF_INCOMING_PKT_VC4_FILTER_FLIT4_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_3_INQ_PRF_INCOMING_PKT_VC4_FILTER_FLIT4_CNT'} = {
    NAME => 'AR_RTR_0_3_INQ_PRF_INCOMING_PKT_VC4_FILTER_FLIT4_CNT',
    LABEL => 'AR_RTR_0_3_INQ_PRF_INCOMING_PKT_VC4_FILTER_FLIT4_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT4_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_3_INQ_PRF_INCOMING_PKT_VC4_FILTER_FLIT4_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_4_INQ_PRF_INCOMING_PKT_VC4_FILTER_FLIT4_CNT'} = {
    NAME => 'AR_RTR_0_4_INQ_PRF_INCOMING_PKT_VC4_FILTER_FLIT4_CNT',
    LABEL => 'AR_RTR_0_4_INQ_PRF_INCOMING_PKT_VC4_FILTER_FLIT4_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT4_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_4_INQ_PRF_INCOMING_PKT_VC4_FILTER_FLIT4_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_5_INQ_PRF_INCOMING_PKT_VC4_FILTER_FLIT4_CNT'} = {
    NAME => 'AR_RTR_0_5_INQ_PRF_INCOMING_PKT_VC4_FILTER_FLIT4_CNT',
    LABEL => 'AR_RTR_0_5_INQ_PRF_INCOMING_PKT_VC4_FILTER_FLIT4_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT4_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_5_INQ_PRF_INCOMING_PKT_VC4_FILTER_FLIT4_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_6_INQ_PRF_INCOMING_PKT_VC4_FILTER_FLIT4_CNT'} = {
    NAME => 'AR_RTR_0_6_INQ_PRF_INCOMING_PKT_VC4_FILTER_FLIT4_CNT',
    LABEL => 'AR_RTR_0_6_INQ_PRF_INCOMING_PKT_VC4_FILTER_FLIT4_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT4_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_6_INQ_PRF_INCOMING_PKT_VC4_FILTER_FLIT4_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_7_INQ_PRF_INCOMING_PKT_VC4_FILTER_FLIT4_CNT'} = {
    NAME => 'AR_RTR_0_7_INQ_PRF_INCOMING_PKT_VC4_FILTER_FLIT4_CNT',
    LABEL => 'AR_RTR_0_7_INQ_PRF_INCOMING_PKT_VC4_FILTER_FLIT4_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT4_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_7_INQ_PRF_INCOMING_PKT_VC4_FILTER_FLIT4_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_0_INQ_PRF_INCOMING_PKT_VC4_FILTER_FLIT4_CNT'} = {
    NAME => 'AR_RTR_1_0_INQ_PRF_INCOMING_PKT_VC4_FILTER_FLIT4_CNT',
    LABEL => 'AR_RTR_1_0_INQ_PRF_INCOMING_PKT_VC4_FILTER_FLIT4_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT4_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_0_INQ_PRF_INCOMING_PKT_VC4_FILTER_FLIT4_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_1_INQ_PRF_INCOMING_PKT_VC4_FILTER_FLIT4_CNT'} = {
    NAME => 'AR_RTR_1_1_INQ_PRF_INCOMING_PKT_VC4_FILTER_FLIT4_CNT',
    LABEL => 'AR_RTR_1_1_INQ_PRF_INCOMING_PKT_VC4_FILTER_FLIT4_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT4_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_1_INQ_PRF_INCOMING_PKT_VC4_FILTER_FLIT4_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_2_INQ_PRF_INCOMING_PKT_VC4_FILTER_FLIT4_CNT'} = {
    NAME => 'AR_RTR_1_2_INQ_PRF_INCOMING_PKT_VC4_FILTER_FLIT4_CNT',
    LABEL => 'AR_RTR_1_2_INQ_PRF_INCOMING_PKT_VC4_FILTER_FLIT4_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT4_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_2_INQ_PRF_INCOMING_PKT_VC4_FILTER_FLIT4_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_3_INQ_PRF_INCOMING_PKT_VC4_FILTER_FLIT4_CNT'} = {
    NAME => 'AR_RTR_1_3_INQ_PRF_INCOMING_PKT_VC4_FILTER_FLIT4_CNT',
    LABEL => 'AR_RTR_1_3_INQ_PRF_INCOMING_PKT_VC4_FILTER_FLIT4_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT4_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_3_INQ_PRF_INCOMING_PKT_VC4_FILTER_FLIT4_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_4_INQ_PRF_INCOMING_PKT_VC4_FILTER_FLIT4_CNT'} = {
    NAME => 'AR_RTR_1_4_INQ_PRF_INCOMING_PKT_VC4_FILTER_FLIT4_CNT',
    LABEL => 'AR_RTR_1_4_INQ_PRF_INCOMING_PKT_VC4_FILTER_FLIT4_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT4_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_4_INQ_PRF_INCOMING_PKT_VC4_FILTER_FLIT4_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_5_INQ_PRF_INCOMING_PKT_VC4_FILTER_FLIT4_CNT'} = {
    NAME => 'AR_RTR_1_5_INQ_PRF_INCOMING_PKT_VC4_FILTER_FLIT4_CNT',
    LABEL => 'AR_RTR_1_5_INQ_PRF_INCOMING_PKT_VC4_FILTER_FLIT4_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT4_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_5_INQ_PRF_INCOMING_PKT_VC4_FILTER_FLIT4_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_6_INQ_PRF_INCOMING_PKT_VC4_FILTER_FLIT4_CNT'} = {
    NAME => 'AR_RTR_1_6_INQ_PRF_INCOMING_PKT_VC4_FILTER_FLIT4_CNT',
    LABEL => 'AR_RTR_1_6_INQ_PRF_INCOMING_PKT_VC4_FILTER_FLIT4_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT4_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_6_INQ_PRF_INCOMING_PKT_VC4_FILTER_FLIT4_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_7_INQ_PRF_INCOMING_PKT_VC4_FILTER_FLIT4_CNT'} = {
    NAME => 'AR_RTR_1_7_INQ_PRF_INCOMING_PKT_VC4_FILTER_FLIT4_CNT',
    LABEL => 'AR_RTR_1_7_INQ_PRF_INCOMING_PKT_VC4_FILTER_FLIT4_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT4_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_7_INQ_PRF_INCOMING_PKT_VC4_FILTER_FLIT4_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_0_INQ_PRF_INCOMING_PKT_VC4_FILTER_FLIT4_CNT'} = {
    NAME => 'AR_RTR_2_0_INQ_PRF_INCOMING_PKT_VC4_FILTER_FLIT4_CNT',
    LABEL => 'AR_RTR_2_0_INQ_PRF_INCOMING_PKT_VC4_FILTER_FLIT4_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT4_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_0_INQ_PRF_INCOMING_PKT_VC4_FILTER_FLIT4_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_1_INQ_PRF_INCOMING_PKT_VC4_FILTER_FLIT4_CNT'} = {
    NAME => 'AR_RTR_2_1_INQ_PRF_INCOMING_PKT_VC4_FILTER_FLIT4_CNT',
    LABEL => 'AR_RTR_2_1_INQ_PRF_INCOMING_PKT_VC4_FILTER_FLIT4_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT4_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_1_INQ_PRF_INCOMING_PKT_VC4_FILTER_FLIT4_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_2_INQ_PRF_INCOMING_PKT_VC4_FILTER_FLIT4_CNT'} = {
    NAME => 'AR_RTR_2_2_INQ_PRF_INCOMING_PKT_VC4_FILTER_FLIT4_CNT',
    LABEL => 'AR_RTR_2_2_INQ_PRF_INCOMING_PKT_VC4_FILTER_FLIT4_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT4_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_2_INQ_PRF_INCOMING_PKT_VC4_FILTER_FLIT4_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_3_INQ_PRF_INCOMING_PKT_VC4_FILTER_FLIT4_CNT'} = {
    NAME => 'AR_RTR_2_3_INQ_PRF_INCOMING_PKT_VC4_FILTER_FLIT4_CNT',
    LABEL => 'AR_RTR_2_3_INQ_PRF_INCOMING_PKT_VC4_FILTER_FLIT4_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT4_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_3_INQ_PRF_INCOMING_PKT_VC4_FILTER_FLIT4_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_4_INQ_PRF_INCOMING_PKT_VC4_FILTER_FLIT4_CNT'} = {
    NAME => 'AR_RTR_2_4_INQ_PRF_INCOMING_PKT_VC4_FILTER_FLIT4_CNT',
    LABEL => 'AR_RTR_2_4_INQ_PRF_INCOMING_PKT_VC4_FILTER_FLIT4_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT4_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_4_INQ_PRF_INCOMING_PKT_VC4_FILTER_FLIT4_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_5_INQ_PRF_INCOMING_PKT_VC4_FILTER_FLIT4_CNT'} = {
    NAME => 'AR_RTR_2_5_INQ_PRF_INCOMING_PKT_VC4_FILTER_FLIT4_CNT',
    LABEL => 'AR_RTR_2_5_INQ_PRF_INCOMING_PKT_VC4_FILTER_FLIT4_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT4_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_5_INQ_PRF_INCOMING_PKT_VC4_FILTER_FLIT4_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_6_INQ_PRF_INCOMING_PKT_VC4_FILTER_FLIT4_CNT'} = {
    NAME => 'AR_RTR_2_6_INQ_PRF_INCOMING_PKT_VC4_FILTER_FLIT4_CNT',
    LABEL => 'AR_RTR_2_6_INQ_PRF_INCOMING_PKT_VC4_FILTER_FLIT4_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT4_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_6_INQ_PRF_INCOMING_PKT_VC4_FILTER_FLIT4_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_7_INQ_PRF_INCOMING_PKT_VC4_FILTER_FLIT4_CNT'} = {
    NAME => 'AR_RTR_2_7_INQ_PRF_INCOMING_PKT_VC4_FILTER_FLIT4_CNT',
    LABEL => 'AR_RTR_2_7_INQ_PRF_INCOMING_PKT_VC4_FILTER_FLIT4_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT4_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_7_INQ_PRF_INCOMING_PKT_VC4_FILTER_FLIT4_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_0_INQ_PRF_INCOMING_PKT_VC4_FILTER_FLIT4_CNT'} = {
    NAME => 'AR_RTR_3_0_INQ_PRF_INCOMING_PKT_VC4_FILTER_FLIT4_CNT',
    LABEL => 'AR_RTR_3_0_INQ_PRF_INCOMING_PKT_VC4_FILTER_FLIT4_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT4_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_0_INQ_PRF_INCOMING_PKT_VC4_FILTER_FLIT4_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_1_INQ_PRF_INCOMING_PKT_VC4_FILTER_FLIT4_CNT'} = {
    NAME => 'AR_RTR_3_1_INQ_PRF_INCOMING_PKT_VC4_FILTER_FLIT4_CNT',
    LABEL => 'AR_RTR_3_1_INQ_PRF_INCOMING_PKT_VC4_FILTER_FLIT4_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT4_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_1_INQ_PRF_INCOMING_PKT_VC4_FILTER_FLIT4_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_2_INQ_PRF_INCOMING_PKT_VC4_FILTER_FLIT4_CNT'} = {
    NAME => 'AR_RTR_3_2_INQ_PRF_INCOMING_PKT_VC4_FILTER_FLIT4_CNT',
    LABEL => 'AR_RTR_3_2_INQ_PRF_INCOMING_PKT_VC4_FILTER_FLIT4_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT4_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_2_INQ_PRF_INCOMING_PKT_VC4_FILTER_FLIT4_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_3_INQ_PRF_INCOMING_PKT_VC4_FILTER_FLIT4_CNT'} = {
    NAME => 'AR_RTR_3_3_INQ_PRF_INCOMING_PKT_VC4_FILTER_FLIT4_CNT',
    LABEL => 'AR_RTR_3_3_INQ_PRF_INCOMING_PKT_VC4_FILTER_FLIT4_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT4_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_3_INQ_PRF_INCOMING_PKT_VC4_FILTER_FLIT4_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_4_INQ_PRF_INCOMING_PKT_VC4_FILTER_FLIT4_CNT'} = {
    NAME => 'AR_RTR_3_4_INQ_PRF_INCOMING_PKT_VC4_FILTER_FLIT4_CNT',
    LABEL => 'AR_RTR_3_4_INQ_PRF_INCOMING_PKT_VC4_FILTER_FLIT4_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT4_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_4_INQ_PRF_INCOMING_PKT_VC4_FILTER_FLIT4_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_5_INQ_PRF_INCOMING_PKT_VC4_FILTER_FLIT4_CNT'} = {
    NAME => 'AR_RTR_3_5_INQ_PRF_INCOMING_PKT_VC4_FILTER_FLIT4_CNT',
    LABEL => 'AR_RTR_3_5_INQ_PRF_INCOMING_PKT_VC4_FILTER_FLIT4_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT4_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_5_INQ_PRF_INCOMING_PKT_VC4_FILTER_FLIT4_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_6_INQ_PRF_INCOMING_PKT_VC4_FILTER_FLIT4_CNT'} = {
    NAME => 'AR_RTR_3_6_INQ_PRF_INCOMING_PKT_VC4_FILTER_FLIT4_CNT',
    LABEL => 'AR_RTR_3_6_INQ_PRF_INCOMING_PKT_VC4_FILTER_FLIT4_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT4_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_6_INQ_PRF_INCOMING_PKT_VC4_FILTER_FLIT4_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_7_INQ_PRF_INCOMING_PKT_VC4_FILTER_FLIT4_CNT'} = {
    NAME => 'AR_RTR_3_7_INQ_PRF_INCOMING_PKT_VC4_FILTER_FLIT4_CNT',
    LABEL => 'AR_RTR_3_7_INQ_PRF_INCOMING_PKT_VC4_FILTER_FLIT4_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT4_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_7_INQ_PRF_INCOMING_PKT_VC4_FILTER_FLIT4_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_0_INQ_PRF_INCOMING_PKT_VC4_FILTER_FLIT4_CNT'} = {
    NAME => 'AR_RTR_4_0_INQ_PRF_INCOMING_PKT_VC4_FILTER_FLIT4_CNT',
    LABEL => 'AR_RTR_4_0_INQ_PRF_INCOMING_PKT_VC4_FILTER_FLIT4_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT4_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_0_INQ_PRF_INCOMING_PKT_VC4_FILTER_FLIT4_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_1_INQ_PRF_INCOMING_PKT_VC4_FILTER_FLIT4_CNT'} = {
    NAME => 'AR_RTR_4_1_INQ_PRF_INCOMING_PKT_VC4_FILTER_FLIT4_CNT',
    LABEL => 'AR_RTR_4_1_INQ_PRF_INCOMING_PKT_VC4_FILTER_FLIT4_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT4_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_1_INQ_PRF_INCOMING_PKT_VC4_FILTER_FLIT4_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_2_INQ_PRF_INCOMING_PKT_VC4_FILTER_FLIT4_CNT'} = {
    NAME => 'AR_RTR_4_2_INQ_PRF_INCOMING_PKT_VC4_FILTER_FLIT4_CNT',
    LABEL => 'AR_RTR_4_2_INQ_PRF_INCOMING_PKT_VC4_FILTER_FLIT4_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT4_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_2_INQ_PRF_INCOMING_PKT_VC4_FILTER_FLIT4_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_3_INQ_PRF_INCOMING_PKT_VC4_FILTER_FLIT4_CNT'} = {
    NAME => 'AR_RTR_4_3_INQ_PRF_INCOMING_PKT_VC4_FILTER_FLIT4_CNT',
    LABEL => 'AR_RTR_4_3_INQ_PRF_INCOMING_PKT_VC4_FILTER_FLIT4_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT4_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_3_INQ_PRF_INCOMING_PKT_VC4_FILTER_FLIT4_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_4_INQ_PRF_INCOMING_PKT_VC4_FILTER_FLIT4_CNT'} = {
    NAME => 'AR_RTR_4_4_INQ_PRF_INCOMING_PKT_VC4_FILTER_FLIT4_CNT',
    LABEL => 'AR_RTR_4_4_INQ_PRF_INCOMING_PKT_VC4_FILTER_FLIT4_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT4_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_4_INQ_PRF_INCOMING_PKT_VC4_FILTER_FLIT4_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_5_INQ_PRF_INCOMING_PKT_VC4_FILTER_FLIT4_CNT'} = {
    NAME => 'AR_RTR_4_5_INQ_PRF_INCOMING_PKT_VC4_FILTER_FLIT4_CNT',
    LABEL => 'AR_RTR_4_5_INQ_PRF_INCOMING_PKT_VC4_FILTER_FLIT4_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT4_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_5_INQ_PRF_INCOMING_PKT_VC4_FILTER_FLIT4_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_6_INQ_PRF_INCOMING_PKT_VC4_FILTER_FLIT4_CNT'} = {
    NAME => 'AR_RTR_4_6_INQ_PRF_INCOMING_PKT_VC4_FILTER_FLIT4_CNT',
    LABEL => 'AR_RTR_4_6_INQ_PRF_INCOMING_PKT_VC4_FILTER_FLIT4_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT4_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_6_INQ_PRF_INCOMING_PKT_VC4_FILTER_FLIT4_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_7_INQ_PRF_INCOMING_PKT_VC4_FILTER_FLIT4_CNT'} = {
    NAME => 'AR_RTR_4_7_INQ_PRF_INCOMING_PKT_VC4_FILTER_FLIT4_CNT',
    LABEL => 'AR_RTR_4_7_INQ_PRF_INCOMING_PKT_VC4_FILTER_FLIT4_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT4_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_7_INQ_PRF_INCOMING_PKT_VC4_FILTER_FLIT4_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_0_INQ_PRF_INCOMING_PKT_VC5_FILTER_FLIT5_CNT'} = {
    NAME => 'AR_RTR_0_0_INQ_PRF_INCOMING_PKT_VC5_FILTER_FLIT5_CNT',
    LABEL => 'AR_RTR_0_0_INQ_PRF_INCOMING_PKT_VC5_FILTER_FLIT5_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT5_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_0_INQ_PRF_INCOMING_PKT_VC5_FILTER_FLIT5_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_1_INQ_PRF_INCOMING_PKT_VC5_FILTER_FLIT5_CNT'} = {
    NAME => 'AR_RTR_0_1_INQ_PRF_INCOMING_PKT_VC5_FILTER_FLIT5_CNT',
    LABEL => 'AR_RTR_0_1_INQ_PRF_INCOMING_PKT_VC5_FILTER_FLIT5_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT5_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_1_INQ_PRF_INCOMING_PKT_VC5_FILTER_FLIT5_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_2_INQ_PRF_INCOMING_PKT_VC5_FILTER_FLIT5_CNT'} = {
    NAME => 'AR_RTR_0_2_INQ_PRF_INCOMING_PKT_VC5_FILTER_FLIT5_CNT',
    LABEL => 'AR_RTR_0_2_INQ_PRF_INCOMING_PKT_VC5_FILTER_FLIT5_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT5_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_2_INQ_PRF_INCOMING_PKT_VC5_FILTER_FLIT5_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_3_INQ_PRF_INCOMING_PKT_VC5_FILTER_FLIT5_CNT'} = {
    NAME => 'AR_RTR_0_3_INQ_PRF_INCOMING_PKT_VC5_FILTER_FLIT5_CNT',
    LABEL => 'AR_RTR_0_3_INQ_PRF_INCOMING_PKT_VC5_FILTER_FLIT5_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT5_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_3_INQ_PRF_INCOMING_PKT_VC5_FILTER_FLIT5_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_4_INQ_PRF_INCOMING_PKT_VC5_FILTER_FLIT5_CNT'} = {
    NAME => 'AR_RTR_0_4_INQ_PRF_INCOMING_PKT_VC5_FILTER_FLIT5_CNT',
    LABEL => 'AR_RTR_0_4_INQ_PRF_INCOMING_PKT_VC5_FILTER_FLIT5_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT5_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_4_INQ_PRF_INCOMING_PKT_VC5_FILTER_FLIT5_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_5_INQ_PRF_INCOMING_PKT_VC5_FILTER_FLIT5_CNT'} = {
    NAME => 'AR_RTR_0_5_INQ_PRF_INCOMING_PKT_VC5_FILTER_FLIT5_CNT',
    LABEL => 'AR_RTR_0_5_INQ_PRF_INCOMING_PKT_VC5_FILTER_FLIT5_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT5_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_5_INQ_PRF_INCOMING_PKT_VC5_FILTER_FLIT5_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_6_INQ_PRF_INCOMING_PKT_VC5_FILTER_FLIT5_CNT'} = {
    NAME => 'AR_RTR_0_6_INQ_PRF_INCOMING_PKT_VC5_FILTER_FLIT5_CNT',
    LABEL => 'AR_RTR_0_6_INQ_PRF_INCOMING_PKT_VC5_FILTER_FLIT5_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT5_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_6_INQ_PRF_INCOMING_PKT_VC5_FILTER_FLIT5_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_7_INQ_PRF_INCOMING_PKT_VC5_FILTER_FLIT5_CNT'} = {
    NAME => 'AR_RTR_0_7_INQ_PRF_INCOMING_PKT_VC5_FILTER_FLIT5_CNT',
    LABEL => 'AR_RTR_0_7_INQ_PRF_INCOMING_PKT_VC5_FILTER_FLIT5_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT5_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_7_INQ_PRF_INCOMING_PKT_VC5_FILTER_FLIT5_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_0_INQ_PRF_INCOMING_PKT_VC5_FILTER_FLIT5_CNT'} = {
    NAME => 'AR_RTR_1_0_INQ_PRF_INCOMING_PKT_VC5_FILTER_FLIT5_CNT',
    LABEL => 'AR_RTR_1_0_INQ_PRF_INCOMING_PKT_VC5_FILTER_FLIT5_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT5_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_0_INQ_PRF_INCOMING_PKT_VC5_FILTER_FLIT5_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_1_INQ_PRF_INCOMING_PKT_VC5_FILTER_FLIT5_CNT'} = {
    NAME => 'AR_RTR_1_1_INQ_PRF_INCOMING_PKT_VC5_FILTER_FLIT5_CNT',
    LABEL => 'AR_RTR_1_1_INQ_PRF_INCOMING_PKT_VC5_FILTER_FLIT5_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT5_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_1_INQ_PRF_INCOMING_PKT_VC5_FILTER_FLIT5_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_2_INQ_PRF_INCOMING_PKT_VC5_FILTER_FLIT5_CNT'} = {
    NAME => 'AR_RTR_1_2_INQ_PRF_INCOMING_PKT_VC5_FILTER_FLIT5_CNT',
    LABEL => 'AR_RTR_1_2_INQ_PRF_INCOMING_PKT_VC5_FILTER_FLIT5_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT5_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_2_INQ_PRF_INCOMING_PKT_VC5_FILTER_FLIT5_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_3_INQ_PRF_INCOMING_PKT_VC5_FILTER_FLIT5_CNT'} = {
    NAME => 'AR_RTR_1_3_INQ_PRF_INCOMING_PKT_VC5_FILTER_FLIT5_CNT',
    LABEL => 'AR_RTR_1_3_INQ_PRF_INCOMING_PKT_VC5_FILTER_FLIT5_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT5_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_3_INQ_PRF_INCOMING_PKT_VC5_FILTER_FLIT5_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_4_INQ_PRF_INCOMING_PKT_VC5_FILTER_FLIT5_CNT'} = {
    NAME => 'AR_RTR_1_4_INQ_PRF_INCOMING_PKT_VC5_FILTER_FLIT5_CNT',
    LABEL => 'AR_RTR_1_4_INQ_PRF_INCOMING_PKT_VC5_FILTER_FLIT5_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT5_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_4_INQ_PRF_INCOMING_PKT_VC5_FILTER_FLIT5_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_5_INQ_PRF_INCOMING_PKT_VC5_FILTER_FLIT5_CNT'} = {
    NAME => 'AR_RTR_1_5_INQ_PRF_INCOMING_PKT_VC5_FILTER_FLIT5_CNT',
    LABEL => 'AR_RTR_1_5_INQ_PRF_INCOMING_PKT_VC5_FILTER_FLIT5_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT5_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_5_INQ_PRF_INCOMING_PKT_VC5_FILTER_FLIT5_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_6_INQ_PRF_INCOMING_PKT_VC5_FILTER_FLIT5_CNT'} = {
    NAME => 'AR_RTR_1_6_INQ_PRF_INCOMING_PKT_VC5_FILTER_FLIT5_CNT',
    LABEL => 'AR_RTR_1_6_INQ_PRF_INCOMING_PKT_VC5_FILTER_FLIT5_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT5_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_6_INQ_PRF_INCOMING_PKT_VC5_FILTER_FLIT5_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_7_INQ_PRF_INCOMING_PKT_VC5_FILTER_FLIT5_CNT'} = {
    NAME => 'AR_RTR_1_7_INQ_PRF_INCOMING_PKT_VC5_FILTER_FLIT5_CNT',
    LABEL => 'AR_RTR_1_7_INQ_PRF_INCOMING_PKT_VC5_FILTER_FLIT5_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT5_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_7_INQ_PRF_INCOMING_PKT_VC5_FILTER_FLIT5_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_0_INQ_PRF_INCOMING_PKT_VC5_FILTER_FLIT5_CNT'} = {
    NAME => 'AR_RTR_2_0_INQ_PRF_INCOMING_PKT_VC5_FILTER_FLIT5_CNT',
    LABEL => 'AR_RTR_2_0_INQ_PRF_INCOMING_PKT_VC5_FILTER_FLIT5_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT5_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_0_INQ_PRF_INCOMING_PKT_VC5_FILTER_FLIT5_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_1_INQ_PRF_INCOMING_PKT_VC5_FILTER_FLIT5_CNT'} = {
    NAME => 'AR_RTR_2_1_INQ_PRF_INCOMING_PKT_VC5_FILTER_FLIT5_CNT',
    LABEL => 'AR_RTR_2_1_INQ_PRF_INCOMING_PKT_VC5_FILTER_FLIT5_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT5_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_1_INQ_PRF_INCOMING_PKT_VC5_FILTER_FLIT5_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_2_INQ_PRF_INCOMING_PKT_VC5_FILTER_FLIT5_CNT'} = {
    NAME => 'AR_RTR_2_2_INQ_PRF_INCOMING_PKT_VC5_FILTER_FLIT5_CNT',
    LABEL => 'AR_RTR_2_2_INQ_PRF_INCOMING_PKT_VC5_FILTER_FLIT5_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT5_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_2_INQ_PRF_INCOMING_PKT_VC5_FILTER_FLIT5_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_3_INQ_PRF_INCOMING_PKT_VC5_FILTER_FLIT5_CNT'} = {
    NAME => 'AR_RTR_2_3_INQ_PRF_INCOMING_PKT_VC5_FILTER_FLIT5_CNT',
    LABEL => 'AR_RTR_2_3_INQ_PRF_INCOMING_PKT_VC5_FILTER_FLIT5_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT5_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_3_INQ_PRF_INCOMING_PKT_VC5_FILTER_FLIT5_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_4_INQ_PRF_INCOMING_PKT_VC5_FILTER_FLIT5_CNT'} = {
    NAME => 'AR_RTR_2_4_INQ_PRF_INCOMING_PKT_VC5_FILTER_FLIT5_CNT',
    LABEL => 'AR_RTR_2_4_INQ_PRF_INCOMING_PKT_VC5_FILTER_FLIT5_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT5_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_4_INQ_PRF_INCOMING_PKT_VC5_FILTER_FLIT5_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_5_INQ_PRF_INCOMING_PKT_VC5_FILTER_FLIT5_CNT'} = {
    NAME => 'AR_RTR_2_5_INQ_PRF_INCOMING_PKT_VC5_FILTER_FLIT5_CNT',
    LABEL => 'AR_RTR_2_5_INQ_PRF_INCOMING_PKT_VC5_FILTER_FLIT5_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT5_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_5_INQ_PRF_INCOMING_PKT_VC5_FILTER_FLIT5_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_6_INQ_PRF_INCOMING_PKT_VC5_FILTER_FLIT5_CNT'} = {
    NAME => 'AR_RTR_2_6_INQ_PRF_INCOMING_PKT_VC5_FILTER_FLIT5_CNT',
    LABEL => 'AR_RTR_2_6_INQ_PRF_INCOMING_PKT_VC5_FILTER_FLIT5_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT5_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_6_INQ_PRF_INCOMING_PKT_VC5_FILTER_FLIT5_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_7_INQ_PRF_INCOMING_PKT_VC5_FILTER_FLIT5_CNT'} = {
    NAME => 'AR_RTR_2_7_INQ_PRF_INCOMING_PKT_VC5_FILTER_FLIT5_CNT',
    LABEL => 'AR_RTR_2_7_INQ_PRF_INCOMING_PKT_VC5_FILTER_FLIT5_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT5_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_7_INQ_PRF_INCOMING_PKT_VC5_FILTER_FLIT5_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_0_INQ_PRF_INCOMING_PKT_VC5_FILTER_FLIT5_CNT'} = {
    NAME => 'AR_RTR_3_0_INQ_PRF_INCOMING_PKT_VC5_FILTER_FLIT5_CNT',
    LABEL => 'AR_RTR_3_0_INQ_PRF_INCOMING_PKT_VC5_FILTER_FLIT5_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT5_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_0_INQ_PRF_INCOMING_PKT_VC5_FILTER_FLIT5_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_1_INQ_PRF_INCOMING_PKT_VC5_FILTER_FLIT5_CNT'} = {
    NAME => 'AR_RTR_3_1_INQ_PRF_INCOMING_PKT_VC5_FILTER_FLIT5_CNT',
    LABEL => 'AR_RTR_3_1_INQ_PRF_INCOMING_PKT_VC5_FILTER_FLIT5_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT5_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_1_INQ_PRF_INCOMING_PKT_VC5_FILTER_FLIT5_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_2_INQ_PRF_INCOMING_PKT_VC5_FILTER_FLIT5_CNT'} = {
    NAME => 'AR_RTR_3_2_INQ_PRF_INCOMING_PKT_VC5_FILTER_FLIT5_CNT',
    LABEL => 'AR_RTR_3_2_INQ_PRF_INCOMING_PKT_VC5_FILTER_FLIT5_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT5_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_2_INQ_PRF_INCOMING_PKT_VC5_FILTER_FLIT5_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_3_INQ_PRF_INCOMING_PKT_VC5_FILTER_FLIT5_CNT'} = {
    NAME => 'AR_RTR_3_3_INQ_PRF_INCOMING_PKT_VC5_FILTER_FLIT5_CNT',
    LABEL => 'AR_RTR_3_3_INQ_PRF_INCOMING_PKT_VC5_FILTER_FLIT5_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT5_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_3_INQ_PRF_INCOMING_PKT_VC5_FILTER_FLIT5_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_4_INQ_PRF_INCOMING_PKT_VC5_FILTER_FLIT5_CNT'} = {
    NAME => 'AR_RTR_3_4_INQ_PRF_INCOMING_PKT_VC5_FILTER_FLIT5_CNT',
    LABEL => 'AR_RTR_3_4_INQ_PRF_INCOMING_PKT_VC5_FILTER_FLIT5_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT5_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_4_INQ_PRF_INCOMING_PKT_VC5_FILTER_FLIT5_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_5_INQ_PRF_INCOMING_PKT_VC5_FILTER_FLIT5_CNT'} = {
    NAME => 'AR_RTR_3_5_INQ_PRF_INCOMING_PKT_VC5_FILTER_FLIT5_CNT',
    LABEL => 'AR_RTR_3_5_INQ_PRF_INCOMING_PKT_VC5_FILTER_FLIT5_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT5_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_5_INQ_PRF_INCOMING_PKT_VC5_FILTER_FLIT5_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_6_INQ_PRF_INCOMING_PKT_VC5_FILTER_FLIT5_CNT'} = {
    NAME => 'AR_RTR_3_6_INQ_PRF_INCOMING_PKT_VC5_FILTER_FLIT5_CNT',
    LABEL => 'AR_RTR_3_6_INQ_PRF_INCOMING_PKT_VC5_FILTER_FLIT5_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT5_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_6_INQ_PRF_INCOMING_PKT_VC5_FILTER_FLIT5_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_7_INQ_PRF_INCOMING_PKT_VC5_FILTER_FLIT5_CNT'} = {
    NAME => 'AR_RTR_3_7_INQ_PRF_INCOMING_PKT_VC5_FILTER_FLIT5_CNT',
    LABEL => 'AR_RTR_3_7_INQ_PRF_INCOMING_PKT_VC5_FILTER_FLIT5_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT5_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_7_INQ_PRF_INCOMING_PKT_VC5_FILTER_FLIT5_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_0_INQ_PRF_INCOMING_PKT_VC5_FILTER_FLIT5_CNT'} = {
    NAME => 'AR_RTR_4_0_INQ_PRF_INCOMING_PKT_VC5_FILTER_FLIT5_CNT',
    LABEL => 'AR_RTR_4_0_INQ_PRF_INCOMING_PKT_VC5_FILTER_FLIT5_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT5_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_0_INQ_PRF_INCOMING_PKT_VC5_FILTER_FLIT5_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_1_INQ_PRF_INCOMING_PKT_VC5_FILTER_FLIT5_CNT'} = {
    NAME => 'AR_RTR_4_1_INQ_PRF_INCOMING_PKT_VC5_FILTER_FLIT5_CNT',
    LABEL => 'AR_RTR_4_1_INQ_PRF_INCOMING_PKT_VC5_FILTER_FLIT5_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT5_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_1_INQ_PRF_INCOMING_PKT_VC5_FILTER_FLIT5_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_2_INQ_PRF_INCOMING_PKT_VC5_FILTER_FLIT5_CNT'} = {
    NAME => 'AR_RTR_4_2_INQ_PRF_INCOMING_PKT_VC5_FILTER_FLIT5_CNT',
    LABEL => 'AR_RTR_4_2_INQ_PRF_INCOMING_PKT_VC5_FILTER_FLIT5_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT5_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_2_INQ_PRF_INCOMING_PKT_VC5_FILTER_FLIT5_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_3_INQ_PRF_INCOMING_PKT_VC5_FILTER_FLIT5_CNT'} = {
    NAME => 'AR_RTR_4_3_INQ_PRF_INCOMING_PKT_VC5_FILTER_FLIT5_CNT',
    LABEL => 'AR_RTR_4_3_INQ_PRF_INCOMING_PKT_VC5_FILTER_FLIT5_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT5_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_3_INQ_PRF_INCOMING_PKT_VC5_FILTER_FLIT5_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_4_INQ_PRF_INCOMING_PKT_VC5_FILTER_FLIT5_CNT'} = {
    NAME => 'AR_RTR_4_4_INQ_PRF_INCOMING_PKT_VC5_FILTER_FLIT5_CNT',
    LABEL => 'AR_RTR_4_4_INQ_PRF_INCOMING_PKT_VC5_FILTER_FLIT5_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT5_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_4_INQ_PRF_INCOMING_PKT_VC5_FILTER_FLIT5_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_5_INQ_PRF_INCOMING_PKT_VC5_FILTER_FLIT5_CNT'} = {
    NAME => 'AR_RTR_4_5_INQ_PRF_INCOMING_PKT_VC5_FILTER_FLIT5_CNT',
    LABEL => 'AR_RTR_4_5_INQ_PRF_INCOMING_PKT_VC5_FILTER_FLIT5_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT5_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_5_INQ_PRF_INCOMING_PKT_VC5_FILTER_FLIT5_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_6_INQ_PRF_INCOMING_PKT_VC5_FILTER_FLIT5_CNT'} = {
    NAME => 'AR_RTR_4_6_INQ_PRF_INCOMING_PKT_VC5_FILTER_FLIT5_CNT',
    LABEL => 'AR_RTR_4_6_INQ_PRF_INCOMING_PKT_VC5_FILTER_FLIT5_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT5_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_6_INQ_PRF_INCOMING_PKT_VC5_FILTER_FLIT5_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_7_INQ_PRF_INCOMING_PKT_VC5_FILTER_FLIT5_CNT'} = {
    NAME => 'AR_RTR_4_7_INQ_PRF_INCOMING_PKT_VC5_FILTER_FLIT5_CNT',
    LABEL => 'AR_RTR_4_7_INQ_PRF_INCOMING_PKT_VC5_FILTER_FLIT5_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT5_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_7_INQ_PRF_INCOMING_PKT_VC5_FILTER_FLIT5_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_0_INQ_PRF_INCOMING_PKT_VC6_FILTER_FLIT6_CNT'} = {
    NAME => 'AR_RTR_0_0_INQ_PRF_INCOMING_PKT_VC6_FILTER_FLIT6_CNT',
    LABEL => 'AR_RTR_0_0_INQ_PRF_INCOMING_PKT_VC6_FILTER_FLIT6_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT6_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_0_INQ_PRF_INCOMING_PKT_VC6_FILTER_FLIT6_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_1_INQ_PRF_INCOMING_PKT_VC6_FILTER_FLIT6_CNT'} = {
    NAME => 'AR_RTR_0_1_INQ_PRF_INCOMING_PKT_VC6_FILTER_FLIT6_CNT',
    LABEL => 'AR_RTR_0_1_INQ_PRF_INCOMING_PKT_VC6_FILTER_FLIT6_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT6_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_1_INQ_PRF_INCOMING_PKT_VC6_FILTER_FLIT6_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_2_INQ_PRF_INCOMING_PKT_VC6_FILTER_FLIT6_CNT'} = {
    NAME => 'AR_RTR_0_2_INQ_PRF_INCOMING_PKT_VC6_FILTER_FLIT6_CNT',
    LABEL => 'AR_RTR_0_2_INQ_PRF_INCOMING_PKT_VC6_FILTER_FLIT6_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT6_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_2_INQ_PRF_INCOMING_PKT_VC6_FILTER_FLIT6_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_3_INQ_PRF_INCOMING_PKT_VC6_FILTER_FLIT6_CNT'} = {
    NAME => 'AR_RTR_0_3_INQ_PRF_INCOMING_PKT_VC6_FILTER_FLIT6_CNT',
    LABEL => 'AR_RTR_0_3_INQ_PRF_INCOMING_PKT_VC6_FILTER_FLIT6_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT6_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_3_INQ_PRF_INCOMING_PKT_VC6_FILTER_FLIT6_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_4_INQ_PRF_INCOMING_PKT_VC6_FILTER_FLIT6_CNT'} = {
    NAME => 'AR_RTR_0_4_INQ_PRF_INCOMING_PKT_VC6_FILTER_FLIT6_CNT',
    LABEL => 'AR_RTR_0_4_INQ_PRF_INCOMING_PKT_VC6_FILTER_FLIT6_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT6_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_4_INQ_PRF_INCOMING_PKT_VC6_FILTER_FLIT6_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_5_INQ_PRF_INCOMING_PKT_VC6_FILTER_FLIT6_CNT'} = {
    NAME => 'AR_RTR_0_5_INQ_PRF_INCOMING_PKT_VC6_FILTER_FLIT6_CNT',
    LABEL => 'AR_RTR_0_5_INQ_PRF_INCOMING_PKT_VC6_FILTER_FLIT6_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT6_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_5_INQ_PRF_INCOMING_PKT_VC6_FILTER_FLIT6_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_6_INQ_PRF_INCOMING_PKT_VC6_FILTER_FLIT6_CNT'} = {
    NAME => 'AR_RTR_0_6_INQ_PRF_INCOMING_PKT_VC6_FILTER_FLIT6_CNT',
    LABEL => 'AR_RTR_0_6_INQ_PRF_INCOMING_PKT_VC6_FILTER_FLIT6_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT6_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_6_INQ_PRF_INCOMING_PKT_VC6_FILTER_FLIT6_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_7_INQ_PRF_INCOMING_PKT_VC6_FILTER_FLIT6_CNT'} = {
    NAME => 'AR_RTR_0_7_INQ_PRF_INCOMING_PKT_VC6_FILTER_FLIT6_CNT',
    LABEL => 'AR_RTR_0_7_INQ_PRF_INCOMING_PKT_VC6_FILTER_FLIT6_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT6_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_7_INQ_PRF_INCOMING_PKT_VC6_FILTER_FLIT6_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_0_INQ_PRF_INCOMING_PKT_VC6_FILTER_FLIT6_CNT'} = {
    NAME => 'AR_RTR_1_0_INQ_PRF_INCOMING_PKT_VC6_FILTER_FLIT6_CNT',
    LABEL => 'AR_RTR_1_0_INQ_PRF_INCOMING_PKT_VC6_FILTER_FLIT6_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT6_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_0_INQ_PRF_INCOMING_PKT_VC6_FILTER_FLIT6_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_1_INQ_PRF_INCOMING_PKT_VC6_FILTER_FLIT6_CNT'} = {
    NAME => 'AR_RTR_1_1_INQ_PRF_INCOMING_PKT_VC6_FILTER_FLIT6_CNT',
    LABEL => 'AR_RTR_1_1_INQ_PRF_INCOMING_PKT_VC6_FILTER_FLIT6_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT6_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_1_INQ_PRF_INCOMING_PKT_VC6_FILTER_FLIT6_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_2_INQ_PRF_INCOMING_PKT_VC6_FILTER_FLIT6_CNT'} = {
    NAME => 'AR_RTR_1_2_INQ_PRF_INCOMING_PKT_VC6_FILTER_FLIT6_CNT',
    LABEL => 'AR_RTR_1_2_INQ_PRF_INCOMING_PKT_VC6_FILTER_FLIT6_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT6_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_2_INQ_PRF_INCOMING_PKT_VC6_FILTER_FLIT6_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_3_INQ_PRF_INCOMING_PKT_VC6_FILTER_FLIT6_CNT'} = {
    NAME => 'AR_RTR_1_3_INQ_PRF_INCOMING_PKT_VC6_FILTER_FLIT6_CNT',
    LABEL => 'AR_RTR_1_3_INQ_PRF_INCOMING_PKT_VC6_FILTER_FLIT6_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT6_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_3_INQ_PRF_INCOMING_PKT_VC6_FILTER_FLIT6_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_4_INQ_PRF_INCOMING_PKT_VC6_FILTER_FLIT6_CNT'} = {
    NAME => 'AR_RTR_1_4_INQ_PRF_INCOMING_PKT_VC6_FILTER_FLIT6_CNT',
    LABEL => 'AR_RTR_1_4_INQ_PRF_INCOMING_PKT_VC6_FILTER_FLIT6_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT6_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_4_INQ_PRF_INCOMING_PKT_VC6_FILTER_FLIT6_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_5_INQ_PRF_INCOMING_PKT_VC6_FILTER_FLIT6_CNT'} = {
    NAME => 'AR_RTR_1_5_INQ_PRF_INCOMING_PKT_VC6_FILTER_FLIT6_CNT',
    LABEL => 'AR_RTR_1_5_INQ_PRF_INCOMING_PKT_VC6_FILTER_FLIT6_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT6_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_5_INQ_PRF_INCOMING_PKT_VC6_FILTER_FLIT6_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_6_INQ_PRF_INCOMING_PKT_VC6_FILTER_FLIT6_CNT'} = {
    NAME => 'AR_RTR_1_6_INQ_PRF_INCOMING_PKT_VC6_FILTER_FLIT6_CNT',
    LABEL => 'AR_RTR_1_6_INQ_PRF_INCOMING_PKT_VC6_FILTER_FLIT6_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT6_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_6_INQ_PRF_INCOMING_PKT_VC6_FILTER_FLIT6_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_7_INQ_PRF_INCOMING_PKT_VC6_FILTER_FLIT6_CNT'} = {
    NAME => 'AR_RTR_1_7_INQ_PRF_INCOMING_PKT_VC6_FILTER_FLIT6_CNT',
    LABEL => 'AR_RTR_1_7_INQ_PRF_INCOMING_PKT_VC6_FILTER_FLIT6_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT6_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_7_INQ_PRF_INCOMING_PKT_VC6_FILTER_FLIT6_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_0_INQ_PRF_INCOMING_PKT_VC6_FILTER_FLIT6_CNT'} = {
    NAME => 'AR_RTR_2_0_INQ_PRF_INCOMING_PKT_VC6_FILTER_FLIT6_CNT',
    LABEL => 'AR_RTR_2_0_INQ_PRF_INCOMING_PKT_VC6_FILTER_FLIT6_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT6_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_0_INQ_PRF_INCOMING_PKT_VC6_FILTER_FLIT6_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_1_INQ_PRF_INCOMING_PKT_VC6_FILTER_FLIT6_CNT'} = {
    NAME => 'AR_RTR_2_1_INQ_PRF_INCOMING_PKT_VC6_FILTER_FLIT6_CNT',
    LABEL => 'AR_RTR_2_1_INQ_PRF_INCOMING_PKT_VC6_FILTER_FLIT6_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT6_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_1_INQ_PRF_INCOMING_PKT_VC6_FILTER_FLIT6_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_2_INQ_PRF_INCOMING_PKT_VC6_FILTER_FLIT6_CNT'} = {
    NAME => 'AR_RTR_2_2_INQ_PRF_INCOMING_PKT_VC6_FILTER_FLIT6_CNT',
    LABEL => 'AR_RTR_2_2_INQ_PRF_INCOMING_PKT_VC6_FILTER_FLIT6_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT6_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_2_INQ_PRF_INCOMING_PKT_VC6_FILTER_FLIT6_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_3_INQ_PRF_INCOMING_PKT_VC6_FILTER_FLIT6_CNT'} = {
    NAME => 'AR_RTR_2_3_INQ_PRF_INCOMING_PKT_VC6_FILTER_FLIT6_CNT',
    LABEL => 'AR_RTR_2_3_INQ_PRF_INCOMING_PKT_VC6_FILTER_FLIT6_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT6_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_3_INQ_PRF_INCOMING_PKT_VC6_FILTER_FLIT6_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_4_INQ_PRF_INCOMING_PKT_VC6_FILTER_FLIT6_CNT'} = {
    NAME => 'AR_RTR_2_4_INQ_PRF_INCOMING_PKT_VC6_FILTER_FLIT6_CNT',
    LABEL => 'AR_RTR_2_4_INQ_PRF_INCOMING_PKT_VC6_FILTER_FLIT6_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT6_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_4_INQ_PRF_INCOMING_PKT_VC6_FILTER_FLIT6_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_5_INQ_PRF_INCOMING_PKT_VC6_FILTER_FLIT6_CNT'} = {
    NAME => 'AR_RTR_2_5_INQ_PRF_INCOMING_PKT_VC6_FILTER_FLIT6_CNT',
    LABEL => 'AR_RTR_2_5_INQ_PRF_INCOMING_PKT_VC6_FILTER_FLIT6_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT6_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_5_INQ_PRF_INCOMING_PKT_VC6_FILTER_FLIT6_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_6_INQ_PRF_INCOMING_PKT_VC6_FILTER_FLIT6_CNT'} = {
    NAME => 'AR_RTR_2_6_INQ_PRF_INCOMING_PKT_VC6_FILTER_FLIT6_CNT',
    LABEL => 'AR_RTR_2_6_INQ_PRF_INCOMING_PKT_VC6_FILTER_FLIT6_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT6_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_6_INQ_PRF_INCOMING_PKT_VC6_FILTER_FLIT6_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_7_INQ_PRF_INCOMING_PKT_VC6_FILTER_FLIT6_CNT'} = {
    NAME => 'AR_RTR_2_7_INQ_PRF_INCOMING_PKT_VC6_FILTER_FLIT6_CNT',
    LABEL => 'AR_RTR_2_7_INQ_PRF_INCOMING_PKT_VC6_FILTER_FLIT6_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT6_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_7_INQ_PRF_INCOMING_PKT_VC6_FILTER_FLIT6_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_0_INQ_PRF_INCOMING_PKT_VC6_FILTER_FLIT6_CNT'} = {
    NAME => 'AR_RTR_3_0_INQ_PRF_INCOMING_PKT_VC6_FILTER_FLIT6_CNT',
    LABEL => 'AR_RTR_3_0_INQ_PRF_INCOMING_PKT_VC6_FILTER_FLIT6_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT6_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_0_INQ_PRF_INCOMING_PKT_VC6_FILTER_FLIT6_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_1_INQ_PRF_INCOMING_PKT_VC6_FILTER_FLIT6_CNT'} = {
    NAME => 'AR_RTR_3_1_INQ_PRF_INCOMING_PKT_VC6_FILTER_FLIT6_CNT',
    LABEL => 'AR_RTR_3_1_INQ_PRF_INCOMING_PKT_VC6_FILTER_FLIT6_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT6_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_1_INQ_PRF_INCOMING_PKT_VC6_FILTER_FLIT6_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_2_INQ_PRF_INCOMING_PKT_VC6_FILTER_FLIT6_CNT'} = {
    NAME => 'AR_RTR_3_2_INQ_PRF_INCOMING_PKT_VC6_FILTER_FLIT6_CNT',
    LABEL => 'AR_RTR_3_2_INQ_PRF_INCOMING_PKT_VC6_FILTER_FLIT6_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT6_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_2_INQ_PRF_INCOMING_PKT_VC6_FILTER_FLIT6_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_3_INQ_PRF_INCOMING_PKT_VC6_FILTER_FLIT6_CNT'} = {
    NAME => 'AR_RTR_3_3_INQ_PRF_INCOMING_PKT_VC6_FILTER_FLIT6_CNT',
    LABEL => 'AR_RTR_3_3_INQ_PRF_INCOMING_PKT_VC6_FILTER_FLIT6_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT6_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_3_INQ_PRF_INCOMING_PKT_VC6_FILTER_FLIT6_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_4_INQ_PRF_INCOMING_PKT_VC6_FILTER_FLIT6_CNT'} = {
    NAME => 'AR_RTR_3_4_INQ_PRF_INCOMING_PKT_VC6_FILTER_FLIT6_CNT',
    LABEL => 'AR_RTR_3_4_INQ_PRF_INCOMING_PKT_VC6_FILTER_FLIT6_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT6_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_4_INQ_PRF_INCOMING_PKT_VC6_FILTER_FLIT6_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_5_INQ_PRF_INCOMING_PKT_VC6_FILTER_FLIT6_CNT'} = {
    NAME => 'AR_RTR_3_5_INQ_PRF_INCOMING_PKT_VC6_FILTER_FLIT6_CNT',
    LABEL => 'AR_RTR_3_5_INQ_PRF_INCOMING_PKT_VC6_FILTER_FLIT6_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT6_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_5_INQ_PRF_INCOMING_PKT_VC6_FILTER_FLIT6_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_6_INQ_PRF_INCOMING_PKT_VC6_FILTER_FLIT6_CNT'} = {
    NAME => 'AR_RTR_3_6_INQ_PRF_INCOMING_PKT_VC6_FILTER_FLIT6_CNT',
    LABEL => 'AR_RTR_3_6_INQ_PRF_INCOMING_PKT_VC6_FILTER_FLIT6_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT6_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_6_INQ_PRF_INCOMING_PKT_VC6_FILTER_FLIT6_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_7_INQ_PRF_INCOMING_PKT_VC6_FILTER_FLIT6_CNT'} = {
    NAME => 'AR_RTR_3_7_INQ_PRF_INCOMING_PKT_VC6_FILTER_FLIT6_CNT',
    LABEL => 'AR_RTR_3_7_INQ_PRF_INCOMING_PKT_VC6_FILTER_FLIT6_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT6_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_7_INQ_PRF_INCOMING_PKT_VC6_FILTER_FLIT6_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_0_INQ_PRF_INCOMING_PKT_VC6_FILTER_FLIT6_CNT'} = {
    NAME => 'AR_RTR_4_0_INQ_PRF_INCOMING_PKT_VC6_FILTER_FLIT6_CNT',
    LABEL => 'AR_RTR_4_0_INQ_PRF_INCOMING_PKT_VC6_FILTER_FLIT6_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT6_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_0_INQ_PRF_INCOMING_PKT_VC6_FILTER_FLIT6_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_1_INQ_PRF_INCOMING_PKT_VC6_FILTER_FLIT6_CNT'} = {
    NAME => 'AR_RTR_4_1_INQ_PRF_INCOMING_PKT_VC6_FILTER_FLIT6_CNT',
    LABEL => 'AR_RTR_4_1_INQ_PRF_INCOMING_PKT_VC6_FILTER_FLIT6_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT6_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_1_INQ_PRF_INCOMING_PKT_VC6_FILTER_FLIT6_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_2_INQ_PRF_INCOMING_PKT_VC6_FILTER_FLIT6_CNT'} = {
    NAME => 'AR_RTR_4_2_INQ_PRF_INCOMING_PKT_VC6_FILTER_FLIT6_CNT',
    LABEL => 'AR_RTR_4_2_INQ_PRF_INCOMING_PKT_VC6_FILTER_FLIT6_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT6_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_2_INQ_PRF_INCOMING_PKT_VC6_FILTER_FLIT6_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_3_INQ_PRF_INCOMING_PKT_VC6_FILTER_FLIT6_CNT'} = {
    NAME => 'AR_RTR_4_3_INQ_PRF_INCOMING_PKT_VC6_FILTER_FLIT6_CNT',
    LABEL => 'AR_RTR_4_3_INQ_PRF_INCOMING_PKT_VC6_FILTER_FLIT6_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT6_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_3_INQ_PRF_INCOMING_PKT_VC6_FILTER_FLIT6_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_4_INQ_PRF_INCOMING_PKT_VC6_FILTER_FLIT6_CNT'} = {
    NAME => 'AR_RTR_4_4_INQ_PRF_INCOMING_PKT_VC6_FILTER_FLIT6_CNT',
    LABEL => 'AR_RTR_4_4_INQ_PRF_INCOMING_PKT_VC6_FILTER_FLIT6_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT6_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_4_INQ_PRF_INCOMING_PKT_VC6_FILTER_FLIT6_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_5_INQ_PRF_INCOMING_PKT_VC6_FILTER_FLIT6_CNT'} = {
    NAME => 'AR_RTR_4_5_INQ_PRF_INCOMING_PKT_VC6_FILTER_FLIT6_CNT',
    LABEL => 'AR_RTR_4_5_INQ_PRF_INCOMING_PKT_VC6_FILTER_FLIT6_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT6_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_5_INQ_PRF_INCOMING_PKT_VC6_FILTER_FLIT6_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_6_INQ_PRF_INCOMING_PKT_VC6_FILTER_FLIT6_CNT'} = {
    NAME => 'AR_RTR_4_6_INQ_PRF_INCOMING_PKT_VC6_FILTER_FLIT6_CNT',
    LABEL => 'AR_RTR_4_6_INQ_PRF_INCOMING_PKT_VC6_FILTER_FLIT6_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT6_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_6_INQ_PRF_INCOMING_PKT_VC6_FILTER_FLIT6_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_7_INQ_PRF_INCOMING_PKT_VC6_FILTER_FLIT6_CNT'} = {
    NAME => 'AR_RTR_4_7_INQ_PRF_INCOMING_PKT_VC6_FILTER_FLIT6_CNT',
    LABEL => 'AR_RTR_4_7_INQ_PRF_INCOMING_PKT_VC6_FILTER_FLIT6_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT6_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_7_INQ_PRF_INCOMING_PKT_VC6_FILTER_FLIT6_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_0_INQ_PRF_INCOMING_PKT_VC7_FILTER_FLIT7_CNT'} = {
    NAME => 'AR_RTR_0_0_INQ_PRF_INCOMING_PKT_VC7_FILTER_FLIT7_CNT',
    LABEL => 'AR_RTR_0_0_INQ_PRF_INCOMING_PKT_VC7_FILTER_FLIT7_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT7_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_0_INQ_PRF_INCOMING_PKT_VC7_FILTER_FLIT7_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_1_INQ_PRF_INCOMING_PKT_VC7_FILTER_FLIT7_CNT'} = {
    NAME => 'AR_RTR_0_1_INQ_PRF_INCOMING_PKT_VC7_FILTER_FLIT7_CNT',
    LABEL => 'AR_RTR_0_1_INQ_PRF_INCOMING_PKT_VC7_FILTER_FLIT7_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT7_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_1_INQ_PRF_INCOMING_PKT_VC7_FILTER_FLIT7_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_2_INQ_PRF_INCOMING_PKT_VC7_FILTER_FLIT7_CNT'} = {
    NAME => 'AR_RTR_0_2_INQ_PRF_INCOMING_PKT_VC7_FILTER_FLIT7_CNT',
    LABEL => 'AR_RTR_0_2_INQ_PRF_INCOMING_PKT_VC7_FILTER_FLIT7_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT7_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_2_INQ_PRF_INCOMING_PKT_VC7_FILTER_FLIT7_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_3_INQ_PRF_INCOMING_PKT_VC7_FILTER_FLIT7_CNT'} = {
    NAME => 'AR_RTR_0_3_INQ_PRF_INCOMING_PKT_VC7_FILTER_FLIT7_CNT',
    LABEL => 'AR_RTR_0_3_INQ_PRF_INCOMING_PKT_VC7_FILTER_FLIT7_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT7_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_3_INQ_PRF_INCOMING_PKT_VC7_FILTER_FLIT7_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_4_INQ_PRF_INCOMING_PKT_VC7_FILTER_FLIT7_CNT'} = {
    NAME => 'AR_RTR_0_4_INQ_PRF_INCOMING_PKT_VC7_FILTER_FLIT7_CNT',
    LABEL => 'AR_RTR_0_4_INQ_PRF_INCOMING_PKT_VC7_FILTER_FLIT7_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT7_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_4_INQ_PRF_INCOMING_PKT_VC7_FILTER_FLIT7_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_5_INQ_PRF_INCOMING_PKT_VC7_FILTER_FLIT7_CNT'} = {
    NAME => 'AR_RTR_0_5_INQ_PRF_INCOMING_PKT_VC7_FILTER_FLIT7_CNT',
    LABEL => 'AR_RTR_0_5_INQ_PRF_INCOMING_PKT_VC7_FILTER_FLIT7_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT7_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_5_INQ_PRF_INCOMING_PKT_VC7_FILTER_FLIT7_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_6_INQ_PRF_INCOMING_PKT_VC7_FILTER_FLIT7_CNT'} = {
    NAME => 'AR_RTR_0_6_INQ_PRF_INCOMING_PKT_VC7_FILTER_FLIT7_CNT',
    LABEL => 'AR_RTR_0_6_INQ_PRF_INCOMING_PKT_VC7_FILTER_FLIT7_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT7_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_6_INQ_PRF_INCOMING_PKT_VC7_FILTER_FLIT7_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_7_INQ_PRF_INCOMING_PKT_VC7_FILTER_FLIT7_CNT'} = {
    NAME => 'AR_RTR_0_7_INQ_PRF_INCOMING_PKT_VC7_FILTER_FLIT7_CNT',
    LABEL => 'AR_RTR_0_7_INQ_PRF_INCOMING_PKT_VC7_FILTER_FLIT7_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT7_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_7_INQ_PRF_INCOMING_PKT_VC7_FILTER_FLIT7_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_0_INQ_PRF_INCOMING_PKT_VC7_FILTER_FLIT7_CNT'} = {
    NAME => 'AR_RTR_1_0_INQ_PRF_INCOMING_PKT_VC7_FILTER_FLIT7_CNT',
    LABEL => 'AR_RTR_1_0_INQ_PRF_INCOMING_PKT_VC7_FILTER_FLIT7_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT7_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_0_INQ_PRF_INCOMING_PKT_VC7_FILTER_FLIT7_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_1_INQ_PRF_INCOMING_PKT_VC7_FILTER_FLIT7_CNT'} = {
    NAME => 'AR_RTR_1_1_INQ_PRF_INCOMING_PKT_VC7_FILTER_FLIT7_CNT',
    LABEL => 'AR_RTR_1_1_INQ_PRF_INCOMING_PKT_VC7_FILTER_FLIT7_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT7_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_1_INQ_PRF_INCOMING_PKT_VC7_FILTER_FLIT7_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_2_INQ_PRF_INCOMING_PKT_VC7_FILTER_FLIT7_CNT'} = {
    NAME => 'AR_RTR_1_2_INQ_PRF_INCOMING_PKT_VC7_FILTER_FLIT7_CNT',
    LABEL => 'AR_RTR_1_2_INQ_PRF_INCOMING_PKT_VC7_FILTER_FLIT7_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT7_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_2_INQ_PRF_INCOMING_PKT_VC7_FILTER_FLIT7_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_3_INQ_PRF_INCOMING_PKT_VC7_FILTER_FLIT7_CNT'} = {
    NAME => 'AR_RTR_1_3_INQ_PRF_INCOMING_PKT_VC7_FILTER_FLIT7_CNT',
    LABEL => 'AR_RTR_1_3_INQ_PRF_INCOMING_PKT_VC7_FILTER_FLIT7_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT7_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_3_INQ_PRF_INCOMING_PKT_VC7_FILTER_FLIT7_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_4_INQ_PRF_INCOMING_PKT_VC7_FILTER_FLIT7_CNT'} = {
    NAME => 'AR_RTR_1_4_INQ_PRF_INCOMING_PKT_VC7_FILTER_FLIT7_CNT',
    LABEL => 'AR_RTR_1_4_INQ_PRF_INCOMING_PKT_VC7_FILTER_FLIT7_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT7_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_4_INQ_PRF_INCOMING_PKT_VC7_FILTER_FLIT7_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_5_INQ_PRF_INCOMING_PKT_VC7_FILTER_FLIT7_CNT'} = {
    NAME => 'AR_RTR_1_5_INQ_PRF_INCOMING_PKT_VC7_FILTER_FLIT7_CNT',
    LABEL => 'AR_RTR_1_5_INQ_PRF_INCOMING_PKT_VC7_FILTER_FLIT7_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT7_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_5_INQ_PRF_INCOMING_PKT_VC7_FILTER_FLIT7_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_6_INQ_PRF_INCOMING_PKT_VC7_FILTER_FLIT7_CNT'} = {
    NAME => 'AR_RTR_1_6_INQ_PRF_INCOMING_PKT_VC7_FILTER_FLIT7_CNT',
    LABEL => 'AR_RTR_1_6_INQ_PRF_INCOMING_PKT_VC7_FILTER_FLIT7_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT7_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_6_INQ_PRF_INCOMING_PKT_VC7_FILTER_FLIT7_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_7_INQ_PRF_INCOMING_PKT_VC7_FILTER_FLIT7_CNT'} = {
    NAME => 'AR_RTR_1_7_INQ_PRF_INCOMING_PKT_VC7_FILTER_FLIT7_CNT',
    LABEL => 'AR_RTR_1_7_INQ_PRF_INCOMING_PKT_VC7_FILTER_FLIT7_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT7_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_7_INQ_PRF_INCOMING_PKT_VC7_FILTER_FLIT7_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_0_INQ_PRF_INCOMING_PKT_VC7_FILTER_FLIT7_CNT'} = {
    NAME => 'AR_RTR_2_0_INQ_PRF_INCOMING_PKT_VC7_FILTER_FLIT7_CNT',
    LABEL => 'AR_RTR_2_0_INQ_PRF_INCOMING_PKT_VC7_FILTER_FLIT7_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT7_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_0_INQ_PRF_INCOMING_PKT_VC7_FILTER_FLIT7_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_1_INQ_PRF_INCOMING_PKT_VC7_FILTER_FLIT7_CNT'} = {
    NAME => 'AR_RTR_2_1_INQ_PRF_INCOMING_PKT_VC7_FILTER_FLIT7_CNT',
    LABEL => 'AR_RTR_2_1_INQ_PRF_INCOMING_PKT_VC7_FILTER_FLIT7_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT7_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_1_INQ_PRF_INCOMING_PKT_VC7_FILTER_FLIT7_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_2_INQ_PRF_INCOMING_PKT_VC7_FILTER_FLIT7_CNT'} = {
    NAME => 'AR_RTR_2_2_INQ_PRF_INCOMING_PKT_VC7_FILTER_FLIT7_CNT',
    LABEL => 'AR_RTR_2_2_INQ_PRF_INCOMING_PKT_VC7_FILTER_FLIT7_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT7_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_2_INQ_PRF_INCOMING_PKT_VC7_FILTER_FLIT7_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_3_INQ_PRF_INCOMING_PKT_VC7_FILTER_FLIT7_CNT'} = {
    NAME => 'AR_RTR_2_3_INQ_PRF_INCOMING_PKT_VC7_FILTER_FLIT7_CNT',
    LABEL => 'AR_RTR_2_3_INQ_PRF_INCOMING_PKT_VC7_FILTER_FLIT7_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT7_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_3_INQ_PRF_INCOMING_PKT_VC7_FILTER_FLIT7_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_4_INQ_PRF_INCOMING_PKT_VC7_FILTER_FLIT7_CNT'} = {
    NAME => 'AR_RTR_2_4_INQ_PRF_INCOMING_PKT_VC7_FILTER_FLIT7_CNT',
    LABEL => 'AR_RTR_2_4_INQ_PRF_INCOMING_PKT_VC7_FILTER_FLIT7_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT7_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_4_INQ_PRF_INCOMING_PKT_VC7_FILTER_FLIT7_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_5_INQ_PRF_INCOMING_PKT_VC7_FILTER_FLIT7_CNT'} = {
    NAME => 'AR_RTR_2_5_INQ_PRF_INCOMING_PKT_VC7_FILTER_FLIT7_CNT',
    LABEL => 'AR_RTR_2_5_INQ_PRF_INCOMING_PKT_VC7_FILTER_FLIT7_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT7_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_5_INQ_PRF_INCOMING_PKT_VC7_FILTER_FLIT7_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_6_INQ_PRF_INCOMING_PKT_VC7_FILTER_FLIT7_CNT'} = {
    NAME => 'AR_RTR_2_6_INQ_PRF_INCOMING_PKT_VC7_FILTER_FLIT7_CNT',
    LABEL => 'AR_RTR_2_6_INQ_PRF_INCOMING_PKT_VC7_FILTER_FLIT7_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT7_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_6_INQ_PRF_INCOMING_PKT_VC7_FILTER_FLIT7_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_7_INQ_PRF_INCOMING_PKT_VC7_FILTER_FLIT7_CNT'} = {
    NAME => 'AR_RTR_2_7_INQ_PRF_INCOMING_PKT_VC7_FILTER_FLIT7_CNT',
    LABEL => 'AR_RTR_2_7_INQ_PRF_INCOMING_PKT_VC7_FILTER_FLIT7_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT7_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_7_INQ_PRF_INCOMING_PKT_VC7_FILTER_FLIT7_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_0_INQ_PRF_INCOMING_PKT_VC7_FILTER_FLIT7_CNT'} = {
    NAME => 'AR_RTR_3_0_INQ_PRF_INCOMING_PKT_VC7_FILTER_FLIT7_CNT',
    LABEL => 'AR_RTR_3_0_INQ_PRF_INCOMING_PKT_VC7_FILTER_FLIT7_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT7_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_0_INQ_PRF_INCOMING_PKT_VC7_FILTER_FLIT7_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_1_INQ_PRF_INCOMING_PKT_VC7_FILTER_FLIT7_CNT'} = {
    NAME => 'AR_RTR_3_1_INQ_PRF_INCOMING_PKT_VC7_FILTER_FLIT7_CNT',
    LABEL => 'AR_RTR_3_1_INQ_PRF_INCOMING_PKT_VC7_FILTER_FLIT7_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT7_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_1_INQ_PRF_INCOMING_PKT_VC7_FILTER_FLIT7_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_2_INQ_PRF_INCOMING_PKT_VC7_FILTER_FLIT7_CNT'} = {
    NAME => 'AR_RTR_3_2_INQ_PRF_INCOMING_PKT_VC7_FILTER_FLIT7_CNT',
    LABEL => 'AR_RTR_3_2_INQ_PRF_INCOMING_PKT_VC7_FILTER_FLIT7_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT7_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_2_INQ_PRF_INCOMING_PKT_VC7_FILTER_FLIT7_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_3_INQ_PRF_INCOMING_PKT_VC7_FILTER_FLIT7_CNT'} = {
    NAME => 'AR_RTR_3_3_INQ_PRF_INCOMING_PKT_VC7_FILTER_FLIT7_CNT',
    LABEL => 'AR_RTR_3_3_INQ_PRF_INCOMING_PKT_VC7_FILTER_FLIT7_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT7_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_3_INQ_PRF_INCOMING_PKT_VC7_FILTER_FLIT7_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_4_INQ_PRF_INCOMING_PKT_VC7_FILTER_FLIT7_CNT'} = {
    NAME => 'AR_RTR_3_4_INQ_PRF_INCOMING_PKT_VC7_FILTER_FLIT7_CNT',
    LABEL => 'AR_RTR_3_4_INQ_PRF_INCOMING_PKT_VC7_FILTER_FLIT7_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT7_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_4_INQ_PRF_INCOMING_PKT_VC7_FILTER_FLIT7_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_5_INQ_PRF_INCOMING_PKT_VC7_FILTER_FLIT7_CNT'} = {
    NAME => 'AR_RTR_3_5_INQ_PRF_INCOMING_PKT_VC7_FILTER_FLIT7_CNT',
    LABEL => 'AR_RTR_3_5_INQ_PRF_INCOMING_PKT_VC7_FILTER_FLIT7_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT7_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_5_INQ_PRF_INCOMING_PKT_VC7_FILTER_FLIT7_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_6_INQ_PRF_INCOMING_PKT_VC7_FILTER_FLIT7_CNT'} = {
    NAME => 'AR_RTR_3_6_INQ_PRF_INCOMING_PKT_VC7_FILTER_FLIT7_CNT',
    LABEL => 'AR_RTR_3_6_INQ_PRF_INCOMING_PKT_VC7_FILTER_FLIT7_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT7_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_6_INQ_PRF_INCOMING_PKT_VC7_FILTER_FLIT7_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_7_INQ_PRF_INCOMING_PKT_VC7_FILTER_FLIT7_CNT'} = {
    NAME => 'AR_RTR_3_7_INQ_PRF_INCOMING_PKT_VC7_FILTER_FLIT7_CNT',
    LABEL => 'AR_RTR_3_7_INQ_PRF_INCOMING_PKT_VC7_FILTER_FLIT7_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT7_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_7_INQ_PRF_INCOMING_PKT_VC7_FILTER_FLIT7_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_0_INQ_PRF_INCOMING_PKT_VC7_FILTER_FLIT7_CNT'} = {
    NAME => 'AR_RTR_4_0_INQ_PRF_INCOMING_PKT_VC7_FILTER_FLIT7_CNT',
    LABEL => 'AR_RTR_4_0_INQ_PRF_INCOMING_PKT_VC7_FILTER_FLIT7_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT7_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_0_INQ_PRF_INCOMING_PKT_VC7_FILTER_FLIT7_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_1_INQ_PRF_INCOMING_PKT_VC7_FILTER_FLIT7_CNT'} = {
    NAME => 'AR_RTR_4_1_INQ_PRF_INCOMING_PKT_VC7_FILTER_FLIT7_CNT',
    LABEL => 'AR_RTR_4_1_INQ_PRF_INCOMING_PKT_VC7_FILTER_FLIT7_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT7_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_1_INQ_PRF_INCOMING_PKT_VC7_FILTER_FLIT7_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_2_INQ_PRF_INCOMING_PKT_VC7_FILTER_FLIT7_CNT'} = {
    NAME => 'AR_RTR_4_2_INQ_PRF_INCOMING_PKT_VC7_FILTER_FLIT7_CNT',
    LABEL => 'AR_RTR_4_2_INQ_PRF_INCOMING_PKT_VC7_FILTER_FLIT7_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT7_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_2_INQ_PRF_INCOMING_PKT_VC7_FILTER_FLIT7_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_3_INQ_PRF_INCOMING_PKT_VC7_FILTER_FLIT7_CNT'} = {
    NAME => 'AR_RTR_4_3_INQ_PRF_INCOMING_PKT_VC7_FILTER_FLIT7_CNT',
    LABEL => 'AR_RTR_4_3_INQ_PRF_INCOMING_PKT_VC7_FILTER_FLIT7_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT7_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_3_INQ_PRF_INCOMING_PKT_VC7_FILTER_FLIT7_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_4_INQ_PRF_INCOMING_PKT_VC7_FILTER_FLIT7_CNT'} = {
    NAME => 'AR_RTR_4_4_INQ_PRF_INCOMING_PKT_VC7_FILTER_FLIT7_CNT',
    LABEL => 'AR_RTR_4_4_INQ_PRF_INCOMING_PKT_VC7_FILTER_FLIT7_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT7_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_4_INQ_PRF_INCOMING_PKT_VC7_FILTER_FLIT7_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_5_INQ_PRF_INCOMING_PKT_VC7_FILTER_FLIT7_CNT'} = {
    NAME => 'AR_RTR_4_5_INQ_PRF_INCOMING_PKT_VC7_FILTER_FLIT7_CNT',
    LABEL => 'AR_RTR_4_5_INQ_PRF_INCOMING_PKT_VC7_FILTER_FLIT7_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT7_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_5_INQ_PRF_INCOMING_PKT_VC7_FILTER_FLIT7_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_6_INQ_PRF_INCOMING_PKT_VC7_FILTER_FLIT7_CNT'} = {
    NAME => 'AR_RTR_4_6_INQ_PRF_INCOMING_PKT_VC7_FILTER_FLIT7_CNT',
    LABEL => 'AR_RTR_4_6_INQ_PRF_INCOMING_PKT_VC7_FILTER_FLIT7_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT7_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_6_INQ_PRF_INCOMING_PKT_VC7_FILTER_FLIT7_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_7_INQ_PRF_INCOMING_PKT_VC7_FILTER_FLIT7_CNT'} = {
    NAME => 'AR_RTR_4_7_INQ_PRF_INCOMING_PKT_VC7_FILTER_FLIT7_CNT',
    LABEL => 'AR_RTR_4_7_INQ_PRF_INCOMING_PKT_VC7_FILTER_FLIT7_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts in one of three modes based on the settings in AR_RTR_INQ_PRF_FLIT7_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_7_INQ_PRF_INCOMING_PKT_VC7_FILTER_FLIT7_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_0_INQ_PRF_MATCH_FLIT_3_TO_0_FILTERING_CNT'} = {
    NAME => 'AR_RTR_0_0_INQ_PRF_MATCH_FLIT_3_TO_0_FILTERING_CNT',
    LABEL => 'AR_RTR_0_0_INQ_PRF_MATCH_FLIT_3_TO_0_FILTERING_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Increments when an incoming flit matches flit filtering setup registers 3 to 0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_0_INQ_PRF_MATCH_FLIT_3_TO_0_FILTERING_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_1_INQ_PRF_MATCH_FLIT_3_TO_0_FILTERING_CNT'} = {
    NAME => 'AR_RTR_0_1_INQ_PRF_MATCH_FLIT_3_TO_0_FILTERING_CNT',
    LABEL => 'AR_RTR_0_1_INQ_PRF_MATCH_FLIT_3_TO_0_FILTERING_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Increments when an incoming flit matches flit filtering setup registers 3 to 0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_1_INQ_PRF_MATCH_FLIT_3_TO_0_FILTERING_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_2_INQ_PRF_MATCH_FLIT_3_TO_0_FILTERING_CNT'} = {
    NAME => 'AR_RTR_0_2_INQ_PRF_MATCH_FLIT_3_TO_0_FILTERING_CNT',
    LABEL => 'AR_RTR_0_2_INQ_PRF_MATCH_FLIT_3_TO_0_FILTERING_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Increments when an incoming flit matches flit filtering setup registers 3 to 0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_2_INQ_PRF_MATCH_FLIT_3_TO_0_FILTERING_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_3_INQ_PRF_MATCH_FLIT_3_TO_0_FILTERING_CNT'} = {
    NAME => 'AR_RTR_0_3_INQ_PRF_MATCH_FLIT_3_TO_0_FILTERING_CNT',
    LABEL => 'AR_RTR_0_3_INQ_PRF_MATCH_FLIT_3_TO_0_FILTERING_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Increments when an incoming flit matches flit filtering setup registers 3 to 0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_3_INQ_PRF_MATCH_FLIT_3_TO_0_FILTERING_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_4_INQ_PRF_MATCH_FLIT_3_TO_0_FILTERING_CNT'} = {
    NAME => 'AR_RTR_0_4_INQ_PRF_MATCH_FLIT_3_TO_0_FILTERING_CNT',
    LABEL => 'AR_RTR_0_4_INQ_PRF_MATCH_FLIT_3_TO_0_FILTERING_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Increments when an incoming flit matches flit filtering setup registers 3 to 0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_4_INQ_PRF_MATCH_FLIT_3_TO_0_FILTERING_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_5_INQ_PRF_MATCH_FLIT_3_TO_0_FILTERING_CNT'} = {
    NAME => 'AR_RTR_0_5_INQ_PRF_MATCH_FLIT_3_TO_0_FILTERING_CNT',
    LABEL => 'AR_RTR_0_5_INQ_PRF_MATCH_FLIT_3_TO_0_FILTERING_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Increments when an incoming flit matches flit filtering setup registers 3 to 0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_5_INQ_PRF_MATCH_FLIT_3_TO_0_FILTERING_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_6_INQ_PRF_MATCH_FLIT_3_TO_0_FILTERING_CNT'} = {
    NAME => 'AR_RTR_0_6_INQ_PRF_MATCH_FLIT_3_TO_0_FILTERING_CNT',
    LABEL => 'AR_RTR_0_6_INQ_PRF_MATCH_FLIT_3_TO_0_FILTERING_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Increments when an incoming flit matches flit filtering setup registers 3 to 0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_6_INQ_PRF_MATCH_FLIT_3_TO_0_FILTERING_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_7_INQ_PRF_MATCH_FLIT_3_TO_0_FILTERING_CNT'} = {
    NAME => 'AR_RTR_0_7_INQ_PRF_MATCH_FLIT_3_TO_0_FILTERING_CNT',
    LABEL => 'AR_RTR_0_7_INQ_PRF_MATCH_FLIT_3_TO_0_FILTERING_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Increments when an incoming flit matches flit filtering setup registers 3 to 0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_7_INQ_PRF_MATCH_FLIT_3_TO_0_FILTERING_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_0_INQ_PRF_MATCH_FLIT_3_TO_0_FILTERING_CNT'} = {
    NAME => 'AR_RTR_1_0_INQ_PRF_MATCH_FLIT_3_TO_0_FILTERING_CNT',
    LABEL => 'AR_RTR_1_0_INQ_PRF_MATCH_FLIT_3_TO_0_FILTERING_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Increments when an incoming flit matches flit filtering setup registers 3 to 0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_0_INQ_PRF_MATCH_FLIT_3_TO_0_FILTERING_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_1_INQ_PRF_MATCH_FLIT_3_TO_0_FILTERING_CNT'} = {
    NAME => 'AR_RTR_1_1_INQ_PRF_MATCH_FLIT_3_TO_0_FILTERING_CNT',
    LABEL => 'AR_RTR_1_1_INQ_PRF_MATCH_FLIT_3_TO_0_FILTERING_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Increments when an incoming flit matches flit filtering setup registers 3 to 0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_1_INQ_PRF_MATCH_FLIT_3_TO_0_FILTERING_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_2_INQ_PRF_MATCH_FLIT_3_TO_0_FILTERING_CNT'} = {
    NAME => 'AR_RTR_1_2_INQ_PRF_MATCH_FLIT_3_TO_0_FILTERING_CNT',
    LABEL => 'AR_RTR_1_2_INQ_PRF_MATCH_FLIT_3_TO_0_FILTERING_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Increments when an incoming flit matches flit filtering setup registers 3 to 0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_2_INQ_PRF_MATCH_FLIT_3_TO_0_FILTERING_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_3_INQ_PRF_MATCH_FLIT_3_TO_0_FILTERING_CNT'} = {
    NAME => 'AR_RTR_1_3_INQ_PRF_MATCH_FLIT_3_TO_0_FILTERING_CNT',
    LABEL => 'AR_RTR_1_3_INQ_PRF_MATCH_FLIT_3_TO_0_FILTERING_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Increments when an incoming flit matches flit filtering setup registers 3 to 0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_3_INQ_PRF_MATCH_FLIT_3_TO_0_FILTERING_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_4_INQ_PRF_MATCH_FLIT_3_TO_0_FILTERING_CNT'} = {
    NAME => 'AR_RTR_1_4_INQ_PRF_MATCH_FLIT_3_TO_0_FILTERING_CNT',
    LABEL => 'AR_RTR_1_4_INQ_PRF_MATCH_FLIT_3_TO_0_FILTERING_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Increments when an incoming flit matches flit filtering setup registers 3 to 0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_4_INQ_PRF_MATCH_FLIT_3_TO_0_FILTERING_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_5_INQ_PRF_MATCH_FLIT_3_TO_0_FILTERING_CNT'} = {
    NAME => 'AR_RTR_1_5_INQ_PRF_MATCH_FLIT_3_TO_0_FILTERING_CNT',
    LABEL => 'AR_RTR_1_5_INQ_PRF_MATCH_FLIT_3_TO_0_FILTERING_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Increments when an incoming flit matches flit filtering setup registers 3 to 0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_5_INQ_PRF_MATCH_FLIT_3_TO_0_FILTERING_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_6_INQ_PRF_MATCH_FLIT_3_TO_0_FILTERING_CNT'} = {
    NAME => 'AR_RTR_1_6_INQ_PRF_MATCH_FLIT_3_TO_0_FILTERING_CNT',
    LABEL => 'AR_RTR_1_6_INQ_PRF_MATCH_FLIT_3_TO_0_FILTERING_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Increments when an incoming flit matches flit filtering setup registers 3 to 0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_6_INQ_PRF_MATCH_FLIT_3_TO_0_FILTERING_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_7_INQ_PRF_MATCH_FLIT_3_TO_0_FILTERING_CNT'} = {
    NAME => 'AR_RTR_1_7_INQ_PRF_MATCH_FLIT_3_TO_0_FILTERING_CNT',
    LABEL => 'AR_RTR_1_7_INQ_PRF_MATCH_FLIT_3_TO_0_FILTERING_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Increments when an incoming flit matches flit filtering setup registers 3 to 0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_7_INQ_PRF_MATCH_FLIT_3_TO_0_FILTERING_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_0_INQ_PRF_MATCH_FLIT_3_TO_0_FILTERING_CNT'} = {
    NAME => 'AR_RTR_2_0_INQ_PRF_MATCH_FLIT_3_TO_0_FILTERING_CNT',
    LABEL => 'AR_RTR_2_0_INQ_PRF_MATCH_FLIT_3_TO_0_FILTERING_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Increments when an incoming flit matches flit filtering setup registers 3 to 0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_0_INQ_PRF_MATCH_FLIT_3_TO_0_FILTERING_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_1_INQ_PRF_MATCH_FLIT_3_TO_0_FILTERING_CNT'} = {
    NAME => 'AR_RTR_2_1_INQ_PRF_MATCH_FLIT_3_TO_0_FILTERING_CNT',
    LABEL => 'AR_RTR_2_1_INQ_PRF_MATCH_FLIT_3_TO_0_FILTERING_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Increments when an incoming flit matches flit filtering setup registers 3 to 0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_1_INQ_PRF_MATCH_FLIT_3_TO_0_FILTERING_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_2_INQ_PRF_MATCH_FLIT_3_TO_0_FILTERING_CNT'} = {
    NAME => 'AR_RTR_2_2_INQ_PRF_MATCH_FLIT_3_TO_0_FILTERING_CNT',
    LABEL => 'AR_RTR_2_2_INQ_PRF_MATCH_FLIT_3_TO_0_FILTERING_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Increments when an incoming flit matches flit filtering setup registers 3 to 0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_2_INQ_PRF_MATCH_FLIT_3_TO_0_FILTERING_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_3_INQ_PRF_MATCH_FLIT_3_TO_0_FILTERING_CNT'} = {
    NAME => 'AR_RTR_2_3_INQ_PRF_MATCH_FLIT_3_TO_0_FILTERING_CNT',
    LABEL => 'AR_RTR_2_3_INQ_PRF_MATCH_FLIT_3_TO_0_FILTERING_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Increments when an incoming flit matches flit filtering setup registers 3 to 0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_3_INQ_PRF_MATCH_FLIT_3_TO_0_FILTERING_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_4_INQ_PRF_MATCH_FLIT_3_TO_0_FILTERING_CNT'} = {
    NAME => 'AR_RTR_2_4_INQ_PRF_MATCH_FLIT_3_TO_0_FILTERING_CNT',
    LABEL => 'AR_RTR_2_4_INQ_PRF_MATCH_FLIT_3_TO_0_FILTERING_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Increments when an incoming flit matches flit filtering setup registers 3 to 0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_4_INQ_PRF_MATCH_FLIT_3_TO_0_FILTERING_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_5_INQ_PRF_MATCH_FLIT_3_TO_0_FILTERING_CNT'} = {
    NAME => 'AR_RTR_2_5_INQ_PRF_MATCH_FLIT_3_TO_0_FILTERING_CNT',
    LABEL => 'AR_RTR_2_5_INQ_PRF_MATCH_FLIT_3_TO_0_FILTERING_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Increments when an incoming flit matches flit filtering setup registers 3 to 0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_5_INQ_PRF_MATCH_FLIT_3_TO_0_FILTERING_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_6_INQ_PRF_MATCH_FLIT_3_TO_0_FILTERING_CNT'} = {
    NAME => 'AR_RTR_2_6_INQ_PRF_MATCH_FLIT_3_TO_0_FILTERING_CNT',
    LABEL => 'AR_RTR_2_6_INQ_PRF_MATCH_FLIT_3_TO_0_FILTERING_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Increments when an incoming flit matches flit filtering setup registers 3 to 0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_6_INQ_PRF_MATCH_FLIT_3_TO_0_FILTERING_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_7_INQ_PRF_MATCH_FLIT_3_TO_0_FILTERING_CNT'} = {
    NAME => 'AR_RTR_2_7_INQ_PRF_MATCH_FLIT_3_TO_0_FILTERING_CNT',
    LABEL => 'AR_RTR_2_7_INQ_PRF_MATCH_FLIT_3_TO_0_FILTERING_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Increments when an incoming flit matches flit filtering setup registers 3 to 0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_7_INQ_PRF_MATCH_FLIT_3_TO_0_FILTERING_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_0_INQ_PRF_MATCH_FLIT_3_TO_0_FILTERING_CNT'} = {
    NAME => 'AR_RTR_3_0_INQ_PRF_MATCH_FLIT_3_TO_0_FILTERING_CNT',
    LABEL => 'AR_RTR_3_0_INQ_PRF_MATCH_FLIT_3_TO_0_FILTERING_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Increments when an incoming flit matches flit filtering setup registers 3 to 0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_0_INQ_PRF_MATCH_FLIT_3_TO_0_FILTERING_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_1_INQ_PRF_MATCH_FLIT_3_TO_0_FILTERING_CNT'} = {
    NAME => 'AR_RTR_3_1_INQ_PRF_MATCH_FLIT_3_TO_0_FILTERING_CNT',
    LABEL => 'AR_RTR_3_1_INQ_PRF_MATCH_FLIT_3_TO_0_FILTERING_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Increments when an incoming flit matches flit filtering setup registers 3 to 0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_1_INQ_PRF_MATCH_FLIT_3_TO_0_FILTERING_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_2_INQ_PRF_MATCH_FLIT_3_TO_0_FILTERING_CNT'} = {
    NAME => 'AR_RTR_3_2_INQ_PRF_MATCH_FLIT_3_TO_0_FILTERING_CNT',
    LABEL => 'AR_RTR_3_2_INQ_PRF_MATCH_FLIT_3_TO_0_FILTERING_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Increments when an incoming flit matches flit filtering setup registers 3 to 0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_2_INQ_PRF_MATCH_FLIT_3_TO_0_FILTERING_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_3_INQ_PRF_MATCH_FLIT_3_TO_0_FILTERING_CNT'} = {
    NAME => 'AR_RTR_3_3_INQ_PRF_MATCH_FLIT_3_TO_0_FILTERING_CNT',
    LABEL => 'AR_RTR_3_3_INQ_PRF_MATCH_FLIT_3_TO_0_FILTERING_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Increments when an incoming flit matches flit filtering setup registers 3 to 0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_3_INQ_PRF_MATCH_FLIT_3_TO_0_FILTERING_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_4_INQ_PRF_MATCH_FLIT_3_TO_0_FILTERING_CNT'} = {
    NAME => 'AR_RTR_3_4_INQ_PRF_MATCH_FLIT_3_TO_0_FILTERING_CNT',
    LABEL => 'AR_RTR_3_4_INQ_PRF_MATCH_FLIT_3_TO_0_FILTERING_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Increments when an incoming flit matches flit filtering setup registers 3 to 0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_4_INQ_PRF_MATCH_FLIT_3_TO_0_FILTERING_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_5_INQ_PRF_MATCH_FLIT_3_TO_0_FILTERING_CNT'} = {
    NAME => 'AR_RTR_3_5_INQ_PRF_MATCH_FLIT_3_TO_0_FILTERING_CNT',
    LABEL => 'AR_RTR_3_5_INQ_PRF_MATCH_FLIT_3_TO_0_FILTERING_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Increments when an incoming flit matches flit filtering setup registers 3 to 0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_5_INQ_PRF_MATCH_FLIT_3_TO_0_FILTERING_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_6_INQ_PRF_MATCH_FLIT_3_TO_0_FILTERING_CNT'} = {
    NAME => 'AR_RTR_3_6_INQ_PRF_MATCH_FLIT_3_TO_0_FILTERING_CNT',
    LABEL => 'AR_RTR_3_6_INQ_PRF_MATCH_FLIT_3_TO_0_FILTERING_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Increments when an incoming flit matches flit filtering setup registers 3 to 0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_6_INQ_PRF_MATCH_FLIT_3_TO_0_FILTERING_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_7_INQ_PRF_MATCH_FLIT_3_TO_0_FILTERING_CNT'} = {
    NAME => 'AR_RTR_3_7_INQ_PRF_MATCH_FLIT_3_TO_0_FILTERING_CNT',
    LABEL => 'AR_RTR_3_7_INQ_PRF_MATCH_FLIT_3_TO_0_FILTERING_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Increments when an incoming flit matches flit filtering setup registers 3 to 0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_7_INQ_PRF_MATCH_FLIT_3_TO_0_FILTERING_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_0_INQ_PRF_MATCH_FLIT_3_TO_0_FILTERING_CNT'} = {
    NAME => 'AR_RTR_4_0_INQ_PRF_MATCH_FLIT_3_TO_0_FILTERING_CNT',
    LABEL => 'AR_RTR_4_0_INQ_PRF_MATCH_FLIT_3_TO_0_FILTERING_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Increments when an incoming flit matches flit filtering setup registers 3 to 0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_0_INQ_PRF_MATCH_FLIT_3_TO_0_FILTERING_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_1_INQ_PRF_MATCH_FLIT_3_TO_0_FILTERING_CNT'} = {
    NAME => 'AR_RTR_4_1_INQ_PRF_MATCH_FLIT_3_TO_0_FILTERING_CNT',
    LABEL => 'AR_RTR_4_1_INQ_PRF_MATCH_FLIT_3_TO_0_FILTERING_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Increments when an incoming flit matches flit filtering setup registers 3 to 0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_1_INQ_PRF_MATCH_FLIT_3_TO_0_FILTERING_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_2_INQ_PRF_MATCH_FLIT_3_TO_0_FILTERING_CNT'} = {
    NAME => 'AR_RTR_4_2_INQ_PRF_MATCH_FLIT_3_TO_0_FILTERING_CNT',
    LABEL => 'AR_RTR_4_2_INQ_PRF_MATCH_FLIT_3_TO_0_FILTERING_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Increments when an incoming flit matches flit filtering setup registers 3 to 0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_2_INQ_PRF_MATCH_FLIT_3_TO_0_FILTERING_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_3_INQ_PRF_MATCH_FLIT_3_TO_0_FILTERING_CNT'} = {
    NAME => 'AR_RTR_4_3_INQ_PRF_MATCH_FLIT_3_TO_0_FILTERING_CNT',
    LABEL => 'AR_RTR_4_3_INQ_PRF_MATCH_FLIT_3_TO_0_FILTERING_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Increments when an incoming flit matches flit filtering setup registers 3 to 0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_3_INQ_PRF_MATCH_FLIT_3_TO_0_FILTERING_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_4_INQ_PRF_MATCH_FLIT_3_TO_0_FILTERING_CNT'} = {
    NAME => 'AR_RTR_4_4_INQ_PRF_MATCH_FLIT_3_TO_0_FILTERING_CNT',
    LABEL => 'AR_RTR_4_4_INQ_PRF_MATCH_FLIT_3_TO_0_FILTERING_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Increments when an incoming flit matches flit filtering setup registers 3 to 0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_4_INQ_PRF_MATCH_FLIT_3_TO_0_FILTERING_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_5_INQ_PRF_MATCH_FLIT_3_TO_0_FILTERING_CNT'} = {
    NAME => 'AR_RTR_4_5_INQ_PRF_MATCH_FLIT_3_TO_0_FILTERING_CNT',
    LABEL => 'AR_RTR_4_5_INQ_PRF_MATCH_FLIT_3_TO_0_FILTERING_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Increments when an incoming flit matches flit filtering setup registers 3 to 0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_5_INQ_PRF_MATCH_FLIT_3_TO_0_FILTERING_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_6_INQ_PRF_MATCH_FLIT_3_TO_0_FILTERING_CNT'} = {
    NAME => 'AR_RTR_4_6_INQ_PRF_MATCH_FLIT_3_TO_0_FILTERING_CNT',
    LABEL => 'AR_RTR_4_6_INQ_PRF_MATCH_FLIT_3_TO_0_FILTERING_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Increments when an incoming flit matches flit filtering setup registers 3 to 0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_6_INQ_PRF_MATCH_FLIT_3_TO_0_FILTERING_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_7_INQ_PRF_MATCH_FLIT_3_TO_0_FILTERING_CNT'} = {
    NAME => 'AR_RTR_4_7_INQ_PRF_MATCH_FLIT_3_TO_0_FILTERING_CNT',
    LABEL => 'AR_RTR_4_7_INQ_PRF_MATCH_FLIT_3_TO_0_FILTERING_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Increments when an incoming flit matches flit filtering setup registers 3 to 0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_7_INQ_PRF_MATCH_FLIT_3_TO_0_FILTERING_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_0_INQ_PRF_MATCH_FLIT_7_TO_4_FILTERING_CNT'} = {
    NAME => 'AR_RTR_0_0_INQ_PRF_MATCH_FLIT_7_TO_4_FILTERING_CNT',
    LABEL => 'AR_RTR_0_0_INQ_PRF_MATCH_FLIT_7_TO_4_FILTERING_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Increments when an incoming flit matches flit filtering setup registers 7 to 4',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_0_INQ_PRF_MATCH_FLIT_7_TO_4_FILTERING_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_1_INQ_PRF_MATCH_FLIT_7_TO_4_FILTERING_CNT'} = {
    NAME => 'AR_RTR_0_1_INQ_PRF_MATCH_FLIT_7_TO_4_FILTERING_CNT',
    LABEL => 'AR_RTR_0_1_INQ_PRF_MATCH_FLIT_7_TO_4_FILTERING_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Increments when an incoming flit matches flit filtering setup registers 7 to 4',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_1_INQ_PRF_MATCH_FLIT_7_TO_4_FILTERING_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_2_INQ_PRF_MATCH_FLIT_7_TO_4_FILTERING_CNT'} = {
    NAME => 'AR_RTR_0_2_INQ_PRF_MATCH_FLIT_7_TO_4_FILTERING_CNT',
    LABEL => 'AR_RTR_0_2_INQ_PRF_MATCH_FLIT_7_TO_4_FILTERING_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Increments when an incoming flit matches flit filtering setup registers 7 to 4',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_2_INQ_PRF_MATCH_FLIT_7_TO_4_FILTERING_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_3_INQ_PRF_MATCH_FLIT_7_TO_4_FILTERING_CNT'} = {
    NAME => 'AR_RTR_0_3_INQ_PRF_MATCH_FLIT_7_TO_4_FILTERING_CNT',
    LABEL => 'AR_RTR_0_3_INQ_PRF_MATCH_FLIT_7_TO_4_FILTERING_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Increments when an incoming flit matches flit filtering setup registers 7 to 4',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_3_INQ_PRF_MATCH_FLIT_7_TO_4_FILTERING_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_4_INQ_PRF_MATCH_FLIT_7_TO_4_FILTERING_CNT'} = {
    NAME => 'AR_RTR_0_4_INQ_PRF_MATCH_FLIT_7_TO_4_FILTERING_CNT',
    LABEL => 'AR_RTR_0_4_INQ_PRF_MATCH_FLIT_7_TO_4_FILTERING_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Increments when an incoming flit matches flit filtering setup registers 7 to 4',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_4_INQ_PRF_MATCH_FLIT_7_TO_4_FILTERING_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_5_INQ_PRF_MATCH_FLIT_7_TO_4_FILTERING_CNT'} = {
    NAME => 'AR_RTR_0_5_INQ_PRF_MATCH_FLIT_7_TO_4_FILTERING_CNT',
    LABEL => 'AR_RTR_0_5_INQ_PRF_MATCH_FLIT_7_TO_4_FILTERING_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Increments when an incoming flit matches flit filtering setup registers 7 to 4',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_5_INQ_PRF_MATCH_FLIT_7_TO_4_FILTERING_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_6_INQ_PRF_MATCH_FLIT_7_TO_4_FILTERING_CNT'} = {
    NAME => 'AR_RTR_0_6_INQ_PRF_MATCH_FLIT_7_TO_4_FILTERING_CNT',
    LABEL => 'AR_RTR_0_6_INQ_PRF_MATCH_FLIT_7_TO_4_FILTERING_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Increments when an incoming flit matches flit filtering setup registers 7 to 4',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_6_INQ_PRF_MATCH_FLIT_7_TO_4_FILTERING_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_7_INQ_PRF_MATCH_FLIT_7_TO_4_FILTERING_CNT'} = {
    NAME => 'AR_RTR_0_7_INQ_PRF_MATCH_FLIT_7_TO_4_FILTERING_CNT',
    LABEL => 'AR_RTR_0_7_INQ_PRF_MATCH_FLIT_7_TO_4_FILTERING_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Increments when an incoming flit matches flit filtering setup registers 7 to 4',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_7_INQ_PRF_MATCH_FLIT_7_TO_4_FILTERING_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_0_INQ_PRF_MATCH_FLIT_7_TO_4_FILTERING_CNT'} = {
    NAME => 'AR_RTR_1_0_INQ_PRF_MATCH_FLIT_7_TO_4_FILTERING_CNT',
    LABEL => 'AR_RTR_1_0_INQ_PRF_MATCH_FLIT_7_TO_4_FILTERING_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Increments when an incoming flit matches flit filtering setup registers 7 to 4',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_0_INQ_PRF_MATCH_FLIT_7_TO_4_FILTERING_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_1_INQ_PRF_MATCH_FLIT_7_TO_4_FILTERING_CNT'} = {
    NAME => 'AR_RTR_1_1_INQ_PRF_MATCH_FLIT_7_TO_4_FILTERING_CNT',
    LABEL => 'AR_RTR_1_1_INQ_PRF_MATCH_FLIT_7_TO_4_FILTERING_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Increments when an incoming flit matches flit filtering setup registers 7 to 4',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_1_INQ_PRF_MATCH_FLIT_7_TO_4_FILTERING_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_2_INQ_PRF_MATCH_FLIT_7_TO_4_FILTERING_CNT'} = {
    NAME => 'AR_RTR_1_2_INQ_PRF_MATCH_FLIT_7_TO_4_FILTERING_CNT',
    LABEL => 'AR_RTR_1_2_INQ_PRF_MATCH_FLIT_7_TO_4_FILTERING_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Increments when an incoming flit matches flit filtering setup registers 7 to 4',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_2_INQ_PRF_MATCH_FLIT_7_TO_4_FILTERING_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_3_INQ_PRF_MATCH_FLIT_7_TO_4_FILTERING_CNT'} = {
    NAME => 'AR_RTR_1_3_INQ_PRF_MATCH_FLIT_7_TO_4_FILTERING_CNT',
    LABEL => 'AR_RTR_1_3_INQ_PRF_MATCH_FLIT_7_TO_4_FILTERING_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Increments when an incoming flit matches flit filtering setup registers 7 to 4',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_3_INQ_PRF_MATCH_FLIT_7_TO_4_FILTERING_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_4_INQ_PRF_MATCH_FLIT_7_TO_4_FILTERING_CNT'} = {
    NAME => 'AR_RTR_1_4_INQ_PRF_MATCH_FLIT_7_TO_4_FILTERING_CNT',
    LABEL => 'AR_RTR_1_4_INQ_PRF_MATCH_FLIT_7_TO_4_FILTERING_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Increments when an incoming flit matches flit filtering setup registers 7 to 4',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_4_INQ_PRF_MATCH_FLIT_7_TO_4_FILTERING_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_5_INQ_PRF_MATCH_FLIT_7_TO_4_FILTERING_CNT'} = {
    NAME => 'AR_RTR_1_5_INQ_PRF_MATCH_FLIT_7_TO_4_FILTERING_CNT',
    LABEL => 'AR_RTR_1_5_INQ_PRF_MATCH_FLIT_7_TO_4_FILTERING_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Increments when an incoming flit matches flit filtering setup registers 7 to 4',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_5_INQ_PRF_MATCH_FLIT_7_TO_4_FILTERING_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_6_INQ_PRF_MATCH_FLIT_7_TO_4_FILTERING_CNT'} = {
    NAME => 'AR_RTR_1_6_INQ_PRF_MATCH_FLIT_7_TO_4_FILTERING_CNT',
    LABEL => 'AR_RTR_1_6_INQ_PRF_MATCH_FLIT_7_TO_4_FILTERING_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Increments when an incoming flit matches flit filtering setup registers 7 to 4',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_6_INQ_PRF_MATCH_FLIT_7_TO_4_FILTERING_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_7_INQ_PRF_MATCH_FLIT_7_TO_4_FILTERING_CNT'} = {
    NAME => 'AR_RTR_1_7_INQ_PRF_MATCH_FLIT_7_TO_4_FILTERING_CNT',
    LABEL => 'AR_RTR_1_7_INQ_PRF_MATCH_FLIT_7_TO_4_FILTERING_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Increments when an incoming flit matches flit filtering setup registers 7 to 4',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_7_INQ_PRF_MATCH_FLIT_7_TO_4_FILTERING_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_0_INQ_PRF_MATCH_FLIT_7_TO_4_FILTERING_CNT'} = {
    NAME => 'AR_RTR_2_0_INQ_PRF_MATCH_FLIT_7_TO_4_FILTERING_CNT',
    LABEL => 'AR_RTR_2_0_INQ_PRF_MATCH_FLIT_7_TO_4_FILTERING_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Increments when an incoming flit matches flit filtering setup registers 7 to 4',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_0_INQ_PRF_MATCH_FLIT_7_TO_4_FILTERING_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_1_INQ_PRF_MATCH_FLIT_7_TO_4_FILTERING_CNT'} = {
    NAME => 'AR_RTR_2_1_INQ_PRF_MATCH_FLIT_7_TO_4_FILTERING_CNT',
    LABEL => 'AR_RTR_2_1_INQ_PRF_MATCH_FLIT_7_TO_4_FILTERING_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Increments when an incoming flit matches flit filtering setup registers 7 to 4',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_1_INQ_PRF_MATCH_FLIT_7_TO_4_FILTERING_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_2_INQ_PRF_MATCH_FLIT_7_TO_4_FILTERING_CNT'} = {
    NAME => 'AR_RTR_2_2_INQ_PRF_MATCH_FLIT_7_TO_4_FILTERING_CNT',
    LABEL => 'AR_RTR_2_2_INQ_PRF_MATCH_FLIT_7_TO_4_FILTERING_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Increments when an incoming flit matches flit filtering setup registers 7 to 4',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_2_INQ_PRF_MATCH_FLIT_7_TO_4_FILTERING_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_3_INQ_PRF_MATCH_FLIT_7_TO_4_FILTERING_CNT'} = {
    NAME => 'AR_RTR_2_3_INQ_PRF_MATCH_FLIT_7_TO_4_FILTERING_CNT',
    LABEL => 'AR_RTR_2_3_INQ_PRF_MATCH_FLIT_7_TO_4_FILTERING_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Increments when an incoming flit matches flit filtering setup registers 7 to 4',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_3_INQ_PRF_MATCH_FLIT_7_TO_4_FILTERING_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_4_INQ_PRF_MATCH_FLIT_7_TO_4_FILTERING_CNT'} = {
    NAME => 'AR_RTR_2_4_INQ_PRF_MATCH_FLIT_7_TO_4_FILTERING_CNT',
    LABEL => 'AR_RTR_2_4_INQ_PRF_MATCH_FLIT_7_TO_4_FILTERING_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Increments when an incoming flit matches flit filtering setup registers 7 to 4',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_4_INQ_PRF_MATCH_FLIT_7_TO_4_FILTERING_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_5_INQ_PRF_MATCH_FLIT_7_TO_4_FILTERING_CNT'} = {
    NAME => 'AR_RTR_2_5_INQ_PRF_MATCH_FLIT_7_TO_4_FILTERING_CNT',
    LABEL => 'AR_RTR_2_5_INQ_PRF_MATCH_FLIT_7_TO_4_FILTERING_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Increments when an incoming flit matches flit filtering setup registers 7 to 4',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_5_INQ_PRF_MATCH_FLIT_7_TO_4_FILTERING_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_6_INQ_PRF_MATCH_FLIT_7_TO_4_FILTERING_CNT'} = {
    NAME => 'AR_RTR_2_6_INQ_PRF_MATCH_FLIT_7_TO_4_FILTERING_CNT',
    LABEL => 'AR_RTR_2_6_INQ_PRF_MATCH_FLIT_7_TO_4_FILTERING_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Increments when an incoming flit matches flit filtering setup registers 7 to 4',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_6_INQ_PRF_MATCH_FLIT_7_TO_4_FILTERING_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_7_INQ_PRF_MATCH_FLIT_7_TO_4_FILTERING_CNT'} = {
    NAME => 'AR_RTR_2_7_INQ_PRF_MATCH_FLIT_7_TO_4_FILTERING_CNT',
    LABEL => 'AR_RTR_2_7_INQ_PRF_MATCH_FLIT_7_TO_4_FILTERING_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Increments when an incoming flit matches flit filtering setup registers 7 to 4',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_7_INQ_PRF_MATCH_FLIT_7_TO_4_FILTERING_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_0_INQ_PRF_MATCH_FLIT_7_TO_4_FILTERING_CNT'} = {
    NAME => 'AR_RTR_3_0_INQ_PRF_MATCH_FLIT_7_TO_4_FILTERING_CNT',
    LABEL => 'AR_RTR_3_0_INQ_PRF_MATCH_FLIT_7_TO_4_FILTERING_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Increments when an incoming flit matches flit filtering setup registers 7 to 4',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_0_INQ_PRF_MATCH_FLIT_7_TO_4_FILTERING_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_1_INQ_PRF_MATCH_FLIT_7_TO_4_FILTERING_CNT'} = {
    NAME => 'AR_RTR_3_1_INQ_PRF_MATCH_FLIT_7_TO_4_FILTERING_CNT',
    LABEL => 'AR_RTR_3_1_INQ_PRF_MATCH_FLIT_7_TO_4_FILTERING_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Increments when an incoming flit matches flit filtering setup registers 7 to 4',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_1_INQ_PRF_MATCH_FLIT_7_TO_4_FILTERING_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_2_INQ_PRF_MATCH_FLIT_7_TO_4_FILTERING_CNT'} = {
    NAME => 'AR_RTR_3_2_INQ_PRF_MATCH_FLIT_7_TO_4_FILTERING_CNT',
    LABEL => 'AR_RTR_3_2_INQ_PRF_MATCH_FLIT_7_TO_4_FILTERING_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Increments when an incoming flit matches flit filtering setup registers 7 to 4',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_2_INQ_PRF_MATCH_FLIT_7_TO_4_FILTERING_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_3_INQ_PRF_MATCH_FLIT_7_TO_4_FILTERING_CNT'} = {
    NAME => 'AR_RTR_3_3_INQ_PRF_MATCH_FLIT_7_TO_4_FILTERING_CNT',
    LABEL => 'AR_RTR_3_3_INQ_PRF_MATCH_FLIT_7_TO_4_FILTERING_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Increments when an incoming flit matches flit filtering setup registers 7 to 4',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_3_INQ_PRF_MATCH_FLIT_7_TO_4_FILTERING_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_4_INQ_PRF_MATCH_FLIT_7_TO_4_FILTERING_CNT'} = {
    NAME => 'AR_RTR_3_4_INQ_PRF_MATCH_FLIT_7_TO_4_FILTERING_CNT',
    LABEL => 'AR_RTR_3_4_INQ_PRF_MATCH_FLIT_7_TO_4_FILTERING_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Increments when an incoming flit matches flit filtering setup registers 7 to 4',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_4_INQ_PRF_MATCH_FLIT_7_TO_4_FILTERING_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_5_INQ_PRF_MATCH_FLIT_7_TO_4_FILTERING_CNT'} = {
    NAME => 'AR_RTR_3_5_INQ_PRF_MATCH_FLIT_7_TO_4_FILTERING_CNT',
    LABEL => 'AR_RTR_3_5_INQ_PRF_MATCH_FLIT_7_TO_4_FILTERING_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Increments when an incoming flit matches flit filtering setup registers 7 to 4',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_5_INQ_PRF_MATCH_FLIT_7_TO_4_FILTERING_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_6_INQ_PRF_MATCH_FLIT_7_TO_4_FILTERING_CNT'} = {
    NAME => 'AR_RTR_3_6_INQ_PRF_MATCH_FLIT_7_TO_4_FILTERING_CNT',
    LABEL => 'AR_RTR_3_6_INQ_PRF_MATCH_FLIT_7_TO_4_FILTERING_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Increments when an incoming flit matches flit filtering setup registers 7 to 4',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_6_INQ_PRF_MATCH_FLIT_7_TO_4_FILTERING_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_7_INQ_PRF_MATCH_FLIT_7_TO_4_FILTERING_CNT'} = {
    NAME => 'AR_RTR_3_7_INQ_PRF_MATCH_FLIT_7_TO_4_FILTERING_CNT',
    LABEL => 'AR_RTR_3_7_INQ_PRF_MATCH_FLIT_7_TO_4_FILTERING_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Increments when an incoming flit matches flit filtering setup registers 7 to 4',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_7_INQ_PRF_MATCH_FLIT_7_TO_4_FILTERING_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_0_INQ_PRF_MATCH_FLIT_7_TO_4_FILTERING_CNT'} = {
    NAME => 'AR_RTR_4_0_INQ_PRF_MATCH_FLIT_7_TO_4_FILTERING_CNT',
    LABEL => 'AR_RTR_4_0_INQ_PRF_MATCH_FLIT_7_TO_4_FILTERING_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Increments when an incoming flit matches flit filtering setup registers 7 to 4',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_0_INQ_PRF_MATCH_FLIT_7_TO_4_FILTERING_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_1_INQ_PRF_MATCH_FLIT_7_TO_4_FILTERING_CNT'} = {
    NAME => 'AR_RTR_4_1_INQ_PRF_MATCH_FLIT_7_TO_4_FILTERING_CNT',
    LABEL => 'AR_RTR_4_1_INQ_PRF_MATCH_FLIT_7_TO_4_FILTERING_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Increments when an incoming flit matches flit filtering setup registers 7 to 4',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_1_INQ_PRF_MATCH_FLIT_7_TO_4_FILTERING_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_2_INQ_PRF_MATCH_FLIT_7_TO_4_FILTERING_CNT'} = {
    NAME => 'AR_RTR_4_2_INQ_PRF_MATCH_FLIT_7_TO_4_FILTERING_CNT',
    LABEL => 'AR_RTR_4_2_INQ_PRF_MATCH_FLIT_7_TO_4_FILTERING_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Increments when an incoming flit matches flit filtering setup registers 7 to 4',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_2_INQ_PRF_MATCH_FLIT_7_TO_4_FILTERING_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_3_INQ_PRF_MATCH_FLIT_7_TO_4_FILTERING_CNT'} = {
    NAME => 'AR_RTR_4_3_INQ_PRF_MATCH_FLIT_7_TO_4_FILTERING_CNT',
    LABEL => 'AR_RTR_4_3_INQ_PRF_MATCH_FLIT_7_TO_4_FILTERING_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Increments when an incoming flit matches flit filtering setup registers 7 to 4',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_3_INQ_PRF_MATCH_FLIT_7_TO_4_FILTERING_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_4_INQ_PRF_MATCH_FLIT_7_TO_4_FILTERING_CNT'} = {
    NAME => 'AR_RTR_4_4_INQ_PRF_MATCH_FLIT_7_TO_4_FILTERING_CNT',
    LABEL => 'AR_RTR_4_4_INQ_PRF_MATCH_FLIT_7_TO_4_FILTERING_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Increments when an incoming flit matches flit filtering setup registers 7 to 4',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_4_INQ_PRF_MATCH_FLIT_7_TO_4_FILTERING_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_5_INQ_PRF_MATCH_FLIT_7_TO_4_FILTERING_CNT'} = {
    NAME => 'AR_RTR_4_5_INQ_PRF_MATCH_FLIT_7_TO_4_FILTERING_CNT',
    LABEL => 'AR_RTR_4_5_INQ_PRF_MATCH_FLIT_7_TO_4_FILTERING_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Increments when an incoming flit matches flit filtering setup registers 7 to 4',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_5_INQ_PRF_MATCH_FLIT_7_TO_4_FILTERING_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_6_INQ_PRF_MATCH_FLIT_7_TO_4_FILTERING_CNT'} = {
    NAME => 'AR_RTR_4_6_INQ_PRF_MATCH_FLIT_7_TO_4_FILTERING_CNT',
    LABEL => 'AR_RTR_4_6_INQ_PRF_MATCH_FLIT_7_TO_4_FILTERING_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Increments when an incoming flit matches flit filtering setup registers 7 to 4',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_6_INQ_PRF_MATCH_FLIT_7_TO_4_FILTERING_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_7_INQ_PRF_MATCH_FLIT_7_TO_4_FILTERING_CNT'} = {
    NAME => 'AR_RTR_4_7_INQ_PRF_MATCH_FLIT_7_TO_4_FILTERING_CNT',
    LABEL => 'AR_RTR_4_7_INQ_PRF_MATCH_FLIT_7_TO_4_FILTERING_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Increments when an incoming flit matches flit filtering setup registers 7 to 4',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_7_INQ_PRF_MATCH_FLIT_7_TO_4_FILTERING_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_0_INQ_PRF_ROWBUS_STALL_CNT'} = {
    NAME => 'AR_RTR_0_0_INQ_PRF_ROWBUS_STALL_CNT',
    LABEL => 'AR_RTR_0_0_INQ_PRF_ROWBUS_STALL_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts the occurrences when a row bus is not being used even whenvalid flits are sitting at the front of the OFIFOs but cannot be sent to the row buffers due to resource conflict',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_0_INQ_PRF_ROWBUS_STALL_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_1_INQ_PRF_ROWBUS_STALL_CNT'} = {
    NAME => 'AR_RTR_0_1_INQ_PRF_ROWBUS_STALL_CNT',
    LABEL => 'AR_RTR_0_1_INQ_PRF_ROWBUS_STALL_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts the occurrences when a row bus is not being used even whenvalid flits are sitting at the front of the OFIFOs but cannot be sent to the row buffers due to resource conflict',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_1_INQ_PRF_ROWBUS_STALL_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_2_INQ_PRF_ROWBUS_STALL_CNT'} = {
    NAME => 'AR_RTR_0_2_INQ_PRF_ROWBUS_STALL_CNT',
    LABEL => 'AR_RTR_0_2_INQ_PRF_ROWBUS_STALL_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts the occurrences when a row bus is not being used even whenvalid flits are sitting at the front of the OFIFOs but cannot be sent to the row buffers due to resource conflict',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_2_INQ_PRF_ROWBUS_STALL_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_3_INQ_PRF_ROWBUS_STALL_CNT'} = {
    NAME => 'AR_RTR_0_3_INQ_PRF_ROWBUS_STALL_CNT',
    LABEL => 'AR_RTR_0_3_INQ_PRF_ROWBUS_STALL_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts the occurrences when a row bus is not being used even whenvalid flits are sitting at the front of the OFIFOs but cannot be sent to the row buffers due to resource conflict',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_3_INQ_PRF_ROWBUS_STALL_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_4_INQ_PRF_ROWBUS_STALL_CNT'} = {
    NAME => 'AR_RTR_0_4_INQ_PRF_ROWBUS_STALL_CNT',
    LABEL => 'AR_RTR_0_4_INQ_PRF_ROWBUS_STALL_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts the occurrences when a row bus is not being used even whenvalid flits are sitting at the front of the OFIFOs but cannot be sent to the row buffers due to resource conflict',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_4_INQ_PRF_ROWBUS_STALL_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_5_INQ_PRF_ROWBUS_STALL_CNT'} = {
    NAME => 'AR_RTR_0_5_INQ_PRF_ROWBUS_STALL_CNT',
    LABEL => 'AR_RTR_0_5_INQ_PRF_ROWBUS_STALL_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts the occurrences when a row bus is not being used even whenvalid flits are sitting at the front of the OFIFOs but cannot be sent to the row buffers due to resource conflict',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_5_INQ_PRF_ROWBUS_STALL_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_6_INQ_PRF_ROWBUS_STALL_CNT'} = {
    NAME => 'AR_RTR_0_6_INQ_PRF_ROWBUS_STALL_CNT',
    LABEL => 'AR_RTR_0_6_INQ_PRF_ROWBUS_STALL_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts the occurrences when a row bus is not being used even whenvalid flits are sitting at the front of the OFIFOs but cannot be sent to the row buffers due to resource conflict',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_6_INQ_PRF_ROWBUS_STALL_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_7_INQ_PRF_ROWBUS_STALL_CNT'} = {
    NAME => 'AR_RTR_0_7_INQ_PRF_ROWBUS_STALL_CNT',
    LABEL => 'AR_RTR_0_7_INQ_PRF_ROWBUS_STALL_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts the occurrences when a row bus is not being used even whenvalid flits are sitting at the front of the OFIFOs but cannot be sent to the row buffers due to resource conflict',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_7_INQ_PRF_ROWBUS_STALL_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_0_INQ_PRF_ROWBUS_STALL_CNT'} = {
    NAME => 'AR_RTR_1_0_INQ_PRF_ROWBUS_STALL_CNT',
    LABEL => 'AR_RTR_1_0_INQ_PRF_ROWBUS_STALL_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts the occurrences when a row bus is not being used even whenvalid flits are sitting at the front of the OFIFOs but cannot be sent to the row buffers due to resource conflict',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_0_INQ_PRF_ROWBUS_STALL_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_1_INQ_PRF_ROWBUS_STALL_CNT'} = {
    NAME => 'AR_RTR_1_1_INQ_PRF_ROWBUS_STALL_CNT',
    LABEL => 'AR_RTR_1_1_INQ_PRF_ROWBUS_STALL_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts the occurrences when a row bus is not being used even whenvalid flits are sitting at the front of the OFIFOs but cannot be sent to the row buffers due to resource conflict',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_1_INQ_PRF_ROWBUS_STALL_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_2_INQ_PRF_ROWBUS_STALL_CNT'} = {
    NAME => 'AR_RTR_1_2_INQ_PRF_ROWBUS_STALL_CNT',
    LABEL => 'AR_RTR_1_2_INQ_PRF_ROWBUS_STALL_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts the occurrences when a row bus is not being used even whenvalid flits are sitting at the front of the OFIFOs but cannot be sent to the row buffers due to resource conflict',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_2_INQ_PRF_ROWBUS_STALL_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_3_INQ_PRF_ROWBUS_STALL_CNT'} = {
    NAME => 'AR_RTR_1_3_INQ_PRF_ROWBUS_STALL_CNT',
    LABEL => 'AR_RTR_1_3_INQ_PRF_ROWBUS_STALL_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts the occurrences when a row bus is not being used even whenvalid flits are sitting at the front of the OFIFOs but cannot be sent to the row buffers due to resource conflict',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_3_INQ_PRF_ROWBUS_STALL_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_4_INQ_PRF_ROWBUS_STALL_CNT'} = {
    NAME => 'AR_RTR_1_4_INQ_PRF_ROWBUS_STALL_CNT',
    LABEL => 'AR_RTR_1_4_INQ_PRF_ROWBUS_STALL_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts the occurrences when a row bus is not being used even whenvalid flits are sitting at the front of the OFIFOs but cannot be sent to the row buffers due to resource conflict',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_4_INQ_PRF_ROWBUS_STALL_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_5_INQ_PRF_ROWBUS_STALL_CNT'} = {
    NAME => 'AR_RTR_1_5_INQ_PRF_ROWBUS_STALL_CNT',
    LABEL => 'AR_RTR_1_5_INQ_PRF_ROWBUS_STALL_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts the occurrences when a row bus is not being used even whenvalid flits are sitting at the front of the OFIFOs but cannot be sent to the row buffers due to resource conflict',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_5_INQ_PRF_ROWBUS_STALL_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_6_INQ_PRF_ROWBUS_STALL_CNT'} = {
    NAME => 'AR_RTR_1_6_INQ_PRF_ROWBUS_STALL_CNT',
    LABEL => 'AR_RTR_1_6_INQ_PRF_ROWBUS_STALL_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts the occurrences when a row bus is not being used even whenvalid flits are sitting at the front of the OFIFOs but cannot be sent to the row buffers due to resource conflict',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_6_INQ_PRF_ROWBUS_STALL_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_7_INQ_PRF_ROWBUS_STALL_CNT'} = {
    NAME => 'AR_RTR_1_7_INQ_PRF_ROWBUS_STALL_CNT',
    LABEL => 'AR_RTR_1_7_INQ_PRF_ROWBUS_STALL_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts the occurrences when a row bus is not being used even whenvalid flits are sitting at the front of the OFIFOs but cannot be sent to the row buffers due to resource conflict',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_7_INQ_PRF_ROWBUS_STALL_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_0_INQ_PRF_ROWBUS_STALL_CNT'} = {
    NAME => 'AR_RTR_2_0_INQ_PRF_ROWBUS_STALL_CNT',
    LABEL => 'AR_RTR_2_0_INQ_PRF_ROWBUS_STALL_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts the occurrences when a row bus is not being used even whenvalid flits are sitting at the front of the OFIFOs but cannot be sent to the row buffers due to resource conflict',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_0_INQ_PRF_ROWBUS_STALL_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_1_INQ_PRF_ROWBUS_STALL_CNT'} = {
    NAME => 'AR_RTR_2_1_INQ_PRF_ROWBUS_STALL_CNT',
    LABEL => 'AR_RTR_2_1_INQ_PRF_ROWBUS_STALL_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts the occurrences when a row bus is not being used even whenvalid flits are sitting at the front of the OFIFOs but cannot be sent to the row buffers due to resource conflict',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_1_INQ_PRF_ROWBUS_STALL_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_2_INQ_PRF_ROWBUS_STALL_CNT'} = {
    NAME => 'AR_RTR_2_2_INQ_PRF_ROWBUS_STALL_CNT',
    LABEL => 'AR_RTR_2_2_INQ_PRF_ROWBUS_STALL_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts the occurrences when a row bus is not being used even whenvalid flits are sitting at the front of the OFIFOs but cannot be sent to the row buffers due to resource conflict',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_2_INQ_PRF_ROWBUS_STALL_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_3_INQ_PRF_ROWBUS_STALL_CNT'} = {
    NAME => 'AR_RTR_2_3_INQ_PRF_ROWBUS_STALL_CNT',
    LABEL => 'AR_RTR_2_3_INQ_PRF_ROWBUS_STALL_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts the occurrences when a row bus is not being used even whenvalid flits are sitting at the front of the OFIFOs but cannot be sent to the row buffers due to resource conflict',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_3_INQ_PRF_ROWBUS_STALL_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_4_INQ_PRF_ROWBUS_STALL_CNT'} = {
    NAME => 'AR_RTR_2_4_INQ_PRF_ROWBUS_STALL_CNT',
    LABEL => 'AR_RTR_2_4_INQ_PRF_ROWBUS_STALL_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts the occurrences when a row bus is not being used even whenvalid flits are sitting at the front of the OFIFOs but cannot be sent to the row buffers due to resource conflict',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_4_INQ_PRF_ROWBUS_STALL_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_5_INQ_PRF_ROWBUS_STALL_CNT'} = {
    NAME => 'AR_RTR_2_5_INQ_PRF_ROWBUS_STALL_CNT',
    LABEL => 'AR_RTR_2_5_INQ_PRF_ROWBUS_STALL_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts the occurrences when a row bus is not being used even whenvalid flits are sitting at the front of the OFIFOs but cannot be sent to the row buffers due to resource conflict',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_5_INQ_PRF_ROWBUS_STALL_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_6_INQ_PRF_ROWBUS_STALL_CNT'} = {
    NAME => 'AR_RTR_2_6_INQ_PRF_ROWBUS_STALL_CNT',
    LABEL => 'AR_RTR_2_6_INQ_PRF_ROWBUS_STALL_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts the occurrences when a row bus is not being used even whenvalid flits are sitting at the front of the OFIFOs but cannot be sent to the row buffers due to resource conflict',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_6_INQ_PRF_ROWBUS_STALL_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_7_INQ_PRF_ROWBUS_STALL_CNT'} = {
    NAME => 'AR_RTR_2_7_INQ_PRF_ROWBUS_STALL_CNT',
    LABEL => 'AR_RTR_2_7_INQ_PRF_ROWBUS_STALL_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts the occurrences when a row bus is not being used even whenvalid flits are sitting at the front of the OFIFOs but cannot be sent to the row buffers due to resource conflict',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_7_INQ_PRF_ROWBUS_STALL_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_0_INQ_PRF_ROWBUS_STALL_CNT'} = {
    NAME => 'AR_RTR_3_0_INQ_PRF_ROWBUS_STALL_CNT',
    LABEL => 'AR_RTR_3_0_INQ_PRF_ROWBUS_STALL_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts the occurrences when a row bus is not being used even whenvalid flits are sitting at the front of the OFIFOs but cannot be sent to the row buffers due to resource conflict',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_0_INQ_PRF_ROWBUS_STALL_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_1_INQ_PRF_ROWBUS_STALL_CNT'} = {
    NAME => 'AR_RTR_3_1_INQ_PRF_ROWBUS_STALL_CNT',
    LABEL => 'AR_RTR_3_1_INQ_PRF_ROWBUS_STALL_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts the occurrences when a row bus is not being used even whenvalid flits are sitting at the front of the OFIFOs but cannot be sent to the row buffers due to resource conflict',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_1_INQ_PRF_ROWBUS_STALL_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_2_INQ_PRF_ROWBUS_STALL_CNT'} = {
    NAME => 'AR_RTR_3_2_INQ_PRF_ROWBUS_STALL_CNT',
    LABEL => 'AR_RTR_3_2_INQ_PRF_ROWBUS_STALL_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts the occurrences when a row bus is not being used even whenvalid flits are sitting at the front of the OFIFOs but cannot be sent to the row buffers due to resource conflict',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_2_INQ_PRF_ROWBUS_STALL_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_3_INQ_PRF_ROWBUS_STALL_CNT'} = {
    NAME => 'AR_RTR_3_3_INQ_PRF_ROWBUS_STALL_CNT',
    LABEL => 'AR_RTR_3_3_INQ_PRF_ROWBUS_STALL_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts the occurrences when a row bus is not being used even whenvalid flits are sitting at the front of the OFIFOs but cannot be sent to the row buffers due to resource conflict',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_3_INQ_PRF_ROWBUS_STALL_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_4_INQ_PRF_ROWBUS_STALL_CNT'} = {
    NAME => 'AR_RTR_3_4_INQ_PRF_ROWBUS_STALL_CNT',
    LABEL => 'AR_RTR_3_4_INQ_PRF_ROWBUS_STALL_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts the occurrences when a row bus is not being used even whenvalid flits are sitting at the front of the OFIFOs but cannot be sent to the row buffers due to resource conflict',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_4_INQ_PRF_ROWBUS_STALL_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_5_INQ_PRF_ROWBUS_STALL_CNT'} = {
    NAME => 'AR_RTR_3_5_INQ_PRF_ROWBUS_STALL_CNT',
    LABEL => 'AR_RTR_3_5_INQ_PRF_ROWBUS_STALL_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts the occurrences when a row bus is not being used even whenvalid flits are sitting at the front of the OFIFOs but cannot be sent to the row buffers due to resource conflict',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_5_INQ_PRF_ROWBUS_STALL_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_6_INQ_PRF_ROWBUS_STALL_CNT'} = {
    NAME => 'AR_RTR_3_6_INQ_PRF_ROWBUS_STALL_CNT',
    LABEL => 'AR_RTR_3_6_INQ_PRF_ROWBUS_STALL_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts the occurrences when a row bus is not being used even whenvalid flits are sitting at the front of the OFIFOs but cannot be sent to the row buffers due to resource conflict',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_6_INQ_PRF_ROWBUS_STALL_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_7_INQ_PRF_ROWBUS_STALL_CNT'} = {
    NAME => 'AR_RTR_3_7_INQ_PRF_ROWBUS_STALL_CNT',
    LABEL => 'AR_RTR_3_7_INQ_PRF_ROWBUS_STALL_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts the occurrences when a row bus is not being used even whenvalid flits are sitting at the front of the OFIFOs but cannot be sent to the row buffers due to resource conflict',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_7_INQ_PRF_ROWBUS_STALL_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_0_INQ_PRF_ROWBUS_STALL_CNT'} = {
    NAME => 'AR_RTR_4_0_INQ_PRF_ROWBUS_STALL_CNT',
    LABEL => 'AR_RTR_4_0_INQ_PRF_ROWBUS_STALL_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts the occurrences when a row bus is not being used even whenvalid flits are sitting at the front of the OFIFOs but cannot be sent to the row buffers due to resource conflict',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_0_INQ_PRF_ROWBUS_STALL_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_1_INQ_PRF_ROWBUS_STALL_CNT'} = {
    NAME => 'AR_RTR_4_1_INQ_PRF_ROWBUS_STALL_CNT',
    LABEL => 'AR_RTR_4_1_INQ_PRF_ROWBUS_STALL_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts the occurrences when a row bus is not being used even whenvalid flits are sitting at the front of the OFIFOs but cannot be sent to the row buffers due to resource conflict',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_1_INQ_PRF_ROWBUS_STALL_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_2_INQ_PRF_ROWBUS_STALL_CNT'} = {
    NAME => 'AR_RTR_4_2_INQ_PRF_ROWBUS_STALL_CNT',
    LABEL => 'AR_RTR_4_2_INQ_PRF_ROWBUS_STALL_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts the occurrences when a row bus is not being used even whenvalid flits are sitting at the front of the OFIFOs but cannot be sent to the row buffers due to resource conflict',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_2_INQ_PRF_ROWBUS_STALL_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_3_INQ_PRF_ROWBUS_STALL_CNT'} = {
    NAME => 'AR_RTR_4_3_INQ_PRF_ROWBUS_STALL_CNT',
    LABEL => 'AR_RTR_4_3_INQ_PRF_ROWBUS_STALL_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts the occurrences when a row bus is not being used even whenvalid flits are sitting at the front of the OFIFOs but cannot be sent to the row buffers due to resource conflict',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_3_INQ_PRF_ROWBUS_STALL_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_4_INQ_PRF_ROWBUS_STALL_CNT'} = {
    NAME => 'AR_RTR_4_4_INQ_PRF_ROWBUS_STALL_CNT',
    LABEL => 'AR_RTR_4_4_INQ_PRF_ROWBUS_STALL_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts the occurrences when a row bus is not being used even whenvalid flits are sitting at the front of the OFIFOs but cannot be sent to the row buffers due to resource conflict',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_4_INQ_PRF_ROWBUS_STALL_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_5_INQ_PRF_ROWBUS_STALL_CNT'} = {
    NAME => 'AR_RTR_4_5_INQ_PRF_ROWBUS_STALL_CNT',
    LABEL => 'AR_RTR_4_5_INQ_PRF_ROWBUS_STALL_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts the occurrences when a row bus is not being used even whenvalid flits are sitting at the front of the OFIFOs but cannot be sent to the row buffers due to resource conflict',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_5_INQ_PRF_ROWBUS_STALL_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_6_INQ_PRF_ROWBUS_STALL_CNT'} = {
    NAME => 'AR_RTR_4_6_INQ_PRF_ROWBUS_STALL_CNT',
    LABEL => 'AR_RTR_4_6_INQ_PRF_ROWBUS_STALL_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts the occurrences when a row bus is not being used even whenvalid flits are sitting at the front of the OFIFOs but cannot be sent to the row buffers due to resource conflict',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_6_INQ_PRF_ROWBUS_STALL_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_7_INQ_PRF_ROWBUS_STALL_CNT'} = {
    NAME => 'AR_RTR_4_7_INQ_PRF_ROWBUS_STALL_CNT',
    LABEL => 'AR_RTR_4_7_INQ_PRF_ROWBUS_STALL_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts the occurrences when a row bus is not being used even whenvalid flits are sitting at the front of the OFIFOs but cannot be sent to the row buffers due to resource conflict',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_7_INQ_PRF_ROWBUS_STALL_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_0_INQ_PRF_ROWBUS_2X_USAGE_CNT'} = {
    NAME => 'AR_RTR_0_0_INQ_PRF_ROWBUS_2X_USAGE_CNT',
    LABEL => 'AR_RTR_0_0_INQ_PRF_ROWBUS_2X_USAGE_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts the occurrences where both paths of the row-bus are used simultaneously for delivering flits to the row buffers',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_0_INQ_PRF_ROWBUS_2X_USAGE_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_1_INQ_PRF_ROWBUS_2X_USAGE_CNT'} = {
    NAME => 'AR_RTR_0_1_INQ_PRF_ROWBUS_2X_USAGE_CNT',
    LABEL => 'AR_RTR_0_1_INQ_PRF_ROWBUS_2X_USAGE_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts the occurrences where both paths of the row-bus are used simultaneously for delivering flits to the row buffers',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_1_INQ_PRF_ROWBUS_2X_USAGE_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_2_INQ_PRF_ROWBUS_2X_USAGE_CNT'} = {
    NAME => 'AR_RTR_0_2_INQ_PRF_ROWBUS_2X_USAGE_CNT',
    LABEL => 'AR_RTR_0_2_INQ_PRF_ROWBUS_2X_USAGE_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts the occurrences where both paths of the row-bus are used simultaneously for delivering flits to the row buffers',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_2_INQ_PRF_ROWBUS_2X_USAGE_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_3_INQ_PRF_ROWBUS_2X_USAGE_CNT'} = {
    NAME => 'AR_RTR_0_3_INQ_PRF_ROWBUS_2X_USAGE_CNT',
    LABEL => 'AR_RTR_0_3_INQ_PRF_ROWBUS_2X_USAGE_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts the occurrences where both paths of the row-bus are used simultaneously for delivering flits to the row buffers',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_3_INQ_PRF_ROWBUS_2X_USAGE_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_4_INQ_PRF_ROWBUS_2X_USAGE_CNT'} = {
    NAME => 'AR_RTR_0_4_INQ_PRF_ROWBUS_2X_USAGE_CNT',
    LABEL => 'AR_RTR_0_4_INQ_PRF_ROWBUS_2X_USAGE_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts the occurrences where both paths of the row-bus are used simultaneously for delivering flits to the row buffers',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_4_INQ_PRF_ROWBUS_2X_USAGE_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_5_INQ_PRF_ROWBUS_2X_USAGE_CNT'} = {
    NAME => 'AR_RTR_0_5_INQ_PRF_ROWBUS_2X_USAGE_CNT',
    LABEL => 'AR_RTR_0_5_INQ_PRF_ROWBUS_2X_USAGE_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts the occurrences where both paths of the row-bus are used simultaneously for delivering flits to the row buffers',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_5_INQ_PRF_ROWBUS_2X_USAGE_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_6_INQ_PRF_ROWBUS_2X_USAGE_CNT'} = {
    NAME => 'AR_RTR_0_6_INQ_PRF_ROWBUS_2X_USAGE_CNT',
    LABEL => 'AR_RTR_0_6_INQ_PRF_ROWBUS_2X_USAGE_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts the occurrences where both paths of the row-bus are used simultaneously for delivering flits to the row buffers',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_6_INQ_PRF_ROWBUS_2X_USAGE_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_7_INQ_PRF_ROWBUS_2X_USAGE_CNT'} = {
    NAME => 'AR_RTR_0_7_INQ_PRF_ROWBUS_2X_USAGE_CNT',
    LABEL => 'AR_RTR_0_7_INQ_PRF_ROWBUS_2X_USAGE_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts the occurrences where both paths of the row-bus are used simultaneously for delivering flits to the row buffers',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_7_INQ_PRF_ROWBUS_2X_USAGE_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_0_INQ_PRF_ROWBUS_2X_USAGE_CNT'} = {
    NAME => 'AR_RTR_1_0_INQ_PRF_ROWBUS_2X_USAGE_CNT',
    LABEL => 'AR_RTR_1_0_INQ_PRF_ROWBUS_2X_USAGE_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts the occurrences where both paths of the row-bus are used simultaneously for delivering flits to the row buffers',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_0_INQ_PRF_ROWBUS_2X_USAGE_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_1_INQ_PRF_ROWBUS_2X_USAGE_CNT'} = {
    NAME => 'AR_RTR_1_1_INQ_PRF_ROWBUS_2X_USAGE_CNT',
    LABEL => 'AR_RTR_1_1_INQ_PRF_ROWBUS_2X_USAGE_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts the occurrences where both paths of the row-bus are used simultaneously for delivering flits to the row buffers',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_1_INQ_PRF_ROWBUS_2X_USAGE_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_2_INQ_PRF_ROWBUS_2X_USAGE_CNT'} = {
    NAME => 'AR_RTR_1_2_INQ_PRF_ROWBUS_2X_USAGE_CNT',
    LABEL => 'AR_RTR_1_2_INQ_PRF_ROWBUS_2X_USAGE_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts the occurrences where both paths of the row-bus are used simultaneously for delivering flits to the row buffers',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_2_INQ_PRF_ROWBUS_2X_USAGE_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_3_INQ_PRF_ROWBUS_2X_USAGE_CNT'} = {
    NAME => 'AR_RTR_1_3_INQ_PRF_ROWBUS_2X_USAGE_CNT',
    LABEL => 'AR_RTR_1_3_INQ_PRF_ROWBUS_2X_USAGE_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts the occurrences where both paths of the row-bus are used simultaneously for delivering flits to the row buffers',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_3_INQ_PRF_ROWBUS_2X_USAGE_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_4_INQ_PRF_ROWBUS_2X_USAGE_CNT'} = {
    NAME => 'AR_RTR_1_4_INQ_PRF_ROWBUS_2X_USAGE_CNT',
    LABEL => 'AR_RTR_1_4_INQ_PRF_ROWBUS_2X_USAGE_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts the occurrences where both paths of the row-bus are used simultaneously for delivering flits to the row buffers',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_4_INQ_PRF_ROWBUS_2X_USAGE_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_5_INQ_PRF_ROWBUS_2X_USAGE_CNT'} = {
    NAME => 'AR_RTR_1_5_INQ_PRF_ROWBUS_2X_USAGE_CNT',
    LABEL => 'AR_RTR_1_5_INQ_PRF_ROWBUS_2X_USAGE_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts the occurrences where both paths of the row-bus are used simultaneously for delivering flits to the row buffers',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_5_INQ_PRF_ROWBUS_2X_USAGE_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_6_INQ_PRF_ROWBUS_2X_USAGE_CNT'} = {
    NAME => 'AR_RTR_1_6_INQ_PRF_ROWBUS_2X_USAGE_CNT',
    LABEL => 'AR_RTR_1_6_INQ_PRF_ROWBUS_2X_USAGE_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts the occurrences where both paths of the row-bus are used simultaneously for delivering flits to the row buffers',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_6_INQ_PRF_ROWBUS_2X_USAGE_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_7_INQ_PRF_ROWBUS_2X_USAGE_CNT'} = {
    NAME => 'AR_RTR_1_7_INQ_PRF_ROWBUS_2X_USAGE_CNT',
    LABEL => 'AR_RTR_1_7_INQ_PRF_ROWBUS_2X_USAGE_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts the occurrences where both paths of the row-bus are used simultaneously for delivering flits to the row buffers',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_7_INQ_PRF_ROWBUS_2X_USAGE_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_0_INQ_PRF_ROWBUS_2X_USAGE_CNT'} = {
    NAME => 'AR_RTR_2_0_INQ_PRF_ROWBUS_2X_USAGE_CNT',
    LABEL => 'AR_RTR_2_0_INQ_PRF_ROWBUS_2X_USAGE_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts the occurrences where both paths of the row-bus are used simultaneously for delivering flits to the row buffers',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_0_INQ_PRF_ROWBUS_2X_USAGE_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_1_INQ_PRF_ROWBUS_2X_USAGE_CNT'} = {
    NAME => 'AR_RTR_2_1_INQ_PRF_ROWBUS_2X_USAGE_CNT',
    LABEL => 'AR_RTR_2_1_INQ_PRF_ROWBUS_2X_USAGE_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts the occurrences where both paths of the row-bus are used simultaneously for delivering flits to the row buffers',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_1_INQ_PRF_ROWBUS_2X_USAGE_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_2_INQ_PRF_ROWBUS_2X_USAGE_CNT'} = {
    NAME => 'AR_RTR_2_2_INQ_PRF_ROWBUS_2X_USAGE_CNT',
    LABEL => 'AR_RTR_2_2_INQ_PRF_ROWBUS_2X_USAGE_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts the occurrences where both paths of the row-bus are used simultaneously for delivering flits to the row buffers',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_2_INQ_PRF_ROWBUS_2X_USAGE_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_3_INQ_PRF_ROWBUS_2X_USAGE_CNT'} = {
    NAME => 'AR_RTR_2_3_INQ_PRF_ROWBUS_2X_USAGE_CNT',
    LABEL => 'AR_RTR_2_3_INQ_PRF_ROWBUS_2X_USAGE_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts the occurrences where both paths of the row-bus are used simultaneously for delivering flits to the row buffers',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_3_INQ_PRF_ROWBUS_2X_USAGE_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_4_INQ_PRF_ROWBUS_2X_USAGE_CNT'} = {
    NAME => 'AR_RTR_2_4_INQ_PRF_ROWBUS_2X_USAGE_CNT',
    LABEL => 'AR_RTR_2_4_INQ_PRF_ROWBUS_2X_USAGE_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts the occurrences where both paths of the row-bus are used simultaneously for delivering flits to the row buffers',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_4_INQ_PRF_ROWBUS_2X_USAGE_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_5_INQ_PRF_ROWBUS_2X_USAGE_CNT'} = {
    NAME => 'AR_RTR_2_5_INQ_PRF_ROWBUS_2X_USAGE_CNT',
    LABEL => 'AR_RTR_2_5_INQ_PRF_ROWBUS_2X_USAGE_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts the occurrences where both paths of the row-bus are used simultaneously for delivering flits to the row buffers',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_5_INQ_PRF_ROWBUS_2X_USAGE_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_6_INQ_PRF_ROWBUS_2X_USAGE_CNT'} = {
    NAME => 'AR_RTR_2_6_INQ_PRF_ROWBUS_2X_USAGE_CNT',
    LABEL => 'AR_RTR_2_6_INQ_PRF_ROWBUS_2X_USAGE_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts the occurrences where both paths of the row-bus are used simultaneously for delivering flits to the row buffers',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_6_INQ_PRF_ROWBUS_2X_USAGE_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_7_INQ_PRF_ROWBUS_2X_USAGE_CNT'} = {
    NAME => 'AR_RTR_2_7_INQ_PRF_ROWBUS_2X_USAGE_CNT',
    LABEL => 'AR_RTR_2_7_INQ_PRF_ROWBUS_2X_USAGE_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts the occurrences where both paths of the row-bus are used simultaneously for delivering flits to the row buffers',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_7_INQ_PRF_ROWBUS_2X_USAGE_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_0_INQ_PRF_ROWBUS_2X_USAGE_CNT'} = {
    NAME => 'AR_RTR_3_0_INQ_PRF_ROWBUS_2X_USAGE_CNT',
    LABEL => 'AR_RTR_3_0_INQ_PRF_ROWBUS_2X_USAGE_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts the occurrences where both paths of the row-bus are used simultaneously for delivering flits to the row buffers',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_0_INQ_PRF_ROWBUS_2X_USAGE_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_1_INQ_PRF_ROWBUS_2X_USAGE_CNT'} = {
    NAME => 'AR_RTR_3_1_INQ_PRF_ROWBUS_2X_USAGE_CNT',
    LABEL => 'AR_RTR_3_1_INQ_PRF_ROWBUS_2X_USAGE_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts the occurrences where both paths of the row-bus are used simultaneously for delivering flits to the row buffers',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_1_INQ_PRF_ROWBUS_2X_USAGE_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_2_INQ_PRF_ROWBUS_2X_USAGE_CNT'} = {
    NAME => 'AR_RTR_3_2_INQ_PRF_ROWBUS_2X_USAGE_CNT',
    LABEL => 'AR_RTR_3_2_INQ_PRF_ROWBUS_2X_USAGE_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts the occurrences where both paths of the row-bus are used simultaneously for delivering flits to the row buffers',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_2_INQ_PRF_ROWBUS_2X_USAGE_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_3_INQ_PRF_ROWBUS_2X_USAGE_CNT'} = {
    NAME => 'AR_RTR_3_3_INQ_PRF_ROWBUS_2X_USAGE_CNT',
    LABEL => 'AR_RTR_3_3_INQ_PRF_ROWBUS_2X_USAGE_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts the occurrences where both paths of the row-bus are used simultaneously for delivering flits to the row buffers',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_3_INQ_PRF_ROWBUS_2X_USAGE_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_4_INQ_PRF_ROWBUS_2X_USAGE_CNT'} = {
    NAME => 'AR_RTR_3_4_INQ_PRF_ROWBUS_2X_USAGE_CNT',
    LABEL => 'AR_RTR_3_4_INQ_PRF_ROWBUS_2X_USAGE_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts the occurrences where both paths of the row-bus are used simultaneously for delivering flits to the row buffers',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_4_INQ_PRF_ROWBUS_2X_USAGE_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_5_INQ_PRF_ROWBUS_2X_USAGE_CNT'} = {
    NAME => 'AR_RTR_3_5_INQ_PRF_ROWBUS_2X_USAGE_CNT',
    LABEL => 'AR_RTR_3_5_INQ_PRF_ROWBUS_2X_USAGE_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts the occurrences where both paths of the row-bus are used simultaneously for delivering flits to the row buffers',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_5_INQ_PRF_ROWBUS_2X_USAGE_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_6_INQ_PRF_ROWBUS_2X_USAGE_CNT'} = {
    NAME => 'AR_RTR_3_6_INQ_PRF_ROWBUS_2X_USAGE_CNT',
    LABEL => 'AR_RTR_3_6_INQ_PRF_ROWBUS_2X_USAGE_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts the occurrences where both paths of the row-bus are used simultaneously for delivering flits to the row buffers',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_6_INQ_PRF_ROWBUS_2X_USAGE_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_7_INQ_PRF_ROWBUS_2X_USAGE_CNT'} = {
    NAME => 'AR_RTR_3_7_INQ_PRF_ROWBUS_2X_USAGE_CNT',
    LABEL => 'AR_RTR_3_7_INQ_PRF_ROWBUS_2X_USAGE_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts the occurrences where both paths of the row-bus are used simultaneously for delivering flits to the row buffers',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_7_INQ_PRF_ROWBUS_2X_USAGE_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_0_INQ_PRF_ROWBUS_2X_USAGE_CNT'} = {
    NAME => 'AR_RTR_4_0_INQ_PRF_ROWBUS_2X_USAGE_CNT',
    LABEL => 'AR_RTR_4_0_INQ_PRF_ROWBUS_2X_USAGE_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts the occurrences where both paths of the row-bus are used simultaneously for delivering flits to the row buffers',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_0_INQ_PRF_ROWBUS_2X_USAGE_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_1_INQ_PRF_ROWBUS_2X_USAGE_CNT'} = {
    NAME => 'AR_RTR_4_1_INQ_PRF_ROWBUS_2X_USAGE_CNT',
    LABEL => 'AR_RTR_4_1_INQ_PRF_ROWBUS_2X_USAGE_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts the occurrences where both paths of the row-bus are used simultaneously for delivering flits to the row buffers',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_1_INQ_PRF_ROWBUS_2X_USAGE_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_2_INQ_PRF_ROWBUS_2X_USAGE_CNT'} = {
    NAME => 'AR_RTR_4_2_INQ_PRF_ROWBUS_2X_USAGE_CNT',
    LABEL => 'AR_RTR_4_2_INQ_PRF_ROWBUS_2X_USAGE_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts the occurrences where both paths of the row-bus are used simultaneously for delivering flits to the row buffers',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_2_INQ_PRF_ROWBUS_2X_USAGE_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_3_INQ_PRF_ROWBUS_2X_USAGE_CNT'} = {
    NAME => 'AR_RTR_4_3_INQ_PRF_ROWBUS_2X_USAGE_CNT',
    LABEL => 'AR_RTR_4_3_INQ_PRF_ROWBUS_2X_USAGE_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts the occurrences where both paths of the row-bus are used simultaneously for delivering flits to the row buffers',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_3_INQ_PRF_ROWBUS_2X_USAGE_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_4_INQ_PRF_ROWBUS_2X_USAGE_CNT'} = {
    NAME => 'AR_RTR_4_4_INQ_PRF_ROWBUS_2X_USAGE_CNT',
    LABEL => 'AR_RTR_4_4_INQ_PRF_ROWBUS_2X_USAGE_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts the occurrences where both paths of the row-bus are used simultaneously for delivering flits to the row buffers',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_4_INQ_PRF_ROWBUS_2X_USAGE_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_5_INQ_PRF_ROWBUS_2X_USAGE_CNT'} = {
    NAME => 'AR_RTR_4_5_INQ_PRF_ROWBUS_2X_USAGE_CNT',
    LABEL => 'AR_RTR_4_5_INQ_PRF_ROWBUS_2X_USAGE_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts the occurrences where both paths of the row-bus are used simultaneously for delivering flits to the row buffers',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_5_INQ_PRF_ROWBUS_2X_USAGE_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_6_INQ_PRF_ROWBUS_2X_USAGE_CNT'} = {
    NAME => 'AR_RTR_4_6_INQ_PRF_ROWBUS_2X_USAGE_CNT',
    LABEL => 'AR_RTR_4_6_INQ_PRF_ROWBUS_2X_USAGE_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts the occurrences where both paths of the row-bus are used simultaneously for delivering flits to the row buffers',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_6_INQ_PRF_ROWBUS_2X_USAGE_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_7_INQ_PRF_ROWBUS_2X_USAGE_CNT'} = {
    NAME => 'AR_RTR_4_7_INQ_PRF_ROWBUS_2X_USAGE_CNT',
    LABEL => 'AR_RTR_4_7_INQ_PRF_ROWBUS_2X_USAGE_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts the occurrences where both paths of the row-bus are used simultaneously for delivering flits to the row buffers',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_7_INQ_PRF_ROWBUS_2X_USAGE_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_0_INQ_PRF_PKT_TO_DEAD_LINK_CNT'} = {
    NAME => 'AR_RTR_0_0_INQ_PRF_PKT_TO_DEAD_LINK_CNT',
    LABEL => 'AR_RTR_0_0_INQ_PRF_PKT_TO_DEAD_LINK_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts the occurrences where packets are being routed toward a dead link',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_0_INQ_PRF_PKT_TO_DEAD_LINK_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_1_INQ_PRF_PKT_TO_DEAD_LINK_CNT'} = {
    NAME => 'AR_RTR_0_1_INQ_PRF_PKT_TO_DEAD_LINK_CNT',
    LABEL => 'AR_RTR_0_1_INQ_PRF_PKT_TO_DEAD_LINK_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts the occurrences where packets are being routed toward a dead link',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_1_INQ_PRF_PKT_TO_DEAD_LINK_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_2_INQ_PRF_PKT_TO_DEAD_LINK_CNT'} = {
    NAME => 'AR_RTR_0_2_INQ_PRF_PKT_TO_DEAD_LINK_CNT',
    LABEL => 'AR_RTR_0_2_INQ_PRF_PKT_TO_DEAD_LINK_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts the occurrences where packets are being routed toward a dead link',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_2_INQ_PRF_PKT_TO_DEAD_LINK_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_3_INQ_PRF_PKT_TO_DEAD_LINK_CNT'} = {
    NAME => 'AR_RTR_0_3_INQ_PRF_PKT_TO_DEAD_LINK_CNT',
    LABEL => 'AR_RTR_0_3_INQ_PRF_PKT_TO_DEAD_LINK_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts the occurrences where packets are being routed toward a dead link',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_3_INQ_PRF_PKT_TO_DEAD_LINK_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_4_INQ_PRF_PKT_TO_DEAD_LINK_CNT'} = {
    NAME => 'AR_RTR_0_4_INQ_PRF_PKT_TO_DEAD_LINK_CNT',
    LABEL => 'AR_RTR_0_4_INQ_PRF_PKT_TO_DEAD_LINK_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts the occurrences where packets are being routed toward a dead link',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_4_INQ_PRF_PKT_TO_DEAD_LINK_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_5_INQ_PRF_PKT_TO_DEAD_LINK_CNT'} = {
    NAME => 'AR_RTR_0_5_INQ_PRF_PKT_TO_DEAD_LINK_CNT',
    LABEL => 'AR_RTR_0_5_INQ_PRF_PKT_TO_DEAD_LINK_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts the occurrences where packets are being routed toward a dead link',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_5_INQ_PRF_PKT_TO_DEAD_LINK_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_6_INQ_PRF_PKT_TO_DEAD_LINK_CNT'} = {
    NAME => 'AR_RTR_0_6_INQ_PRF_PKT_TO_DEAD_LINK_CNT',
    LABEL => 'AR_RTR_0_6_INQ_PRF_PKT_TO_DEAD_LINK_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts the occurrences where packets are being routed toward a dead link',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_6_INQ_PRF_PKT_TO_DEAD_LINK_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_7_INQ_PRF_PKT_TO_DEAD_LINK_CNT'} = {
    NAME => 'AR_RTR_0_7_INQ_PRF_PKT_TO_DEAD_LINK_CNT',
    LABEL => 'AR_RTR_0_7_INQ_PRF_PKT_TO_DEAD_LINK_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts the occurrences where packets are being routed toward a dead link',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_7_INQ_PRF_PKT_TO_DEAD_LINK_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_0_INQ_PRF_PKT_TO_DEAD_LINK_CNT'} = {
    NAME => 'AR_RTR_1_0_INQ_PRF_PKT_TO_DEAD_LINK_CNT',
    LABEL => 'AR_RTR_1_0_INQ_PRF_PKT_TO_DEAD_LINK_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts the occurrences where packets are being routed toward a dead link',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_0_INQ_PRF_PKT_TO_DEAD_LINK_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_1_INQ_PRF_PKT_TO_DEAD_LINK_CNT'} = {
    NAME => 'AR_RTR_1_1_INQ_PRF_PKT_TO_DEAD_LINK_CNT',
    LABEL => 'AR_RTR_1_1_INQ_PRF_PKT_TO_DEAD_LINK_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts the occurrences where packets are being routed toward a dead link',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_1_INQ_PRF_PKT_TO_DEAD_LINK_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_2_INQ_PRF_PKT_TO_DEAD_LINK_CNT'} = {
    NAME => 'AR_RTR_1_2_INQ_PRF_PKT_TO_DEAD_LINK_CNT',
    LABEL => 'AR_RTR_1_2_INQ_PRF_PKT_TO_DEAD_LINK_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts the occurrences where packets are being routed toward a dead link',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_2_INQ_PRF_PKT_TO_DEAD_LINK_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_3_INQ_PRF_PKT_TO_DEAD_LINK_CNT'} = {
    NAME => 'AR_RTR_1_3_INQ_PRF_PKT_TO_DEAD_LINK_CNT',
    LABEL => 'AR_RTR_1_3_INQ_PRF_PKT_TO_DEAD_LINK_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts the occurrences where packets are being routed toward a dead link',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_3_INQ_PRF_PKT_TO_DEAD_LINK_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_4_INQ_PRF_PKT_TO_DEAD_LINK_CNT'} = {
    NAME => 'AR_RTR_1_4_INQ_PRF_PKT_TO_DEAD_LINK_CNT',
    LABEL => 'AR_RTR_1_4_INQ_PRF_PKT_TO_DEAD_LINK_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts the occurrences where packets are being routed toward a dead link',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_4_INQ_PRF_PKT_TO_DEAD_LINK_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_5_INQ_PRF_PKT_TO_DEAD_LINK_CNT'} = {
    NAME => 'AR_RTR_1_5_INQ_PRF_PKT_TO_DEAD_LINK_CNT',
    LABEL => 'AR_RTR_1_5_INQ_PRF_PKT_TO_DEAD_LINK_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts the occurrences where packets are being routed toward a dead link',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_5_INQ_PRF_PKT_TO_DEAD_LINK_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_6_INQ_PRF_PKT_TO_DEAD_LINK_CNT'} = {
    NAME => 'AR_RTR_1_6_INQ_PRF_PKT_TO_DEAD_LINK_CNT',
    LABEL => 'AR_RTR_1_6_INQ_PRF_PKT_TO_DEAD_LINK_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts the occurrences where packets are being routed toward a dead link',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_6_INQ_PRF_PKT_TO_DEAD_LINK_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_7_INQ_PRF_PKT_TO_DEAD_LINK_CNT'} = {
    NAME => 'AR_RTR_1_7_INQ_PRF_PKT_TO_DEAD_LINK_CNT',
    LABEL => 'AR_RTR_1_7_INQ_PRF_PKT_TO_DEAD_LINK_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts the occurrences where packets are being routed toward a dead link',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_7_INQ_PRF_PKT_TO_DEAD_LINK_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_0_INQ_PRF_PKT_TO_DEAD_LINK_CNT'} = {
    NAME => 'AR_RTR_2_0_INQ_PRF_PKT_TO_DEAD_LINK_CNT',
    LABEL => 'AR_RTR_2_0_INQ_PRF_PKT_TO_DEAD_LINK_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts the occurrences where packets are being routed toward a dead link',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_0_INQ_PRF_PKT_TO_DEAD_LINK_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_1_INQ_PRF_PKT_TO_DEAD_LINK_CNT'} = {
    NAME => 'AR_RTR_2_1_INQ_PRF_PKT_TO_DEAD_LINK_CNT',
    LABEL => 'AR_RTR_2_1_INQ_PRF_PKT_TO_DEAD_LINK_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts the occurrences where packets are being routed toward a dead link',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_1_INQ_PRF_PKT_TO_DEAD_LINK_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_2_INQ_PRF_PKT_TO_DEAD_LINK_CNT'} = {
    NAME => 'AR_RTR_2_2_INQ_PRF_PKT_TO_DEAD_LINK_CNT',
    LABEL => 'AR_RTR_2_2_INQ_PRF_PKT_TO_DEAD_LINK_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts the occurrences where packets are being routed toward a dead link',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_2_INQ_PRF_PKT_TO_DEAD_LINK_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_3_INQ_PRF_PKT_TO_DEAD_LINK_CNT'} = {
    NAME => 'AR_RTR_2_3_INQ_PRF_PKT_TO_DEAD_LINK_CNT',
    LABEL => 'AR_RTR_2_3_INQ_PRF_PKT_TO_DEAD_LINK_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts the occurrences where packets are being routed toward a dead link',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_3_INQ_PRF_PKT_TO_DEAD_LINK_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_4_INQ_PRF_PKT_TO_DEAD_LINK_CNT'} = {
    NAME => 'AR_RTR_2_4_INQ_PRF_PKT_TO_DEAD_LINK_CNT',
    LABEL => 'AR_RTR_2_4_INQ_PRF_PKT_TO_DEAD_LINK_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts the occurrences where packets are being routed toward a dead link',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_4_INQ_PRF_PKT_TO_DEAD_LINK_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_5_INQ_PRF_PKT_TO_DEAD_LINK_CNT'} = {
    NAME => 'AR_RTR_2_5_INQ_PRF_PKT_TO_DEAD_LINK_CNT',
    LABEL => 'AR_RTR_2_5_INQ_PRF_PKT_TO_DEAD_LINK_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts the occurrences where packets are being routed toward a dead link',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_5_INQ_PRF_PKT_TO_DEAD_LINK_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_6_INQ_PRF_PKT_TO_DEAD_LINK_CNT'} = {
    NAME => 'AR_RTR_2_6_INQ_PRF_PKT_TO_DEAD_LINK_CNT',
    LABEL => 'AR_RTR_2_6_INQ_PRF_PKT_TO_DEAD_LINK_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts the occurrences where packets are being routed toward a dead link',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_6_INQ_PRF_PKT_TO_DEAD_LINK_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_7_INQ_PRF_PKT_TO_DEAD_LINK_CNT'} = {
    NAME => 'AR_RTR_2_7_INQ_PRF_PKT_TO_DEAD_LINK_CNT',
    LABEL => 'AR_RTR_2_7_INQ_PRF_PKT_TO_DEAD_LINK_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts the occurrences where packets are being routed toward a dead link',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_7_INQ_PRF_PKT_TO_DEAD_LINK_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_0_INQ_PRF_PKT_TO_DEAD_LINK_CNT'} = {
    NAME => 'AR_RTR_3_0_INQ_PRF_PKT_TO_DEAD_LINK_CNT',
    LABEL => 'AR_RTR_3_0_INQ_PRF_PKT_TO_DEAD_LINK_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts the occurrences where packets are being routed toward a dead link',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_0_INQ_PRF_PKT_TO_DEAD_LINK_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_1_INQ_PRF_PKT_TO_DEAD_LINK_CNT'} = {
    NAME => 'AR_RTR_3_1_INQ_PRF_PKT_TO_DEAD_LINK_CNT',
    LABEL => 'AR_RTR_3_1_INQ_PRF_PKT_TO_DEAD_LINK_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts the occurrences where packets are being routed toward a dead link',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_1_INQ_PRF_PKT_TO_DEAD_LINK_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_2_INQ_PRF_PKT_TO_DEAD_LINK_CNT'} = {
    NAME => 'AR_RTR_3_2_INQ_PRF_PKT_TO_DEAD_LINK_CNT',
    LABEL => 'AR_RTR_3_2_INQ_PRF_PKT_TO_DEAD_LINK_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts the occurrences where packets are being routed toward a dead link',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_2_INQ_PRF_PKT_TO_DEAD_LINK_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_3_INQ_PRF_PKT_TO_DEAD_LINK_CNT'} = {
    NAME => 'AR_RTR_3_3_INQ_PRF_PKT_TO_DEAD_LINK_CNT',
    LABEL => 'AR_RTR_3_3_INQ_PRF_PKT_TO_DEAD_LINK_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts the occurrences where packets are being routed toward a dead link',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_3_INQ_PRF_PKT_TO_DEAD_LINK_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_4_INQ_PRF_PKT_TO_DEAD_LINK_CNT'} = {
    NAME => 'AR_RTR_3_4_INQ_PRF_PKT_TO_DEAD_LINK_CNT',
    LABEL => 'AR_RTR_3_4_INQ_PRF_PKT_TO_DEAD_LINK_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts the occurrences where packets are being routed toward a dead link',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_4_INQ_PRF_PKT_TO_DEAD_LINK_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_5_INQ_PRF_PKT_TO_DEAD_LINK_CNT'} = {
    NAME => 'AR_RTR_3_5_INQ_PRF_PKT_TO_DEAD_LINK_CNT',
    LABEL => 'AR_RTR_3_5_INQ_PRF_PKT_TO_DEAD_LINK_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts the occurrences where packets are being routed toward a dead link',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_5_INQ_PRF_PKT_TO_DEAD_LINK_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_6_INQ_PRF_PKT_TO_DEAD_LINK_CNT'} = {
    NAME => 'AR_RTR_3_6_INQ_PRF_PKT_TO_DEAD_LINK_CNT',
    LABEL => 'AR_RTR_3_6_INQ_PRF_PKT_TO_DEAD_LINK_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts the occurrences where packets are being routed toward a dead link',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_6_INQ_PRF_PKT_TO_DEAD_LINK_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_7_INQ_PRF_PKT_TO_DEAD_LINK_CNT'} = {
    NAME => 'AR_RTR_3_7_INQ_PRF_PKT_TO_DEAD_LINK_CNT',
    LABEL => 'AR_RTR_3_7_INQ_PRF_PKT_TO_DEAD_LINK_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts the occurrences where packets are being routed toward a dead link',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_7_INQ_PRF_PKT_TO_DEAD_LINK_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_0_INQ_PRF_PKT_TO_DEAD_LINK_CNT'} = {
    NAME => 'AR_RTR_4_0_INQ_PRF_PKT_TO_DEAD_LINK_CNT',
    LABEL => 'AR_RTR_4_0_INQ_PRF_PKT_TO_DEAD_LINK_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts the occurrences where packets are being routed toward a dead link',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_0_INQ_PRF_PKT_TO_DEAD_LINK_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_1_INQ_PRF_PKT_TO_DEAD_LINK_CNT'} = {
    NAME => 'AR_RTR_4_1_INQ_PRF_PKT_TO_DEAD_LINK_CNT',
    LABEL => 'AR_RTR_4_1_INQ_PRF_PKT_TO_DEAD_LINK_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts the occurrences where packets are being routed toward a dead link',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_1_INQ_PRF_PKT_TO_DEAD_LINK_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_2_INQ_PRF_PKT_TO_DEAD_LINK_CNT'} = {
    NAME => 'AR_RTR_4_2_INQ_PRF_PKT_TO_DEAD_LINK_CNT',
    LABEL => 'AR_RTR_4_2_INQ_PRF_PKT_TO_DEAD_LINK_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts the occurrences where packets are being routed toward a dead link',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_2_INQ_PRF_PKT_TO_DEAD_LINK_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_3_INQ_PRF_PKT_TO_DEAD_LINK_CNT'} = {
    NAME => 'AR_RTR_4_3_INQ_PRF_PKT_TO_DEAD_LINK_CNT',
    LABEL => 'AR_RTR_4_3_INQ_PRF_PKT_TO_DEAD_LINK_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts the occurrences where packets are being routed toward a dead link',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_3_INQ_PRF_PKT_TO_DEAD_LINK_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_4_INQ_PRF_PKT_TO_DEAD_LINK_CNT'} = {
    NAME => 'AR_RTR_4_4_INQ_PRF_PKT_TO_DEAD_LINK_CNT',
    LABEL => 'AR_RTR_4_4_INQ_PRF_PKT_TO_DEAD_LINK_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts the occurrences where packets are being routed toward a dead link',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_4_INQ_PRF_PKT_TO_DEAD_LINK_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_5_INQ_PRF_PKT_TO_DEAD_LINK_CNT'} = {
    NAME => 'AR_RTR_4_5_INQ_PRF_PKT_TO_DEAD_LINK_CNT',
    LABEL => 'AR_RTR_4_5_INQ_PRF_PKT_TO_DEAD_LINK_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts the occurrences where packets are being routed toward a dead link',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_5_INQ_PRF_PKT_TO_DEAD_LINK_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_6_INQ_PRF_PKT_TO_DEAD_LINK_CNT'} = {
    NAME => 'AR_RTR_4_6_INQ_PRF_PKT_TO_DEAD_LINK_CNT',
    LABEL => 'AR_RTR_4_6_INQ_PRF_PKT_TO_DEAD_LINK_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts the occurrences where packets are being routed toward a dead link',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_6_INQ_PRF_PKT_TO_DEAD_LINK_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_7_INQ_PRF_PKT_TO_DEAD_LINK_CNT'} = {
    NAME => 'AR_RTR_4_7_INQ_PRF_PKT_TO_DEAD_LINK_CNT',
    LABEL => 'AR_RTR_4_7_INQ_PRF_PKT_TO_DEAD_LINK_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts the occurrences where packets are being routed toward a dead link',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_7_INQ_PRF_PKT_TO_DEAD_LINK_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_0_COLBUF_PERF_STALL_RQ:VC_PTR'} = {
    NAME => 'AR_RTR_0_0_COLBUF_PERF_STALL_RQ:VC_PTR',
    LABEL => 'AR_RTR_0_0_COLBUF_PERF_STALL_RQ:VC_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Pointer indicating which VC should be monitored',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_0_COLBUF_PERF_STALL_RQ:VC_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_0_COLBUF_PERF_STALL_RQ:COL_BUF_PERF_STALL_RQ'} = {
    NAME => 'AR_RTR_0_0_COLBUF_PERF_STALL_RQ:COL_BUF_PERF_STALL_RQ',
    LABEL => 'AR_RTR_0_0_COLBUF_PERF_STALL_RQ:COL_BUF_PERF_STALL_RQ',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'The number of Lclks a valid request is stalled because of lack ofcredits',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_0_COLBUF_PERF_STALL_RQ:COL_BUF_PERF_STALL_RQ'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_1_COLBUF_PERF_STALL_RQ:VC_PTR'} = {
    NAME => 'AR_RTR_0_1_COLBUF_PERF_STALL_RQ:VC_PTR',
    LABEL => 'AR_RTR_0_1_COLBUF_PERF_STALL_RQ:VC_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Pointer indicating which VC should be monitored',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_1_COLBUF_PERF_STALL_RQ:VC_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_1_COLBUF_PERF_STALL_RQ:COL_BUF_PERF_STALL_RQ'} = {
    NAME => 'AR_RTR_0_1_COLBUF_PERF_STALL_RQ:COL_BUF_PERF_STALL_RQ',
    LABEL => 'AR_RTR_0_1_COLBUF_PERF_STALL_RQ:COL_BUF_PERF_STALL_RQ',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'The number of Lclks a valid request is stalled because of lack ofcredits',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_1_COLBUF_PERF_STALL_RQ:COL_BUF_PERF_STALL_RQ'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_2_COLBUF_PERF_STALL_RQ:VC_PTR'} = {
    NAME => 'AR_RTR_0_2_COLBUF_PERF_STALL_RQ:VC_PTR',
    LABEL => 'AR_RTR_0_2_COLBUF_PERF_STALL_RQ:VC_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Pointer indicating which VC should be monitored',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_2_COLBUF_PERF_STALL_RQ:VC_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_2_COLBUF_PERF_STALL_RQ:COL_BUF_PERF_STALL_RQ'} = {
    NAME => 'AR_RTR_0_2_COLBUF_PERF_STALL_RQ:COL_BUF_PERF_STALL_RQ',
    LABEL => 'AR_RTR_0_2_COLBUF_PERF_STALL_RQ:COL_BUF_PERF_STALL_RQ',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'The number of Lclks a valid request is stalled because of lack ofcredits',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_2_COLBUF_PERF_STALL_RQ:COL_BUF_PERF_STALL_RQ'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_3_COLBUF_PERF_STALL_RQ:VC_PTR'} = {
    NAME => 'AR_RTR_0_3_COLBUF_PERF_STALL_RQ:VC_PTR',
    LABEL => 'AR_RTR_0_3_COLBUF_PERF_STALL_RQ:VC_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Pointer indicating which VC should be monitored',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_3_COLBUF_PERF_STALL_RQ:VC_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_3_COLBUF_PERF_STALL_RQ:COL_BUF_PERF_STALL_RQ'} = {
    NAME => 'AR_RTR_0_3_COLBUF_PERF_STALL_RQ:COL_BUF_PERF_STALL_RQ',
    LABEL => 'AR_RTR_0_3_COLBUF_PERF_STALL_RQ:COL_BUF_PERF_STALL_RQ',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'The number of Lclks a valid request is stalled because of lack ofcredits',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_3_COLBUF_PERF_STALL_RQ:COL_BUF_PERF_STALL_RQ'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_4_COLBUF_PERF_STALL_RQ:VC_PTR'} = {
    NAME => 'AR_RTR_0_4_COLBUF_PERF_STALL_RQ:VC_PTR',
    LABEL => 'AR_RTR_0_4_COLBUF_PERF_STALL_RQ:VC_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Pointer indicating which VC should be monitored',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_4_COLBUF_PERF_STALL_RQ:VC_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_4_COLBUF_PERF_STALL_RQ:COL_BUF_PERF_STALL_RQ'} = {
    NAME => 'AR_RTR_0_4_COLBUF_PERF_STALL_RQ:COL_BUF_PERF_STALL_RQ',
    LABEL => 'AR_RTR_0_4_COLBUF_PERF_STALL_RQ:COL_BUF_PERF_STALL_RQ',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'The number of Lclks a valid request is stalled because of lack ofcredits',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_4_COLBUF_PERF_STALL_RQ:COL_BUF_PERF_STALL_RQ'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_5_COLBUF_PERF_STALL_RQ:VC_PTR'} = {
    NAME => 'AR_RTR_0_5_COLBUF_PERF_STALL_RQ:VC_PTR',
    LABEL => 'AR_RTR_0_5_COLBUF_PERF_STALL_RQ:VC_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Pointer indicating which VC should be monitored',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_5_COLBUF_PERF_STALL_RQ:VC_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_5_COLBUF_PERF_STALL_RQ:COL_BUF_PERF_STALL_RQ'} = {
    NAME => 'AR_RTR_0_5_COLBUF_PERF_STALL_RQ:COL_BUF_PERF_STALL_RQ',
    LABEL => 'AR_RTR_0_5_COLBUF_PERF_STALL_RQ:COL_BUF_PERF_STALL_RQ',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'The number of Lclks a valid request is stalled because of lack ofcredits',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_5_COLBUF_PERF_STALL_RQ:COL_BUF_PERF_STALL_RQ'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_6_COLBUF_PERF_STALL_RQ:VC_PTR'} = {
    NAME => 'AR_RTR_0_6_COLBUF_PERF_STALL_RQ:VC_PTR',
    LABEL => 'AR_RTR_0_6_COLBUF_PERF_STALL_RQ:VC_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Pointer indicating which VC should be monitored',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_6_COLBUF_PERF_STALL_RQ:VC_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_6_COLBUF_PERF_STALL_RQ:COL_BUF_PERF_STALL_RQ'} = {
    NAME => 'AR_RTR_0_6_COLBUF_PERF_STALL_RQ:COL_BUF_PERF_STALL_RQ',
    LABEL => 'AR_RTR_0_6_COLBUF_PERF_STALL_RQ:COL_BUF_PERF_STALL_RQ',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'The number of Lclks a valid request is stalled because of lack ofcredits',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_6_COLBUF_PERF_STALL_RQ:COL_BUF_PERF_STALL_RQ'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_7_COLBUF_PERF_STALL_RQ:VC_PTR'} = {
    NAME => 'AR_RTR_0_7_COLBUF_PERF_STALL_RQ:VC_PTR',
    LABEL => 'AR_RTR_0_7_COLBUF_PERF_STALL_RQ:VC_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Pointer indicating which VC should be monitored',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_7_COLBUF_PERF_STALL_RQ:VC_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_7_COLBUF_PERF_STALL_RQ:COL_BUF_PERF_STALL_RQ'} = {
    NAME => 'AR_RTR_0_7_COLBUF_PERF_STALL_RQ:COL_BUF_PERF_STALL_RQ',
    LABEL => 'AR_RTR_0_7_COLBUF_PERF_STALL_RQ:COL_BUF_PERF_STALL_RQ',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'The number of Lclks a valid request is stalled because of lack ofcredits',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_7_COLBUF_PERF_STALL_RQ:COL_BUF_PERF_STALL_RQ'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_0_COLBUF_PERF_STALL_RQ:VC_PTR'} = {
    NAME => 'AR_RTR_1_0_COLBUF_PERF_STALL_RQ:VC_PTR',
    LABEL => 'AR_RTR_1_0_COLBUF_PERF_STALL_RQ:VC_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Pointer indicating which VC should be monitored',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_0_COLBUF_PERF_STALL_RQ:VC_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_0_COLBUF_PERF_STALL_RQ:COL_BUF_PERF_STALL_RQ'} = {
    NAME => 'AR_RTR_1_0_COLBUF_PERF_STALL_RQ:COL_BUF_PERF_STALL_RQ',
    LABEL => 'AR_RTR_1_0_COLBUF_PERF_STALL_RQ:COL_BUF_PERF_STALL_RQ',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'The number of Lclks a valid request is stalled because of lack ofcredits',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_0_COLBUF_PERF_STALL_RQ:COL_BUF_PERF_STALL_RQ'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_1_COLBUF_PERF_STALL_RQ:VC_PTR'} = {
    NAME => 'AR_RTR_1_1_COLBUF_PERF_STALL_RQ:VC_PTR',
    LABEL => 'AR_RTR_1_1_COLBUF_PERF_STALL_RQ:VC_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Pointer indicating which VC should be monitored',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_1_COLBUF_PERF_STALL_RQ:VC_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_1_COLBUF_PERF_STALL_RQ:COL_BUF_PERF_STALL_RQ'} = {
    NAME => 'AR_RTR_1_1_COLBUF_PERF_STALL_RQ:COL_BUF_PERF_STALL_RQ',
    LABEL => 'AR_RTR_1_1_COLBUF_PERF_STALL_RQ:COL_BUF_PERF_STALL_RQ',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'The number of Lclks a valid request is stalled because of lack ofcredits',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_1_COLBUF_PERF_STALL_RQ:COL_BUF_PERF_STALL_RQ'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_2_COLBUF_PERF_STALL_RQ:VC_PTR'} = {
    NAME => 'AR_RTR_1_2_COLBUF_PERF_STALL_RQ:VC_PTR',
    LABEL => 'AR_RTR_1_2_COLBUF_PERF_STALL_RQ:VC_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Pointer indicating which VC should be monitored',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_2_COLBUF_PERF_STALL_RQ:VC_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_2_COLBUF_PERF_STALL_RQ:COL_BUF_PERF_STALL_RQ'} = {
    NAME => 'AR_RTR_1_2_COLBUF_PERF_STALL_RQ:COL_BUF_PERF_STALL_RQ',
    LABEL => 'AR_RTR_1_2_COLBUF_PERF_STALL_RQ:COL_BUF_PERF_STALL_RQ',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'The number of Lclks a valid request is stalled because of lack ofcredits',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_2_COLBUF_PERF_STALL_RQ:COL_BUF_PERF_STALL_RQ'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_3_COLBUF_PERF_STALL_RQ:VC_PTR'} = {
    NAME => 'AR_RTR_1_3_COLBUF_PERF_STALL_RQ:VC_PTR',
    LABEL => 'AR_RTR_1_3_COLBUF_PERF_STALL_RQ:VC_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Pointer indicating which VC should be monitored',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_3_COLBUF_PERF_STALL_RQ:VC_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_3_COLBUF_PERF_STALL_RQ:COL_BUF_PERF_STALL_RQ'} = {
    NAME => 'AR_RTR_1_3_COLBUF_PERF_STALL_RQ:COL_BUF_PERF_STALL_RQ',
    LABEL => 'AR_RTR_1_3_COLBUF_PERF_STALL_RQ:COL_BUF_PERF_STALL_RQ',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'The number of Lclks a valid request is stalled because of lack ofcredits',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_3_COLBUF_PERF_STALL_RQ:COL_BUF_PERF_STALL_RQ'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_4_COLBUF_PERF_STALL_RQ:VC_PTR'} = {
    NAME => 'AR_RTR_1_4_COLBUF_PERF_STALL_RQ:VC_PTR',
    LABEL => 'AR_RTR_1_4_COLBUF_PERF_STALL_RQ:VC_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Pointer indicating which VC should be monitored',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_4_COLBUF_PERF_STALL_RQ:VC_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_4_COLBUF_PERF_STALL_RQ:COL_BUF_PERF_STALL_RQ'} = {
    NAME => 'AR_RTR_1_4_COLBUF_PERF_STALL_RQ:COL_BUF_PERF_STALL_RQ',
    LABEL => 'AR_RTR_1_4_COLBUF_PERF_STALL_RQ:COL_BUF_PERF_STALL_RQ',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'The number of Lclks a valid request is stalled because of lack ofcredits',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_4_COLBUF_PERF_STALL_RQ:COL_BUF_PERF_STALL_RQ'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_5_COLBUF_PERF_STALL_RQ:VC_PTR'} = {
    NAME => 'AR_RTR_1_5_COLBUF_PERF_STALL_RQ:VC_PTR',
    LABEL => 'AR_RTR_1_5_COLBUF_PERF_STALL_RQ:VC_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Pointer indicating which VC should be monitored',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_5_COLBUF_PERF_STALL_RQ:VC_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_5_COLBUF_PERF_STALL_RQ:COL_BUF_PERF_STALL_RQ'} = {
    NAME => 'AR_RTR_1_5_COLBUF_PERF_STALL_RQ:COL_BUF_PERF_STALL_RQ',
    LABEL => 'AR_RTR_1_5_COLBUF_PERF_STALL_RQ:COL_BUF_PERF_STALL_RQ',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'The number of Lclks a valid request is stalled because of lack ofcredits',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_5_COLBUF_PERF_STALL_RQ:COL_BUF_PERF_STALL_RQ'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_6_COLBUF_PERF_STALL_RQ:VC_PTR'} = {
    NAME => 'AR_RTR_1_6_COLBUF_PERF_STALL_RQ:VC_PTR',
    LABEL => 'AR_RTR_1_6_COLBUF_PERF_STALL_RQ:VC_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Pointer indicating which VC should be monitored',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_6_COLBUF_PERF_STALL_RQ:VC_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_6_COLBUF_PERF_STALL_RQ:COL_BUF_PERF_STALL_RQ'} = {
    NAME => 'AR_RTR_1_6_COLBUF_PERF_STALL_RQ:COL_BUF_PERF_STALL_RQ',
    LABEL => 'AR_RTR_1_6_COLBUF_PERF_STALL_RQ:COL_BUF_PERF_STALL_RQ',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'The number of Lclks a valid request is stalled because of lack ofcredits',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_6_COLBUF_PERF_STALL_RQ:COL_BUF_PERF_STALL_RQ'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_7_COLBUF_PERF_STALL_RQ:VC_PTR'} = {
    NAME => 'AR_RTR_1_7_COLBUF_PERF_STALL_RQ:VC_PTR',
    LABEL => 'AR_RTR_1_7_COLBUF_PERF_STALL_RQ:VC_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Pointer indicating which VC should be monitored',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_7_COLBUF_PERF_STALL_RQ:VC_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_7_COLBUF_PERF_STALL_RQ:COL_BUF_PERF_STALL_RQ'} = {
    NAME => 'AR_RTR_1_7_COLBUF_PERF_STALL_RQ:COL_BUF_PERF_STALL_RQ',
    LABEL => 'AR_RTR_1_7_COLBUF_PERF_STALL_RQ:COL_BUF_PERF_STALL_RQ',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'The number of Lclks a valid request is stalled because of lack ofcredits',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_7_COLBUF_PERF_STALL_RQ:COL_BUF_PERF_STALL_RQ'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_0_COLBUF_PERF_STALL_RQ:VC_PTR'} = {
    NAME => 'AR_RTR_2_0_COLBUF_PERF_STALL_RQ:VC_PTR',
    LABEL => 'AR_RTR_2_0_COLBUF_PERF_STALL_RQ:VC_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Pointer indicating which VC should be monitored',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_0_COLBUF_PERF_STALL_RQ:VC_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_0_COLBUF_PERF_STALL_RQ:COL_BUF_PERF_STALL_RQ'} = {
    NAME => 'AR_RTR_2_0_COLBUF_PERF_STALL_RQ:COL_BUF_PERF_STALL_RQ',
    LABEL => 'AR_RTR_2_0_COLBUF_PERF_STALL_RQ:COL_BUF_PERF_STALL_RQ',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'The number of Lclks a valid request is stalled because of lack ofcredits',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_0_COLBUF_PERF_STALL_RQ:COL_BUF_PERF_STALL_RQ'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_1_COLBUF_PERF_STALL_RQ:VC_PTR'} = {
    NAME => 'AR_RTR_2_1_COLBUF_PERF_STALL_RQ:VC_PTR',
    LABEL => 'AR_RTR_2_1_COLBUF_PERF_STALL_RQ:VC_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Pointer indicating which VC should be monitored',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_1_COLBUF_PERF_STALL_RQ:VC_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_1_COLBUF_PERF_STALL_RQ:COL_BUF_PERF_STALL_RQ'} = {
    NAME => 'AR_RTR_2_1_COLBUF_PERF_STALL_RQ:COL_BUF_PERF_STALL_RQ',
    LABEL => 'AR_RTR_2_1_COLBUF_PERF_STALL_RQ:COL_BUF_PERF_STALL_RQ',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'The number of Lclks a valid request is stalled because of lack ofcredits',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_1_COLBUF_PERF_STALL_RQ:COL_BUF_PERF_STALL_RQ'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_2_COLBUF_PERF_STALL_RQ:VC_PTR'} = {
    NAME => 'AR_RTR_2_2_COLBUF_PERF_STALL_RQ:VC_PTR',
    LABEL => 'AR_RTR_2_2_COLBUF_PERF_STALL_RQ:VC_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Pointer indicating which VC should be monitored',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_2_COLBUF_PERF_STALL_RQ:VC_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_2_COLBUF_PERF_STALL_RQ:COL_BUF_PERF_STALL_RQ'} = {
    NAME => 'AR_RTR_2_2_COLBUF_PERF_STALL_RQ:COL_BUF_PERF_STALL_RQ',
    LABEL => 'AR_RTR_2_2_COLBUF_PERF_STALL_RQ:COL_BUF_PERF_STALL_RQ',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'The number of Lclks a valid request is stalled because of lack ofcredits',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_2_COLBUF_PERF_STALL_RQ:COL_BUF_PERF_STALL_RQ'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_3_COLBUF_PERF_STALL_RQ:VC_PTR'} = {
    NAME => 'AR_RTR_2_3_COLBUF_PERF_STALL_RQ:VC_PTR',
    LABEL => 'AR_RTR_2_3_COLBUF_PERF_STALL_RQ:VC_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Pointer indicating which VC should be monitored',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_3_COLBUF_PERF_STALL_RQ:VC_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_3_COLBUF_PERF_STALL_RQ:COL_BUF_PERF_STALL_RQ'} = {
    NAME => 'AR_RTR_2_3_COLBUF_PERF_STALL_RQ:COL_BUF_PERF_STALL_RQ',
    LABEL => 'AR_RTR_2_3_COLBUF_PERF_STALL_RQ:COL_BUF_PERF_STALL_RQ',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'The number of Lclks a valid request is stalled because of lack ofcredits',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_3_COLBUF_PERF_STALL_RQ:COL_BUF_PERF_STALL_RQ'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_4_COLBUF_PERF_STALL_RQ:VC_PTR'} = {
    NAME => 'AR_RTR_2_4_COLBUF_PERF_STALL_RQ:VC_PTR',
    LABEL => 'AR_RTR_2_4_COLBUF_PERF_STALL_RQ:VC_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Pointer indicating which VC should be monitored',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_4_COLBUF_PERF_STALL_RQ:VC_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_4_COLBUF_PERF_STALL_RQ:COL_BUF_PERF_STALL_RQ'} = {
    NAME => 'AR_RTR_2_4_COLBUF_PERF_STALL_RQ:COL_BUF_PERF_STALL_RQ',
    LABEL => 'AR_RTR_2_4_COLBUF_PERF_STALL_RQ:COL_BUF_PERF_STALL_RQ',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'The number of Lclks a valid request is stalled because of lack ofcredits',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_4_COLBUF_PERF_STALL_RQ:COL_BUF_PERF_STALL_RQ'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_5_COLBUF_PERF_STALL_RQ:VC_PTR'} = {
    NAME => 'AR_RTR_2_5_COLBUF_PERF_STALL_RQ:VC_PTR',
    LABEL => 'AR_RTR_2_5_COLBUF_PERF_STALL_RQ:VC_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Pointer indicating which VC should be monitored',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_5_COLBUF_PERF_STALL_RQ:VC_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_5_COLBUF_PERF_STALL_RQ:COL_BUF_PERF_STALL_RQ'} = {
    NAME => 'AR_RTR_2_5_COLBUF_PERF_STALL_RQ:COL_BUF_PERF_STALL_RQ',
    LABEL => 'AR_RTR_2_5_COLBUF_PERF_STALL_RQ:COL_BUF_PERF_STALL_RQ',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'The number of Lclks a valid request is stalled because of lack ofcredits',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_5_COLBUF_PERF_STALL_RQ:COL_BUF_PERF_STALL_RQ'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_6_COLBUF_PERF_STALL_RQ:VC_PTR'} = {
    NAME => 'AR_RTR_2_6_COLBUF_PERF_STALL_RQ:VC_PTR',
    LABEL => 'AR_RTR_2_6_COLBUF_PERF_STALL_RQ:VC_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Pointer indicating which VC should be monitored',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_6_COLBUF_PERF_STALL_RQ:VC_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_6_COLBUF_PERF_STALL_RQ:COL_BUF_PERF_STALL_RQ'} = {
    NAME => 'AR_RTR_2_6_COLBUF_PERF_STALL_RQ:COL_BUF_PERF_STALL_RQ',
    LABEL => 'AR_RTR_2_6_COLBUF_PERF_STALL_RQ:COL_BUF_PERF_STALL_RQ',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'The number of Lclks a valid request is stalled because of lack ofcredits',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_6_COLBUF_PERF_STALL_RQ:COL_BUF_PERF_STALL_RQ'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_7_COLBUF_PERF_STALL_RQ:VC_PTR'} = {
    NAME => 'AR_RTR_2_7_COLBUF_PERF_STALL_RQ:VC_PTR',
    LABEL => 'AR_RTR_2_7_COLBUF_PERF_STALL_RQ:VC_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Pointer indicating which VC should be monitored',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_7_COLBUF_PERF_STALL_RQ:VC_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_7_COLBUF_PERF_STALL_RQ:COL_BUF_PERF_STALL_RQ'} = {
    NAME => 'AR_RTR_2_7_COLBUF_PERF_STALL_RQ:COL_BUF_PERF_STALL_RQ',
    LABEL => 'AR_RTR_2_7_COLBUF_PERF_STALL_RQ:COL_BUF_PERF_STALL_RQ',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'The number of Lclks a valid request is stalled because of lack ofcredits',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_7_COLBUF_PERF_STALL_RQ:COL_BUF_PERF_STALL_RQ'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_0_COLBUF_PERF_STALL_RQ:VC_PTR'} = {
    NAME => 'AR_RTR_3_0_COLBUF_PERF_STALL_RQ:VC_PTR',
    LABEL => 'AR_RTR_3_0_COLBUF_PERF_STALL_RQ:VC_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Pointer indicating which VC should be monitored',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_0_COLBUF_PERF_STALL_RQ:VC_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_0_COLBUF_PERF_STALL_RQ:COL_BUF_PERF_STALL_RQ'} = {
    NAME => 'AR_RTR_3_0_COLBUF_PERF_STALL_RQ:COL_BUF_PERF_STALL_RQ',
    LABEL => 'AR_RTR_3_0_COLBUF_PERF_STALL_RQ:COL_BUF_PERF_STALL_RQ',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'The number of Lclks a valid request is stalled because of lack ofcredits',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_0_COLBUF_PERF_STALL_RQ:COL_BUF_PERF_STALL_RQ'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_1_COLBUF_PERF_STALL_RQ:VC_PTR'} = {
    NAME => 'AR_RTR_3_1_COLBUF_PERF_STALL_RQ:VC_PTR',
    LABEL => 'AR_RTR_3_1_COLBUF_PERF_STALL_RQ:VC_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Pointer indicating which VC should be monitored',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_1_COLBUF_PERF_STALL_RQ:VC_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_1_COLBUF_PERF_STALL_RQ:COL_BUF_PERF_STALL_RQ'} = {
    NAME => 'AR_RTR_3_1_COLBUF_PERF_STALL_RQ:COL_BUF_PERF_STALL_RQ',
    LABEL => 'AR_RTR_3_1_COLBUF_PERF_STALL_RQ:COL_BUF_PERF_STALL_RQ',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'The number of Lclks a valid request is stalled because of lack ofcredits',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_1_COLBUF_PERF_STALL_RQ:COL_BUF_PERF_STALL_RQ'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_2_COLBUF_PERF_STALL_RQ:VC_PTR'} = {
    NAME => 'AR_RTR_3_2_COLBUF_PERF_STALL_RQ:VC_PTR',
    LABEL => 'AR_RTR_3_2_COLBUF_PERF_STALL_RQ:VC_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Pointer indicating which VC should be monitored',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_2_COLBUF_PERF_STALL_RQ:VC_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_2_COLBUF_PERF_STALL_RQ:COL_BUF_PERF_STALL_RQ'} = {
    NAME => 'AR_RTR_3_2_COLBUF_PERF_STALL_RQ:COL_BUF_PERF_STALL_RQ',
    LABEL => 'AR_RTR_3_2_COLBUF_PERF_STALL_RQ:COL_BUF_PERF_STALL_RQ',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'The number of Lclks a valid request is stalled because of lack ofcredits',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_2_COLBUF_PERF_STALL_RQ:COL_BUF_PERF_STALL_RQ'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_3_COLBUF_PERF_STALL_RQ:VC_PTR'} = {
    NAME => 'AR_RTR_3_3_COLBUF_PERF_STALL_RQ:VC_PTR',
    LABEL => 'AR_RTR_3_3_COLBUF_PERF_STALL_RQ:VC_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Pointer indicating which VC should be monitored',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_3_COLBUF_PERF_STALL_RQ:VC_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_3_COLBUF_PERF_STALL_RQ:COL_BUF_PERF_STALL_RQ'} = {
    NAME => 'AR_RTR_3_3_COLBUF_PERF_STALL_RQ:COL_BUF_PERF_STALL_RQ',
    LABEL => 'AR_RTR_3_3_COLBUF_PERF_STALL_RQ:COL_BUF_PERF_STALL_RQ',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'The number of Lclks a valid request is stalled because of lack ofcredits',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_3_COLBUF_PERF_STALL_RQ:COL_BUF_PERF_STALL_RQ'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_4_COLBUF_PERF_STALL_RQ:VC_PTR'} = {
    NAME => 'AR_RTR_3_4_COLBUF_PERF_STALL_RQ:VC_PTR',
    LABEL => 'AR_RTR_3_4_COLBUF_PERF_STALL_RQ:VC_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Pointer indicating which VC should be monitored',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_4_COLBUF_PERF_STALL_RQ:VC_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_4_COLBUF_PERF_STALL_RQ:COL_BUF_PERF_STALL_RQ'} = {
    NAME => 'AR_RTR_3_4_COLBUF_PERF_STALL_RQ:COL_BUF_PERF_STALL_RQ',
    LABEL => 'AR_RTR_3_4_COLBUF_PERF_STALL_RQ:COL_BUF_PERF_STALL_RQ',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'The number of Lclks a valid request is stalled because of lack ofcredits',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_4_COLBUF_PERF_STALL_RQ:COL_BUF_PERF_STALL_RQ'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_5_COLBUF_PERF_STALL_RQ:VC_PTR'} = {
    NAME => 'AR_RTR_3_5_COLBUF_PERF_STALL_RQ:VC_PTR',
    LABEL => 'AR_RTR_3_5_COLBUF_PERF_STALL_RQ:VC_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Pointer indicating which VC should be monitored',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_5_COLBUF_PERF_STALL_RQ:VC_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_5_COLBUF_PERF_STALL_RQ:COL_BUF_PERF_STALL_RQ'} = {
    NAME => 'AR_RTR_3_5_COLBUF_PERF_STALL_RQ:COL_BUF_PERF_STALL_RQ',
    LABEL => 'AR_RTR_3_5_COLBUF_PERF_STALL_RQ:COL_BUF_PERF_STALL_RQ',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'The number of Lclks a valid request is stalled because of lack ofcredits',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_5_COLBUF_PERF_STALL_RQ:COL_BUF_PERF_STALL_RQ'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_6_COLBUF_PERF_STALL_RQ:VC_PTR'} = {
    NAME => 'AR_RTR_3_6_COLBUF_PERF_STALL_RQ:VC_PTR',
    LABEL => 'AR_RTR_3_6_COLBUF_PERF_STALL_RQ:VC_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Pointer indicating which VC should be monitored',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_6_COLBUF_PERF_STALL_RQ:VC_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_6_COLBUF_PERF_STALL_RQ:COL_BUF_PERF_STALL_RQ'} = {
    NAME => 'AR_RTR_3_6_COLBUF_PERF_STALL_RQ:COL_BUF_PERF_STALL_RQ',
    LABEL => 'AR_RTR_3_6_COLBUF_PERF_STALL_RQ:COL_BUF_PERF_STALL_RQ',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'The number of Lclks a valid request is stalled because of lack ofcredits',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_6_COLBUF_PERF_STALL_RQ:COL_BUF_PERF_STALL_RQ'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_7_COLBUF_PERF_STALL_RQ:VC_PTR'} = {
    NAME => 'AR_RTR_3_7_COLBUF_PERF_STALL_RQ:VC_PTR',
    LABEL => 'AR_RTR_3_7_COLBUF_PERF_STALL_RQ:VC_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Pointer indicating which VC should be monitored',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_7_COLBUF_PERF_STALL_RQ:VC_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_7_COLBUF_PERF_STALL_RQ:COL_BUF_PERF_STALL_RQ'} = {
    NAME => 'AR_RTR_3_7_COLBUF_PERF_STALL_RQ:COL_BUF_PERF_STALL_RQ',
    LABEL => 'AR_RTR_3_7_COLBUF_PERF_STALL_RQ:COL_BUF_PERF_STALL_RQ',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'The number of Lclks a valid request is stalled because of lack ofcredits',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_7_COLBUF_PERF_STALL_RQ:COL_BUF_PERF_STALL_RQ'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_0_COLBUF_PERF_STALL_RQ:VC_PTR'} = {
    NAME => 'AR_RTR_4_0_COLBUF_PERF_STALL_RQ:VC_PTR',
    LABEL => 'AR_RTR_4_0_COLBUF_PERF_STALL_RQ:VC_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Pointer indicating which VC should be monitored',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_0_COLBUF_PERF_STALL_RQ:VC_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_0_COLBUF_PERF_STALL_RQ:COL_BUF_PERF_STALL_RQ'} = {
    NAME => 'AR_RTR_4_0_COLBUF_PERF_STALL_RQ:COL_BUF_PERF_STALL_RQ',
    LABEL => 'AR_RTR_4_0_COLBUF_PERF_STALL_RQ:COL_BUF_PERF_STALL_RQ',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'The number of Lclks a valid request is stalled because of lack ofcredits',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_0_COLBUF_PERF_STALL_RQ:COL_BUF_PERF_STALL_RQ'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_1_COLBUF_PERF_STALL_RQ:VC_PTR'} = {
    NAME => 'AR_RTR_4_1_COLBUF_PERF_STALL_RQ:VC_PTR',
    LABEL => 'AR_RTR_4_1_COLBUF_PERF_STALL_RQ:VC_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Pointer indicating which VC should be monitored',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_1_COLBUF_PERF_STALL_RQ:VC_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_1_COLBUF_PERF_STALL_RQ:COL_BUF_PERF_STALL_RQ'} = {
    NAME => 'AR_RTR_4_1_COLBUF_PERF_STALL_RQ:COL_BUF_PERF_STALL_RQ',
    LABEL => 'AR_RTR_4_1_COLBUF_PERF_STALL_RQ:COL_BUF_PERF_STALL_RQ',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'The number of Lclks a valid request is stalled because of lack ofcredits',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_1_COLBUF_PERF_STALL_RQ:COL_BUF_PERF_STALL_RQ'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_2_COLBUF_PERF_STALL_RQ:VC_PTR'} = {
    NAME => 'AR_RTR_4_2_COLBUF_PERF_STALL_RQ:VC_PTR',
    LABEL => 'AR_RTR_4_2_COLBUF_PERF_STALL_RQ:VC_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Pointer indicating which VC should be monitored',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_2_COLBUF_PERF_STALL_RQ:VC_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_2_COLBUF_PERF_STALL_RQ:COL_BUF_PERF_STALL_RQ'} = {
    NAME => 'AR_RTR_4_2_COLBUF_PERF_STALL_RQ:COL_BUF_PERF_STALL_RQ',
    LABEL => 'AR_RTR_4_2_COLBUF_PERF_STALL_RQ:COL_BUF_PERF_STALL_RQ',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'The number of Lclks a valid request is stalled because of lack ofcredits',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_2_COLBUF_PERF_STALL_RQ:COL_BUF_PERF_STALL_RQ'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_3_COLBUF_PERF_STALL_RQ:VC_PTR'} = {
    NAME => 'AR_RTR_4_3_COLBUF_PERF_STALL_RQ:VC_PTR',
    LABEL => 'AR_RTR_4_3_COLBUF_PERF_STALL_RQ:VC_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Pointer indicating which VC should be monitored',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_3_COLBUF_PERF_STALL_RQ:VC_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_3_COLBUF_PERF_STALL_RQ:COL_BUF_PERF_STALL_RQ'} = {
    NAME => 'AR_RTR_4_3_COLBUF_PERF_STALL_RQ:COL_BUF_PERF_STALL_RQ',
    LABEL => 'AR_RTR_4_3_COLBUF_PERF_STALL_RQ:COL_BUF_PERF_STALL_RQ',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'The number of Lclks a valid request is stalled because of lack ofcredits',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_3_COLBUF_PERF_STALL_RQ:COL_BUF_PERF_STALL_RQ'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_4_COLBUF_PERF_STALL_RQ:VC_PTR'} = {
    NAME => 'AR_RTR_4_4_COLBUF_PERF_STALL_RQ:VC_PTR',
    LABEL => 'AR_RTR_4_4_COLBUF_PERF_STALL_RQ:VC_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Pointer indicating which VC should be monitored',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_4_COLBUF_PERF_STALL_RQ:VC_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_4_COLBUF_PERF_STALL_RQ:COL_BUF_PERF_STALL_RQ'} = {
    NAME => 'AR_RTR_4_4_COLBUF_PERF_STALL_RQ:COL_BUF_PERF_STALL_RQ',
    LABEL => 'AR_RTR_4_4_COLBUF_PERF_STALL_RQ:COL_BUF_PERF_STALL_RQ',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'The number of Lclks a valid request is stalled because of lack ofcredits',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_4_COLBUF_PERF_STALL_RQ:COL_BUF_PERF_STALL_RQ'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_5_COLBUF_PERF_STALL_RQ:VC_PTR'} = {
    NAME => 'AR_RTR_4_5_COLBUF_PERF_STALL_RQ:VC_PTR',
    LABEL => 'AR_RTR_4_5_COLBUF_PERF_STALL_RQ:VC_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Pointer indicating which VC should be monitored',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_5_COLBUF_PERF_STALL_RQ:VC_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_5_COLBUF_PERF_STALL_RQ:COL_BUF_PERF_STALL_RQ'} = {
    NAME => 'AR_RTR_4_5_COLBUF_PERF_STALL_RQ:COL_BUF_PERF_STALL_RQ',
    LABEL => 'AR_RTR_4_5_COLBUF_PERF_STALL_RQ:COL_BUF_PERF_STALL_RQ',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'The number of Lclks a valid request is stalled because of lack ofcredits',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_5_COLBUF_PERF_STALL_RQ:COL_BUF_PERF_STALL_RQ'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_6_COLBUF_PERF_STALL_RQ:VC_PTR'} = {
    NAME => 'AR_RTR_4_6_COLBUF_PERF_STALL_RQ:VC_PTR',
    LABEL => 'AR_RTR_4_6_COLBUF_PERF_STALL_RQ:VC_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Pointer indicating which VC should be monitored',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_6_COLBUF_PERF_STALL_RQ:VC_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_6_COLBUF_PERF_STALL_RQ:COL_BUF_PERF_STALL_RQ'} = {
    NAME => 'AR_RTR_4_6_COLBUF_PERF_STALL_RQ:COL_BUF_PERF_STALL_RQ',
    LABEL => 'AR_RTR_4_6_COLBUF_PERF_STALL_RQ:COL_BUF_PERF_STALL_RQ',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'The number of Lclks a valid request is stalled because of lack ofcredits',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_6_COLBUF_PERF_STALL_RQ:COL_BUF_PERF_STALL_RQ'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_7_COLBUF_PERF_STALL_RQ:VC_PTR'} = {
    NAME => 'AR_RTR_4_7_COLBUF_PERF_STALL_RQ:VC_PTR',
    LABEL => 'AR_RTR_4_7_COLBUF_PERF_STALL_RQ:VC_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Pointer indicating which VC should be monitored',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_7_COLBUF_PERF_STALL_RQ:VC_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_7_COLBUF_PERF_STALL_RQ:COL_BUF_PERF_STALL_RQ'} = {
    NAME => 'AR_RTR_4_7_COLBUF_PERF_STALL_RQ:COL_BUF_PERF_STALL_RQ',
    LABEL => 'AR_RTR_4_7_COLBUF_PERF_STALL_RQ:COL_BUF_PERF_STALL_RQ',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'The number of Lclks a valid request is stalled because of lack ofcredits',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_7_COLBUF_PERF_STALL_RQ:COL_BUF_PERF_STALL_RQ'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_0_COLBUF_PERF_STALL_RS:VC_PTR'} = {
    NAME => 'AR_RTR_0_0_COLBUF_PERF_STALL_RS:VC_PTR',
    LABEL => 'AR_RTR_0_0_COLBUF_PERF_STALL_RS:VC_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Pointer indicating which VC should be monitored',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_0_COLBUF_PERF_STALL_RS:VC_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_0_COLBUF_PERF_STALL_RS:COL_BUF_PERF_STALL_RS'} = {
    NAME => 'AR_RTR_0_0_COLBUF_PERF_STALL_RS:COL_BUF_PERF_STALL_RS',
    LABEL => 'AR_RTR_0_0_COLBUF_PERF_STALL_RS:COL_BUF_PERF_STALL_RS',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'The number of Lclks a valid request is stalled because of lack ofcredits',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_0_COLBUF_PERF_STALL_RS:COL_BUF_PERF_STALL_RS'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_1_COLBUF_PERF_STALL_RS:VC_PTR'} = {
    NAME => 'AR_RTR_0_1_COLBUF_PERF_STALL_RS:VC_PTR',
    LABEL => 'AR_RTR_0_1_COLBUF_PERF_STALL_RS:VC_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Pointer indicating which VC should be monitored',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_1_COLBUF_PERF_STALL_RS:VC_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_1_COLBUF_PERF_STALL_RS:COL_BUF_PERF_STALL_RS'} = {
    NAME => 'AR_RTR_0_1_COLBUF_PERF_STALL_RS:COL_BUF_PERF_STALL_RS',
    LABEL => 'AR_RTR_0_1_COLBUF_PERF_STALL_RS:COL_BUF_PERF_STALL_RS',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'The number of Lclks a valid request is stalled because of lack ofcredits',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_1_COLBUF_PERF_STALL_RS:COL_BUF_PERF_STALL_RS'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_2_COLBUF_PERF_STALL_RS:VC_PTR'} = {
    NAME => 'AR_RTR_0_2_COLBUF_PERF_STALL_RS:VC_PTR',
    LABEL => 'AR_RTR_0_2_COLBUF_PERF_STALL_RS:VC_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Pointer indicating which VC should be monitored',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_2_COLBUF_PERF_STALL_RS:VC_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_2_COLBUF_PERF_STALL_RS:COL_BUF_PERF_STALL_RS'} = {
    NAME => 'AR_RTR_0_2_COLBUF_PERF_STALL_RS:COL_BUF_PERF_STALL_RS',
    LABEL => 'AR_RTR_0_2_COLBUF_PERF_STALL_RS:COL_BUF_PERF_STALL_RS',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'The number of Lclks a valid request is stalled because of lack ofcredits',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_2_COLBUF_PERF_STALL_RS:COL_BUF_PERF_STALL_RS'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_3_COLBUF_PERF_STALL_RS:VC_PTR'} = {
    NAME => 'AR_RTR_0_3_COLBUF_PERF_STALL_RS:VC_PTR',
    LABEL => 'AR_RTR_0_3_COLBUF_PERF_STALL_RS:VC_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Pointer indicating which VC should be monitored',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_3_COLBUF_PERF_STALL_RS:VC_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_3_COLBUF_PERF_STALL_RS:COL_BUF_PERF_STALL_RS'} = {
    NAME => 'AR_RTR_0_3_COLBUF_PERF_STALL_RS:COL_BUF_PERF_STALL_RS',
    LABEL => 'AR_RTR_0_3_COLBUF_PERF_STALL_RS:COL_BUF_PERF_STALL_RS',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'The number of Lclks a valid request is stalled because of lack ofcredits',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_3_COLBUF_PERF_STALL_RS:COL_BUF_PERF_STALL_RS'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_4_COLBUF_PERF_STALL_RS:VC_PTR'} = {
    NAME => 'AR_RTR_0_4_COLBUF_PERF_STALL_RS:VC_PTR',
    LABEL => 'AR_RTR_0_4_COLBUF_PERF_STALL_RS:VC_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Pointer indicating which VC should be monitored',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_4_COLBUF_PERF_STALL_RS:VC_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_4_COLBUF_PERF_STALL_RS:COL_BUF_PERF_STALL_RS'} = {
    NAME => 'AR_RTR_0_4_COLBUF_PERF_STALL_RS:COL_BUF_PERF_STALL_RS',
    LABEL => 'AR_RTR_0_4_COLBUF_PERF_STALL_RS:COL_BUF_PERF_STALL_RS',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'The number of Lclks a valid request is stalled because of lack ofcredits',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_4_COLBUF_PERF_STALL_RS:COL_BUF_PERF_STALL_RS'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_5_COLBUF_PERF_STALL_RS:VC_PTR'} = {
    NAME => 'AR_RTR_0_5_COLBUF_PERF_STALL_RS:VC_PTR',
    LABEL => 'AR_RTR_0_5_COLBUF_PERF_STALL_RS:VC_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Pointer indicating which VC should be monitored',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_5_COLBUF_PERF_STALL_RS:VC_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_5_COLBUF_PERF_STALL_RS:COL_BUF_PERF_STALL_RS'} = {
    NAME => 'AR_RTR_0_5_COLBUF_PERF_STALL_RS:COL_BUF_PERF_STALL_RS',
    LABEL => 'AR_RTR_0_5_COLBUF_PERF_STALL_RS:COL_BUF_PERF_STALL_RS',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'The number of Lclks a valid request is stalled because of lack ofcredits',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_5_COLBUF_PERF_STALL_RS:COL_BUF_PERF_STALL_RS'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_6_COLBUF_PERF_STALL_RS:VC_PTR'} = {
    NAME => 'AR_RTR_0_6_COLBUF_PERF_STALL_RS:VC_PTR',
    LABEL => 'AR_RTR_0_6_COLBUF_PERF_STALL_RS:VC_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Pointer indicating which VC should be monitored',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_6_COLBUF_PERF_STALL_RS:VC_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_6_COLBUF_PERF_STALL_RS:COL_BUF_PERF_STALL_RS'} = {
    NAME => 'AR_RTR_0_6_COLBUF_PERF_STALL_RS:COL_BUF_PERF_STALL_RS',
    LABEL => 'AR_RTR_0_6_COLBUF_PERF_STALL_RS:COL_BUF_PERF_STALL_RS',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'The number of Lclks a valid request is stalled because of lack ofcredits',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_6_COLBUF_PERF_STALL_RS:COL_BUF_PERF_STALL_RS'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_7_COLBUF_PERF_STALL_RS:VC_PTR'} = {
    NAME => 'AR_RTR_0_7_COLBUF_PERF_STALL_RS:VC_PTR',
    LABEL => 'AR_RTR_0_7_COLBUF_PERF_STALL_RS:VC_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Pointer indicating which VC should be monitored',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_7_COLBUF_PERF_STALL_RS:VC_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_0_7_COLBUF_PERF_STALL_RS:COL_BUF_PERF_STALL_RS'} = {
    NAME => 'AR_RTR_0_7_COLBUF_PERF_STALL_RS:COL_BUF_PERF_STALL_RS',
    LABEL => 'AR_RTR_0_7_COLBUF_PERF_STALL_RS:COL_BUF_PERF_STALL_RS',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'The number of Lclks a valid request is stalled because of lack ofcredits',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_0_7_COLBUF_PERF_STALL_RS:COL_BUF_PERF_STALL_RS'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_0_COLBUF_PERF_STALL_RS:VC_PTR'} = {
    NAME => 'AR_RTR_1_0_COLBUF_PERF_STALL_RS:VC_PTR',
    LABEL => 'AR_RTR_1_0_COLBUF_PERF_STALL_RS:VC_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Pointer indicating which VC should be monitored',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_0_COLBUF_PERF_STALL_RS:VC_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_0_COLBUF_PERF_STALL_RS:COL_BUF_PERF_STALL_RS'} = {
    NAME => 'AR_RTR_1_0_COLBUF_PERF_STALL_RS:COL_BUF_PERF_STALL_RS',
    LABEL => 'AR_RTR_1_0_COLBUF_PERF_STALL_RS:COL_BUF_PERF_STALL_RS',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'The number of Lclks a valid request is stalled because of lack ofcredits',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_0_COLBUF_PERF_STALL_RS:COL_BUF_PERF_STALL_RS'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_1_COLBUF_PERF_STALL_RS:VC_PTR'} = {
    NAME => 'AR_RTR_1_1_COLBUF_PERF_STALL_RS:VC_PTR',
    LABEL => 'AR_RTR_1_1_COLBUF_PERF_STALL_RS:VC_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Pointer indicating which VC should be monitored',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_1_COLBUF_PERF_STALL_RS:VC_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_1_COLBUF_PERF_STALL_RS:COL_BUF_PERF_STALL_RS'} = {
    NAME => 'AR_RTR_1_1_COLBUF_PERF_STALL_RS:COL_BUF_PERF_STALL_RS',
    LABEL => 'AR_RTR_1_1_COLBUF_PERF_STALL_RS:COL_BUF_PERF_STALL_RS',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'The number of Lclks a valid request is stalled because of lack ofcredits',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_1_COLBUF_PERF_STALL_RS:COL_BUF_PERF_STALL_RS'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_2_COLBUF_PERF_STALL_RS:VC_PTR'} = {
    NAME => 'AR_RTR_1_2_COLBUF_PERF_STALL_RS:VC_PTR',
    LABEL => 'AR_RTR_1_2_COLBUF_PERF_STALL_RS:VC_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Pointer indicating which VC should be monitored',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_2_COLBUF_PERF_STALL_RS:VC_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_2_COLBUF_PERF_STALL_RS:COL_BUF_PERF_STALL_RS'} = {
    NAME => 'AR_RTR_1_2_COLBUF_PERF_STALL_RS:COL_BUF_PERF_STALL_RS',
    LABEL => 'AR_RTR_1_2_COLBUF_PERF_STALL_RS:COL_BUF_PERF_STALL_RS',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'The number of Lclks a valid request is stalled because of lack ofcredits',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_2_COLBUF_PERF_STALL_RS:COL_BUF_PERF_STALL_RS'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_3_COLBUF_PERF_STALL_RS:VC_PTR'} = {
    NAME => 'AR_RTR_1_3_COLBUF_PERF_STALL_RS:VC_PTR',
    LABEL => 'AR_RTR_1_3_COLBUF_PERF_STALL_RS:VC_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Pointer indicating which VC should be monitored',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_3_COLBUF_PERF_STALL_RS:VC_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_3_COLBUF_PERF_STALL_RS:COL_BUF_PERF_STALL_RS'} = {
    NAME => 'AR_RTR_1_3_COLBUF_PERF_STALL_RS:COL_BUF_PERF_STALL_RS',
    LABEL => 'AR_RTR_1_3_COLBUF_PERF_STALL_RS:COL_BUF_PERF_STALL_RS',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'The number of Lclks a valid request is stalled because of lack ofcredits',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_3_COLBUF_PERF_STALL_RS:COL_BUF_PERF_STALL_RS'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_4_COLBUF_PERF_STALL_RS:VC_PTR'} = {
    NAME => 'AR_RTR_1_4_COLBUF_PERF_STALL_RS:VC_PTR',
    LABEL => 'AR_RTR_1_4_COLBUF_PERF_STALL_RS:VC_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Pointer indicating which VC should be monitored',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_4_COLBUF_PERF_STALL_RS:VC_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_4_COLBUF_PERF_STALL_RS:COL_BUF_PERF_STALL_RS'} = {
    NAME => 'AR_RTR_1_4_COLBUF_PERF_STALL_RS:COL_BUF_PERF_STALL_RS',
    LABEL => 'AR_RTR_1_4_COLBUF_PERF_STALL_RS:COL_BUF_PERF_STALL_RS',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'The number of Lclks a valid request is stalled because of lack ofcredits',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_4_COLBUF_PERF_STALL_RS:COL_BUF_PERF_STALL_RS'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_5_COLBUF_PERF_STALL_RS:VC_PTR'} = {
    NAME => 'AR_RTR_1_5_COLBUF_PERF_STALL_RS:VC_PTR',
    LABEL => 'AR_RTR_1_5_COLBUF_PERF_STALL_RS:VC_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Pointer indicating which VC should be monitored',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_5_COLBUF_PERF_STALL_RS:VC_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_5_COLBUF_PERF_STALL_RS:COL_BUF_PERF_STALL_RS'} = {
    NAME => 'AR_RTR_1_5_COLBUF_PERF_STALL_RS:COL_BUF_PERF_STALL_RS',
    LABEL => 'AR_RTR_1_5_COLBUF_PERF_STALL_RS:COL_BUF_PERF_STALL_RS',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'The number of Lclks a valid request is stalled because of lack ofcredits',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_5_COLBUF_PERF_STALL_RS:COL_BUF_PERF_STALL_RS'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_6_COLBUF_PERF_STALL_RS:VC_PTR'} = {
    NAME => 'AR_RTR_1_6_COLBUF_PERF_STALL_RS:VC_PTR',
    LABEL => 'AR_RTR_1_6_COLBUF_PERF_STALL_RS:VC_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Pointer indicating which VC should be monitored',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_6_COLBUF_PERF_STALL_RS:VC_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_6_COLBUF_PERF_STALL_RS:COL_BUF_PERF_STALL_RS'} = {
    NAME => 'AR_RTR_1_6_COLBUF_PERF_STALL_RS:COL_BUF_PERF_STALL_RS',
    LABEL => 'AR_RTR_1_6_COLBUF_PERF_STALL_RS:COL_BUF_PERF_STALL_RS',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'The number of Lclks a valid request is stalled because of lack ofcredits',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_6_COLBUF_PERF_STALL_RS:COL_BUF_PERF_STALL_RS'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_7_COLBUF_PERF_STALL_RS:VC_PTR'} = {
    NAME => 'AR_RTR_1_7_COLBUF_PERF_STALL_RS:VC_PTR',
    LABEL => 'AR_RTR_1_7_COLBUF_PERF_STALL_RS:VC_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Pointer indicating which VC should be monitored',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_7_COLBUF_PERF_STALL_RS:VC_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_1_7_COLBUF_PERF_STALL_RS:COL_BUF_PERF_STALL_RS'} = {
    NAME => 'AR_RTR_1_7_COLBUF_PERF_STALL_RS:COL_BUF_PERF_STALL_RS',
    LABEL => 'AR_RTR_1_7_COLBUF_PERF_STALL_RS:COL_BUF_PERF_STALL_RS',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'The number of Lclks a valid request is stalled because of lack ofcredits',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_1_7_COLBUF_PERF_STALL_RS:COL_BUF_PERF_STALL_RS'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_0_COLBUF_PERF_STALL_RS:VC_PTR'} = {
    NAME => 'AR_RTR_2_0_COLBUF_PERF_STALL_RS:VC_PTR',
    LABEL => 'AR_RTR_2_0_COLBUF_PERF_STALL_RS:VC_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Pointer indicating which VC should be monitored',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_0_COLBUF_PERF_STALL_RS:VC_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_0_COLBUF_PERF_STALL_RS:COL_BUF_PERF_STALL_RS'} = {
    NAME => 'AR_RTR_2_0_COLBUF_PERF_STALL_RS:COL_BUF_PERF_STALL_RS',
    LABEL => 'AR_RTR_2_0_COLBUF_PERF_STALL_RS:COL_BUF_PERF_STALL_RS',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'The number of Lclks a valid request is stalled because of lack ofcredits',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_0_COLBUF_PERF_STALL_RS:COL_BUF_PERF_STALL_RS'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_1_COLBUF_PERF_STALL_RS:VC_PTR'} = {
    NAME => 'AR_RTR_2_1_COLBUF_PERF_STALL_RS:VC_PTR',
    LABEL => 'AR_RTR_2_1_COLBUF_PERF_STALL_RS:VC_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Pointer indicating which VC should be monitored',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_1_COLBUF_PERF_STALL_RS:VC_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_1_COLBUF_PERF_STALL_RS:COL_BUF_PERF_STALL_RS'} = {
    NAME => 'AR_RTR_2_1_COLBUF_PERF_STALL_RS:COL_BUF_PERF_STALL_RS',
    LABEL => 'AR_RTR_2_1_COLBUF_PERF_STALL_RS:COL_BUF_PERF_STALL_RS',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'The number of Lclks a valid request is stalled because of lack ofcredits',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_1_COLBUF_PERF_STALL_RS:COL_BUF_PERF_STALL_RS'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_2_COLBUF_PERF_STALL_RS:VC_PTR'} = {
    NAME => 'AR_RTR_2_2_COLBUF_PERF_STALL_RS:VC_PTR',
    LABEL => 'AR_RTR_2_2_COLBUF_PERF_STALL_RS:VC_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Pointer indicating which VC should be monitored',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_2_COLBUF_PERF_STALL_RS:VC_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_2_COLBUF_PERF_STALL_RS:COL_BUF_PERF_STALL_RS'} = {
    NAME => 'AR_RTR_2_2_COLBUF_PERF_STALL_RS:COL_BUF_PERF_STALL_RS',
    LABEL => 'AR_RTR_2_2_COLBUF_PERF_STALL_RS:COL_BUF_PERF_STALL_RS',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'The number of Lclks a valid request is stalled because of lack ofcredits',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_2_COLBUF_PERF_STALL_RS:COL_BUF_PERF_STALL_RS'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_3_COLBUF_PERF_STALL_RS:VC_PTR'} = {
    NAME => 'AR_RTR_2_3_COLBUF_PERF_STALL_RS:VC_PTR',
    LABEL => 'AR_RTR_2_3_COLBUF_PERF_STALL_RS:VC_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Pointer indicating which VC should be monitored',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_3_COLBUF_PERF_STALL_RS:VC_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_3_COLBUF_PERF_STALL_RS:COL_BUF_PERF_STALL_RS'} = {
    NAME => 'AR_RTR_2_3_COLBUF_PERF_STALL_RS:COL_BUF_PERF_STALL_RS',
    LABEL => 'AR_RTR_2_3_COLBUF_PERF_STALL_RS:COL_BUF_PERF_STALL_RS',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'The number of Lclks a valid request is stalled because of lack ofcredits',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_3_COLBUF_PERF_STALL_RS:COL_BUF_PERF_STALL_RS'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_4_COLBUF_PERF_STALL_RS:VC_PTR'} = {
    NAME => 'AR_RTR_2_4_COLBUF_PERF_STALL_RS:VC_PTR',
    LABEL => 'AR_RTR_2_4_COLBUF_PERF_STALL_RS:VC_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Pointer indicating which VC should be monitored',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_4_COLBUF_PERF_STALL_RS:VC_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_4_COLBUF_PERF_STALL_RS:COL_BUF_PERF_STALL_RS'} = {
    NAME => 'AR_RTR_2_4_COLBUF_PERF_STALL_RS:COL_BUF_PERF_STALL_RS',
    LABEL => 'AR_RTR_2_4_COLBUF_PERF_STALL_RS:COL_BUF_PERF_STALL_RS',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'The number of Lclks a valid request is stalled because of lack ofcredits',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_4_COLBUF_PERF_STALL_RS:COL_BUF_PERF_STALL_RS'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_5_COLBUF_PERF_STALL_RS:VC_PTR'} = {
    NAME => 'AR_RTR_2_5_COLBUF_PERF_STALL_RS:VC_PTR',
    LABEL => 'AR_RTR_2_5_COLBUF_PERF_STALL_RS:VC_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Pointer indicating which VC should be monitored',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_5_COLBUF_PERF_STALL_RS:VC_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_5_COLBUF_PERF_STALL_RS:COL_BUF_PERF_STALL_RS'} = {
    NAME => 'AR_RTR_2_5_COLBUF_PERF_STALL_RS:COL_BUF_PERF_STALL_RS',
    LABEL => 'AR_RTR_2_5_COLBUF_PERF_STALL_RS:COL_BUF_PERF_STALL_RS',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'The number of Lclks a valid request is stalled because of lack ofcredits',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_5_COLBUF_PERF_STALL_RS:COL_BUF_PERF_STALL_RS'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_6_COLBUF_PERF_STALL_RS:VC_PTR'} = {
    NAME => 'AR_RTR_2_6_COLBUF_PERF_STALL_RS:VC_PTR',
    LABEL => 'AR_RTR_2_6_COLBUF_PERF_STALL_RS:VC_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Pointer indicating which VC should be monitored',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_6_COLBUF_PERF_STALL_RS:VC_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_6_COLBUF_PERF_STALL_RS:COL_BUF_PERF_STALL_RS'} = {
    NAME => 'AR_RTR_2_6_COLBUF_PERF_STALL_RS:COL_BUF_PERF_STALL_RS',
    LABEL => 'AR_RTR_2_6_COLBUF_PERF_STALL_RS:COL_BUF_PERF_STALL_RS',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'The number of Lclks a valid request is stalled because of lack ofcredits',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_6_COLBUF_PERF_STALL_RS:COL_BUF_PERF_STALL_RS'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_7_COLBUF_PERF_STALL_RS:VC_PTR'} = {
    NAME => 'AR_RTR_2_7_COLBUF_PERF_STALL_RS:VC_PTR',
    LABEL => 'AR_RTR_2_7_COLBUF_PERF_STALL_RS:VC_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Pointer indicating which VC should be monitored',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_7_COLBUF_PERF_STALL_RS:VC_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_2_7_COLBUF_PERF_STALL_RS:COL_BUF_PERF_STALL_RS'} = {
    NAME => 'AR_RTR_2_7_COLBUF_PERF_STALL_RS:COL_BUF_PERF_STALL_RS',
    LABEL => 'AR_RTR_2_7_COLBUF_PERF_STALL_RS:COL_BUF_PERF_STALL_RS',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'The number of Lclks a valid request is stalled because of lack ofcredits',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_2_7_COLBUF_PERF_STALL_RS:COL_BUF_PERF_STALL_RS'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_0_COLBUF_PERF_STALL_RS:VC_PTR'} = {
    NAME => 'AR_RTR_3_0_COLBUF_PERF_STALL_RS:VC_PTR',
    LABEL => 'AR_RTR_3_0_COLBUF_PERF_STALL_RS:VC_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Pointer indicating which VC should be monitored',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_0_COLBUF_PERF_STALL_RS:VC_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_0_COLBUF_PERF_STALL_RS:COL_BUF_PERF_STALL_RS'} = {
    NAME => 'AR_RTR_3_0_COLBUF_PERF_STALL_RS:COL_BUF_PERF_STALL_RS',
    LABEL => 'AR_RTR_3_0_COLBUF_PERF_STALL_RS:COL_BUF_PERF_STALL_RS',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'The number of Lclks a valid request is stalled because of lack ofcredits',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_0_COLBUF_PERF_STALL_RS:COL_BUF_PERF_STALL_RS'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_1_COLBUF_PERF_STALL_RS:VC_PTR'} = {
    NAME => 'AR_RTR_3_1_COLBUF_PERF_STALL_RS:VC_PTR',
    LABEL => 'AR_RTR_3_1_COLBUF_PERF_STALL_RS:VC_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Pointer indicating which VC should be monitored',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_1_COLBUF_PERF_STALL_RS:VC_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_1_COLBUF_PERF_STALL_RS:COL_BUF_PERF_STALL_RS'} = {
    NAME => 'AR_RTR_3_1_COLBUF_PERF_STALL_RS:COL_BUF_PERF_STALL_RS',
    LABEL => 'AR_RTR_3_1_COLBUF_PERF_STALL_RS:COL_BUF_PERF_STALL_RS',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'The number of Lclks a valid request is stalled because of lack ofcredits',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_1_COLBUF_PERF_STALL_RS:COL_BUF_PERF_STALL_RS'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_2_COLBUF_PERF_STALL_RS:VC_PTR'} = {
    NAME => 'AR_RTR_3_2_COLBUF_PERF_STALL_RS:VC_PTR',
    LABEL => 'AR_RTR_3_2_COLBUF_PERF_STALL_RS:VC_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Pointer indicating which VC should be monitored',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_2_COLBUF_PERF_STALL_RS:VC_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_2_COLBUF_PERF_STALL_RS:COL_BUF_PERF_STALL_RS'} = {
    NAME => 'AR_RTR_3_2_COLBUF_PERF_STALL_RS:COL_BUF_PERF_STALL_RS',
    LABEL => 'AR_RTR_3_2_COLBUF_PERF_STALL_RS:COL_BUF_PERF_STALL_RS',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'The number of Lclks a valid request is stalled because of lack ofcredits',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_2_COLBUF_PERF_STALL_RS:COL_BUF_PERF_STALL_RS'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_3_COLBUF_PERF_STALL_RS:VC_PTR'} = {
    NAME => 'AR_RTR_3_3_COLBUF_PERF_STALL_RS:VC_PTR',
    LABEL => 'AR_RTR_3_3_COLBUF_PERF_STALL_RS:VC_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Pointer indicating which VC should be monitored',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_3_COLBUF_PERF_STALL_RS:VC_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_3_COLBUF_PERF_STALL_RS:COL_BUF_PERF_STALL_RS'} = {
    NAME => 'AR_RTR_3_3_COLBUF_PERF_STALL_RS:COL_BUF_PERF_STALL_RS',
    LABEL => 'AR_RTR_3_3_COLBUF_PERF_STALL_RS:COL_BUF_PERF_STALL_RS',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'The number of Lclks a valid request is stalled because of lack ofcredits',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_3_COLBUF_PERF_STALL_RS:COL_BUF_PERF_STALL_RS'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_4_COLBUF_PERF_STALL_RS:VC_PTR'} = {
    NAME => 'AR_RTR_3_4_COLBUF_PERF_STALL_RS:VC_PTR',
    LABEL => 'AR_RTR_3_4_COLBUF_PERF_STALL_RS:VC_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Pointer indicating which VC should be monitored',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_4_COLBUF_PERF_STALL_RS:VC_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_4_COLBUF_PERF_STALL_RS:COL_BUF_PERF_STALL_RS'} = {
    NAME => 'AR_RTR_3_4_COLBUF_PERF_STALL_RS:COL_BUF_PERF_STALL_RS',
    LABEL => 'AR_RTR_3_4_COLBUF_PERF_STALL_RS:COL_BUF_PERF_STALL_RS',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'The number of Lclks a valid request is stalled because of lack ofcredits',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_4_COLBUF_PERF_STALL_RS:COL_BUF_PERF_STALL_RS'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_5_COLBUF_PERF_STALL_RS:VC_PTR'} = {
    NAME => 'AR_RTR_3_5_COLBUF_PERF_STALL_RS:VC_PTR',
    LABEL => 'AR_RTR_3_5_COLBUF_PERF_STALL_RS:VC_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Pointer indicating which VC should be monitored',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_5_COLBUF_PERF_STALL_RS:VC_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_5_COLBUF_PERF_STALL_RS:COL_BUF_PERF_STALL_RS'} = {
    NAME => 'AR_RTR_3_5_COLBUF_PERF_STALL_RS:COL_BUF_PERF_STALL_RS',
    LABEL => 'AR_RTR_3_5_COLBUF_PERF_STALL_RS:COL_BUF_PERF_STALL_RS',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'The number of Lclks a valid request is stalled because of lack ofcredits',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_5_COLBUF_PERF_STALL_RS:COL_BUF_PERF_STALL_RS'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_6_COLBUF_PERF_STALL_RS:VC_PTR'} = {
    NAME => 'AR_RTR_3_6_COLBUF_PERF_STALL_RS:VC_PTR',
    LABEL => 'AR_RTR_3_6_COLBUF_PERF_STALL_RS:VC_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Pointer indicating which VC should be monitored',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_6_COLBUF_PERF_STALL_RS:VC_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_6_COLBUF_PERF_STALL_RS:COL_BUF_PERF_STALL_RS'} = {
    NAME => 'AR_RTR_3_6_COLBUF_PERF_STALL_RS:COL_BUF_PERF_STALL_RS',
    LABEL => 'AR_RTR_3_6_COLBUF_PERF_STALL_RS:COL_BUF_PERF_STALL_RS',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'The number of Lclks a valid request is stalled because of lack ofcredits',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_6_COLBUF_PERF_STALL_RS:COL_BUF_PERF_STALL_RS'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_7_COLBUF_PERF_STALL_RS:VC_PTR'} = {
    NAME => 'AR_RTR_3_7_COLBUF_PERF_STALL_RS:VC_PTR',
    LABEL => 'AR_RTR_3_7_COLBUF_PERF_STALL_RS:VC_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Pointer indicating which VC should be monitored',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_7_COLBUF_PERF_STALL_RS:VC_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_3_7_COLBUF_PERF_STALL_RS:COL_BUF_PERF_STALL_RS'} = {
    NAME => 'AR_RTR_3_7_COLBUF_PERF_STALL_RS:COL_BUF_PERF_STALL_RS',
    LABEL => 'AR_RTR_3_7_COLBUF_PERF_STALL_RS:COL_BUF_PERF_STALL_RS',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'The number of Lclks a valid request is stalled because of lack ofcredits',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_3_7_COLBUF_PERF_STALL_RS:COL_BUF_PERF_STALL_RS'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_0_COLBUF_PERF_STALL_RS:VC_PTR'} = {
    NAME => 'AR_RTR_4_0_COLBUF_PERF_STALL_RS:VC_PTR',
    LABEL => 'AR_RTR_4_0_COLBUF_PERF_STALL_RS:VC_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Pointer indicating which VC should be monitored',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_0_COLBUF_PERF_STALL_RS:VC_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_0_COLBUF_PERF_STALL_RS:COL_BUF_PERF_STALL_RS'} = {
    NAME => 'AR_RTR_4_0_COLBUF_PERF_STALL_RS:COL_BUF_PERF_STALL_RS',
    LABEL => 'AR_RTR_4_0_COLBUF_PERF_STALL_RS:COL_BUF_PERF_STALL_RS',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'The number of Lclks a valid request is stalled because of lack ofcredits',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_0_COLBUF_PERF_STALL_RS:COL_BUF_PERF_STALL_RS'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_1_COLBUF_PERF_STALL_RS:VC_PTR'} = {
    NAME => 'AR_RTR_4_1_COLBUF_PERF_STALL_RS:VC_PTR',
    LABEL => 'AR_RTR_4_1_COLBUF_PERF_STALL_RS:VC_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Pointer indicating which VC should be monitored',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_1_COLBUF_PERF_STALL_RS:VC_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_1_COLBUF_PERF_STALL_RS:COL_BUF_PERF_STALL_RS'} = {
    NAME => 'AR_RTR_4_1_COLBUF_PERF_STALL_RS:COL_BUF_PERF_STALL_RS',
    LABEL => 'AR_RTR_4_1_COLBUF_PERF_STALL_RS:COL_BUF_PERF_STALL_RS',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'The number of Lclks a valid request is stalled because of lack ofcredits',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_1_COLBUF_PERF_STALL_RS:COL_BUF_PERF_STALL_RS'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_2_COLBUF_PERF_STALL_RS:VC_PTR'} = {
    NAME => 'AR_RTR_4_2_COLBUF_PERF_STALL_RS:VC_PTR',
    LABEL => 'AR_RTR_4_2_COLBUF_PERF_STALL_RS:VC_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Pointer indicating which VC should be monitored',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_2_COLBUF_PERF_STALL_RS:VC_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_2_COLBUF_PERF_STALL_RS:COL_BUF_PERF_STALL_RS'} = {
    NAME => 'AR_RTR_4_2_COLBUF_PERF_STALL_RS:COL_BUF_PERF_STALL_RS',
    LABEL => 'AR_RTR_4_2_COLBUF_PERF_STALL_RS:COL_BUF_PERF_STALL_RS',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'The number of Lclks a valid request is stalled because of lack ofcredits',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_2_COLBUF_PERF_STALL_RS:COL_BUF_PERF_STALL_RS'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_3_COLBUF_PERF_STALL_RS:VC_PTR'} = {
    NAME => 'AR_RTR_4_3_COLBUF_PERF_STALL_RS:VC_PTR',
    LABEL => 'AR_RTR_4_3_COLBUF_PERF_STALL_RS:VC_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Pointer indicating which VC should be monitored',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_3_COLBUF_PERF_STALL_RS:VC_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_3_COLBUF_PERF_STALL_RS:COL_BUF_PERF_STALL_RS'} = {
    NAME => 'AR_RTR_4_3_COLBUF_PERF_STALL_RS:COL_BUF_PERF_STALL_RS',
    LABEL => 'AR_RTR_4_3_COLBUF_PERF_STALL_RS:COL_BUF_PERF_STALL_RS',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'The number of Lclks a valid request is stalled because of lack ofcredits',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_3_COLBUF_PERF_STALL_RS:COL_BUF_PERF_STALL_RS'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_4_COLBUF_PERF_STALL_RS:VC_PTR'} = {
    NAME => 'AR_RTR_4_4_COLBUF_PERF_STALL_RS:VC_PTR',
    LABEL => 'AR_RTR_4_4_COLBUF_PERF_STALL_RS:VC_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Pointer indicating which VC should be monitored',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_4_COLBUF_PERF_STALL_RS:VC_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_4_COLBUF_PERF_STALL_RS:COL_BUF_PERF_STALL_RS'} = {
    NAME => 'AR_RTR_4_4_COLBUF_PERF_STALL_RS:COL_BUF_PERF_STALL_RS',
    LABEL => 'AR_RTR_4_4_COLBUF_PERF_STALL_RS:COL_BUF_PERF_STALL_RS',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'The number of Lclks a valid request is stalled because of lack ofcredits',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_4_COLBUF_PERF_STALL_RS:COL_BUF_PERF_STALL_RS'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_5_COLBUF_PERF_STALL_RS:VC_PTR'} = {
    NAME => 'AR_RTR_4_5_COLBUF_PERF_STALL_RS:VC_PTR',
    LABEL => 'AR_RTR_4_5_COLBUF_PERF_STALL_RS:VC_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Pointer indicating which VC should be monitored',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_5_COLBUF_PERF_STALL_RS:VC_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_5_COLBUF_PERF_STALL_RS:COL_BUF_PERF_STALL_RS'} = {
    NAME => 'AR_RTR_4_5_COLBUF_PERF_STALL_RS:COL_BUF_PERF_STALL_RS',
    LABEL => 'AR_RTR_4_5_COLBUF_PERF_STALL_RS:COL_BUF_PERF_STALL_RS',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'The number of Lclks a valid request is stalled because of lack ofcredits',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_5_COLBUF_PERF_STALL_RS:COL_BUF_PERF_STALL_RS'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_6_COLBUF_PERF_STALL_RS:VC_PTR'} = {
    NAME => 'AR_RTR_4_6_COLBUF_PERF_STALL_RS:VC_PTR',
    LABEL => 'AR_RTR_4_6_COLBUF_PERF_STALL_RS:VC_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Pointer indicating which VC should be monitored',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_6_COLBUF_PERF_STALL_RS:VC_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_6_COLBUF_PERF_STALL_RS:COL_BUF_PERF_STALL_RS'} = {
    NAME => 'AR_RTR_4_6_COLBUF_PERF_STALL_RS:COL_BUF_PERF_STALL_RS',
    LABEL => 'AR_RTR_4_6_COLBUF_PERF_STALL_RS:COL_BUF_PERF_STALL_RS',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'The number of Lclks a valid request is stalled because of lack ofcredits',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_6_COLBUF_PERF_STALL_RS:COL_BUF_PERF_STALL_RS'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_7_COLBUF_PERF_STALL_RS:VC_PTR'} = {
    NAME => 'AR_RTR_4_7_COLBUF_PERF_STALL_RS:VC_PTR',
    LABEL => 'AR_RTR_4_7_COLBUF_PERF_STALL_RS:VC_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Pointer indicating which VC should be monitored',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_7_COLBUF_PERF_STALL_RS:VC_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_4_7_COLBUF_PERF_STALL_RS:COL_BUF_PERF_STALL_RS'} = {
    NAME => 'AR_RTR_4_7_COLBUF_PERF_STALL_RS:COL_BUF_PERF_STALL_RS',
    LABEL => 'AR_RTR_4_7_COLBUF_PERF_STALL_RS:COL_BUF_PERF_STALL_RS',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'The number of Lclks a valid request is stalled because of lack ofcredits',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_4_7_COLBUF_PERF_STALL_RS:COL_BUF_PERF_STALL_RS'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_ORB_CFG_NET_RSP_HIST_1'} = {
    NAME => 'AR_NIC_ORB_CFG_NET_RSP_HIST_1',
    LABEL => 'AR_NIC_ORB_CFG_NET_RSP_HIST_1',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_ORB_CFG_NET_RSP_HIST_1'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_ORB_CFG_NET_RSP_HIST_1:BIN3_MIN'} = {
    NAME => 'AR_NIC_ORB_CFG_NET_RSP_HIST_1:BIN3_MIN',
    LABEL => 'AR_NIC_ORB_CFG_NET_RSP_HIST_1:BIN3_MIN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Boundary between bin 2 and bin 3',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_ORB_CFG_NET_RSP_HIST_1:BIN3_MIN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_ORB_CFG_NET_RSP_HIST_1:BIN2_MIN'} = {
    NAME => 'AR_NIC_ORB_CFG_NET_RSP_HIST_1:BIN2_MIN',
    LABEL => 'AR_NIC_ORB_CFG_NET_RSP_HIST_1:BIN2_MIN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Boundary between bin 1 and bin 2',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_ORB_CFG_NET_RSP_HIST_1:BIN2_MIN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_ORB_CFG_NET_RSP_HIST_1:BIN1_MIN'} = {
    NAME => 'AR_NIC_ORB_CFG_NET_RSP_HIST_1:BIN1_MIN',
    LABEL => 'AR_NIC_ORB_CFG_NET_RSP_HIST_1:BIN1_MIN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Boundary between bin 0 and bin 1',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_ORB_CFG_NET_RSP_HIST_1:BIN1_MIN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_ORB_CFG_NET_RSP_HIST_2'} = {
    NAME => 'AR_NIC_ORB_CFG_NET_RSP_HIST_2',
    LABEL => 'AR_NIC_ORB_CFG_NET_RSP_HIST_2',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_ORB_CFG_NET_RSP_HIST_2'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_ORB_CFG_NET_RSP_HIST_2:BIN7_MIN'} = {
    NAME => 'AR_NIC_ORB_CFG_NET_RSP_HIST_2:BIN7_MIN',
    LABEL => 'AR_NIC_ORB_CFG_NET_RSP_HIST_2:BIN7_MIN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Boundary between bin 6 and bin 7',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_ORB_CFG_NET_RSP_HIST_2:BIN7_MIN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_ORB_CFG_NET_RSP_HIST_2:BIN6_MIN'} = {
    NAME => 'AR_NIC_ORB_CFG_NET_RSP_HIST_2:BIN6_MIN',
    LABEL => 'AR_NIC_ORB_CFG_NET_RSP_HIST_2:BIN6_MIN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Boundary between bin 5 and bin 6',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_ORB_CFG_NET_RSP_HIST_2:BIN6_MIN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_ORB_CFG_NET_RSP_HIST_2:BIN5_MIN'} = {
    NAME => 'AR_NIC_ORB_CFG_NET_RSP_HIST_2:BIN5_MIN',
    LABEL => 'AR_NIC_ORB_CFG_NET_RSP_HIST_2:BIN5_MIN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Boundary between bin 4 and bin 5',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_ORB_CFG_NET_RSP_HIST_2:BIN5_MIN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_ORB_CFG_NET_RSP_HIST_2:BIN4_MIN'} = {
    NAME => 'AR_NIC_ORB_CFG_NET_RSP_HIST_2:BIN4_MIN',
    LABEL => 'AR_NIC_ORB_CFG_NET_RSP_HIST_2:BIN4_MIN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Boundary between bin 3 and bin 4',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_ORB_CFG_NET_RSP_HIST_2:BIN4_MIN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_ORB_CFG_PRF_TRK_COMP_0'} = {
    NAME => 'AR_NIC_ORB_CFG_PRF_TRK_COMP_0',
    LABEL => 'AR_NIC_ORB_CFG_PRF_TRK_COMP_0',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_ORB_CFG_PRF_TRK_COMP_0'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_ORB_CFG_PRF_TRK_COMP_0:ADDR_63_36'} = {
    NAME => 'AR_NIC_ORB_CFG_PRF_TRK_COMP_0:ADDR_63_36',
    LABEL => 'AR_NIC_ORB_CFG_PRF_TRK_COMP_0:ADDR_63_36',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Address[63:36]. Corresponds to bits 63:36 of an SSID-to-ORB Request Header Flit',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_ORB_CFG_PRF_TRK_COMP_0:ADDR_63_36'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_ORB_CFG_PRF_TRK_COMP_0:P0'} = {
    NAME => 'AR_NIC_ORB_CFG_PRF_TRK_COMP_0:P0',
    LABEL => 'AR_NIC_ORB_CFG_PRF_TRK_COMP_0:P0',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Parity Bit 0. Corresponds to bit 35 of an SSID-to-ORB Request Header Flit',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_ORB_CFG_PRF_TRK_COMP_0:P0'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_ORB_CFG_PRF_TRK_COMP_0:NTT'} = {
    NAME => 'AR_NIC_ORB_CFG_PRF_TRK_COMP_0:NTT',
    LABEL => 'AR_NIC_ORB_CFG_PRF_TRK_COMP_0:NTT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Node Translation Table Enable. Corresponds to bit 34 of an SSID-to-ORB Request Header Flit',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_ORB_CFG_PRF_TRK_COMP_0:NTT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_ORB_CFG_PRF_TRK_COMP_0:RESERVED_33_28'} = {
    NAME => 'AR_NIC_ORB_CFG_PRF_TRK_COMP_0:RESERVED_33_28',
    LABEL => 'AR_NIC_ORB_CFG_PRF_TRK_COMP_0:RESERVED_33_28',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Reserved[33:28]. Corresponds to bits 33:28 of an SSID-to-ORB Request Header Flit',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_ORB_CFG_PRF_TRK_COMP_0:RESERVED_33_28'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_ORB_CFG_PRF_TRK_COMP_0:PKT_SRC'} = {
    NAME => 'AR_NIC_ORB_CFG_PRF_TRK_COMP_0:PKT_SRC',
    LABEL => 'AR_NIC_ORB_CFG_PRF_TRK_COMP_0:PKT_SRC',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Packet Source. Corresponds to bits 27:26 of an SSID-to-ORB Request Header Flit',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_ORB_CFG_PRF_TRK_COMP_0:PKT_SRC'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_ORB_CFG_PRF_TRK_COMP_0:PTAG'} = {
    NAME => 'AR_NIC_ORB_CFG_PRF_TRK_COMP_0:PTAG',
    LABEL => 'AR_NIC_ORB_CFG_PRF_TRK_COMP_0:PTAG',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Protection Tag. Corresponds to bits 25:18 of an SSID-to-ORB Request Header Flit',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_ORB_CFG_PRF_TRK_COMP_0:PTAG'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_ORB_CFG_PRF_TRK_COMP_0:DSTID'} = {
    NAME => 'AR_NIC_ORB_CFG_PRF_TRK_COMP_0:DSTID',
    LABEL => 'AR_NIC_ORB_CFG_PRF_TRK_COMP_0:DSTID',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Destination Core Identifier. Corresponds to bits 17:16 of an SSID-to-ORB Request Header Flit',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_ORB_CFG_PRF_TRK_COMP_0:DSTID'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_ORB_CFG_PRF_TRK_COMP_0:DST'} = {
    NAME => 'AR_NIC_ORB_CFG_PRF_TRK_COMP_0:DST',
    LABEL => 'AR_NIC_ORB_CFG_PRF_TRK_COMP_0:DST',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Destination Endpoint. Corresponds to bits 15:0 of an SSID-to-ORBRequest Header Flit',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_ORB_CFG_PRF_TRK_COMP_0:DST'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_ORB_CFG_PRF_TRK_COMP_1'} = {
    NAME => 'AR_NIC_ORB_CFG_PRF_TRK_COMP_1',
    LABEL => 'AR_NIC_ORB_CFG_PRF_TRK_COMP_1',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_ORB_CFG_PRF_TRK_COMP_1'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_ORB_CFG_PRF_TRK_COMP_1:RESERVED_127_125'} = {
    NAME => 'AR_NIC_ORB_CFG_PRF_TRK_COMP_1:RESERVED_127_125',
    LABEL => 'AR_NIC_ORB_CFG_PRF_TRK_COMP_1:RESERVED_127_125',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Reserved[127:125]. Corresponds to bits 127:125 of an SSID-to-ORBRequest Header Flit',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_ORB_CFG_PRF_TRK_COMP_1:RESERVED_127_125'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_ORB_CFG_PRF_TRK_COMP_1:SSID'} = {
    NAME => 'AR_NIC_ORB_CFG_PRF_TRK_COMP_1:SSID',
    LABEL => 'AR_NIC_ORB_CFG_PRF_TRK_COMP_1:SSID',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Synchronization Sequence Identifier. Corresponds to bits 124:116of an SSID-to-ORB Request Header Flit',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_ORB_CFG_PRF_TRK_COMP_1:SSID'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_ORB_CFG_PRF_TRK_COMP_1:ADDR_115_112'} = {
    NAME => 'AR_NIC_ORB_CFG_PRF_TRK_COMP_1:ADDR_115_112',
    LABEL => 'AR_NIC_ORB_CFG_PRF_TRK_COMP_1:ADDR_115_112',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Address[115:112]. Corresponds to bits 115:112 of an SSID-to-ORBRequest Header Flit',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_ORB_CFG_PRF_TRK_COMP_1:ADDR_115_112'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_ORB_CFG_PRF_TRK_COMP_1:CNT_BM'} = {
    NAME => 'AR_NIC_ORB_CFG_PRF_TRK_COMP_1:CNT_BM',
    LABEL => 'AR_NIC_ORB_CFG_PRF_TRK_COMP_1:CNT_BM',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Count/Byte-mask. Corresponds to bits 111:108 of an SSID-to-ORB Request Header Flit',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_ORB_CFG_PRF_TRK_COMP_1:CNT_BM'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_ORB_CFG_PRF_TRK_COMP_1:P2'} = {
    NAME => 'AR_NIC_ORB_CFG_PRF_TRK_COMP_1:P2',
    LABEL => 'AR_NIC_ORB_CFG_PRF_TRK_COMP_1:P2',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Parity Bit 2. Corresponds to bit 107 of an SSID-to-ORB Request Header Flit',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_ORB_CFG_PRF_TRK_COMP_1:P2'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_ORB_CFG_PRF_TRK_COMP_1:RC0'} = {
    NAME => 'AR_NIC_ORB_CFG_PRF_TRK_COMP_1:RC0',
    LABEL => 'AR_NIC_ORB_CFG_PRF_TRK_COMP_1:RC0',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Routing Control Bit 0. Corresponds to bit 106 of an SSID-to-ORBRequest Header Flit',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_ORB_CFG_PRF_TRK_COMP_1:RC0'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_ORB_CFG_PRF_TRK_COMP_1:RESERVED_105_94'} = {
    NAME => 'AR_NIC_ORB_CFG_PRF_TRK_COMP_1:RESERVED_105_94',
    LABEL => 'AR_NIC_ORB_CFG_PRF_TRK_COMP_1:RESERVED_105_94',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Reserved[105:94]. Corresponds to bits 105:94 of an SSID-to-ORB Request Header Flit',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_ORB_CFG_PRF_TRK_COMP_1:RESERVED_105_94'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_ORB_CFG_PRF_TRK_COMP_1:MDH'} = {
    NAME => 'AR_NIC_ORB_CFG_PRF_TRK_COMP_1:MDH',
    LABEL => 'AR_NIC_ORB_CFG_PRF_TRK_COMP_1:MDH',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Memory Domain Handle. Corresponds to bits 93:82 of an SSID-to-ORB Request Header Flit',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_ORB_CFG_PRF_TRK_COMP_1:MDH'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_ORB_CFG_PRF_TRK_COMP_1:RC2'} = {
    NAME => 'AR_NIC_ORB_CFG_PRF_TRK_COMP_1:RC2',
    LABEL => 'AR_NIC_ORB_CFG_PRF_TRK_COMP_1:RC2',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Routing Control Bit 2. Corresponds to bit 81 of an SSID-to-ORB Request Header Flit',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_ORB_CFG_PRF_TRK_COMP_1:RC2'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_ORB_CFG_PRF_TRK_COMP_1:REQCMD'} = {
    NAME => 'AR_NIC_ORB_CFG_PRF_TRK_COMP_1:REQCMD',
    LABEL => 'AR_NIC_ORB_CFG_PRF_TRK_COMP_1:REQCMD',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Request Command. Corresponds to bits 80:72 of an SSID-to-ORB Request Header Flit',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_ORB_CFG_PRF_TRK_COMP_1:REQCMD'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_ORB_CFG_PRF_TRK_COMP_1:P1'} = {
    NAME => 'AR_NIC_ORB_CFG_PRF_TRK_COMP_1:P1',
    LABEL => 'AR_NIC_ORB_CFG_PRF_TRK_COMP_1:P1',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Parity Bit 1. Corresponds to bit 71 of an SSID-to-ORB Request Header Flit',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_ORB_CFG_PRF_TRK_COMP_1:P1'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_ORB_CFG_PRF_TRK_COMP_1:UV'} = {
    NAME => 'AR_NIC_ORB_CFG_PRF_TRK_COMP_1:UV',
    LABEL => 'AR_NIC_ORB_CFG_PRF_TRK_COMP_1:UV',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Upper Valid. Corresponds to bit 70 of an SSID-to-ORB Request Header Flit',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_ORB_CFG_PRF_TRK_COMP_1:UV'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_ORB_CFG_PRF_TRK_COMP_1:ADDR_69_64'} = {
    NAME => 'AR_NIC_ORB_CFG_PRF_TRK_COMP_1:ADDR_69_64',
    LABEL => 'AR_NIC_ORB_CFG_PRF_TRK_COMP_1:ADDR_69_64',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Address[69:64]. Corresponds to bits 69:64 of an SSID-to-ORB Request Header Flit',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_ORB_CFG_PRF_TRK_COMP_1:ADDR_69_64'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_ORB_CFG_PRF_TRK_COMP_2'} = {
    NAME => 'AR_NIC_ORB_CFG_PRF_TRK_COMP_2',
    LABEL => 'AR_NIC_ORB_CFG_PRF_TRK_COMP_2',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_ORB_CFG_PRF_TRK_COMP_2'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_ORB_CFG_PRF_TRK_COMP_2:EN'} = {
    NAME => 'AR_NIC_ORB_CFG_PRF_TRK_COMP_2:EN',
    LABEL => 'AR_NIC_ORB_CFG_PRF_TRK_COMP_2:EN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Enable performance tracking comparisons for SSID-to-ORB Local Address Flit or Request Header Flit',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_ORB_CFG_PRF_TRK_COMP_2:EN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_ORB_CFG_PRF_TRK_COMP_2:P3'} = {
    NAME => 'AR_NIC_ORB_CFG_PRF_TRK_COMP_2:P3',
    LABEL => 'AR_NIC_ORB_CFG_PRF_TRK_COMP_2:P3',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Parity Bit 3. Corresponds to bit 143 of an SSID-to-ORB Request Header Flit',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_ORB_CFG_PRF_TRK_COMP_2:P3'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_ORB_CFG_PRF_TRK_COMP_2:RC1'} = {
    NAME => 'AR_NIC_ORB_CFG_PRF_TRK_COMP_2:RC1',
    LABEL => 'AR_NIC_ORB_CFG_PRF_TRK_COMP_2:RC1',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Routing Control Bit 1. Corresponds to bit 142 of an SSID-to-ORBRequest Header Flit',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_ORB_CFG_PRF_TRK_COMP_2:RC1'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_ORB_CFG_PRF_TRK_COMP_2:LSTATUS'} = {
    NAME => 'AR_NIC_ORB_CFG_PRF_TRK_COMP_2:LSTATUS',
    LABEL => 'AR_NIC_ORB_CFG_PRF_TRK_COMP_2:LSTATUS',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Local Status. Corresponds to bits 141:136 of an SSID-to-ORB Request Header Flit',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_ORB_CFG_PRF_TRK_COMP_2:LSTATUS'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_ORB_CFG_PRF_TRK_COMP_2:RESERVED_135_128'} = {
    NAME => 'AR_NIC_ORB_CFG_PRF_TRK_COMP_2:RESERVED_135_128',
    LABEL => 'AR_NIC_ORB_CFG_PRF_TRK_COMP_2:RESERVED_135_128',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Reserved[135:128]. Corresponds to bits 135:128 of an SSID-to-ORBRequest Header Flit',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_ORB_CFG_PRF_TRK_COMP_2:RESERVED_135_128'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_ORB_CFG_PRF_TRK_MASK_0'} = {
    NAME => 'AR_NIC_ORB_CFG_PRF_TRK_MASK_0',
    LABEL => 'AR_NIC_ORB_CFG_PRF_TRK_MASK_0',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_ORB_CFG_PRF_TRK_MASK_0'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_ORB_CFG_PRF_TRK_MASK_0:ADDR_63_36_MSK'} = {
    NAME => 'AR_NIC_ORB_CFG_PRF_TRK_MASK_0:ADDR_63_36_MSK',
    LABEL => 'AR_NIC_ORB_CFG_PRF_TRK_MASK_0:ADDR_63_36_MSK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Address[63:36] Mask. Corresponds to bits 63:36 of an SSID-to-ORBRequest Header Flit',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_ORB_CFG_PRF_TRK_MASK_0:ADDR_63_36_MSK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_ORB_CFG_PRF_TRK_MASK_0:P0_MSK'} = {
    NAME => 'AR_NIC_ORB_CFG_PRF_TRK_MASK_0:P0_MSK',
    LABEL => 'AR_NIC_ORB_CFG_PRF_TRK_MASK_0:P0_MSK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Parity Bit 0 Mask. Corresponds to bit 35 of an SSID-to-ORB Request Header Flit',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_ORB_CFG_PRF_TRK_MASK_0:P0_MSK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_ORB_CFG_PRF_TRK_MASK_0:NTT_MSK'} = {
    NAME => 'AR_NIC_ORB_CFG_PRF_TRK_MASK_0:NTT_MSK',
    LABEL => 'AR_NIC_ORB_CFG_PRF_TRK_MASK_0:NTT_MSK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Node Translation Table Enable Mask. Corresponds to bit 34 of anSSID-to-ORB Request Header Flit',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_ORB_CFG_PRF_TRK_MASK_0:NTT_MSK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_ORB_CFG_PRF_TRK_MASK_0:RESERVED_33_28'} = {
    NAME => 'AR_NIC_ORB_CFG_PRF_TRK_MASK_0:RESERVED_33_28',
    LABEL => 'AR_NIC_ORB_CFG_PRF_TRK_MASK_0:RESERVED_33_28',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Reserved[33:28] Mask. Corresponds to bits 33:28 of an SSID-to-ORB Request Header Flit',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_ORB_CFG_PRF_TRK_MASK_0:RESERVED_33_28'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_ORB_CFG_PRF_TRK_MASK_0:PKT_SRC_MSK'} = {
    NAME => 'AR_NIC_ORB_CFG_PRF_TRK_MASK_0:PKT_SRC_MSK',
    LABEL => 'AR_NIC_ORB_CFG_PRF_TRK_MASK_0:PKT_SRC_MSK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Packet Source Mask. Corresponds to bits 27:26 of an SSID-to-ORBRequest Header Flit',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_ORB_CFG_PRF_TRK_MASK_0:PKT_SRC_MSK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_ORB_CFG_PRF_TRK_MASK_0:PTAG_MSK'} = {
    NAME => 'AR_NIC_ORB_CFG_PRF_TRK_MASK_0:PTAG_MSK',
    LABEL => 'AR_NIC_ORB_CFG_PRF_TRK_MASK_0:PTAG_MSK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Protection Tag Mask. Corresponds to bits 25:18 of an SSID-to-ORBRequest Header Flit',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_ORB_CFG_PRF_TRK_MASK_0:PTAG_MSK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_ORB_CFG_PRF_TRK_MASK_0:DSTID_MSK'} = {
    NAME => 'AR_NIC_ORB_CFG_PRF_TRK_MASK_0:DSTID_MSK',
    LABEL => 'AR_NIC_ORB_CFG_PRF_TRK_MASK_0:DSTID_MSK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Destination Core Identifier Mask. Corresponds to bits 17:16 of an SSID-to-ORB Request Header Flit',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_ORB_CFG_PRF_TRK_MASK_0:DSTID_MSK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_ORB_CFG_PRF_TRK_MASK_0:DST'} = {
    NAME => 'AR_NIC_ORB_CFG_PRF_TRK_MASK_0:DST',
    LABEL => 'AR_NIC_ORB_CFG_PRF_TRK_MASK_0:DST',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Destination Endpoint Mask. Corresponds to bits 15:0 of an SSID-to-ORB Request Header Flit',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_ORB_CFG_PRF_TRK_MASK_0:DST'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_ORB_CFG_PRF_TRK_MASK_1'} = {
    NAME => 'AR_NIC_ORB_CFG_PRF_TRK_MASK_1',
    LABEL => 'AR_NIC_ORB_CFG_PRF_TRK_MASK_1',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_ORB_CFG_PRF_TRK_MASK_1'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_ORB_CFG_PRF_TRK_MASK_1:RESERVED_127_125'} = {
    NAME => 'AR_NIC_ORB_CFG_PRF_TRK_MASK_1:RESERVED_127_125',
    LABEL => 'AR_NIC_ORB_CFG_PRF_TRK_MASK_1:RESERVED_127_125',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Reserved[127:125] Mask. Corresponds to bits 127:125 of an SSID-to-ORB Request Header Flit',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_ORB_CFG_PRF_TRK_MASK_1:RESERVED_127_125'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_ORB_CFG_PRF_TRK_MASK_1:SSID_MSK'} = {
    NAME => 'AR_NIC_ORB_CFG_PRF_TRK_MASK_1:SSID_MSK',
    LABEL => 'AR_NIC_ORB_CFG_PRF_TRK_MASK_1:SSID_MSK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Synchronization Sequence Identifier Mask. Corresponds to bits 124:116 of an SSID-to-ORB Request Header Flit',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_ORB_CFG_PRF_TRK_MASK_1:SSID_MSK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_ORB_CFG_PRF_TRK_MASK_1:ADDR_115_112_MSK'} = {
    NAME => 'AR_NIC_ORB_CFG_PRF_TRK_MASK_1:ADDR_115_112_MSK',
    LABEL => 'AR_NIC_ORB_CFG_PRF_TRK_MASK_1:ADDR_115_112_MSK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Address[115:112] Mask. Corresponds to bits 115:112 of an SSID-to-ORB Request Header Flit',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_ORB_CFG_PRF_TRK_MASK_1:ADDR_115_112_MSK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_ORB_CFG_PRF_TRK_MASK_1:CNT_BM_MSK'} = {
    NAME => 'AR_NIC_ORB_CFG_PRF_TRK_MASK_1:CNT_BM_MSK',
    LABEL => 'AR_NIC_ORB_CFG_PRF_TRK_MASK_1:CNT_BM_MSK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Count/Byte-mask Mask. Corresponds to bits 111:108 of an SSID-to-ORB Request Header Flit',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_ORB_CFG_PRF_TRK_MASK_1:CNT_BM_MSK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_ORB_CFG_PRF_TRK_MASK_1:P2_MSK'} = {
    NAME => 'AR_NIC_ORB_CFG_PRF_TRK_MASK_1:P2_MSK',
    LABEL => 'AR_NIC_ORB_CFG_PRF_TRK_MASK_1:P2_MSK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Parity Bit 2 Mask. Corresponds to bit 107 of an SSID-to-ORB Request Header Flit',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_ORB_CFG_PRF_TRK_MASK_1:P2_MSK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_ORB_CFG_PRF_TRK_MASK_1:RC0_MSK'} = {
    NAME => 'AR_NIC_ORB_CFG_PRF_TRK_MASK_1:RC0_MSK',
    LABEL => 'AR_NIC_ORB_CFG_PRF_TRK_MASK_1:RC0_MSK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Routing Control Bit 0 Mask. Corresponds to bit 106 of an SSID-to-ORB Request Header Flit',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_ORB_CFG_PRF_TRK_MASK_1:RC0_MSK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_ORB_CFG_PRF_TRK_MASK_1:RESERVED_105_94'} = {
    NAME => 'AR_NIC_ORB_CFG_PRF_TRK_MASK_1:RESERVED_105_94',
    LABEL => 'AR_NIC_ORB_CFG_PRF_TRK_MASK_1:RESERVED_105_94',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Reserved[105:94] Mask. Corresponds to bits 105:94 of an SSID-to-ORB Request Header Flit',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_ORB_CFG_PRF_TRK_MASK_1:RESERVED_105_94'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_ORB_CFG_PRF_TRK_MASK_1:MDH_MSK'} = {
    NAME => 'AR_NIC_ORB_CFG_PRF_TRK_MASK_1:MDH_MSK',
    LABEL => 'AR_NIC_ORB_CFG_PRF_TRK_MASK_1:MDH_MSK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Memory Domain Handle Mask. Corresponds to bits 93:82 of an SSID-to-ORB Request Header Flit',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_ORB_CFG_PRF_TRK_MASK_1:MDH_MSK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_ORB_CFG_PRF_TRK_MASK_1:RC2_MSK'} = {
    NAME => 'AR_NIC_ORB_CFG_PRF_TRK_MASK_1:RC2_MSK',
    LABEL => 'AR_NIC_ORB_CFG_PRF_TRK_MASK_1:RC2_MSK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Routing Control Bit 2 Mask. Corresponds to bit 81 of an SSID-to-ORB Request Header Flit',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_ORB_CFG_PRF_TRK_MASK_1:RC2_MSK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_ORB_CFG_PRF_TRK_MASK_1:REQCMD_MSK'} = {
    NAME => 'AR_NIC_ORB_CFG_PRF_TRK_MASK_1:REQCMD_MSK',
    LABEL => 'AR_NIC_ORB_CFG_PRF_TRK_MASK_1:REQCMD_MSK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Request Command Mask. Corresponds to bits 80:72 of an SSID-to-ORB Request Header Flit',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_ORB_CFG_PRF_TRK_MASK_1:REQCMD_MSK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_ORB_CFG_PRF_TRK_MASK_1:P1_MSK'} = {
    NAME => 'AR_NIC_ORB_CFG_PRF_TRK_MASK_1:P1_MSK',
    LABEL => 'AR_NIC_ORB_CFG_PRF_TRK_MASK_1:P1_MSK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Parity Bit 1 Mask. Corresponds to bit 71 of an SSID-to-ORB Request Header Flit',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_ORB_CFG_PRF_TRK_MASK_1:P1_MSK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_ORB_CFG_PRF_TRK_MASK_1:UV_MSK'} = {
    NAME => 'AR_NIC_ORB_CFG_PRF_TRK_MASK_1:UV_MSK',
    LABEL => 'AR_NIC_ORB_CFG_PRF_TRK_MASK_1:UV_MSK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Upper Valid Mask. Corresponds to bit 70 of an SSID-to-ORB Request Header Flit',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_ORB_CFG_PRF_TRK_MASK_1:UV_MSK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_ORB_CFG_PRF_TRK_MASK_1:ADDR_69_64_MSK'} = {
    NAME => 'AR_NIC_ORB_CFG_PRF_TRK_MASK_1:ADDR_69_64_MSK',
    LABEL => 'AR_NIC_ORB_CFG_PRF_TRK_MASK_1:ADDR_69_64_MSK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Address[69:64] Mask. Corresponds to bits 69:64 of an SSID-to-ORBRequest Header Flit',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_ORB_CFG_PRF_TRK_MASK_1:ADDR_69_64_MSK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_ORB_CFG_PRF_TRK_MASK_2'} = {
    NAME => 'AR_NIC_ORB_CFG_PRF_TRK_MASK_2',
    LABEL => 'AR_NIC_ORB_CFG_PRF_TRK_MASK_2',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_ORB_CFG_PRF_TRK_MASK_2'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_ORB_CFG_PRF_TRK_MASK_2:P3_MSK'} = {
    NAME => 'AR_NIC_ORB_CFG_PRF_TRK_MASK_2:P3_MSK',
    LABEL => 'AR_NIC_ORB_CFG_PRF_TRK_MASK_2:P3_MSK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Parity Bit 3 Mask. Corresponds to bit 143 of an SSID-to-ORB Request Header Flit',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_ORB_CFG_PRF_TRK_MASK_2:P3_MSK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_ORB_CFG_PRF_TRK_MASK_2:RC1_MSK'} = {
    NAME => 'AR_NIC_ORB_CFG_PRF_TRK_MASK_2:RC1_MSK',
    LABEL => 'AR_NIC_ORB_CFG_PRF_TRK_MASK_2:RC1_MSK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Routing Control Bit 1 Mask. Corresponds to bit 142 HRO CWA of anSSID-to-ORB Request Header Flit',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_ORB_CFG_PRF_TRK_MASK_2:RC1_MSK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_ORB_CFG_PRF_TRK_MASK_2:LSTATUS_MSK'} = {
    NAME => 'AR_NIC_ORB_CFG_PRF_TRK_MASK_2:LSTATUS_MSK',
    LABEL => 'AR_NIC_ORB_CFG_PRF_TRK_MASK_2:LSTATUS_MSK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Local Status Mask. Corresponds to bits 141:136 of HRO CWA an SSID-to-ORB Request Header Flit',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_ORB_CFG_PRF_TRK_MASK_2:LSTATUS_MSK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_ORB_CFG_PRF_TRK_MASK_2:RESERVED_135_128'} = {
    NAME => 'AR_NIC_ORB_CFG_PRF_TRK_MASK_2:RESERVED_135_128',
    LABEL => 'AR_NIC_ORB_CFG_PRF_TRK_MASK_2:RESERVED_135_128',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Reserved[135:128] Mask. Corresponds to bits HRO CWA 135:128 of an SSID-to-ORB Request Header Flit',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_ORB_CFG_PRF_TRK_MASK_2:RESERVED_135_128'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_ORB_CFG_PRF_TRK_COMP_3'} = {
    NAME => 'AR_NIC_ORB_CFG_PRF_TRK_COMP_3',
    LABEL => 'AR_NIC_ORB_CFG_PRF_TRK_COMP_3',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_ORB_CFG_PRF_TRK_COMP_3'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_ORB_CFG_PRF_TRK_COMP_3:LADDR_63_36'} = {
    NAME => 'AR_NIC_ORB_CFG_PRF_TRK_COMP_3:LADDR_63_36',
    LABEL => 'AR_NIC_ORB_CFG_PRF_TRK_COMP_3:LADDR_63_36',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Local Address[63:36]. Corresponds to bits 63:36 of an SSID-to-ORB Local Address Flit',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_ORB_CFG_PRF_TRK_COMP_3:LADDR_63_36'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_ORB_CFG_PRF_TRK_COMP_3:RESERVED_35_26'} = {
    NAME => 'AR_NIC_ORB_CFG_PRF_TRK_COMP_3:RESERVED_35_26',
    LABEL => 'AR_NIC_ORB_CFG_PRF_TRK_COMP_3:RESERVED_35_26',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Reserved[35:26]. Corresponds to bits 35:26 of an HRO CWA SSID-to-ORB Local Address Flit',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_ORB_CFG_PRF_TRK_COMP_3:RESERVED_35_26'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_ORB_CFG_PRF_TRK_COMP_3:LPTAG'} = {
    NAME => 'AR_NIC_ORB_CFG_PRF_TRK_COMP_3:LPTAG',
    LABEL => 'AR_NIC_ORB_CFG_PRF_TRK_COMP_3:LPTAG',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Local Protection Tag. Corresponds to bits 25:18 of an HRO CWA SSID-to-ORB Local Address Flit',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_ORB_CFG_PRF_TRK_COMP_3:LPTAG'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_ORB_CFG_PRF_TRK_COMP_3:RESERVED_17_0'} = {
    NAME => 'AR_NIC_ORB_CFG_PRF_TRK_COMP_3:RESERVED_17_0',
    LABEL => 'AR_NIC_ORB_CFG_PRF_TRK_COMP_3:RESERVED_17_0',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Reserved[17:0]. Corresponds to bits 17:0 of an HRO CWA SSID-to-ORB Request Header Flit',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_ORB_CFG_PRF_TRK_COMP_3:RESERVED_17_0'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_ORB_CFG_PRF_TRK_COMP_4'} = {
    NAME => 'AR_NIC_ORB_CFG_PRF_TRK_COMP_4',
    LABEL => 'AR_NIC_ORB_CFG_PRF_TRK_COMP_4',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_ORB_CFG_PRF_TRK_COMP_4'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_ORB_CFG_PRF_TRK_COMP_4:RESERVED_127_112'} = {
    NAME => 'AR_NIC_ORB_CFG_PRF_TRK_COMP_4:RESERVED_127_112',
    LABEL => 'AR_NIC_ORB_CFG_PRF_TRK_COMP_4:RESERVED_127_112',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Reserved[127:112]. Corresponds to bits 127:112 of an SSID-to-ORBLocal Address Flit',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_ORB_CFG_PRF_TRK_COMP_4:RESERVED_127_112'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_ORB_CFG_PRF_TRK_COMP_4:LCNT'} = {
    NAME => 'AR_NIC_ORB_CFG_PRF_TRK_COMP_4:LCNT',
    LABEL => 'AR_NIC_ORB_CFG_PRF_TRK_COMP_4:LCNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Local 32-bit Word Count “minus one”. Corresponds to HRO CWAbits 111:108 of an SSID-to-ORB Local Address Flit',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_ORB_CFG_PRF_TRK_COMP_4:LCNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_ORB_CFG_PRF_TRK_COMP_4:RESERVED_107'} = {
    NAME => 'AR_NIC_ORB_CFG_PRF_TRK_COMP_4:RESERVED_107',
    LABEL => 'AR_NIC_ORB_CFG_PRF_TRK_COMP_4:RESERVED_107',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Reserved[107]. Corresponds to bit 107 of an HRO CWA SSID-to-ORBLocal Address Flit',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_ORB_CFG_PRF_TRK_COMP_4:RESERVED_107'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_ORB_CFG_PRF_TRK_COMP_4:FR'} = {
    NAME => 'AR_NIC_ORB_CFG_PRF_TRK_COMP_4:FR',
    LABEL => 'AR_NIC_ORB_CFG_PRF_TRK_COMP_4:FR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Flagged Response. Corresponds to bit 106 of an HRO CWA SSID-to-ORB Local Address Flit',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_ORB_CFG_PRF_TRK_COMP_4:FR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_ORB_CFG_PRF_TRK_COMP_4:LADDR_105_94'} = {
    NAME => 'AR_NIC_ORB_CFG_PRF_TRK_COMP_4:LADDR_105_94',
    LABEL => 'AR_NIC_ORB_CFG_PRF_TRK_COMP_4:LADDR_105_94',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Local Address[105:94]. Corresponds to bits 105:94 of an HRO CWASSID-to-ORB Local Address Flit',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_ORB_CFG_PRF_TRK_COMP_4:LADDR_105_94'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_ORB_CFG_PRF_TRK_COMP_4:LMDH'} = {
    NAME => 'AR_NIC_ORB_CFG_PRF_TRK_COMP_4:LMDH',
    LABEL => 'AR_NIC_ORB_CFG_PRF_TRK_COMP_4:LMDH',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Local Memory Domain Handle. Corresponds to bits HRO CWA 93:82 ofan SSID-to-ORB Local Address Flit',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_ORB_CFG_PRF_TRK_COMP_4:LMDH'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_ORB_CFG_PRF_TRK_COMP_4:RESERVED_81_72'} = {
    NAME => 'AR_NIC_ORB_CFG_PRF_TRK_COMP_4:RESERVED_81_72',
    LABEL => 'AR_NIC_ORB_CFG_PRF_TRK_COMP_4:RESERVED_81_72',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Reserved[81:72]. Corresponds to bits 81:72 of an SSID-to-ORB Local Address Flit',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_ORB_CFG_PRF_TRK_COMP_4:RESERVED_81_72'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_ORB_CFG_PRF_TRK_COMP_4:ECC0'} = {
    NAME => 'AR_NIC_ORB_CFG_PRF_TRK_COMP_4:ECC0',
    LABEL => 'AR_NIC_ORB_CFG_PRF_TRK_COMP_4:ECC0',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Error Correction Code 0. Corresponds to bits 71:64 of an SSID-to-ORB Local Address Flit',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_ORB_CFG_PRF_TRK_COMP_4:ECC0'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_ORB_CFG_PRF_TRK_COMP_5'} = {
    NAME => 'AR_NIC_ORB_CFG_PRF_TRK_COMP_5',
    LABEL => 'AR_NIC_ORB_CFG_PRF_TRK_COMP_5',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_ORB_CFG_PRF_TRK_COMP_5'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_ORB_CFG_PRF_TRK_COMP_5:EN'} = {
    NAME => 'AR_NIC_ORB_CFG_PRF_TRK_COMP_5:EN',
    LABEL => 'AR_NIC_ORB_CFG_PRF_TRK_COMP_5:EN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Enable performance tracking comparisons for SSID-to-ORB Local Address Flit or Request Header Flit',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_ORB_CFG_PRF_TRK_COMP_5:EN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_ORB_CFG_PRF_TRK_COMP_5:ECC1'} = {
    NAME => 'AR_NIC_ORB_CFG_PRF_TRK_COMP_5:ECC1',
    LABEL => 'AR_NIC_ORB_CFG_PRF_TRK_COMP_5:ECC1',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Error Correction Code 1. Corresponds to bits 143:136 of an SSID-to-ORB Local Address Flit',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_ORB_CFG_PRF_TRK_COMP_5:ECC1'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_ORB_CFG_PRF_TRK_COMP_5:LWC'} = {
    NAME => 'AR_NIC_ORB_CFG_PRF_TRK_COMP_5:LWC',
    LABEL => 'AR_NIC_ORB_CFG_PRF_TRK_COMP_5:LWC',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Write Combine. Corresponds to bit 135 of and HRO CWA SSID-to-ORBLocal Address Flit',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_ORB_CFG_PRF_TRK_COMP_5:LWC'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_ORB_CFG_PRF_TRK_COMP_5:RESERVED_134_128'} = {
    NAME => 'AR_NIC_ORB_CFG_PRF_TRK_COMP_5:RESERVED_134_128',
    LABEL => 'AR_NIC_ORB_CFG_PRF_TRK_COMP_5:RESERVED_134_128',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Reserved[134:128]. Corresponds to bits 134:128 of an HRO CWA SSID-to-ORB Local Address Flit',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_ORB_CFG_PRF_TRK_COMP_5:RESERVED_134_128'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_ORB_CFG_PRF_TRK_MASK_3'} = {
    NAME => 'AR_NIC_ORB_CFG_PRF_TRK_MASK_3',
    LABEL => 'AR_NIC_ORB_CFG_PRF_TRK_MASK_3',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_ORB_CFG_PRF_TRK_MASK_3'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_ORB_CFG_PRF_TRK_MASK_3:LADDR_63_36_MSK'} = {
    NAME => 'AR_NIC_ORB_CFG_PRF_TRK_MASK_3:LADDR_63_36_MSK',
    LABEL => 'AR_NIC_ORB_CFG_PRF_TRK_MASK_3:LADDR_63_36_MSK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Local Address[63:36] Mask. Corresponds to bits 63:36 of an SSID-to-ORB Local Address Flit',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_ORB_CFG_PRF_TRK_MASK_3:LADDR_63_36_MSK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_ORB_CFG_PRF_TRK_MASK_3:RESERVED_35_26'} = {
    NAME => 'AR_NIC_ORB_CFG_PRF_TRK_MASK_3:RESERVED_35_26',
    LABEL => 'AR_NIC_ORB_CFG_PRF_TRK_MASK_3:RESERVED_35_26',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Reserved[35:26] Mask. Corresponds to bits 35:26 of an HRO F CWASSID-to-ORB Local Address Flit',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_ORB_CFG_PRF_TRK_MASK_3:RESERVED_35_26'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_ORB_CFG_PRF_TRK_MASK_3:LPTAG_MSK'} = {
    NAME => 'AR_NIC_ORB_CFG_PRF_TRK_MASK_3:LPTAG_MSK',
    LABEL => 'AR_NIC_ORB_CFG_PRF_TRK_MASK_3:LPTAG_MSK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Local Protection Tag Mask. Corresponds to bits 25:18 of HRO CWAan SSID-to-ORB Local Address Flit',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_ORB_CFG_PRF_TRK_MASK_3:LPTAG_MSK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_ORB_CFG_PRF_TRK_MASK_3:RESERVED_17_0'} = {
    NAME => 'AR_NIC_ORB_CFG_PRF_TRK_MASK_3:RESERVED_17_0',
    LABEL => 'AR_NIC_ORB_CFG_PRF_TRK_MASK_3:RESERVED_17_0',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Reserved[17:0] Mask. Corresponds to bits 17:0 of an HRO FFF CWASSID-to-ORB Request Header Flit',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_ORB_CFG_PRF_TRK_MASK_3:RESERVED_17_0'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_ORB_CFG_PRF_TRK_MASK_4'} = {
    NAME => 'AR_NIC_ORB_CFG_PRF_TRK_MASK_4',
    LABEL => 'AR_NIC_ORB_CFG_PRF_TRK_MASK_4',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_ORB_CFG_PRF_TRK_MASK_4'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_ORB_CFG_PRF_TRK_MASK_4:RESERVED_127_112'} = {
    NAME => 'AR_NIC_ORB_CFG_PRF_TRK_MASK_4:RESERVED_127_112',
    LABEL => 'AR_NIC_ORB_CFG_PRF_TRK_MASK_4:RESERVED_127_112',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Reserved[127:112] Mask. Corresponds to bits 127:112 of an SSID-to-ORB Local Address Flit',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_ORB_CFG_PRF_TRK_MASK_4:RESERVED_127_112'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_ORB_CFG_PRF_TRK_MASK_4:LCNT_MSK'} = {
    NAME => 'AR_NIC_ORB_CFG_PRF_TRK_MASK_4:LCNT_MSK',
    LABEL => 'AR_NIC_ORB_CFG_PRF_TRK_MASK_4:LCNT_MSK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Local 32-bit Word Count “minus one” Mask. Corresponds to bits 111:108 of an SSID-to-ORB Local Address Flit',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_ORB_CFG_PRF_TRK_MASK_4:LCNT_MSK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_ORB_CFG_PRF_TRK_MASK_4:RESERVED_107'} = {
    NAME => 'AR_NIC_ORB_CFG_PRF_TRK_MASK_4:RESERVED_107',
    LABEL => 'AR_NIC_ORB_CFG_PRF_TRK_MASK_4:RESERVED_107',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Reserved[107] Mask. Corresponds to bit 107 of an SSID-to-ORB Local Address Flit',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_ORB_CFG_PRF_TRK_MASK_4:RESERVED_107'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_ORB_CFG_PRF_TRK_MASK_4:FR_MSK'} = {
    NAME => 'AR_NIC_ORB_CFG_PRF_TRK_MASK_4:FR_MSK',
    LABEL => 'AR_NIC_ORB_CFG_PRF_TRK_MASK_4:FR_MSK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Flagged Response Mask. Corresponds to bit 106 of an SSID-to-ORBLocal Address Flit',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_ORB_CFG_PRF_TRK_MASK_4:FR_MSK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_ORB_CFG_PRF_TRK_MASK_4:LADDR_105_94_MSK'} = {
    NAME => 'AR_NIC_ORB_CFG_PRF_TRK_MASK_4:LADDR_105_94_MSK',
    LABEL => 'AR_NIC_ORB_CFG_PRF_TRK_MASK_4:LADDR_105_94_MSK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Local Address[105:94] Mask. Corresponds to bits 105:94 of an SSID-to-ORB Local Address Flit',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_ORB_CFG_PRF_TRK_MASK_4:LADDR_105_94_MSK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_ORB_CFG_PRF_TRK_MASK_4:LMDH_MSK'} = {
    NAME => 'AR_NIC_ORB_CFG_PRF_TRK_MASK_4:LMDH_MSK',
    LABEL => 'AR_NIC_ORB_CFG_PRF_TRK_MASK_4:LMDH_MSK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Local Memory Domain Handle Mask. Corresponds to bits 93:82 of anSSID-to-ORB Local Address Flit',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_ORB_CFG_PRF_TRK_MASK_4:LMDH_MSK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_ORB_CFG_PRF_TRK_MASK_4:RESERVED_81_72'} = {
    NAME => 'AR_NIC_ORB_CFG_PRF_TRK_MASK_4:RESERVED_81_72',
    LABEL => 'AR_NIC_ORB_CFG_PRF_TRK_MASK_4:RESERVED_81_72',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Reserved[81:72] Mask. Corresponds to bits 81:72 of an SSID-to-ORB Local Address Flit',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_ORB_CFG_PRF_TRK_MASK_4:RESERVED_81_72'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_ORB_CFG_PRF_TRK_MASK_4:ECC0_MSK'} = {
    NAME => 'AR_NIC_ORB_CFG_PRF_TRK_MASK_4:ECC0_MSK',
    LABEL => 'AR_NIC_ORB_CFG_PRF_TRK_MASK_4:ECC0_MSK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Error Correction Code 0 Mask. Corresponds to bits 71:64 of an SSID-to-ORB Local Address Flit',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_ORB_CFG_PRF_TRK_MASK_4:ECC0_MSK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_ORB_CFG_PRF_TRK_MASK_5'} = {
    NAME => 'AR_NIC_ORB_CFG_PRF_TRK_MASK_5',
    LABEL => 'AR_NIC_ORB_CFG_PRF_TRK_MASK_5',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_ORB_CFG_PRF_TRK_MASK_5'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_ORB_CFG_PRF_TRK_MASK_5:ECC1_MSK'} = {
    NAME => 'AR_NIC_ORB_CFG_PRF_TRK_MASK_5:ECC1_MSK',
    LABEL => 'AR_NIC_ORB_CFG_PRF_TRK_MASK_5:ECC1_MSK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Error Correction Code 1 Mask. Corresponds to bits 143:136 of anSSID-to-ORB Local Address Flit',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_ORB_CFG_PRF_TRK_MASK_5:ECC1_MSK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_ORB_CFG_PRF_TRK_MASK_5:LWC_MSK'} = {
    NAME => 'AR_NIC_ORB_CFG_PRF_TRK_MASK_5:LWC_MSK',
    LABEL => 'AR_NIC_ORB_CFG_PRF_TRK_MASK_5:LWC_MSK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Write Combine. Corresponds to bit 135 of an SSID-to-ORB Local Address Flit',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_ORB_CFG_PRF_TRK_MASK_5:LWC_MSK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_ORB_CFG_PRF_TRK_MASK_5:RESERVED_134_128'} = {
    NAME => 'AR_NIC_ORB_CFG_PRF_TRK_MASK_5:RESERVED_134_128',
    LABEL => 'AR_NIC_ORB_CFG_PRF_TRK_MASK_5:RESERVED_134_128',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Reserved[134:128] Mask. Corresponds to bits 134:128 of an SSID-to-ORB Local Address Flit',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_ORB_CFG_PRF_TRK_MASK_5:RESERVED_134_128'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_ORB_PRF_NET_RSP_TRACK_1:MAX_RSP_TIME'} = {
    NAME => 'AR_NIC_ORB_PRF_NET_RSP_TRACK_1:MAX_RSP_TIME',
    LABEL => 'AR_NIC_ORB_PRF_NET_RSP_TRACK_1:MAX_RSP_TIME',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Tracks the maximum response time for an outstanding request to theAries Network',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_ORB_PRF_NET_RSP_TRACK_1:MAX_RSP_TIME'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_ORB_PRF_NET_RSP_TRACK_1:MIN_RSP_TIME'} = {
    NAME => 'AR_NIC_ORB_PRF_NET_RSP_TRACK_1:MIN_RSP_TIME',
    LABEL => 'AR_NIC_ORB_PRF_NET_RSP_TRACK_1:MIN_RSP_TIME',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Tracks the minimum response time for an outstanding request to theAries Network',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_ORB_PRF_NET_RSP_TRACK_1:MIN_RSP_TIME'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_ORB_PRF_NET_RSP_TRACK_2'} = {
    NAME => 'AR_NIC_ORB_PRF_NET_RSP_TRACK_2',
    LABEL => 'AR_NIC_ORB_PRF_NET_RSP_TRACK_2',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Tracks the sum of all response times for outstanding requests to the Aries Network',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_ORB_PRF_NET_RSP_TRACK_2'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_ORB_PRF_NET_RSP_HIST_BIN01:BIN1_COUNT'} = {
    NAME => 'AR_NIC_ORB_PRF_NET_RSP_HIST_BIN01:BIN1_COUNT',
    LABEL => 'AR_NIC_ORB_PRF_NET_RSP_HIST_BIN01:BIN1_COUNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Bin 1 count',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_ORB_PRF_NET_RSP_HIST_BIN01:BIN1_COUNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_ORB_PRF_NET_RSP_HIST_BIN01:BIN0_COUNT'} = {
    NAME => 'AR_NIC_ORB_PRF_NET_RSP_HIST_BIN01:BIN0_COUNT',
    LABEL => 'AR_NIC_ORB_PRF_NET_RSP_HIST_BIN01:BIN0_COUNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Bin 0 count',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_ORB_PRF_NET_RSP_HIST_BIN01:BIN0_COUNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_ORB_PRF_NET_RSP_HIST_BIN23:BIN3_COUNT'} = {
    NAME => 'AR_NIC_ORB_PRF_NET_RSP_HIST_BIN23:BIN3_COUNT',
    LABEL => 'AR_NIC_ORB_PRF_NET_RSP_HIST_BIN23:BIN3_COUNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Bin 3 count',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_ORB_PRF_NET_RSP_HIST_BIN23:BIN3_COUNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_ORB_PRF_NET_RSP_HIST_BIN23:BIN2_COUNT'} = {
    NAME => 'AR_NIC_ORB_PRF_NET_RSP_HIST_BIN23:BIN2_COUNT',
    LABEL => 'AR_NIC_ORB_PRF_NET_RSP_HIST_BIN23:BIN2_COUNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Bin 2 count',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_ORB_PRF_NET_RSP_HIST_BIN23:BIN2_COUNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_ORB_PRF_NET_RSP_HIST_BIN45:BIN5_COUNT'} = {
    NAME => 'AR_NIC_ORB_PRF_NET_RSP_HIST_BIN45:BIN5_COUNT',
    LABEL => 'AR_NIC_ORB_PRF_NET_RSP_HIST_BIN45:BIN5_COUNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Bin 5 count',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_ORB_PRF_NET_RSP_HIST_BIN45:BIN5_COUNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_ORB_PRF_NET_RSP_HIST_BIN45:BIN4_COUNT'} = {
    NAME => 'AR_NIC_ORB_PRF_NET_RSP_HIST_BIN45:BIN4_COUNT',
    LABEL => 'AR_NIC_ORB_PRF_NET_RSP_HIST_BIN45:BIN4_COUNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Bin 4 count',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_ORB_PRF_NET_RSP_HIST_BIN45:BIN4_COUNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_ORB_PRF_NET_RSP_HIST_BIN67:BIN7_COUNT'} = {
    NAME => 'AR_NIC_ORB_PRF_NET_RSP_HIST_BIN67:BIN7_COUNT',
    LABEL => 'AR_NIC_ORB_PRF_NET_RSP_HIST_BIN67:BIN7_COUNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Bin 7 count',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_ORB_PRF_NET_RSP_HIST_BIN67:BIN7_COUNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_ORB_PRF_NET_RSP_HIST_BIN67:BIN6_COUNT'} = {
    NAME => 'AR_NIC_ORB_PRF_NET_RSP_HIST_BIN67:BIN6_COUNT',
    LABEL => 'AR_NIC_ORB_PRF_NET_RSP_HIST_BIN67:BIN6_COUNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Bin 6 count',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_ORB_PRF_NET_RSP_HIST_BIN67:BIN6_COUNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_ORB_PRF_REQ_BYTES_SENT'} = {
    NAME => 'AR_NIC_ORB_PRF_REQ_BYTES_SENT',
    LABEL => 'AR_NIC_ORB_PRF_REQ_BYTES_SENT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Count of the number of bytes sent to the network',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_ORB_PRF_REQ_BYTES_SENT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_ORB_PRF_RSP_BYTES_RCVD'} = {
    NAME => 'AR_NIC_ORB_PRF_RSP_BYTES_RCVD',
    LABEL => 'AR_NIC_ORB_PRF_RSP_BYTES_RCVD',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Count of the number of bytes received from the network',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_ORB_PRF_RSP_BYTES_RCVD'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_ORB_PRF_STALL_DURATION_EN'} = {
    NAME => 'AR_NIC_ORB_PRF_STALL_DURATION_EN',
    LABEL => 'AR_NIC_ORB_PRF_STALL_DURATION_EN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_ORB_PRF_STALL_DURATION_EN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_ORB_PRF_STALL_DURATION_EN:ENABLE_PKTID'} = {
    NAME => 'AR_NIC_ORB_PRF_STALL_DURATION_EN:ENABLE_PKTID',
    LABEL => 'AR_NIC_ORB_PRF_STALL_DURATION_EN:ENABLE_PKTID',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to enable AR_NIC_ORB_PRF_REQ_PKTID_STALL_DURATION',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_ORB_PRF_STALL_DURATION_EN:ENABLE_PKTID'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_ORB_PRF_STALL_DURATION_EN:ENABLE_CRDTS'} = {
    NAME => 'AR_NIC_ORB_PRF_STALL_DURATION_EN:ENABLE_CRDTS',
    LABEL => 'AR_NIC_ORB_PRF_STALL_DURATION_EN:ENABLE_CRDTS',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to enable AR_NIC_ORB_PRF_REQ_CRDTS_STALL_DURATION',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_ORB_PRF_STALL_DURATION_EN:ENABLE_CRDTS'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_ORB_PRF_REQ_PKTID_STALL_DURATION'} = {
    NAME => 'AR_NIC_ORB_PRF_REQ_PKTID_STALL_DURATION',
    LABEL => 'AR_NIC_ORB_PRF_REQ_PKTID_STALL_DURATION',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Duration of stalled request due to lack of packet identifiers',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_ORB_PRF_REQ_PKTID_STALL_DURATION'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_ORB_PRF_REQ_CRDTS_STALL_DURATION'} = {
    NAME => 'AR_NIC_ORB_PRF_REQ_CRDTS_STALL_DURATION',
    LABEL => 'AR_NIC_ORB_PRF_REQ_CRDTS_STALL_DURATION',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Duration of stalled request due to lack of ORB-to-NL credits',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_ORB_PRF_REQ_CRDTS_STALL_DURATION'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_PARB_PRF_EN'} = {
    NAME => 'AR_NIC_PARB_PRF_EN',
    LABEL => 'AR_NIC_PARB_PRF_EN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_PARB_PRF_EN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_PARB_PRF_EN:PRF_VC2_EN'} = {
    NAME => 'AR_NIC_PARB_PRF_EN:PRF_VC2_EN',
    LABEL => 'AR_NIC_PARB_PRF_EN:PRF_VC2_EN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Enable register  PARB Performance Register VC2 Stall Duration',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_PARB_PRF_EN:PRF_VC2_EN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_PARB_PRF_EN:PRF_VC1_EN'} = {
    NAME => 'AR_NIC_PARB_PRF_EN:PRF_VC1_EN',
    LABEL => 'AR_NIC_PARB_PRF_EN:PRF_VC1_EN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Enable register  PARB Performance Register VC1 Stall Duration',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_PARB_PRF_EN:PRF_VC1_EN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_PARB_PRF_EN:PRF_VC0_EN'} = {
    NAME => 'AR_NIC_PARB_PRF_EN:PRF_VC0_EN',
    LABEL => 'AR_NIC_PARB_PRF_EN:PRF_VC0_EN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Enable register  PARB Performance Register VC0 Stall Duration',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_PARB_PRF_EN:PRF_VC0_EN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_PARB_PRF_STALL_DURATION_VC0'} = {
    NAME => 'AR_NIC_PARB_PRF_STALL_DURATION_VC0',
    LABEL => 'AR_NIC_PARB_PRF_STALL_DURATION_VC0',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'VC 0 Stall duration',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_PARB_PRF_STALL_DURATION_VC0'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_PARB_PRF_STALL_DURATION_VC1'} = {
    NAME => 'AR_NIC_PARB_PRF_STALL_DURATION_VC1',
    LABEL => 'AR_NIC_PARB_PRF_STALL_DURATION_VC1',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'VC 1 Stall duration',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_PARB_PRF_STALL_DURATION_VC1'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_PARB_PRF_STALL_DURATION_VC2'} = {
    NAME => 'AR_NIC_PARB_PRF_STALL_DURATION_VC2',
    LABEL => 'AR_NIC_PARB_PRF_STALL_DURATION_VC2',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'VC 2 Stall duration',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_PARB_PRF_STALL_DURATION_VC2'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_PI_PM_EVENT_CNTR_CTRL'} = {
    NAME => 'AR_PI_PM_EVENT_CNTR_CTRL',
    LABEL => 'AR_PI_PM_EVENT_CNTR_CTRL',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_PI_PM_EVENT_CNTR_CTRL'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_PI_PM_EVENT_CNTR_CTRL:DISABLE_AUTO_UPDATE'} = {
    NAME => 'AR_PI_PM_EVENT_CNTR_CTRL:DISABLE_AUTO_UPDATE',
    LABEL => 'AR_PI_PM_EVENT_CNTR_CTRL:DISABLE_AUTO_UPDATE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Disables the auto-updating of the performance counters, turns off widget',
    CAT => 'craynpu',
};
$event_order{'AR_PI_PM_EVENT_CNTR_CTRL:DISABLE_AUTO_UPDATE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_PI_PM_EVENT_CNTR_CTRL:ENABLE'} = {
    NAME => 'AR_PI_PM_EVENT_CNTR_CTRL:ENABLE',
    LABEL => 'AR_PI_PM_EVENT_CNTR_CTRL:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Writing a 1 enables performance counters, writing 0 disables counting',
    CAT => 'craynpu',
};
$event_order{'AR_PI_PM_EVENT_CNTR_CTRL:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_PI_PM_EVENT_CNTR_CTRL:CLEAR'} = {
    NAME => 'AR_PI_PM_EVENT_CNTR_CTRL:CLEAR',
    LABEL => 'AR_PI_PM_EVENT_CNTR_CTRL:CLEAR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Initiates the clear sequence which clears all performance counters, read returns zero',
    CAT => 'craynpu',
};
$event_order{'AR_PI_PM_EVENT_CNTR_CTRL:CLEAR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_PI_PM_EVENT_CNTR_CTRL:COUNTERS_CLEAR'} = {
    NAME => 'AR_PI_PM_EVENT_CNTR_CTRL:COUNTERS_CLEAR',
    LABEL => 'AR_PI_PM_EVENT_CNTR_CTRL:COUNTERS_CLEAR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* This bit becomes set upon the completion of the clear sequence',
    CAT => 'craynpu',
};
$event_order{'AR_PI_PM_EVENT_CNTR_CTRL:COUNTERS_CLEAR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_PI_PM_PCLK_EVENT_CNTR_CTRL'} = {
    NAME => 'AR_PI_PM_PCLK_EVENT_CNTR_CTRL',
    LABEL => 'AR_PI_PM_PCLK_EVENT_CNTR_CTRL',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_PI_PM_PCLK_EVENT_CNTR_CTRL'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_PI_PM_PCLK_EVENT_CNTR_CTRL:DISABLE_AUTO_UPDATE'} = {
    NAME => 'AR_PI_PM_PCLK_EVENT_CNTR_CTRL:DISABLE_AUTO_UPDATE',
    LABEL => 'AR_PI_PM_PCLK_EVENT_CNTR_CTRL:DISABLE_AUTO_UPDATE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Disables the auto-updating of the performance counters, turns off widget',
    CAT => 'craynpu',
};
$event_order{'AR_PI_PM_PCLK_EVENT_CNTR_CTRL:DISABLE_AUTO_UPDATE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_PI_PM_PCLK_EVENT_CNTR_CTRL:ENABLE'} = {
    NAME => 'AR_PI_PM_PCLK_EVENT_CNTR_CTRL:ENABLE',
    LABEL => 'AR_PI_PM_PCLK_EVENT_CNTR_CTRL:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Writing a 1 enables performance counters, writing 0 disables counting',
    CAT => 'craynpu',
};
$event_order{'AR_PI_PM_PCLK_EVENT_CNTR_CTRL:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_PI_PM_PCLK_EVENT_CNTR_CTRL:CLEAR'} = {
    NAME => 'AR_PI_PM_PCLK_EVENT_CNTR_CTRL:CLEAR',
    LABEL => 'AR_PI_PM_PCLK_EVENT_CNTR_CTRL:CLEAR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Initiates the clear sequence which clears all performance counters, read returns zero',
    CAT => 'craynpu',
};
$event_order{'AR_PI_PM_PCLK_EVENT_CNTR_CTRL:CLEAR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_PI_PM_PCLK_EVENT_CNTR_CTRL:COUNTERS_CLEAR'} = {
    NAME => 'AR_PI_PM_PCLK_EVENT_CNTR_CTRL:COUNTERS_CLEAR',
    LABEL => 'AR_PI_PM_PCLK_EVENT_CNTR_CTRL:COUNTERS_CLEAR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* This bit becomes set upon the completion of the clear sequence',
    CAT => 'craynpu',
};
$event_order{'AR_PI_PM_PCLK_EVENT_CNTR_CTRL:COUNTERS_CLEAR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_0_INQ_PRF_INCOMING_FLIT_VC0'} = {
    NAME => 'AR_RTR_PT_5_0_INQ_PRF_INCOMING_FLIT_VC0',
    LABEL => 'AR_RTR_PT_5_0_INQ_PRF_INCOMING_FLIT_VC0',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_0_INQ_PRF_INCOMING_FLIT_VC0'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_1_INQ_PRF_INCOMING_FLIT_VC0'} = {
    NAME => 'AR_RTR_PT_5_1_INQ_PRF_INCOMING_FLIT_VC0',
    LABEL => 'AR_RTR_PT_5_1_INQ_PRF_INCOMING_FLIT_VC0',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_1_INQ_PRF_INCOMING_FLIT_VC0'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_2_INQ_PRF_INCOMING_FLIT_VC0'} = {
    NAME => 'AR_RTR_PT_5_2_INQ_PRF_INCOMING_FLIT_VC0',
    LABEL => 'AR_RTR_PT_5_2_INQ_PRF_INCOMING_FLIT_VC0',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_2_INQ_PRF_INCOMING_FLIT_VC0'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_3_INQ_PRF_INCOMING_FLIT_VC0'} = {
    NAME => 'AR_RTR_PT_5_3_INQ_PRF_INCOMING_FLIT_VC0',
    LABEL => 'AR_RTR_PT_5_3_INQ_PRF_INCOMING_FLIT_VC0',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_3_INQ_PRF_INCOMING_FLIT_VC0'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_4_INQ_PRF_INCOMING_FLIT_VC0'} = {
    NAME => 'AR_RTR_PT_5_4_INQ_PRF_INCOMING_FLIT_VC0',
    LABEL => 'AR_RTR_PT_5_4_INQ_PRF_INCOMING_FLIT_VC0',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_4_INQ_PRF_INCOMING_FLIT_VC0'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_5_INQ_PRF_INCOMING_FLIT_VC0'} = {
    NAME => 'AR_RTR_PT_5_5_INQ_PRF_INCOMING_FLIT_VC0',
    LABEL => 'AR_RTR_PT_5_5_INQ_PRF_INCOMING_FLIT_VC0',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_5_INQ_PRF_INCOMING_FLIT_VC0'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_6_INQ_PRF_INCOMING_FLIT_VC0'} = {
    NAME => 'AR_RTR_PT_5_6_INQ_PRF_INCOMING_FLIT_VC0',
    LABEL => 'AR_RTR_PT_5_6_INQ_PRF_INCOMING_FLIT_VC0',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_6_INQ_PRF_INCOMING_FLIT_VC0'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_7_INQ_PRF_INCOMING_FLIT_VC0'} = {
    NAME => 'AR_RTR_PT_5_7_INQ_PRF_INCOMING_FLIT_VC0',
    LABEL => 'AR_RTR_PT_5_7_INQ_PRF_INCOMING_FLIT_VC0',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_7_INQ_PRF_INCOMING_FLIT_VC0'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_0_INQ_PRF_INCOMING_FLIT_VC4'} = {
    NAME => 'AR_RTR_PT_5_0_INQ_PRF_INCOMING_FLIT_VC4',
    LABEL => 'AR_RTR_PT_5_0_INQ_PRF_INCOMING_FLIT_VC4',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC4',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_0_INQ_PRF_INCOMING_FLIT_VC4'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_1_INQ_PRF_INCOMING_FLIT_VC4'} = {
    NAME => 'AR_RTR_PT_5_1_INQ_PRF_INCOMING_FLIT_VC4',
    LABEL => 'AR_RTR_PT_5_1_INQ_PRF_INCOMING_FLIT_VC4',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC4',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_1_INQ_PRF_INCOMING_FLIT_VC4'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_2_INQ_PRF_INCOMING_FLIT_VC4'} = {
    NAME => 'AR_RTR_PT_5_2_INQ_PRF_INCOMING_FLIT_VC4',
    LABEL => 'AR_RTR_PT_5_2_INQ_PRF_INCOMING_FLIT_VC4',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC4',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_2_INQ_PRF_INCOMING_FLIT_VC4'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_3_INQ_PRF_INCOMING_FLIT_VC4'} = {
    NAME => 'AR_RTR_PT_5_3_INQ_PRF_INCOMING_FLIT_VC4',
    LABEL => 'AR_RTR_PT_5_3_INQ_PRF_INCOMING_FLIT_VC4',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC4',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_3_INQ_PRF_INCOMING_FLIT_VC4'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_4_INQ_PRF_INCOMING_FLIT_VC4'} = {
    NAME => 'AR_RTR_PT_5_4_INQ_PRF_INCOMING_FLIT_VC4',
    LABEL => 'AR_RTR_PT_5_4_INQ_PRF_INCOMING_FLIT_VC4',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC4',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_4_INQ_PRF_INCOMING_FLIT_VC4'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_5_INQ_PRF_INCOMING_FLIT_VC4'} = {
    NAME => 'AR_RTR_PT_5_5_INQ_PRF_INCOMING_FLIT_VC4',
    LABEL => 'AR_RTR_PT_5_5_INQ_PRF_INCOMING_FLIT_VC4',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC4',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_5_INQ_PRF_INCOMING_FLIT_VC4'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_6_INQ_PRF_INCOMING_FLIT_VC4'} = {
    NAME => 'AR_RTR_PT_5_6_INQ_PRF_INCOMING_FLIT_VC4',
    LABEL => 'AR_RTR_PT_5_6_INQ_PRF_INCOMING_FLIT_VC4',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC4',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_6_INQ_PRF_INCOMING_FLIT_VC4'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_7_INQ_PRF_INCOMING_FLIT_VC4'} = {
    NAME => 'AR_RTR_PT_5_7_INQ_PRF_INCOMING_FLIT_VC4',
    LABEL => 'AR_RTR_PT_5_7_INQ_PRF_INCOMING_FLIT_VC4',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit count coming into INQ for VC4',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_7_INQ_PRF_INCOMING_FLIT_VC4'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_0_INQ_PRF_FLIT0_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_PT_5_0_INQ_PRF_FLIT0_FILTERING_SETUP',
    LABEL => 'AR_RTR_PT_5_0_INQ_PRF_FLIT0_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_0_INQ_PRF_FLIT0_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_0_INQ_PRF_FLIT0_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_PT_5_0_INQ_PRF_FLIT0_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_PT_5_0_INQ_PRF_FLIT0_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_PT_NQ_INCOMING_PKT_VC0_FILTER_FLIT0_CNTcounts on the number of matching flits based on this setup register',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_0_INQ_PRF_FLIT0_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_0_INQ_PRF_FLIT0_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_PT_5_0_INQ_PRF_FLIT0_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_PT_5_0_INQ_PRF_FLIT0_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Pointer indicating which flit in the packet should be compared against this signature',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_0_INQ_PRF_FLIT0_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_0_INQ_PRF_FLIT0_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_PT_5_0_INQ_PRF_FLIT0_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_PT_5_0_INQ_PRF_FLIT0_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Compare pattern with the flit specified by FLIT_PTR',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_0_INQ_PRF_FLIT0_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_1_INQ_PRF_FLIT0_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_PT_5_1_INQ_PRF_FLIT0_FILTERING_SETUP',
    LABEL => 'AR_RTR_PT_5_1_INQ_PRF_FLIT0_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_1_INQ_PRF_FLIT0_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_1_INQ_PRF_FLIT0_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_PT_5_1_INQ_PRF_FLIT0_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_PT_5_1_INQ_PRF_FLIT0_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_PT_NQ_INCOMING_PKT_VC0_FILTER_FLIT0_CNTcounts on the number of matching flits based on this setup register',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_1_INQ_PRF_FLIT0_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_1_INQ_PRF_FLIT0_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_PT_5_1_INQ_PRF_FLIT0_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_PT_5_1_INQ_PRF_FLIT0_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Pointer indicating which flit in the packet should be compared against this signature',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_1_INQ_PRF_FLIT0_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_1_INQ_PRF_FLIT0_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_PT_5_1_INQ_PRF_FLIT0_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_PT_5_1_INQ_PRF_FLIT0_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Compare pattern with the flit specified by FLIT_PTR',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_1_INQ_PRF_FLIT0_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_2_INQ_PRF_FLIT0_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_PT_5_2_INQ_PRF_FLIT0_FILTERING_SETUP',
    LABEL => 'AR_RTR_PT_5_2_INQ_PRF_FLIT0_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_2_INQ_PRF_FLIT0_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_2_INQ_PRF_FLIT0_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_PT_5_2_INQ_PRF_FLIT0_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_PT_5_2_INQ_PRF_FLIT0_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_PT_NQ_INCOMING_PKT_VC0_FILTER_FLIT0_CNTcounts on the number of matching flits based on this setup register',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_2_INQ_PRF_FLIT0_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_2_INQ_PRF_FLIT0_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_PT_5_2_INQ_PRF_FLIT0_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_PT_5_2_INQ_PRF_FLIT0_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Pointer indicating which flit in the packet should be compared against this signature',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_2_INQ_PRF_FLIT0_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_2_INQ_PRF_FLIT0_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_PT_5_2_INQ_PRF_FLIT0_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_PT_5_2_INQ_PRF_FLIT0_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Compare pattern with the flit specified by FLIT_PTR',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_2_INQ_PRF_FLIT0_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_3_INQ_PRF_FLIT0_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_PT_5_3_INQ_PRF_FLIT0_FILTERING_SETUP',
    LABEL => 'AR_RTR_PT_5_3_INQ_PRF_FLIT0_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_3_INQ_PRF_FLIT0_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_3_INQ_PRF_FLIT0_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_PT_5_3_INQ_PRF_FLIT0_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_PT_5_3_INQ_PRF_FLIT0_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_PT_NQ_INCOMING_PKT_VC0_FILTER_FLIT0_CNTcounts on the number of matching flits based on this setup register',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_3_INQ_PRF_FLIT0_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_3_INQ_PRF_FLIT0_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_PT_5_3_INQ_PRF_FLIT0_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_PT_5_3_INQ_PRF_FLIT0_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Pointer indicating which flit in the packet should be compared against this signature',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_3_INQ_PRF_FLIT0_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_3_INQ_PRF_FLIT0_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_PT_5_3_INQ_PRF_FLIT0_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_PT_5_3_INQ_PRF_FLIT0_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Compare pattern with the flit specified by FLIT_PTR',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_3_INQ_PRF_FLIT0_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_4_INQ_PRF_FLIT0_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_PT_5_4_INQ_PRF_FLIT0_FILTERING_SETUP',
    LABEL => 'AR_RTR_PT_5_4_INQ_PRF_FLIT0_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_4_INQ_PRF_FLIT0_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_4_INQ_PRF_FLIT0_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_PT_5_4_INQ_PRF_FLIT0_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_PT_5_4_INQ_PRF_FLIT0_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_PT_NQ_INCOMING_PKT_VC0_FILTER_FLIT0_CNTcounts on the number of matching flits based on this setup register',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_4_INQ_PRF_FLIT0_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_4_INQ_PRF_FLIT0_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_PT_5_4_INQ_PRF_FLIT0_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_PT_5_4_INQ_PRF_FLIT0_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Pointer indicating which flit in the packet should be compared against this signature',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_4_INQ_PRF_FLIT0_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_4_INQ_PRF_FLIT0_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_PT_5_4_INQ_PRF_FLIT0_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_PT_5_4_INQ_PRF_FLIT0_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Compare pattern with the flit specified by FLIT_PTR',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_4_INQ_PRF_FLIT0_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_5_INQ_PRF_FLIT0_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_PT_5_5_INQ_PRF_FLIT0_FILTERING_SETUP',
    LABEL => 'AR_RTR_PT_5_5_INQ_PRF_FLIT0_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_5_INQ_PRF_FLIT0_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_5_INQ_PRF_FLIT0_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_PT_5_5_INQ_PRF_FLIT0_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_PT_5_5_INQ_PRF_FLIT0_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_PT_NQ_INCOMING_PKT_VC0_FILTER_FLIT0_CNTcounts on the number of matching flits based on this setup register',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_5_INQ_PRF_FLIT0_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_5_INQ_PRF_FLIT0_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_PT_5_5_INQ_PRF_FLIT0_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_PT_5_5_INQ_PRF_FLIT0_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Pointer indicating which flit in the packet should be compared against this signature',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_5_INQ_PRF_FLIT0_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_5_INQ_PRF_FLIT0_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_PT_5_5_INQ_PRF_FLIT0_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_PT_5_5_INQ_PRF_FLIT0_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Compare pattern with the flit specified by FLIT_PTR',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_5_INQ_PRF_FLIT0_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_6_INQ_PRF_FLIT0_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_PT_5_6_INQ_PRF_FLIT0_FILTERING_SETUP',
    LABEL => 'AR_RTR_PT_5_6_INQ_PRF_FLIT0_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_6_INQ_PRF_FLIT0_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_6_INQ_PRF_FLIT0_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_PT_5_6_INQ_PRF_FLIT0_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_PT_5_6_INQ_PRF_FLIT0_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_PT_NQ_INCOMING_PKT_VC0_FILTER_FLIT0_CNTcounts on the number of matching flits based on this setup register',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_6_INQ_PRF_FLIT0_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_6_INQ_PRF_FLIT0_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_PT_5_6_INQ_PRF_FLIT0_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_PT_5_6_INQ_PRF_FLIT0_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Pointer indicating which flit in the packet should be compared against this signature',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_6_INQ_PRF_FLIT0_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_6_INQ_PRF_FLIT0_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_PT_5_6_INQ_PRF_FLIT0_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_PT_5_6_INQ_PRF_FLIT0_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Compare pattern with the flit specified by FLIT_PTR',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_6_INQ_PRF_FLIT0_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_7_INQ_PRF_FLIT0_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_PT_5_7_INQ_PRF_FLIT0_FILTERING_SETUP',
    LABEL => 'AR_RTR_PT_5_7_INQ_PRF_FLIT0_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_7_INQ_PRF_FLIT0_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_7_INQ_PRF_FLIT0_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_PT_5_7_INQ_PRF_FLIT0_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_PT_5_7_INQ_PRF_FLIT0_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_PT_NQ_INCOMING_PKT_VC0_FILTER_FLIT0_CNTcounts on the number of matching flits based on this setup register',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_7_INQ_PRF_FLIT0_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_7_INQ_PRF_FLIT0_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_PT_5_7_INQ_PRF_FLIT0_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_PT_5_7_INQ_PRF_FLIT0_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Pointer indicating which flit in the packet should be compared against this signature',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_7_INQ_PRF_FLIT0_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_7_INQ_PRF_FLIT0_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_PT_5_7_INQ_PRF_FLIT0_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_PT_5_7_INQ_PRF_FLIT0_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Compare pattern with the flit specified by FLIT_PTR',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_7_INQ_PRF_FLIT0_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_0_INQ_PRF_FLIT0_FILTERING_MASK'} = {
    NAME => 'AR_RTR_PT_5_0_INQ_PRF_FLIT0_FILTERING_MASK',
    LABEL => 'AR_RTR_PT_5_0_INQ_PRF_FLIT0_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_0_INQ_PRF_FLIT0_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_0_INQ_PRF_FLIT0_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_PT_5_0_INQ_PRF_FLIT0_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_PT_5_0_INQ_PRF_FLIT0_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the patter compare',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_0_INQ_PRF_FLIT0_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_1_INQ_PRF_FLIT0_FILTERING_MASK'} = {
    NAME => 'AR_RTR_PT_5_1_INQ_PRF_FLIT0_FILTERING_MASK',
    LABEL => 'AR_RTR_PT_5_1_INQ_PRF_FLIT0_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_1_INQ_PRF_FLIT0_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_1_INQ_PRF_FLIT0_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_PT_5_1_INQ_PRF_FLIT0_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_PT_5_1_INQ_PRF_FLIT0_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the patter compare',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_1_INQ_PRF_FLIT0_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_2_INQ_PRF_FLIT0_FILTERING_MASK'} = {
    NAME => 'AR_RTR_PT_5_2_INQ_PRF_FLIT0_FILTERING_MASK',
    LABEL => 'AR_RTR_PT_5_2_INQ_PRF_FLIT0_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_2_INQ_PRF_FLIT0_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_2_INQ_PRF_FLIT0_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_PT_5_2_INQ_PRF_FLIT0_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_PT_5_2_INQ_PRF_FLIT0_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the patter compare',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_2_INQ_PRF_FLIT0_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_3_INQ_PRF_FLIT0_FILTERING_MASK'} = {
    NAME => 'AR_RTR_PT_5_3_INQ_PRF_FLIT0_FILTERING_MASK',
    LABEL => 'AR_RTR_PT_5_3_INQ_PRF_FLIT0_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_3_INQ_PRF_FLIT0_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_3_INQ_PRF_FLIT0_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_PT_5_3_INQ_PRF_FLIT0_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_PT_5_3_INQ_PRF_FLIT0_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the patter compare',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_3_INQ_PRF_FLIT0_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_4_INQ_PRF_FLIT0_FILTERING_MASK'} = {
    NAME => 'AR_RTR_PT_5_4_INQ_PRF_FLIT0_FILTERING_MASK',
    LABEL => 'AR_RTR_PT_5_4_INQ_PRF_FLIT0_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_4_INQ_PRF_FLIT0_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_4_INQ_PRF_FLIT0_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_PT_5_4_INQ_PRF_FLIT0_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_PT_5_4_INQ_PRF_FLIT0_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the patter compare',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_4_INQ_PRF_FLIT0_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_5_INQ_PRF_FLIT0_FILTERING_MASK'} = {
    NAME => 'AR_RTR_PT_5_5_INQ_PRF_FLIT0_FILTERING_MASK',
    LABEL => 'AR_RTR_PT_5_5_INQ_PRF_FLIT0_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_5_INQ_PRF_FLIT0_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_5_INQ_PRF_FLIT0_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_PT_5_5_INQ_PRF_FLIT0_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_PT_5_5_INQ_PRF_FLIT0_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the patter compare',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_5_INQ_PRF_FLIT0_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_6_INQ_PRF_FLIT0_FILTERING_MASK'} = {
    NAME => 'AR_RTR_PT_5_6_INQ_PRF_FLIT0_FILTERING_MASK',
    LABEL => 'AR_RTR_PT_5_6_INQ_PRF_FLIT0_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_6_INQ_PRF_FLIT0_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_6_INQ_PRF_FLIT0_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_PT_5_6_INQ_PRF_FLIT0_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_PT_5_6_INQ_PRF_FLIT0_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the patter compare',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_6_INQ_PRF_FLIT0_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_7_INQ_PRF_FLIT0_FILTERING_MASK'} = {
    NAME => 'AR_RTR_PT_5_7_INQ_PRF_FLIT0_FILTERING_MASK',
    LABEL => 'AR_RTR_PT_5_7_INQ_PRF_FLIT0_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_7_INQ_PRF_FLIT0_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_7_INQ_PRF_FLIT0_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_PT_5_7_INQ_PRF_FLIT0_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_PT_5_7_INQ_PRF_FLIT0_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the patter compare',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_7_INQ_PRF_FLIT0_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_0_INQ_PRF_FLIT1_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_PT_5_0_INQ_PRF_FLIT1_FILTERING_SETUP',
    LABEL => 'AR_RTR_PT_5_0_INQ_PRF_FLIT1_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_0_INQ_PRF_FLIT1_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_0_INQ_PRF_FLIT1_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_PT_5_0_INQ_PRF_FLIT1_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_PT_5_0_INQ_PRF_FLIT1_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Enable this compare',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_0_INQ_PRF_FLIT1_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_0_INQ_PRF_FLIT1_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_PT_5_0_INQ_PRF_FLIT1_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_PT_5_0_INQ_PRF_FLIT1_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Pointer indicating which flit in the packet should be compared against this signature',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_0_INQ_PRF_FLIT1_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_0_INQ_PRF_FLIT1_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_PT_5_0_INQ_PRF_FLIT1_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_PT_5_0_INQ_PRF_FLIT1_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Compare pattern with the flit specified by FLIT_PTR',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_0_INQ_PRF_FLIT1_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_1_INQ_PRF_FLIT1_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_PT_5_1_INQ_PRF_FLIT1_FILTERING_SETUP',
    LABEL => 'AR_RTR_PT_5_1_INQ_PRF_FLIT1_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_1_INQ_PRF_FLIT1_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_1_INQ_PRF_FLIT1_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_PT_5_1_INQ_PRF_FLIT1_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_PT_5_1_INQ_PRF_FLIT1_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Enable this compare',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_1_INQ_PRF_FLIT1_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_1_INQ_PRF_FLIT1_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_PT_5_1_INQ_PRF_FLIT1_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_PT_5_1_INQ_PRF_FLIT1_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Pointer indicating which flit in the packet should be compared against this signature',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_1_INQ_PRF_FLIT1_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_1_INQ_PRF_FLIT1_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_PT_5_1_INQ_PRF_FLIT1_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_PT_5_1_INQ_PRF_FLIT1_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Compare pattern with the flit specified by FLIT_PTR',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_1_INQ_PRF_FLIT1_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_2_INQ_PRF_FLIT1_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_PT_5_2_INQ_PRF_FLIT1_FILTERING_SETUP',
    LABEL => 'AR_RTR_PT_5_2_INQ_PRF_FLIT1_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_2_INQ_PRF_FLIT1_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_2_INQ_PRF_FLIT1_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_PT_5_2_INQ_PRF_FLIT1_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_PT_5_2_INQ_PRF_FLIT1_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Enable this compare',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_2_INQ_PRF_FLIT1_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_2_INQ_PRF_FLIT1_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_PT_5_2_INQ_PRF_FLIT1_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_PT_5_2_INQ_PRF_FLIT1_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Pointer indicating which flit in the packet should be compared against this signature',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_2_INQ_PRF_FLIT1_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_2_INQ_PRF_FLIT1_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_PT_5_2_INQ_PRF_FLIT1_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_PT_5_2_INQ_PRF_FLIT1_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Compare pattern with the flit specified by FLIT_PTR',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_2_INQ_PRF_FLIT1_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_3_INQ_PRF_FLIT1_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_PT_5_3_INQ_PRF_FLIT1_FILTERING_SETUP',
    LABEL => 'AR_RTR_PT_5_3_INQ_PRF_FLIT1_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_3_INQ_PRF_FLIT1_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_3_INQ_PRF_FLIT1_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_PT_5_3_INQ_PRF_FLIT1_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_PT_5_3_INQ_PRF_FLIT1_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Enable this compare',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_3_INQ_PRF_FLIT1_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_3_INQ_PRF_FLIT1_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_PT_5_3_INQ_PRF_FLIT1_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_PT_5_3_INQ_PRF_FLIT1_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Pointer indicating which flit in the packet should be compared against this signature',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_3_INQ_PRF_FLIT1_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_3_INQ_PRF_FLIT1_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_PT_5_3_INQ_PRF_FLIT1_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_PT_5_3_INQ_PRF_FLIT1_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Compare pattern with the flit specified by FLIT_PTR',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_3_INQ_PRF_FLIT1_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_4_INQ_PRF_FLIT1_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_PT_5_4_INQ_PRF_FLIT1_FILTERING_SETUP',
    LABEL => 'AR_RTR_PT_5_4_INQ_PRF_FLIT1_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_4_INQ_PRF_FLIT1_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_4_INQ_PRF_FLIT1_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_PT_5_4_INQ_PRF_FLIT1_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_PT_5_4_INQ_PRF_FLIT1_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Enable this compare',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_4_INQ_PRF_FLIT1_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_4_INQ_PRF_FLIT1_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_PT_5_4_INQ_PRF_FLIT1_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_PT_5_4_INQ_PRF_FLIT1_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Pointer indicating which flit in the packet should be compared against this signature',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_4_INQ_PRF_FLIT1_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_4_INQ_PRF_FLIT1_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_PT_5_4_INQ_PRF_FLIT1_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_PT_5_4_INQ_PRF_FLIT1_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Compare pattern with the flit specified by FLIT_PTR',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_4_INQ_PRF_FLIT1_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_5_INQ_PRF_FLIT1_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_PT_5_5_INQ_PRF_FLIT1_FILTERING_SETUP',
    LABEL => 'AR_RTR_PT_5_5_INQ_PRF_FLIT1_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_5_INQ_PRF_FLIT1_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_5_INQ_PRF_FLIT1_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_PT_5_5_INQ_PRF_FLIT1_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_PT_5_5_INQ_PRF_FLIT1_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Enable this compare',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_5_INQ_PRF_FLIT1_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_5_INQ_PRF_FLIT1_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_PT_5_5_INQ_PRF_FLIT1_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_PT_5_5_INQ_PRF_FLIT1_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Pointer indicating which flit in the packet should be compared against this signature',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_5_INQ_PRF_FLIT1_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_5_INQ_PRF_FLIT1_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_PT_5_5_INQ_PRF_FLIT1_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_PT_5_5_INQ_PRF_FLIT1_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Compare pattern with the flit specified by FLIT_PTR',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_5_INQ_PRF_FLIT1_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_6_INQ_PRF_FLIT1_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_PT_5_6_INQ_PRF_FLIT1_FILTERING_SETUP',
    LABEL => 'AR_RTR_PT_5_6_INQ_PRF_FLIT1_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_6_INQ_PRF_FLIT1_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_6_INQ_PRF_FLIT1_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_PT_5_6_INQ_PRF_FLIT1_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_PT_5_6_INQ_PRF_FLIT1_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Enable this compare',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_6_INQ_PRF_FLIT1_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_6_INQ_PRF_FLIT1_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_PT_5_6_INQ_PRF_FLIT1_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_PT_5_6_INQ_PRF_FLIT1_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Pointer indicating which flit in the packet should be compared against this signature',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_6_INQ_PRF_FLIT1_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_6_INQ_PRF_FLIT1_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_PT_5_6_INQ_PRF_FLIT1_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_PT_5_6_INQ_PRF_FLIT1_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Compare pattern with the flit specified by FLIT_PTR',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_6_INQ_PRF_FLIT1_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_7_INQ_PRF_FLIT1_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_PT_5_7_INQ_PRF_FLIT1_FILTERING_SETUP',
    LABEL => 'AR_RTR_PT_5_7_INQ_PRF_FLIT1_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_7_INQ_PRF_FLIT1_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_7_INQ_PRF_FLIT1_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_PT_5_7_INQ_PRF_FLIT1_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_PT_5_7_INQ_PRF_FLIT1_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Enable this compare',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_7_INQ_PRF_FLIT1_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_7_INQ_PRF_FLIT1_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_PT_5_7_INQ_PRF_FLIT1_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_PT_5_7_INQ_PRF_FLIT1_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Pointer indicating which flit in the packet should be compared against this signature',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_7_INQ_PRF_FLIT1_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_7_INQ_PRF_FLIT1_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_PT_5_7_INQ_PRF_FLIT1_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_PT_5_7_INQ_PRF_FLIT1_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Compare pattern with the flit specified by FLIT_PTR',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_7_INQ_PRF_FLIT1_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_0_INQ_PRF_FLIT1_FILTERING_MASK'} = {
    NAME => 'AR_RTR_PT_5_0_INQ_PRF_FLIT1_FILTERING_MASK',
    LABEL => 'AR_RTR_PT_5_0_INQ_PRF_FLIT1_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_0_INQ_PRF_FLIT1_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_0_INQ_PRF_FLIT1_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_PT_5_0_INQ_PRF_FLIT1_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_PT_5_0_INQ_PRF_FLIT1_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the patter compare',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_0_INQ_PRF_FLIT1_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_1_INQ_PRF_FLIT1_FILTERING_MASK'} = {
    NAME => 'AR_RTR_PT_5_1_INQ_PRF_FLIT1_FILTERING_MASK',
    LABEL => 'AR_RTR_PT_5_1_INQ_PRF_FLIT1_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_1_INQ_PRF_FLIT1_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_1_INQ_PRF_FLIT1_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_PT_5_1_INQ_PRF_FLIT1_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_PT_5_1_INQ_PRF_FLIT1_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the patter compare',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_1_INQ_PRF_FLIT1_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_2_INQ_PRF_FLIT1_FILTERING_MASK'} = {
    NAME => 'AR_RTR_PT_5_2_INQ_PRF_FLIT1_FILTERING_MASK',
    LABEL => 'AR_RTR_PT_5_2_INQ_PRF_FLIT1_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_2_INQ_PRF_FLIT1_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_2_INQ_PRF_FLIT1_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_PT_5_2_INQ_PRF_FLIT1_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_PT_5_2_INQ_PRF_FLIT1_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the patter compare',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_2_INQ_PRF_FLIT1_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_3_INQ_PRF_FLIT1_FILTERING_MASK'} = {
    NAME => 'AR_RTR_PT_5_3_INQ_PRF_FLIT1_FILTERING_MASK',
    LABEL => 'AR_RTR_PT_5_3_INQ_PRF_FLIT1_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_3_INQ_PRF_FLIT1_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_3_INQ_PRF_FLIT1_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_PT_5_3_INQ_PRF_FLIT1_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_PT_5_3_INQ_PRF_FLIT1_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the patter compare',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_3_INQ_PRF_FLIT1_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_4_INQ_PRF_FLIT1_FILTERING_MASK'} = {
    NAME => 'AR_RTR_PT_5_4_INQ_PRF_FLIT1_FILTERING_MASK',
    LABEL => 'AR_RTR_PT_5_4_INQ_PRF_FLIT1_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_4_INQ_PRF_FLIT1_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_4_INQ_PRF_FLIT1_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_PT_5_4_INQ_PRF_FLIT1_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_PT_5_4_INQ_PRF_FLIT1_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the patter compare',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_4_INQ_PRF_FLIT1_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_5_INQ_PRF_FLIT1_FILTERING_MASK'} = {
    NAME => 'AR_RTR_PT_5_5_INQ_PRF_FLIT1_FILTERING_MASK',
    LABEL => 'AR_RTR_PT_5_5_INQ_PRF_FLIT1_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_5_INQ_PRF_FLIT1_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_5_INQ_PRF_FLIT1_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_PT_5_5_INQ_PRF_FLIT1_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_PT_5_5_INQ_PRF_FLIT1_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the patter compare',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_5_INQ_PRF_FLIT1_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_6_INQ_PRF_FLIT1_FILTERING_MASK'} = {
    NAME => 'AR_RTR_PT_5_6_INQ_PRF_FLIT1_FILTERING_MASK',
    LABEL => 'AR_RTR_PT_5_6_INQ_PRF_FLIT1_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_6_INQ_PRF_FLIT1_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_6_INQ_PRF_FLIT1_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_PT_5_6_INQ_PRF_FLIT1_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_PT_5_6_INQ_PRF_FLIT1_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the patter compare',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_6_INQ_PRF_FLIT1_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_7_INQ_PRF_FLIT1_FILTERING_MASK'} = {
    NAME => 'AR_RTR_PT_5_7_INQ_PRF_FLIT1_FILTERING_MASK',
    LABEL => 'AR_RTR_PT_5_7_INQ_PRF_FLIT1_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_7_INQ_PRF_FLIT1_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_7_INQ_PRF_FLIT1_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_PT_5_7_INQ_PRF_FLIT1_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_PT_5_7_INQ_PRF_FLIT1_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the patter compare',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_7_INQ_PRF_FLIT1_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_0_INQ_PRF_FLIT2_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_PT_5_0_INQ_PRF_FLIT2_FILTERING_SETUP',
    LABEL => 'AR_RTR_PT_5_0_INQ_PRF_FLIT2_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_0_INQ_PRF_FLIT2_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_0_INQ_PRF_FLIT2_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_PT_5_0_INQ_PRF_FLIT2_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_PT_5_0_INQ_PRF_FLIT2_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Enable this compare',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_0_INQ_PRF_FLIT2_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_0_INQ_PRF_FLIT2_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_PT_5_0_INQ_PRF_FLIT2_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_PT_5_0_INQ_PRF_FLIT2_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Pointer indicating which flit in the packet should be compared against this signature',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_0_INQ_PRF_FLIT2_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_0_INQ_PRF_FLIT2_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_PT_5_0_INQ_PRF_FLIT2_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_PT_5_0_INQ_PRF_FLIT2_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Compare pattern with the flit specified by FLIT_PTR',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_0_INQ_PRF_FLIT2_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_1_INQ_PRF_FLIT2_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_PT_5_1_INQ_PRF_FLIT2_FILTERING_SETUP',
    LABEL => 'AR_RTR_PT_5_1_INQ_PRF_FLIT2_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_1_INQ_PRF_FLIT2_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_1_INQ_PRF_FLIT2_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_PT_5_1_INQ_PRF_FLIT2_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_PT_5_1_INQ_PRF_FLIT2_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Enable this compare',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_1_INQ_PRF_FLIT2_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_1_INQ_PRF_FLIT2_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_PT_5_1_INQ_PRF_FLIT2_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_PT_5_1_INQ_PRF_FLIT2_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Pointer indicating which flit in the packet should be compared against this signature',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_1_INQ_PRF_FLIT2_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_1_INQ_PRF_FLIT2_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_PT_5_1_INQ_PRF_FLIT2_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_PT_5_1_INQ_PRF_FLIT2_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Compare pattern with the flit specified by FLIT_PTR',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_1_INQ_PRF_FLIT2_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_2_INQ_PRF_FLIT2_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_PT_5_2_INQ_PRF_FLIT2_FILTERING_SETUP',
    LABEL => 'AR_RTR_PT_5_2_INQ_PRF_FLIT2_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_2_INQ_PRF_FLIT2_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_2_INQ_PRF_FLIT2_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_PT_5_2_INQ_PRF_FLIT2_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_PT_5_2_INQ_PRF_FLIT2_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Enable this compare',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_2_INQ_PRF_FLIT2_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_2_INQ_PRF_FLIT2_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_PT_5_2_INQ_PRF_FLIT2_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_PT_5_2_INQ_PRF_FLIT2_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Pointer indicating which flit in the packet should be compared against this signature',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_2_INQ_PRF_FLIT2_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_2_INQ_PRF_FLIT2_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_PT_5_2_INQ_PRF_FLIT2_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_PT_5_2_INQ_PRF_FLIT2_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Compare pattern with the flit specified by FLIT_PTR',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_2_INQ_PRF_FLIT2_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_3_INQ_PRF_FLIT2_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_PT_5_3_INQ_PRF_FLIT2_FILTERING_SETUP',
    LABEL => 'AR_RTR_PT_5_3_INQ_PRF_FLIT2_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_3_INQ_PRF_FLIT2_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_3_INQ_PRF_FLIT2_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_PT_5_3_INQ_PRF_FLIT2_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_PT_5_3_INQ_PRF_FLIT2_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Enable this compare',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_3_INQ_PRF_FLIT2_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_3_INQ_PRF_FLIT2_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_PT_5_3_INQ_PRF_FLIT2_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_PT_5_3_INQ_PRF_FLIT2_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Pointer indicating which flit in the packet should be compared against this signature',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_3_INQ_PRF_FLIT2_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_3_INQ_PRF_FLIT2_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_PT_5_3_INQ_PRF_FLIT2_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_PT_5_3_INQ_PRF_FLIT2_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Compare pattern with the flit specified by FLIT_PTR',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_3_INQ_PRF_FLIT2_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_4_INQ_PRF_FLIT2_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_PT_5_4_INQ_PRF_FLIT2_FILTERING_SETUP',
    LABEL => 'AR_RTR_PT_5_4_INQ_PRF_FLIT2_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_4_INQ_PRF_FLIT2_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_4_INQ_PRF_FLIT2_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_PT_5_4_INQ_PRF_FLIT2_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_PT_5_4_INQ_PRF_FLIT2_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Enable this compare',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_4_INQ_PRF_FLIT2_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_4_INQ_PRF_FLIT2_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_PT_5_4_INQ_PRF_FLIT2_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_PT_5_4_INQ_PRF_FLIT2_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Pointer indicating which flit in the packet should be compared against this signature',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_4_INQ_PRF_FLIT2_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_4_INQ_PRF_FLIT2_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_PT_5_4_INQ_PRF_FLIT2_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_PT_5_4_INQ_PRF_FLIT2_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Compare pattern with the flit specified by FLIT_PTR',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_4_INQ_PRF_FLIT2_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_5_INQ_PRF_FLIT2_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_PT_5_5_INQ_PRF_FLIT2_FILTERING_SETUP',
    LABEL => 'AR_RTR_PT_5_5_INQ_PRF_FLIT2_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_5_INQ_PRF_FLIT2_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_5_INQ_PRF_FLIT2_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_PT_5_5_INQ_PRF_FLIT2_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_PT_5_5_INQ_PRF_FLIT2_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Enable this compare',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_5_INQ_PRF_FLIT2_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_5_INQ_PRF_FLIT2_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_PT_5_5_INQ_PRF_FLIT2_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_PT_5_5_INQ_PRF_FLIT2_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Pointer indicating which flit in the packet should be compared against this signature',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_5_INQ_PRF_FLIT2_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_5_INQ_PRF_FLIT2_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_PT_5_5_INQ_PRF_FLIT2_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_PT_5_5_INQ_PRF_FLIT2_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Compare pattern with the flit specified by FLIT_PTR',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_5_INQ_PRF_FLIT2_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_6_INQ_PRF_FLIT2_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_PT_5_6_INQ_PRF_FLIT2_FILTERING_SETUP',
    LABEL => 'AR_RTR_PT_5_6_INQ_PRF_FLIT2_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_6_INQ_PRF_FLIT2_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_6_INQ_PRF_FLIT2_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_PT_5_6_INQ_PRF_FLIT2_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_PT_5_6_INQ_PRF_FLIT2_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Enable this compare',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_6_INQ_PRF_FLIT2_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_6_INQ_PRF_FLIT2_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_PT_5_6_INQ_PRF_FLIT2_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_PT_5_6_INQ_PRF_FLIT2_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Pointer indicating which flit in the packet should be compared against this signature',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_6_INQ_PRF_FLIT2_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_6_INQ_PRF_FLIT2_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_PT_5_6_INQ_PRF_FLIT2_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_PT_5_6_INQ_PRF_FLIT2_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Compare pattern with the flit specified by FLIT_PTR',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_6_INQ_PRF_FLIT2_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_7_INQ_PRF_FLIT2_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_PT_5_7_INQ_PRF_FLIT2_FILTERING_SETUP',
    LABEL => 'AR_RTR_PT_5_7_INQ_PRF_FLIT2_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_7_INQ_PRF_FLIT2_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_7_INQ_PRF_FLIT2_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_PT_5_7_INQ_PRF_FLIT2_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_PT_5_7_INQ_PRF_FLIT2_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Enable this compare',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_7_INQ_PRF_FLIT2_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_7_INQ_PRF_FLIT2_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_PT_5_7_INQ_PRF_FLIT2_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_PT_5_7_INQ_PRF_FLIT2_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Pointer indicating which flit in the packet should be compared against this signature',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_7_INQ_PRF_FLIT2_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_7_INQ_PRF_FLIT2_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_PT_5_7_INQ_PRF_FLIT2_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_PT_5_7_INQ_PRF_FLIT2_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Compare pattern with the flit specified by FLIT_PTR',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_7_INQ_PRF_FLIT2_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_0_INQ_PRF_FLIT2_FILTERING_MASK'} = {
    NAME => 'AR_RTR_PT_5_0_INQ_PRF_FLIT2_FILTERING_MASK',
    LABEL => 'AR_RTR_PT_5_0_INQ_PRF_FLIT2_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_0_INQ_PRF_FLIT2_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_0_INQ_PRF_FLIT2_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_PT_5_0_INQ_PRF_FLIT2_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_PT_5_0_INQ_PRF_FLIT2_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_0_INQ_PRF_FLIT2_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_1_INQ_PRF_FLIT2_FILTERING_MASK'} = {
    NAME => 'AR_RTR_PT_5_1_INQ_PRF_FLIT2_FILTERING_MASK',
    LABEL => 'AR_RTR_PT_5_1_INQ_PRF_FLIT2_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_1_INQ_PRF_FLIT2_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_1_INQ_PRF_FLIT2_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_PT_5_1_INQ_PRF_FLIT2_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_PT_5_1_INQ_PRF_FLIT2_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_1_INQ_PRF_FLIT2_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_2_INQ_PRF_FLIT2_FILTERING_MASK'} = {
    NAME => 'AR_RTR_PT_5_2_INQ_PRF_FLIT2_FILTERING_MASK',
    LABEL => 'AR_RTR_PT_5_2_INQ_PRF_FLIT2_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_2_INQ_PRF_FLIT2_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_2_INQ_PRF_FLIT2_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_PT_5_2_INQ_PRF_FLIT2_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_PT_5_2_INQ_PRF_FLIT2_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_2_INQ_PRF_FLIT2_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_3_INQ_PRF_FLIT2_FILTERING_MASK'} = {
    NAME => 'AR_RTR_PT_5_3_INQ_PRF_FLIT2_FILTERING_MASK',
    LABEL => 'AR_RTR_PT_5_3_INQ_PRF_FLIT2_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_3_INQ_PRF_FLIT2_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_3_INQ_PRF_FLIT2_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_PT_5_3_INQ_PRF_FLIT2_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_PT_5_3_INQ_PRF_FLIT2_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_3_INQ_PRF_FLIT2_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_4_INQ_PRF_FLIT2_FILTERING_MASK'} = {
    NAME => 'AR_RTR_PT_5_4_INQ_PRF_FLIT2_FILTERING_MASK',
    LABEL => 'AR_RTR_PT_5_4_INQ_PRF_FLIT2_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_4_INQ_PRF_FLIT2_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_4_INQ_PRF_FLIT2_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_PT_5_4_INQ_PRF_FLIT2_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_PT_5_4_INQ_PRF_FLIT2_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_4_INQ_PRF_FLIT2_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_5_INQ_PRF_FLIT2_FILTERING_MASK'} = {
    NAME => 'AR_RTR_PT_5_5_INQ_PRF_FLIT2_FILTERING_MASK',
    LABEL => 'AR_RTR_PT_5_5_INQ_PRF_FLIT2_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_5_INQ_PRF_FLIT2_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_5_INQ_PRF_FLIT2_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_PT_5_5_INQ_PRF_FLIT2_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_PT_5_5_INQ_PRF_FLIT2_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_5_INQ_PRF_FLIT2_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_6_INQ_PRF_FLIT2_FILTERING_MASK'} = {
    NAME => 'AR_RTR_PT_5_6_INQ_PRF_FLIT2_FILTERING_MASK',
    LABEL => 'AR_RTR_PT_5_6_INQ_PRF_FLIT2_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_6_INQ_PRF_FLIT2_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_6_INQ_PRF_FLIT2_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_PT_5_6_INQ_PRF_FLIT2_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_PT_5_6_INQ_PRF_FLIT2_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_6_INQ_PRF_FLIT2_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_7_INQ_PRF_FLIT2_FILTERING_MASK'} = {
    NAME => 'AR_RTR_PT_5_7_INQ_PRF_FLIT2_FILTERING_MASK',
    LABEL => 'AR_RTR_PT_5_7_INQ_PRF_FLIT2_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_7_INQ_PRF_FLIT2_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_7_INQ_PRF_FLIT2_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_PT_5_7_INQ_PRF_FLIT2_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_PT_5_7_INQ_PRF_FLIT2_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_7_INQ_PRF_FLIT2_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_0_INQ_PRF_FLIT3_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_PT_5_0_INQ_PRF_FLIT3_FILTERING_SETUP',
    LABEL => 'AR_RTR_PT_5_0_INQ_PRF_FLIT3_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_0_INQ_PRF_FLIT3_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_0_INQ_PRF_FLIT3_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_PT_5_0_INQ_PRF_FLIT3_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_PT_5_0_INQ_PRF_FLIT3_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Enable this compare',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_0_INQ_PRF_FLIT3_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_0_INQ_PRF_FLIT3_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_PT_5_0_INQ_PRF_FLIT3_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_PT_5_0_INQ_PRF_FLIT3_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Pointer indicating which flit in the packet should be compared against this signature',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_0_INQ_PRF_FLIT3_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_0_INQ_PRF_FLIT3_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_PT_5_0_INQ_PRF_FLIT3_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_PT_5_0_INQ_PRF_FLIT3_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Compare pattern with the flit specified by FLIT_PTR',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_0_INQ_PRF_FLIT3_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_1_INQ_PRF_FLIT3_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_PT_5_1_INQ_PRF_FLIT3_FILTERING_SETUP',
    LABEL => 'AR_RTR_PT_5_1_INQ_PRF_FLIT3_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_1_INQ_PRF_FLIT3_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_1_INQ_PRF_FLIT3_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_PT_5_1_INQ_PRF_FLIT3_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_PT_5_1_INQ_PRF_FLIT3_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Enable this compare',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_1_INQ_PRF_FLIT3_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_1_INQ_PRF_FLIT3_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_PT_5_1_INQ_PRF_FLIT3_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_PT_5_1_INQ_PRF_FLIT3_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Pointer indicating which flit in the packet should be compared against this signature',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_1_INQ_PRF_FLIT3_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_1_INQ_PRF_FLIT3_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_PT_5_1_INQ_PRF_FLIT3_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_PT_5_1_INQ_PRF_FLIT3_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Compare pattern with the flit specified by FLIT_PTR',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_1_INQ_PRF_FLIT3_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_2_INQ_PRF_FLIT3_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_PT_5_2_INQ_PRF_FLIT3_FILTERING_SETUP',
    LABEL => 'AR_RTR_PT_5_2_INQ_PRF_FLIT3_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_2_INQ_PRF_FLIT3_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_2_INQ_PRF_FLIT3_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_PT_5_2_INQ_PRF_FLIT3_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_PT_5_2_INQ_PRF_FLIT3_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Enable this compare',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_2_INQ_PRF_FLIT3_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_2_INQ_PRF_FLIT3_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_PT_5_2_INQ_PRF_FLIT3_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_PT_5_2_INQ_PRF_FLIT3_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Pointer indicating which flit in the packet should be compared against this signature',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_2_INQ_PRF_FLIT3_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_2_INQ_PRF_FLIT3_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_PT_5_2_INQ_PRF_FLIT3_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_PT_5_2_INQ_PRF_FLIT3_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Compare pattern with the flit specified by FLIT_PTR',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_2_INQ_PRF_FLIT3_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_3_INQ_PRF_FLIT3_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_PT_5_3_INQ_PRF_FLIT3_FILTERING_SETUP',
    LABEL => 'AR_RTR_PT_5_3_INQ_PRF_FLIT3_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_3_INQ_PRF_FLIT3_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_3_INQ_PRF_FLIT3_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_PT_5_3_INQ_PRF_FLIT3_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_PT_5_3_INQ_PRF_FLIT3_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Enable this compare',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_3_INQ_PRF_FLIT3_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_3_INQ_PRF_FLIT3_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_PT_5_3_INQ_PRF_FLIT3_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_PT_5_3_INQ_PRF_FLIT3_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Pointer indicating which flit in the packet should be compared against this signature',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_3_INQ_PRF_FLIT3_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_3_INQ_PRF_FLIT3_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_PT_5_3_INQ_PRF_FLIT3_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_PT_5_3_INQ_PRF_FLIT3_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Compare pattern with the flit specified by FLIT_PTR',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_3_INQ_PRF_FLIT3_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_4_INQ_PRF_FLIT3_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_PT_5_4_INQ_PRF_FLIT3_FILTERING_SETUP',
    LABEL => 'AR_RTR_PT_5_4_INQ_PRF_FLIT3_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_4_INQ_PRF_FLIT3_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_4_INQ_PRF_FLIT3_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_PT_5_4_INQ_PRF_FLIT3_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_PT_5_4_INQ_PRF_FLIT3_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Enable this compare',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_4_INQ_PRF_FLIT3_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_4_INQ_PRF_FLIT3_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_PT_5_4_INQ_PRF_FLIT3_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_PT_5_4_INQ_PRF_FLIT3_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Pointer indicating which flit in the packet should be compared against this signature',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_4_INQ_PRF_FLIT3_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_4_INQ_PRF_FLIT3_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_PT_5_4_INQ_PRF_FLIT3_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_PT_5_4_INQ_PRF_FLIT3_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Compare pattern with the flit specified by FLIT_PTR',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_4_INQ_PRF_FLIT3_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_5_INQ_PRF_FLIT3_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_PT_5_5_INQ_PRF_FLIT3_FILTERING_SETUP',
    LABEL => 'AR_RTR_PT_5_5_INQ_PRF_FLIT3_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_5_INQ_PRF_FLIT3_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_5_INQ_PRF_FLIT3_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_PT_5_5_INQ_PRF_FLIT3_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_PT_5_5_INQ_PRF_FLIT3_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Enable this compare',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_5_INQ_PRF_FLIT3_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_5_INQ_PRF_FLIT3_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_PT_5_5_INQ_PRF_FLIT3_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_PT_5_5_INQ_PRF_FLIT3_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Pointer indicating which flit in the packet should be compared against this signature',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_5_INQ_PRF_FLIT3_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_5_INQ_PRF_FLIT3_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_PT_5_5_INQ_PRF_FLIT3_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_PT_5_5_INQ_PRF_FLIT3_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Compare pattern with the flit specified by FLIT_PTR',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_5_INQ_PRF_FLIT3_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_6_INQ_PRF_FLIT3_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_PT_5_6_INQ_PRF_FLIT3_FILTERING_SETUP',
    LABEL => 'AR_RTR_PT_5_6_INQ_PRF_FLIT3_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_6_INQ_PRF_FLIT3_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_6_INQ_PRF_FLIT3_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_PT_5_6_INQ_PRF_FLIT3_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_PT_5_6_INQ_PRF_FLIT3_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Enable this compare',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_6_INQ_PRF_FLIT3_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_6_INQ_PRF_FLIT3_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_PT_5_6_INQ_PRF_FLIT3_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_PT_5_6_INQ_PRF_FLIT3_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Pointer indicating which flit in the packet should be compared against this signature',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_6_INQ_PRF_FLIT3_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_6_INQ_PRF_FLIT3_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_PT_5_6_INQ_PRF_FLIT3_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_PT_5_6_INQ_PRF_FLIT3_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Compare pattern with the flit specified by FLIT_PTR',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_6_INQ_PRF_FLIT3_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_7_INQ_PRF_FLIT3_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_PT_5_7_INQ_PRF_FLIT3_FILTERING_SETUP',
    LABEL => 'AR_RTR_PT_5_7_INQ_PRF_FLIT3_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_7_INQ_PRF_FLIT3_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_7_INQ_PRF_FLIT3_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_PT_5_7_INQ_PRF_FLIT3_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_PT_5_7_INQ_PRF_FLIT3_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Enable this compare',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_7_INQ_PRF_FLIT3_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_7_INQ_PRF_FLIT3_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_PT_5_7_INQ_PRF_FLIT3_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_PT_5_7_INQ_PRF_FLIT3_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Pointer indicating which flit in the packet should be compared against this signature',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_7_INQ_PRF_FLIT3_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_7_INQ_PRF_FLIT3_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_PT_5_7_INQ_PRF_FLIT3_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_PT_5_7_INQ_PRF_FLIT3_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Compare pattern with the flit specified by FLIT_PTR',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_7_INQ_PRF_FLIT3_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_0_INQ_PRF_FLIT3_FILTERING_MASK'} = {
    NAME => 'AR_RTR_PT_5_0_INQ_PRF_FLIT3_FILTERING_MASK',
    LABEL => 'AR_RTR_PT_5_0_INQ_PRF_FLIT3_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_0_INQ_PRF_FLIT3_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_0_INQ_PRF_FLIT3_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_PT_5_0_INQ_PRF_FLIT3_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_PT_5_0_INQ_PRF_FLIT3_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the patter compare',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_0_INQ_PRF_FLIT3_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_1_INQ_PRF_FLIT3_FILTERING_MASK'} = {
    NAME => 'AR_RTR_PT_5_1_INQ_PRF_FLIT3_FILTERING_MASK',
    LABEL => 'AR_RTR_PT_5_1_INQ_PRF_FLIT3_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_1_INQ_PRF_FLIT3_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_1_INQ_PRF_FLIT3_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_PT_5_1_INQ_PRF_FLIT3_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_PT_5_1_INQ_PRF_FLIT3_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the patter compare',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_1_INQ_PRF_FLIT3_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_2_INQ_PRF_FLIT3_FILTERING_MASK'} = {
    NAME => 'AR_RTR_PT_5_2_INQ_PRF_FLIT3_FILTERING_MASK',
    LABEL => 'AR_RTR_PT_5_2_INQ_PRF_FLIT3_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_2_INQ_PRF_FLIT3_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_2_INQ_PRF_FLIT3_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_PT_5_2_INQ_PRF_FLIT3_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_PT_5_2_INQ_PRF_FLIT3_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the patter compare',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_2_INQ_PRF_FLIT3_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_3_INQ_PRF_FLIT3_FILTERING_MASK'} = {
    NAME => 'AR_RTR_PT_5_3_INQ_PRF_FLIT3_FILTERING_MASK',
    LABEL => 'AR_RTR_PT_5_3_INQ_PRF_FLIT3_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_3_INQ_PRF_FLIT3_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_3_INQ_PRF_FLIT3_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_PT_5_3_INQ_PRF_FLIT3_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_PT_5_3_INQ_PRF_FLIT3_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the patter compare',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_3_INQ_PRF_FLIT3_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_4_INQ_PRF_FLIT3_FILTERING_MASK'} = {
    NAME => 'AR_RTR_PT_5_4_INQ_PRF_FLIT3_FILTERING_MASK',
    LABEL => 'AR_RTR_PT_5_4_INQ_PRF_FLIT3_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_4_INQ_PRF_FLIT3_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_4_INQ_PRF_FLIT3_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_PT_5_4_INQ_PRF_FLIT3_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_PT_5_4_INQ_PRF_FLIT3_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the patter compare',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_4_INQ_PRF_FLIT3_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_5_INQ_PRF_FLIT3_FILTERING_MASK'} = {
    NAME => 'AR_RTR_PT_5_5_INQ_PRF_FLIT3_FILTERING_MASK',
    LABEL => 'AR_RTR_PT_5_5_INQ_PRF_FLIT3_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_5_INQ_PRF_FLIT3_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_5_INQ_PRF_FLIT3_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_PT_5_5_INQ_PRF_FLIT3_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_PT_5_5_INQ_PRF_FLIT3_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the patter compare',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_5_INQ_PRF_FLIT3_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_6_INQ_PRF_FLIT3_FILTERING_MASK'} = {
    NAME => 'AR_RTR_PT_5_6_INQ_PRF_FLIT3_FILTERING_MASK',
    LABEL => 'AR_RTR_PT_5_6_INQ_PRF_FLIT3_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_6_INQ_PRF_FLIT3_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_6_INQ_PRF_FLIT3_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_PT_5_6_INQ_PRF_FLIT3_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_PT_5_6_INQ_PRF_FLIT3_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the patter compare',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_6_INQ_PRF_FLIT3_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_7_INQ_PRF_FLIT3_FILTERING_MASK'} = {
    NAME => 'AR_RTR_PT_5_7_INQ_PRF_FLIT3_FILTERING_MASK',
    LABEL => 'AR_RTR_PT_5_7_INQ_PRF_FLIT3_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_7_INQ_PRF_FLIT3_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_7_INQ_PRF_FLIT3_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_PT_5_7_INQ_PRF_FLIT3_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_PT_5_7_INQ_PRF_FLIT3_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the patter compare',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_7_INQ_PRF_FLIT3_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_0_INQ_PRF_FLIT4_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_PT_5_0_INQ_PRF_FLIT4_FILTERING_SETUP',
    LABEL => 'AR_RTR_PT_5_0_INQ_PRF_FLIT4_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_0_INQ_PRF_FLIT4_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_0_INQ_PRF_FLIT4_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_PT_5_0_INQ_PRF_FLIT4_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_PT_5_0_INQ_PRF_FLIT4_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_PT_INQ_INCOMING_PKT_VC4_FILTER_FLIT4_CNT counts on the number of matching flits based on this setup register',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_0_INQ_PRF_FLIT4_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_0_INQ_PRF_FLIT4_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_PT_5_0_INQ_PRF_FLIT4_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_PT_5_0_INQ_PRF_FLIT4_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Pointer indicating which flit in the packet should be compared against this signature',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_0_INQ_PRF_FLIT4_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_0_INQ_PRF_FLIT4_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_PT_5_0_INQ_PRF_FLIT4_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_PT_5_0_INQ_PRF_FLIT4_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Compare pattern with the flit specified by FLIT_PTR',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_0_INQ_PRF_FLIT4_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_1_INQ_PRF_FLIT4_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_PT_5_1_INQ_PRF_FLIT4_FILTERING_SETUP',
    LABEL => 'AR_RTR_PT_5_1_INQ_PRF_FLIT4_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_1_INQ_PRF_FLIT4_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_1_INQ_PRF_FLIT4_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_PT_5_1_INQ_PRF_FLIT4_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_PT_5_1_INQ_PRF_FLIT4_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_PT_INQ_INCOMING_PKT_VC4_FILTER_FLIT4_CNT counts on the number of matching flits based on this setup register',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_1_INQ_PRF_FLIT4_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_1_INQ_PRF_FLIT4_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_PT_5_1_INQ_PRF_FLIT4_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_PT_5_1_INQ_PRF_FLIT4_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Pointer indicating which flit in the packet should be compared against this signature',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_1_INQ_PRF_FLIT4_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_1_INQ_PRF_FLIT4_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_PT_5_1_INQ_PRF_FLIT4_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_PT_5_1_INQ_PRF_FLIT4_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Compare pattern with the flit specified by FLIT_PTR',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_1_INQ_PRF_FLIT4_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_2_INQ_PRF_FLIT4_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_PT_5_2_INQ_PRF_FLIT4_FILTERING_SETUP',
    LABEL => 'AR_RTR_PT_5_2_INQ_PRF_FLIT4_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_2_INQ_PRF_FLIT4_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_2_INQ_PRF_FLIT4_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_PT_5_2_INQ_PRF_FLIT4_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_PT_5_2_INQ_PRF_FLIT4_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_PT_INQ_INCOMING_PKT_VC4_FILTER_FLIT4_CNT counts on the number of matching flits based on this setup register',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_2_INQ_PRF_FLIT4_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_2_INQ_PRF_FLIT4_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_PT_5_2_INQ_PRF_FLIT4_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_PT_5_2_INQ_PRF_FLIT4_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Pointer indicating which flit in the packet should be compared against this signature',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_2_INQ_PRF_FLIT4_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_2_INQ_PRF_FLIT4_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_PT_5_2_INQ_PRF_FLIT4_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_PT_5_2_INQ_PRF_FLIT4_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Compare pattern with the flit specified by FLIT_PTR',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_2_INQ_PRF_FLIT4_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_3_INQ_PRF_FLIT4_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_PT_5_3_INQ_PRF_FLIT4_FILTERING_SETUP',
    LABEL => 'AR_RTR_PT_5_3_INQ_PRF_FLIT4_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_3_INQ_PRF_FLIT4_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_3_INQ_PRF_FLIT4_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_PT_5_3_INQ_PRF_FLIT4_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_PT_5_3_INQ_PRF_FLIT4_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_PT_INQ_INCOMING_PKT_VC4_FILTER_FLIT4_CNT counts on the number of matching flits based on this setup register',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_3_INQ_PRF_FLIT4_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_3_INQ_PRF_FLIT4_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_PT_5_3_INQ_PRF_FLIT4_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_PT_5_3_INQ_PRF_FLIT4_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Pointer indicating which flit in the packet should be compared against this signature',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_3_INQ_PRF_FLIT4_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_3_INQ_PRF_FLIT4_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_PT_5_3_INQ_PRF_FLIT4_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_PT_5_3_INQ_PRF_FLIT4_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Compare pattern with the flit specified by FLIT_PTR',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_3_INQ_PRF_FLIT4_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_4_INQ_PRF_FLIT4_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_PT_5_4_INQ_PRF_FLIT4_FILTERING_SETUP',
    LABEL => 'AR_RTR_PT_5_4_INQ_PRF_FLIT4_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_4_INQ_PRF_FLIT4_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_4_INQ_PRF_FLIT4_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_PT_5_4_INQ_PRF_FLIT4_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_PT_5_4_INQ_PRF_FLIT4_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_PT_INQ_INCOMING_PKT_VC4_FILTER_FLIT4_CNT counts on the number of matching flits based on this setup register',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_4_INQ_PRF_FLIT4_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_4_INQ_PRF_FLIT4_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_PT_5_4_INQ_PRF_FLIT4_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_PT_5_4_INQ_PRF_FLIT4_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Pointer indicating which flit in the packet should be compared against this signature',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_4_INQ_PRF_FLIT4_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_4_INQ_PRF_FLIT4_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_PT_5_4_INQ_PRF_FLIT4_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_PT_5_4_INQ_PRF_FLIT4_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Compare pattern with the flit specified by FLIT_PTR',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_4_INQ_PRF_FLIT4_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_5_INQ_PRF_FLIT4_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_PT_5_5_INQ_PRF_FLIT4_FILTERING_SETUP',
    LABEL => 'AR_RTR_PT_5_5_INQ_PRF_FLIT4_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_5_INQ_PRF_FLIT4_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_5_INQ_PRF_FLIT4_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_PT_5_5_INQ_PRF_FLIT4_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_PT_5_5_INQ_PRF_FLIT4_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_PT_INQ_INCOMING_PKT_VC4_FILTER_FLIT4_CNT counts on the number of matching flits based on this setup register',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_5_INQ_PRF_FLIT4_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_5_INQ_PRF_FLIT4_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_PT_5_5_INQ_PRF_FLIT4_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_PT_5_5_INQ_PRF_FLIT4_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Pointer indicating which flit in the packet should be compared against this signature',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_5_INQ_PRF_FLIT4_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_5_INQ_PRF_FLIT4_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_PT_5_5_INQ_PRF_FLIT4_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_PT_5_5_INQ_PRF_FLIT4_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Compare pattern with the flit specified by FLIT_PTR',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_5_INQ_PRF_FLIT4_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_6_INQ_PRF_FLIT4_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_PT_5_6_INQ_PRF_FLIT4_FILTERING_SETUP',
    LABEL => 'AR_RTR_PT_5_6_INQ_PRF_FLIT4_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_6_INQ_PRF_FLIT4_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_6_INQ_PRF_FLIT4_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_PT_5_6_INQ_PRF_FLIT4_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_PT_5_6_INQ_PRF_FLIT4_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_PT_INQ_INCOMING_PKT_VC4_FILTER_FLIT4_CNT counts on the number of matching flits based on this setup register',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_6_INQ_PRF_FLIT4_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_6_INQ_PRF_FLIT4_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_PT_5_6_INQ_PRF_FLIT4_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_PT_5_6_INQ_PRF_FLIT4_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Pointer indicating which flit in the packet should be compared against this signature',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_6_INQ_PRF_FLIT4_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_6_INQ_PRF_FLIT4_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_PT_5_6_INQ_PRF_FLIT4_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_PT_5_6_INQ_PRF_FLIT4_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Compare pattern with the flit specified by FLIT_PTR',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_6_INQ_PRF_FLIT4_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_7_INQ_PRF_FLIT4_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_PT_5_7_INQ_PRF_FLIT4_FILTERING_SETUP',
    LABEL => 'AR_RTR_PT_5_7_INQ_PRF_FLIT4_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_7_INQ_PRF_FLIT4_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_7_INQ_PRF_FLIT4_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_PT_5_7_INQ_PRF_FLIT4_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_PT_5_7_INQ_PRF_FLIT4_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When this is set, AR_RTR_PT_INQ_INCOMING_PKT_VC4_FILTER_FLIT4_CNT counts on the number of matching flits based on this setup register',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_7_INQ_PRF_FLIT4_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_7_INQ_PRF_FLIT4_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_PT_5_7_INQ_PRF_FLIT4_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_PT_5_7_INQ_PRF_FLIT4_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Pointer indicating which flit in the packet should be compared against this signature',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_7_INQ_PRF_FLIT4_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_7_INQ_PRF_FLIT4_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_PT_5_7_INQ_PRF_FLIT4_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_PT_5_7_INQ_PRF_FLIT4_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Compare pattern with the flit specified by FLIT_PTR',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_7_INQ_PRF_FLIT4_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_0_INQ_PRF_FLIT4_FILTERING_MASK'} = {
    NAME => 'AR_RTR_PT_5_0_INQ_PRF_FLIT4_FILTERING_MASK',
    LABEL => 'AR_RTR_PT_5_0_INQ_PRF_FLIT4_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_0_INQ_PRF_FLIT4_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_0_INQ_PRF_FLIT4_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_PT_5_0_INQ_PRF_FLIT4_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_PT_5_0_INQ_PRF_FLIT4_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during pattern compare',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_0_INQ_PRF_FLIT4_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_1_INQ_PRF_FLIT4_FILTERING_MASK'} = {
    NAME => 'AR_RTR_PT_5_1_INQ_PRF_FLIT4_FILTERING_MASK',
    LABEL => 'AR_RTR_PT_5_1_INQ_PRF_FLIT4_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_1_INQ_PRF_FLIT4_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_1_INQ_PRF_FLIT4_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_PT_5_1_INQ_PRF_FLIT4_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_PT_5_1_INQ_PRF_FLIT4_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during pattern compare',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_1_INQ_PRF_FLIT4_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_2_INQ_PRF_FLIT4_FILTERING_MASK'} = {
    NAME => 'AR_RTR_PT_5_2_INQ_PRF_FLIT4_FILTERING_MASK',
    LABEL => 'AR_RTR_PT_5_2_INQ_PRF_FLIT4_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_2_INQ_PRF_FLIT4_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_2_INQ_PRF_FLIT4_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_PT_5_2_INQ_PRF_FLIT4_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_PT_5_2_INQ_PRF_FLIT4_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during pattern compare',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_2_INQ_PRF_FLIT4_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_3_INQ_PRF_FLIT4_FILTERING_MASK'} = {
    NAME => 'AR_RTR_PT_5_3_INQ_PRF_FLIT4_FILTERING_MASK',
    LABEL => 'AR_RTR_PT_5_3_INQ_PRF_FLIT4_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_3_INQ_PRF_FLIT4_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_3_INQ_PRF_FLIT4_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_PT_5_3_INQ_PRF_FLIT4_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_PT_5_3_INQ_PRF_FLIT4_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during pattern compare',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_3_INQ_PRF_FLIT4_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_4_INQ_PRF_FLIT4_FILTERING_MASK'} = {
    NAME => 'AR_RTR_PT_5_4_INQ_PRF_FLIT4_FILTERING_MASK',
    LABEL => 'AR_RTR_PT_5_4_INQ_PRF_FLIT4_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_4_INQ_PRF_FLIT4_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_4_INQ_PRF_FLIT4_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_PT_5_4_INQ_PRF_FLIT4_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_PT_5_4_INQ_PRF_FLIT4_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during pattern compare',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_4_INQ_PRF_FLIT4_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_5_INQ_PRF_FLIT4_FILTERING_MASK'} = {
    NAME => 'AR_RTR_PT_5_5_INQ_PRF_FLIT4_FILTERING_MASK',
    LABEL => 'AR_RTR_PT_5_5_INQ_PRF_FLIT4_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_5_INQ_PRF_FLIT4_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_5_INQ_PRF_FLIT4_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_PT_5_5_INQ_PRF_FLIT4_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_PT_5_5_INQ_PRF_FLIT4_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during pattern compare',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_5_INQ_PRF_FLIT4_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_6_INQ_PRF_FLIT4_FILTERING_MASK'} = {
    NAME => 'AR_RTR_PT_5_6_INQ_PRF_FLIT4_FILTERING_MASK',
    LABEL => 'AR_RTR_PT_5_6_INQ_PRF_FLIT4_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_6_INQ_PRF_FLIT4_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_6_INQ_PRF_FLIT4_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_PT_5_6_INQ_PRF_FLIT4_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_PT_5_6_INQ_PRF_FLIT4_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during pattern compare',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_6_INQ_PRF_FLIT4_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_7_INQ_PRF_FLIT4_FILTERING_MASK'} = {
    NAME => 'AR_RTR_PT_5_7_INQ_PRF_FLIT4_FILTERING_MASK',
    LABEL => 'AR_RTR_PT_5_7_INQ_PRF_FLIT4_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_7_INQ_PRF_FLIT4_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_7_INQ_PRF_FLIT4_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_PT_5_7_INQ_PRF_FLIT4_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_PT_5_7_INQ_PRF_FLIT4_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during pattern compare',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_7_INQ_PRF_FLIT4_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_0_INQ_PRF_FLIT5_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_PT_5_0_INQ_PRF_FLIT5_FILTERING_SETUP',
    LABEL => 'AR_RTR_PT_5_0_INQ_PRF_FLIT5_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_0_INQ_PRF_FLIT5_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_0_INQ_PRF_FLIT5_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_PT_5_0_INQ_PRF_FLIT5_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_PT_5_0_INQ_PRF_FLIT5_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Enable this compare',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_0_INQ_PRF_FLIT5_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_0_INQ_PRF_FLIT5_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_PT_5_0_INQ_PRF_FLIT5_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_PT_5_0_INQ_PRF_FLIT5_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Pointer indicating which flit in the packet should be compared against this signature',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_0_INQ_PRF_FLIT5_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_0_INQ_PRF_FLIT5_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_PT_5_0_INQ_PRF_FLIT5_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_PT_5_0_INQ_PRF_FLIT5_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Compare pattern with the flit specified by FLIT_PTR',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_0_INQ_PRF_FLIT5_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_1_INQ_PRF_FLIT5_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_PT_5_1_INQ_PRF_FLIT5_FILTERING_SETUP',
    LABEL => 'AR_RTR_PT_5_1_INQ_PRF_FLIT5_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_1_INQ_PRF_FLIT5_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_1_INQ_PRF_FLIT5_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_PT_5_1_INQ_PRF_FLIT5_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_PT_5_1_INQ_PRF_FLIT5_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Enable this compare',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_1_INQ_PRF_FLIT5_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_1_INQ_PRF_FLIT5_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_PT_5_1_INQ_PRF_FLIT5_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_PT_5_1_INQ_PRF_FLIT5_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Pointer indicating which flit in the packet should be compared against this signature',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_1_INQ_PRF_FLIT5_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_1_INQ_PRF_FLIT5_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_PT_5_1_INQ_PRF_FLIT5_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_PT_5_1_INQ_PRF_FLIT5_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Compare pattern with the flit specified by FLIT_PTR',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_1_INQ_PRF_FLIT5_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_2_INQ_PRF_FLIT5_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_PT_5_2_INQ_PRF_FLIT5_FILTERING_SETUP',
    LABEL => 'AR_RTR_PT_5_2_INQ_PRF_FLIT5_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_2_INQ_PRF_FLIT5_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_2_INQ_PRF_FLIT5_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_PT_5_2_INQ_PRF_FLIT5_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_PT_5_2_INQ_PRF_FLIT5_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Enable this compare',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_2_INQ_PRF_FLIT5_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_2_INQ_PRF_FLIT5_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_PT_5_2_INQ_PRF_FLIT5_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_PT_5_2_INQ_PRF_FLIT5_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Pointer indicating which flit in the packet should be compared against this signature',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_2_INQ_PRF_FLIT5_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_2_INQ_PRF_FLIT5_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_PT_5_2_INQ_PRF_FLIT5_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_PT_5_2_INQ_PRF_FLIT5_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Compare pattern with the flit specified by FLIT_PTR',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_2_INQ_PRF_FLIT5_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_3_INQ_PRF_FLIT5_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_PT_5_3_INQ_PRF_FLIT5_FILTERING_SETUP',
    LABEL => 'AR_RTR_PT_5_3_INQ_PRF_FLIT5_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_3_INQ_PRF_FLIT5_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_3_INQ_PRF_FLIT5_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_PT_5_3_INQ_PRF_FLIT5_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_PT_5_3_INQ_PRF_FLIT5_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Enable this compare',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_3_INQ_PRF_FLIT5_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_3_INQ_PRF_FLIT5_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_PT_5_3_INQ_PRF_FLIT5_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_PT_5_3_INQ_PRF_FLIT5_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Pointer indicating which flit in the packet should be compared against this signature',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_3_INQ_PRF_FLIT5_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_3_INQ_PRF_FLIT5_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_PT_5_3_INQ_PRF_FLIT5_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_PT_5_3_INQ_PRF_FLIT5_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Compare pattern with the flit specified by FLIT_PTR',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_3_INQ_PRF_FLIT5_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_4_INQ_PRF_FLIT5_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_PT_5_4_INQ_PRF_FLIT5_FILTERING_SETUP',
    LABEL => 'AR_RTR_PT_5_4_INQ_PRF_FLIT5_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_4_INQ_PRF_FLIT5_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_4_INQ_PRF_FLIT5_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_PT_5_4_INQ_PRF_FLIT5_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_PT_5_4_INQ_PRF_FLIT5_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Enable this compare',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_4_INQ_PRF_FLIT5_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_4_INQ_PRF_FLIT5_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_PT_5_4_INQ_PRF_FLIT5_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_PT_5_4_INQ_PRF_FLIT5_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Pointer indicating which flit in the packet should be compared against this signature',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_4_INQ_PRF_FLIT5_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_4_INQ_PRF_FLIT5_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_PT_5_4_INQ_PRF_FLIT5_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_PT_5_4_INQ_PRF_FLIT5_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Compare pattern with the flit specified by FLIT_PTR',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_4_INQ_PRF_FLIT5_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_5_INQ_PRF_FLIT5_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_PT_5_5_INQ_PRF_FLIT5_FILTERING_SETUP',
    LABEL => 'AR_RTR_PT_5_5_INQ_PRF_FLIT5_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_5_INQ_PRF_FLIT5_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_5_INQ_PRF_FLIT5_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_PT_5_5_INQ_PRF_FLIT5_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_PT_5_5_INQ_PRF_FLIT5_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Enable this compare',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_5_INQ_PRF_FLIT5_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_5_INQ_PRF_FLIT5_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_PT_5_5_INQ_PRF_FLIT5_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_PT_5_5_INQ_PRF_FLIT5_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Pointer indicating which flit in the packet should be compared against this signature',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_5_INQ_PRF_FLIT5_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_5_INQ_PRF_FLIT5_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_PT_5_5_INQ_PRF_FLIT5_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_PT_5_5_INQ_PRF_FLIT5_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Compare pattern with the flit specified by FLIT_PTR',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_5_INQ_PRF_FLIT5_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_6_INQ_PRF_FLIT5_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_PT_5_6_INQ_PRF_FLIT5_FILTERING_SETUP',
    LABEL => 'AR_RTR_PT_5_6_INQ_PRF_FLIT5_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_6_INQ_PRF_FLIT5_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_6_INQ_PRF_FLIT5_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_PT_5_6_INQ_PRF_FLIT5_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_PT_5_6_INQ_PRF_FLIT5_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Enable this compare',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_6_INQ_PRF_FLIT5_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_6_INQ_PRF_FLIT5_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_PT_5_6_INQ_PRF_FLIT5_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_PT_5_6_INQ_PRF_FLIT5_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Pointer indicating which flit in the packet should be compared against this signature',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_6_INQ_PRF_FLIT5_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_6_INQ_PRF_FLIT5_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_PT_5_6_INQ_PRF_FLIT5_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_PT_5_6_INQ_PRF_FLIT5_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Compare pattern with the flit specified by FLIT_PTR',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_6_INQ_PRF_FLIT5_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_7_INQ_PRF_FLIT5_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_PT_5_7_INQ_PRF_FLIT5_FILTERING_SETUP',
    LABEL => 'AR_RTR_PT_5_7_INQ_PRF_FLIT5_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_7_INQ_PRF_FLIT5_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_7_INQ_PRF_FLIT5_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_PT_5_7_INQ_PRF_FLIT5_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_PT_5_7_INQ_PRF_FLIT5_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Enable this compare',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_7_INQ_PRF_FLIT5_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_7_INQ_PRF_FLIT5_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_PT_5_7_INQ_PRF_FLIT5_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_PT_5_7_INQ_PRF_FLIT5_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Pointer indicating which flit in the packet should be compared against this signature',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_7_INQ_PRF_FLIT5_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_7_INQ_PRF_FLIT5_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_PT_5_7_INQ_PRF_FLIT5_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_PT_5_7_INQ_PRF_FLIT5_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Compare pattern with the flit specified by FLIT_PTR',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_7_INQ_PRF_FLIT5_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_0_INQ_PRF_FLIT5_FILTERING_MASK'} = {
    NAME => 'AR_RTR_PT_5_0_INQ_PRF_FLIT5_FILTERING_MASK',
    LABEL => 'AR_RTR_PT_5_0_INQ_PRF_FLIT5_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_0_INQ_PRF_FLIT5_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_0_INQ_PRF_FLIT5_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_PT_5_0_INQ_PRF_FLIT5_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_PT_5_0_INQ_PRF_FLIT5_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_0_INQ_PRF_FLIT5_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_1_INQ_PRF_FLIT5_FILTERING_MASK'} = {
    NAME => 'AR_RTR_PT_5_1_INQ_PRF_FLIT5_FILTERING_MASK',
    LABEL => 'AR_RTR_PT_5_1_INQ_PRF_FLIT5_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_1_INQ_PRF_FLIT5_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_1_INQ_PRF_FLIT5_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_PT_5_1_INQ_PRF_FLIT5_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_PT_5_1_INQ_PRF_FLIT5_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_1_INQ_PRF_FLIT5_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_2_INQ_PRF_FLIT5_FILTERING_MASK'} = {
    NAME => 'AR_RTR_PT_5_2_INQ_PRF_FLIT5_FILTERING_MASK',
    LABEL => 'AR_RTR_PT_5_2_INQ_PRF_FLIT5_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_2_INQ_PRF_FLIT5_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_2_INQ_PRF_FLIT5_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_PT_5_2_INQ_PRF_FLIT5_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_PT_5_2_INQ_PRF_FLIT5_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_2_INQ_PRF_FLIT5_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_3_INQ_PRF_FLIT5_FILTERING_MASK'} = {
    NAME => 'AR_RTR_PT_5_3_INQ_PRF_FLIT5_FILTERING_MASK',
    LABEL => 'AR_RTR_PT_5_3_INQ_PRF_FLIT5_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_3_INQ_PRF_FLIT5_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_3_INQ_PRF_FLIT5_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_PT_5_3_INQ_PRF_FLIT5_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_PT_5_3_INQ_PRF_FLIT5_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_3_INQ_PRF_FLIT5_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_4_INQ_PRF_FLIT5_FILTERING_MASK'} = {
    NAME => 'AR_RTR_PT_5_4_INQ_PRF_FLIT5_FILTERING_MASK',
    LABEL => 'AR_RTR_PT_5_4_INQ_PRF_FLIT5_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_4_INQ_PRF_FLIT5_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_4_INQ_PRF_FLIT5_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_PT_5_4_INQ_PRF_FLIT5_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_PT_5_4_INQ_PRF_FLIT5_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_4_INQ_PRF_FLIT5_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_5_INQ_PRF_FLIT5_FILTERING_MASK'} = {
    NAME => 'AR_RTR_PT_5_5_INQ_PRF_FLIT5_FILTERING_MASK',
    LABEL => 'AR_RTR_PT_5_5_INQ_PRF_FLIT5_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_5_INQ_PRF_FLIT5_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_5_INQ_PRF_FLIT5_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_PT_5_5_INQ_PRF_FLIT5_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_PT_5_5_INQ_PRF_FLIT5_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_5_INQ_PRF_FLIT5_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_6_INQ_PRF_FLIT5_FILTERING_MASK'} = {
    NAME => 'AR_RTR_PT_5_6_INQ_PRF_FLIT5_FILTERING_MASK',
    LABEL => 'AR_RTR_PT_5_6_INQ_PRF_FLIT5_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_6_INQ_PRF_FLIT5_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_6_INQ_PRF_FLIT5_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_PT_5_6_INQ_PRF_FLIT5_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_PT_5_6_INQ_PRF_FLIT5_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_6_INQ_PRF_FLIT5_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_7_INQ_PRF_FLIT5_FILTERING_MASK'} = {
    NAME => 'AR_RTR_PT_5_7_INQ_PRF_FLIT5_FILTERING_MASK',
    LABEL => 'AR_RTR_PT_5_7_INQ_PRF_FLIT5_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_7_INQ_PRF_FLIT5_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_7_INQ_PRF_FLIT5_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_PT_5_7_INQ_PRF_FLIT5_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_PT_5_7_INQ_PRF_FLIT5_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the pattern compare',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_7_INQ_PRF_FLIT5_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_0_INQ_PRF_FLIT6_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_PT_5_0_INQ_PRF_FLIT6_FILTERING_SETUP',
    LABEL => 'AR_RTR_PT_5_0_INQ_PRF_FLIT6_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_0_INQ_PRF_FLIT6_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_0_INQ_PRF_FLIT6_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_PT_5_0_INQ_PRF_FLIT6_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_PT_5_0_INQ_PRF_FLIT6_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Enable this compare',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_0_INQ_PRF_FLIT6_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_0_INQ_PRF_FLIT6_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_PT_5_0_INQ_PRF_FLIT6_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_PT_5_0_INQ_PRF_FLIT6_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Pointer indicating which flit in the packet should be compared against this signature',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_0_INQ_PRF_FLIT6_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_0_INQ_PRF_FLIT6_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_PT_5_0_INQ_PRF_FLIT6_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_PT_5_0_INQ_PRF_FLIT6_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Compare pattern with the flit specified by FLIT_PTR',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_0_INQ_PRF_FLIT6_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_1_INQ_PRF_FLIT6_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_PT_5_1_INQ_PRF_FLIT6_FILTERING_SETUP',
    LABEL => 'AR_RTR_PT_5_1_INQ_PRF_FLIT6_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_1_INQ_PRF_FLIT6_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_1_INQ_PRF_FLIT6_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_PT_5_1_INQ_PRF_FLIT6_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_PT_5_1_INQ_PRF_FLIT6_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Enable this compare',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_1_INQ_PRF_FLIT6_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_1_INQ_PRF_FLIT6_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_PT_5_1_INQ_PRF_FLIT6_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_PT_5_1_INQ_PRF_FLIT6_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Pointer indicating which flit in the packet should be compared against this signature',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_1_INQ_PRF_FLIT6_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_1_INQ_PRF_FLIT6_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_PT_5_1_INQ_PRF_FLIT6_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_PT_5_1_INQ_PRF_FLIT6_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Compare pattern with the flit specified by FLIT_PTR',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_1_INQ_PRF_FLIT6_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_2_INQ_PRF_FLIT6_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_PT_5_2_INQ_PRF_FLIT6_FILTERING_SETUP',
    LABEL => 'AR_RTR_PT_5_2_INQ_PRF_FLIT6_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_2_INQ_PRF_FLIT6_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_2_INQ_PRF_FLIT6_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_PT_5_2_INQ_PRF_FLIT6_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_PT_5_2_INQ_PRF_FLIT6_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Enable this compare',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_2_INQ_PRF_FLIT6_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_2_INQ_PRF_FLIT6_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_PT_5_2_INQ_PRF_FLIT6_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_PT_5_2_INQ_PRF_FLIT6_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Pointer indicating which flit in the packet should be compared against this signature',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_2_INQ_PRF_FLIT6_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_2_INQ_PRF_FLIT6_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_PT_5_2_INQ_PRF_FLIT6_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_PT_5_2_INQ_PRF_FLIT6_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Compare pattern with the flit specified by FLIT_PTR',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_2_INQ_PRF_FLIT6_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_3_INQ_PRF_FLIT6_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_PT_5_3_INQ_PRF_FLIT6_FILTERING_SETUP',
    LABEL => 'AR_RTR_PT_5_3_INQ_PRF_FLIT6_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_3_INQ_PRF_FLIT6_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_3_INQ_PRF_FLIT6_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_PT_5_3_INQ_PRF_FLIT6_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_PT_5_3_INQ_PRF_FLIT6_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Enable this compare',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_3_INQ_PRF_FLIT6_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_3_INQ_PRF_FLIT6_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_PT_5_3_INQ_PRF_FLIT6_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_PT_5_3_INQ_PRF_FLIT6_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Pointer indicating which flit in the packet should be compared against this signature',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_3_INQ_PRF_FLIT6_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_3_INQ_PRF_FLIT6_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_PT_5_3_INQ_PRF_FLIT6_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_PT_5_3_INQ_PRF_FLIT6_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Compare pattern with the flit specified by FLIT_PTR',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_3_INQ_PRF_FLIT6_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_4_INQ_PRF_FLIT6_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_PT_5_4_INQ_PRF_FLIT6_FILTERING_SETUP',
    LABEL => 'AR_RTR_PT_5_4_INQ_PRF_FLIT6_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_4_INQ_PRF_FLIT6_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_4_INQ_PRF_FLIT6_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_PT_5_4_INQ_PRF_FLIT6_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_PT_5_4_INQ_PRF_FLIT6_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Enable this compare',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_4_INQ_PRF_FLIT6_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_4_INQ_PRF_FLIT6_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_PT_5_4_INQ_PRF_FLIT6_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_PT_5_4_INQ_PRF_FLIT6_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Pointer indicating which flit in the packet should be compared against this signature',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_4_INQ_PRF_FLIT6_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_4_INQ_PRF_FLIT6_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_PT_5_4_INQ_PRF_FLIT6_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_PT_5_4_INQ_PRF_FLIT6_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Compare pattern with the flit specified by FLIT_PTR',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_4_INQ_PRF_FLIT6_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_5_INQ_PRF_FLIT6_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_PT_5_5_INQ_PRF_FLIT6_FILTERING_SETUP',
    LABEL => 'AR_RTR_PT_5_5_INQ_PRF_FLIT6_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_5_INQ_PRF_FLIT6_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_5_INQ_PRF_FLIT6_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_PT_5_5_INQ_PRF_FLIT6_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_PT_5_5_INQ_PRF_FLIT6_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Enable this compare',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_5_INQ_PRF_FLIT6_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_5_INQ_PRF_FLIT6_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_PT_5_5_INQ_PRF_FLIT6_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_PT_5_5_INQ_PRF_FLIT6_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Pointer indicating which flit in the packet should be compared against this signature',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_5_INQ_PRF_FLIT6_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_5_INQ_PRF_FLIT6_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_PT_5_5_INQ_PRF_FLIT6_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_PT_5_5_INQ_PRF_FLIT6_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Compare pattern with the flit specified by FLIT_PTR',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_5_INQ_PRF_FLIT6_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_6_INQ_PRF_FLIT6_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_PT_5_6_INQ_PRF_FLIT6_FILTERING_SETUP',
    LABEL => 'AR_RTR_PT_5_6_INQ_PRF_FLIT6_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_6_INQ_PRF_FLIT6_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_6_INQ_PRF_FLIT6_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_PT_5_6_INQ_PRF_FLIT6_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_PT_5_6_INQ_PRF_FLIT6_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Enable this compare',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_6_INQ_PRF_FLIT6_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_6_INQ_PRF_FLIT6_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_PT_5_6_INQ_PRF_FLIT6_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_PT_5_6_INQ_PRF_FLIT6_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Pointer indicating which flit in the packet should be compared against this signature',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_6_INQ_PRF_FLIT6_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_6_INQ_PRF_FLIT6_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_PT_5_6_INQ_PRF_FLIT6_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_PT_5_6_INQ_PRF_FLIT6_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Compare pattern with the flit specified by FLIT_PTR',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_6_INQ_PRF_FLIT6_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_7_INQ_PRF_FLIT6_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_PT_5_7_INQ_PRF_FLIT6_FILTERING_SETUP',
    LABEL => 'AR_RTR_PT_5_7_INQ_PRF_FLIT6_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_7_INQ_PRF_FLIT6_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_7_INQ_PRF_FLIT6_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_PT_5_7_INQ_PRF_FLIT6_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_PT_5_7_INQ_PRF_FLIT6_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Enable this compare',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_7_INQ_PRF_FLIT6_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_7_INQ_PRF_FLIT6_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_PT_5_7_INQ_PRF_FLIT6_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_PT_5_7_INQ_PRF_FLIT6_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Pointer indicating which flit in the packet should be compared against this signature',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_7_INQ_PRF_FLIT6_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_7_INQ_PRF_FLIT6_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_PT_5_7_INQ_PRF_FLIT6_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_PT_5_7_INQ_PRF_FLIT6_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Compare pattern with the flit specified by FLIT_PTR',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_7_INQ_PRF_FLIT6_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_0_INQ_PRF_FLIT6_FILTERING_MASK'} = {
    NAME => 'AR_RTR_PT_5_0_INQ_PRF_FLIT6_FILTERING_MASK',
    LABEL => 'AR_RTR_PT_5_0_INQ_PRF_FLIT6_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_0_INQ_PRF_FLIT6_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_0_INQ_PRF_FLIT6_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_PT_5_0_INQ_PRF_FLIT6_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_PT_5_0_INQ_PRF_FLIT6_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the patter compare',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_0_INQ_PRF_FLIT6_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_1_INQ_PRF_FLIT6_FILTERING_MASK'} = {
    NAME => 'AR_RTR_PT_5_1_INQ_PRF_FLIT6_FILTERING_MASK',
    LABEL => 'AR_RTR_PT_5_1_INQ_PRF_FLIT6_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_1_INQ_PRF_FLIT6_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_1_INQ_PRF_FLIT6_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_PT_5_1_INQ_PRF_FLIT6_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_PT_5_1_INQ_PRF_FLIT6_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the patter compare',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_1_INQ_PRF_FLIT6_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_2_INQ_PRF_FLIT6_FILTERING_MASK'} = {
    NAME => 'AR_RTR_PT_5_2_INQ_PRF_FLIT6_FILTERING_MASK',
    LABEL => 'AR_RTR_PT_5_2_INQ_PRF_FLIT6_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_2_INQ_PRF_FLIT6_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_2_INQ_PRF_FLIT6_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_PT_5_2_INQ_PRF_FLIT6_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_PT_5_2_INQ_PRF_FLIT6_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the patter compare',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_2_INQ_PRF_FLIT6_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_3_INQ_PRF_FLIT6_FILTERING_MASK'} = {
    NAME => 'AR_RTR_PT_5_3_INQ_PRF_FLIT6_FILTERING_MASK',
    LABEL => 'AR_RTR_PT_5_3_INQ_PRF_FLIT6_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_3_INQ_PRF_FLIT6_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_3_INQ_PRF_FLIT6_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_PT_5_3_INQ_PRF_FLIT6_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_PT_5_3_INQ_PRF_FLIT6_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the patter compare',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_3_INQ_PRF_FLIT6_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_4_INQ_PRF_FLIT6_FILTERING_MASK'} = {
    NAME => 'AR_RTR_PT_5_4_INQ_PRF_FLIT6_FILTERING_MASK',
    LABEL => 'AR_RTR_PT_5_4_INQ_PRF_FLIT6_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_4_INQ_PRF_FLIT6_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_4_INQ_PRF_FLIT6_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_PT_5_4_INQ_PRF_FLIT6_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_PT_5_4_INQ_PRF_FLIT6_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the patter compare',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_4_INQ_PRF_FLIT6_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_5_INQ_PRF_FLIT6_FILTERING_MASK'} = {
    NAME => 'AR_RTR_PT_5_5_INQ_PRF_FLIT6_FILTERING_MASK',
    LABEL => 'AR_RTR_PT_5_5_INQ_PRF_FLIT6_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_5_INQ_PRF_FLIT6_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_5_INQ_PRF_FLIT6_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_PT_5_5_INQ_PRF_FLIT6_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_PT_5_5_INQ_PRF_FLIT6_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the patter compare',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_5_INQ_PRF_FLIT6_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_6_INQ_PRF_FLIT6_FILTERING_MASK'} = {
    NAME => 'AR_RTR_PT_5_6_INQ_PRF_FLIT6_FILTERING_MASK',
    LABEL => 'AR_RTR_PT_5_6_INQ_PRF_FLIT6_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_6_INQ_PRF_FLIT6_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_6_INQ_PRF_FLIT6_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_PT_5_6_INQ_PRF_FLIT6_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_PT_5_6_INQ_PRF_FLIT6_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the patter compare',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_6_INQ_PRF_FLIT6_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_7_INQ_PRF_FLIT6_FILTERING_MASK'} = {
    NAME => 'AR_RTR_PT_5_7_INQ_PRF_FLIT6_FILTERING_MASK',
    LABEL => 'AR_RTR_PT_5_7_INQ_PRF_FLIT6_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_7_INQ_PRF_FLIT6_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_7_INQ_PRF_FLIT6_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_PT_5_7_INQ_PRF_FLIT6_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_PT_5_7_INQ_PRF_FLIT6_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the patter compare',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_7_INQ_PRF_FLIT6_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_0_INQ_PRF_FLIT7_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_PT_5_0_INQ_PRF_FLIT7_FILTERING_SETUP',
    LABEL => 'AR_RTR_PT_5_0_INQ_PRF_FLIT7_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_0_INQ_PRF_FLIT7_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_0_INQ_PRF_FLIT7_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_PT_5_0_INQ_PRF_FLIT7_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_PT_5_0_INQ_PRF_FLIT7_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Enable this compare',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_0_INQ_PRF_FLIT7_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_0_INQ_PRF_FLIT7_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_PT_5_0_INQ_PRF_FLIT7_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_PT_5_0_INQ_PRF_FLIT7_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Pointer indicating which flit in the packet should be compared against this signature',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_0_INQ_PRF_FLIT7_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_0_INQ_PRF_FLIT7_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_PT_5_0_INQ_PRF_FLIT7_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_PT_5_0_INQ_PRF_FLIT7_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Compare pattern with the flit specified by FLIT_PTR',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_0_INQ_PRF_FLIT7_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_1_INQ_PRF_FLIT7_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_PT_5_1_INQ_PRF_FLIT7_FILTERING_SETUP',
    LABEL => 'AR_RTR_PT_5_1_INQ_PRF_FLIT7_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_1_INQ_PRF_FLIT7_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_1_INQ_PRF_FLIT7_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_PT_5_1_INQ_PRF_FLIT7_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_PT_5_1_INQ_PRF_FLIT7_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Enable this compare',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_1_INQ_PRF_FLIT7_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_1_INQ_PRF_FLIT7_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_PT_5_1_INQ_PRF_FLIT7_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_PT_5_1_INQ_PRF_FLIT7_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Pointer indicating which flit in the packet should be compared against this signature',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_1_INQ_PRF_FLIT7_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_1_INQ_PRF_FLIT7_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_PT_5_1_INQ_PRF_FLIT7_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_PT_5_1_INQ_PRF_FLIT7_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Compare pattern with the flit specified by FLIT_PTR',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_1_INQ_PRF_FLIT7_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_2_INQ_PRF_FLIT7_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_PT_5_2_INQ_PRF_FLIT7_FILTERING_SETUP',
    LABEL => 'AR_RTR_PT_5_2_INQ_PRF_FLIT7_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_2_INQ_PRF_FLIT7_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_2_INQ_PRF_FLIT7_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_PT_5_2_INQ_PRF_FLIT7_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_PT_5_2_INQ_PRF_FLIT7_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Enable this compare',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_2_INQ_PRF_FLIT7_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_2_INQ_PRF_FLIT7_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_PT_5_2_INQ_PRF_FLIT7_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_PT_5_2_INQ_PRF_FLIT7_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Pointer indicating which flit in the packet should be compared against this signature',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_2_INQ_PRF_FLIT7_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_2_INQ_PRF_FLIT7_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_PT_5_2_INQ_PRF_FLIT7_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_PT_5_2_INQ_PRF_FLIT7_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Compare pattern with the flit specified by FLIT_PTR',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_2_INQ_PRF_FLIT7_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_3_INQ_PRF_FLIT7_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_PT_5_3_INQ_PRF_FLIT7_FILTERING_SETUP',
    LABEL => 'AR_RTR_PT_5_3_INQ_PRF_FLIT7_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_3_INQ_PRF_FLIT7_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_3_INQ_PRF_FLIT7_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_PT_5_3_INQ_PRF_FLIT7_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_PT_5_3_INQ_PRF_FLIT7_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Enable this compare',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_3_INQ_PRF_FLIT7_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_3_INQ_PRF_FLIT7_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_PT_5_3_INQ_PRF_FLIT7_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_PT_5_3_INQ_PRF_FLIT7_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Pointer indicating which flit in the packet should be compared against this signature',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_3_INQ_PRF_FLIT7_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_3_INQ_PRF_FLIT7_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_PT_5_3_INQ_PRF_FLIT7_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_PT_5_3_INQ_PRF_FLIT7_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Compare pattern with the flit specified by FLIT_PTR',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_3_INQ_PRF_FLIT7_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_4_INQ_PRF_FLIT7_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_PT_5_4_INQ_PRF_FLIT7_FILTERING_SETUP',
    LABEL => 'AR_RTR_PT_5_4_INQ_PRF_FLIT7_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_4_INQ_PRF_FLIT7_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_4_INQ_PRF_FLIT7_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_PT_5_4_INQ_PRF_FLIT7_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_PT_5_4_INQ_PRF_FLIT7_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Enable this compare',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_4_INQ_PRF_FLIT7_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_4_INQ_PRF_FLIT7_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_PT_5_4_INQ_PRF_FLIT7_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_PT_5_4_INQ_PRF_FLIT7_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Pointer indicating which flit in the packet should be compared against this signature',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_4_INQ_PRF_FLIT7_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_4_INQ_PRF_FLIT7_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_PT_5_4_INQ_PRF_FLIT7_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_PT_5_4_INQ_PRF_FLIT7_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Compare pattern with the flit specified by FLIT_PTR',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_4_INQ_PRF_FLIT7_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_5_INQ_PRF_FLIT7_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_PT_5_5_INQ_PRF_FLIT7_FILTERING_SETUP',
    LABEL => 'AR_RTR_PT_5_5_INQ_PRF_FLIT7_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_5_INQ_PRF_FLIT7_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_5_INQ_PRF_FLIT7_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_PT_5_5_INQ_PRF_FLIT7_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_PT_5_5_INQ_PRF_FLIT7_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Enable this compare',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_5_INQ_PRF_FLIT7_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_5_INQ_PRF_FLIT7_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_PT_5_5_INQ_PRF_FLIT7_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_PT_5_5_INQ_PRF_FLIT7_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Pointer indicating which flit in the packet should be compared against this signature',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_5_INQ_PRF_FLIT7_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_5_INQ_PRF_FLIT7_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_PT_5_5_INQ_PRF_FLIT7_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_PT_5_5_INQ_PRF_FLIT7_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Compare pattern with the flit specified by FLIT_PTR',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_5_INQ_PRF_FLIT7_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_6_INQ_PRF_FLIT7_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_PT_5_6_INQ_PRF_FLIT7_FILTERING_SETUP',
    LABEL => 'AR_RTR_PT_5_6_INQ_PRF_FLIT7_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_6_INQ_PRF_FLIT7_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_6_INQ_PRF_FLIT7_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_PT_5_6_INQ_PRF_FLIT7_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_PT_5_6_INQ_PRF_FLIT7_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Enable this compare',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_6_INQ_PRF_FLIT7_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_6_INQ_PRF_FLIT7_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_PT_5_6_INQ_PRF_FLIT7_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_PT_5_6_INQ_PRF_FLIT7_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Pointer indicating which flit in the packet should be compared against this signature',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_6_INQ_PRF_FLIT7_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_6_INQ_PRF_FLIT7_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_PT_5_6_INQ_PRF_FLIT7_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_PT_5_6_INQ_PRF_FLIT7_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Compare pattern with the flit specified by FLIT_PTR',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_6_INQ_PRF_FLIT7_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_7_INQ_PRF_FLIT7_FILTERING_SETUP'} = {
    NAME => 'AR_RTR_PT_5_7_INQ_PRF_FLIT7_FILTERING_SETUP',
    LABEL => 'AR_RTR_PT_5_7_INQ_PRF_FLIT7_FILTERING_SETUP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_7_INQ_PRF_FLIT7_FILTERING_SETUP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_7_INQ_PRF_FLIT7_FILTERING_SETUP:ENABLE'} = {
    NAME => 'AR_RTR_PT_5_7_INQ_PRF_FLIT7_FILTERING_SETUP:ENABLE',
    LABEL => 'AR_RTR_PT_5_7_INQ_PRF_FLIT7_FILTERING_SETUP:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Enable this compare',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_7_INQ_PRF_FLIT7_FILTERING_SETUP:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_7_INQ_PRF_FLIT7_FILTERING_SETUP:FLIT_PTR'} = {
    NAME => 'AR_RTR_PT_5_7_INQ_PRF_FLIT7_FILTERING_SETUP:FLIT_PTR',
    LABEL => 'AR_RTR_PT_5_7_INQ_PRF_FLIT7_FILTERING_SETUP:FLIT_PTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Pointer indicating which flit in the packet should be compared against this signature',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_7_INQ_PRF_FLIT7_FILTERING_SETUP:FLIT_PTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_7_INQ_PRF_FLIT7_FILTERING_SETUP:COMPARE_PATTERN'} = {
    NAME => 'AR_RTR_PT_5_7_INQ_PRF_FLIT7_FILTERING_SETUP:COMPARE_PATTERN',
    LABEL => 'AR_RTR_PT_5_7_INQ_PRF_FLIT7_FILTERING_SETUP:COMPARE_PATTERN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Compare pattern with the flit specified by FLIT_PTR',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_7_INQ_PRF_FLIT7_FILTERING_SETUP:COMPARE_PATTERN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_0_INQ_PRF_FLIT7_FILTERING_MASK'} = {
    NAME => 'AR_RTR_PT_5_0_INQ_PRF_FLIT7_FILTERING_MASK',
    LABEL => 'AR_RTR_PT_5_0_INQ_PRF_FLIT7_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_0_INQ_PRF_FLIT7_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_0_INQ_PRF_FLIT7_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_PT_5_0_INQ_PRF_FLIT7_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_PT_5_0_INQ_PRF_FLIT7_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the patter compare',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_0_INQ_PRF_FLIT7_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_1_INQ_PRF_FLIT7_FILTERING_MASK'} = {
    NAME => 'AR_RTR_PT_5_1_INQ_PRF_FLIT7_FILTERING_MASK',
    LABEL => 'AR_RTR_PT_5_1_INQ_PRF_FLIT7_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_1_INQ_PRF_FLIT7_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_1_INQ_PRF_FLIT7_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_PT_5_1_INQ_PRF_FLIT7_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_PT_5_1_INQ_PRF_FLIT7_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the patter compare',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_1_INQ_PRF_FLIT7_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_2_INQ_PRF_FLIT7_FILTERING_MASK'} = {
    NAME => 'AR_RTR_PT_5_2_INQ_PRF_FLIT7_FILTERING_MASK',
    LABEL => 'AR_RTR_PT_5_2_INQ_PRF_FLIT7_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_2_INQ_PRF_FLIT7_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_2_INQ_PRF_FLIT7_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_PT_5_2_INQ_PRF_FLIT7_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_PT_5_2_INQ_PRF_FLIT7_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the patter compare',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_2_INQ_PRF_FLIT7_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_3_INQ_PRF_FLIT7_FILTERING_MASK'} = {
    NAME => 'AR_RTR_PT_5_3_INQ_PRF_FLIT7_FILTERING_MASK',
    LABEL => 'AR_RTR_PT_5_3_INQ_PRF_FLIT7_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_3_INQ_PRF_FLIT7_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_3_INQ_PRF_FLIT7_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_PT_5_3_INQ_PRF_FLIT7_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_PT_5_3_INQ_PRF_FLIT7_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the patter compare',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_3_INQ_PRF_FLIT7_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_4_INQ_PRF_FLIT7_FILTERING_MASK'} = {
    NAME => 'AR_RTR_PT_5_4_INQ_PRF_FLIT7_FILTERING_MASK',
    LABEL => 'AR_RTR_PT_5_4_INQ_PRF_FLIT7_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_4_INQ_PRF_FLIT7_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_4_INQ_PRF_FLIT7_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_PT_5_4_INQ_PRF_FLIT7_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_PT_5_4_INQ_PRF_FLIT7_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the patter compare',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_4_INQ_PRF_FLIT7_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_5_INQ_PRF_FLIT7_FILTERING_MASK'} = {
    NAME => 'AR_RTR_PT_5_5_INQ_PRF_FLIT7_FILTERING_MASK',
    LABEL => 'AR_RTR_PT_5_5_INQ_PRF_FLIT7_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_5_INQ_PRF_FLIT7_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_5_INQ_PRF_FLIT7_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_PT_5_5_INQ_PRF_FLIT7_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_PT_5_5_INQ_PRF_FLIT7_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the patter compare',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_5_INQ_PRF_FLIT7_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_6_INQ_PRF_FLIT7_FILTERING_MASK'} = {
    NAME => 'AR_RTR_PT_5_6_INQ_PRF_FLIT7_FILTERING_MASK',
    LABEL => 'AR_RTR_PT_5_6_INQ_PRF_FLIT7_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_6_INQ_PRF_FLIT7_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_6_INQ_PRF_FLIT7_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_PT_5_6_INQ_PRF_FLIT7_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_PT_5_6_INQ_PRF_FLIT7_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the patter compare',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_6_INQ_PRF_FLIT7_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_7_INQ_PRF_FLIT7_FILTERING_MASK'} = {
    NAME => 'AR_RTR_PT_5_7_INQ_PRF_FLIT7_FILTERING_MASK',
    LABEL => 'AR_RTR_PT_5_7_INQ_PRF_FLIT7_FILTERING_MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_7_INQ_PRF_FLIT7_FILTERING_MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_7_INQ_PRF_FLIT7_FILTERING_MASK:MASK'} = {
    NAME => 'AR_RTR_PT_5_7_INQ_PRF_FLIT7_FILTERING_MASK:MASK',
    LABEL => 'AR_RTR_PT_5_7_INQ_PRF_FLIT7_FILTERING_MASK:MASK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Mask the bits during the patter compare',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_7_INQ_PRF_FLIT7_FILTERING_MASK:MASK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_0_INQ_PRF_INCOMING_PKT_VC0_FILTER_FLIT0_CNT'} = {
    NAME => 'AR_RTR_PT_5_0_INQ_PRF_INCOMING_PKT_VC0_FILTER_FLIT0_CNT',
    LABEL => 'AR_RTR_PT_5_0_INQ_PRF_INCOMING_PKT_VC0_FILTER_FLIT0_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts the number of incoming packets for VC0 or counts the incoming flits that match AR_RTR_PT_INQ_PRF_FLIT0_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_0_INQ_PRF_INCOMING_PKT_VC0_FILTER_FLIT0_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_1_INQ_PRF_INCOMING_PKT_VC0_FILTER_FLIT0_CNT'} = {
    NAME => 'AR_RTR_PT_5_1_INQ_PRF_INCOMING_PKT_VC0_FILTER_FLIT0_CNT',
    LABEL => 'AR_RTR_PT_5_1_INQ_PRF_INCOMING_PKT_VC0_FILTER_FLIT0_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts the number of incoming packets for VC0 or counts the incoming flits that match AR_RTR_PT_INQ_PRF_FLIT0_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_1_INQ_PRF_INCOMING_PKT_VC0_FILTER_FLIT0_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_2_INQ_PRF_INCOMING_PKT_VC0_FILTER_FLIT0_CNT'} = {
    NAME => 'AR_RTR_PT_5_2_INQ_PRF_INCOMING_PKT_VC0_FILTER_FLIT0_CNT',
    LABEL => 'AR_RTR_PT_5_2_INQ_PRF_INCOMING_PKT_VC0_FILTER_FLIT0_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts the number of incoming packets for VC0 or counts the incoming flits that match AR_RTR_PT_INQ_PRF_FLIT0_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_2_INQ_PRF_INCOMING_PKT_VC0_FILTER_FLIT0_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_3_INQ_PRF_INCOMING_PKT_VC0_FILTER_FLIT0_CNT'} = {
    NAME => 'AR_RTR_PT_5_3_INQ_PRF_INCOMING_PKT_VC0_FILTER_FLIT0_CNT',
    LABEL => 'AR_RTR_PT_5_3_INQ_PRF_INCOMING_PKT_VC0_FILTER_FLIT0_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts the number of incoming packets for VC0 or counts the incoming flits that match AR_RTR_PT_INQ_PRF_FLIT0_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_3_INQ_PRF_INCOMING_PKT_VC0_FILTER_FLIT0_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_4_INQ_PRF_INCOMING_PKT_VC0_FILTER_FLIT0_CNT'} = {
    NAME => 'AR_RTR_PT_5_4_INQ_PRF_INCOMING_PKT_VC0_FILTER_FLIT0_CNT',
    LABEL => 'AR_RTR_PT_5_4_INQ_PRF_INCOMING_PKT_VC0_FILTER_FLIT0_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts the number of incoming packets for VC0 or counts the incoming flits that match AR_RTR_PT_INQ_PRF_FLIT0_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_4_INQ_PRF_INCOMING_PKT_VC0_FILTER_FLIT0_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_5_INQ_PRF_INCOMING_PKT_VC0_FILTER_FLIT0_CNT'} = {
    NAME => 'AR_RTR_PT_5_5_INQ_PRF_INCOMING_PKT_VC0_FILTER_FLIT0_CNT',
    LABEL => 'AR_RTR_PT_5_5_INQ_PRF_INCOMING_PKT_VC0_FILTER_FLIT0_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts the number of incoming packets for VC0 or counts the incoming flits that match AR_RTR_PT_INQ_PRF_FLIT0_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_5_INQ_PRF_INCOMING_PKT_VC0_FILTER_FLIT0_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_6_INQ_PRF_INCOMING_PKT_VC0_FILTER_FLIT0_CNT'} = {
    NAME => 'AR_RTR_PT_5_6_INQ_PRF_INCOMING_PKT_VC0_FILTER_FLIT0_CNT',
    LABEL => 'AR_RTR_PT_5_6_INQ_PRF_INCOMING_PKT_VC0_FILTER_FLIT0_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts the number of incoming packets for VC0 or counts the incoming flits that match AR_RTR_PT_INQ_PRF_FLIT0_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_6_INQ_PRF_INCOMING_PKT_VC0_FILTER_FLIT0_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_7_INQ_PRF_INCOMING_PKT_VC0_FILTER_FLIT0_CNT'} = {
    NAME => 'AR_RTR_PT_5_7_INQ_PRF_INCOMING_PKT_VC0_FILTER_FLIT0_CNT',
    LABEL => 'AR_RTR_PT_5_7_INQ_PRF_INCOMING_PKT_VC0_FILTER_FLIT0_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts the number of incoming packets for VC0 or counts the incoming flits that match AR_RTR_PT_INQ_PRF_FLIT0_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_7_INQ_PRF_INCOMING_PKT_VC0_FILTER_FLIT0_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_0_INQ_PRF_INCOMING_PKT_VC1_FILTER_FLIT1_CNT'} = {
    NAME => 'AR_RTR_PT_5_0_INQ_PRF_INCOMING_PKT_VC1_FILTER_FLIT1_CNT',
    LABEL => 'AR_RTR_PT_5_0_INQ_PRF_INCOMING_PKT_VC1_FILTER_FLIT1_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts the number of incoming packets for VC1 or counts the incoming flits that match AR_RTR_PT_INQ_PRF_FLIT1_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_0_INQ_PRF_INCOMING_PKT_VC1_FILTER_FLIT1_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_1_INQ_PRF_INCOMING_PKT_VC1_FILTER_FLIT1_CNT'} = {
    NAME => 'AR_RTR_PT_5_1_INQ_PRF_INCOMING_PKT_VC1_FILTER_FLIT1_CNT',
    LABEL => 'AR_RTR_PT_5_1_INQ_PRF_INCOMING_PKT_VC1_FILTER_FLIT1_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts the number of incoming packets for VC1 or counts the incoming flits that match AR_RTR_PT_INQ_PRF_FLIT1_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_1_INQ_PRF_INCOMING_PKT_VC1_FILTER_FLIT1_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_2_INQ_PRF_INCOMING_PKT_VC1_FILTER_FLIT1_CNT'} = {
    NAME => 'AR_RTR_PT_5_2_INQ_PRF_INCOMING_PKT_VC1_FILTER_FLIT1_CNT',
    LABEL => 'AR_RTR_PT_5_2_INQ_PRF_INCOMING_PKT_VC1_FILTER_FLIT1_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts the number of incoming packets for VC1 or counts the incoming flits that match AR_RTR_PT_INQ_PRF_FLIT1_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_2_INQ_PRF_INCOMING_PKT_VC1_FILTER_FLIT1_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_3_INQ_PRF_INCOMING_PKT_VC1_FILTER_FLIT1_CNT'} = {
    NAME => 'AR_RTR_PT_5_3_INQ_PRF_INCOMING_PKT_VC1_FILTER_FLIT1_CNT',
    LABEL => 'AR_RTR_PT_5_3_INQ_PRF_INCOMING_PKT_VC1_FILTER_FLIT1_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts the number of incoming packets for VC1 or counts the incoming flits that match AR_RTR_PT_INQ_PRF_FLIT1_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_3_INQ_PRF_INCOMING_PKT_VC1_FILTER_FLIT1_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_4_INQ_PRF_INCOMING_PKT_VC1_FILTER_FLIT1_CNT'} = {
    NAME => 'AR_RTR_PT_5_4_INQ_PRF_INCOMING_PKT_VC1_FILTER_FLIT1_CNT',
    LABEL => 'AR_RTR_PT_5_4_INQ_PRF_INCOMING_PKT_VC1_FILTER_FLIT1_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts the number of incoming packets for VC1 or counts the incoming flits that match AR_RTR_PT_INQ_PRF_FLIT1_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_4_INQ_PRF_INCOMING_PKT_VC1_FILTER_FLIT1_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_5_INQ_PRF_INCOMING_PKT_VC1_FILTER_FLIT1_CNT'} = {
    NAME => 'AR_RTR_PT_5_5_INQ_PRF_INCOMING_PKT_VC1_FILTER_FLIT1_CNT',
    LABEL => 'AR_RTR_PT_5_5_INQ_PRF_INCOMING_PKT_VC1_FILTER_FLIT1_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts the number of incoming packets for VC1 or counts the incoming flits that match AR_RTR_PT_INQ_PRF_FLIT1_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_5_INQ_PRF_INCOMING_PKT_VC1_FILTER_FLIT1_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_6_INQ_PRF_INCOMING_PKT_VC1_FILTER_FLIT1_CNT'} = {
    NAME => 'AR_RTR_PT_5_6_INQ_PRF_INCOMING_PKT_VC1_FILTER_FLIT1_CNT',
    LABEL => 'AR_RTR_PT_5_6_INQ_PRF_INCOMING_PKT_VC1_FILTER_FLIT1_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts the number of incoming packets for VC1 or counts the incoming flits that match AR_RTR_PT_INQ_PRF_FLIT1_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_6_INQ_PRF_INCOMING_PKT_VC1_FILTER_FLIT1_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_7_INQ_PRF_INCOMING_PKT_VC1_FILTER_FLIT1_CNT'} = {
    NAME => 'AR_RTR_PT_5_7_INQ_PRF_INCOMING_PKT_VC1_FILTER_FLIT1_CNT',
    LABEL => 'AR_RTR_PT_5_7_INQ_PRF_INCOMING_PKT_VC1_FILTER_FLIT1_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts the number of incoming packets for VC1 or counts the incoming flits that match AR_RTR_PT_INQ_PRF_FLIT1_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_7_INQ_PRF_INCOMING_PKT_VC1_FILTER_FLIT1_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_0_INQ_PRF_INCOMING_PKT_VC2_FILTER_FLIT2_CNT'} = {
    NAME => 'AR_RTR_PT_5_0_INQ_PRF_INCOMING_PKT_VC2_FILTER_FLIT2_CNT',
    LABEL => 'AR_RTR_PT_5_0_INQ_PRF_INCOMING_PKT_VC2_FILTER_FLIT2_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts the number of incoming packets for VC2 or counts the incoming flits that match AR_RTR_PT_INQ_PRF_FLIT2_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_0_INQ_PRF_INCOMING_PKT_VC2_FILTER_FLIT2_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_1_INQ_PRF_INCOMING_PKT_VC2_FILTER_FLIT2_CNT'} = {
    NAME => 'AR_RTR_PT_5_1_INQ_PRF_INCOMING_PKT_VC2_FILTER_FLIT2_CNT',
    LABEL => 'AR_RTR_PT_5_1_INQ_PRF_INCOMING_PKT_VC2_FILTER_FLIT2_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts the number of incoming packets for VC2 or counts the incoming flits that match AR_RTR_PT_INQ_PRF_FLIT2_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_1_INQ_PRF_INCOMING_PKT_VC2_FILTER_FLIT2_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_2_INQ_PRF_INCOMING_PKT_VC2_FILTER_FLIT2_CNT'} = {
    NAME => 'AR_RTR_PT_5_2_INQ_PRF_INCOMING_PKT_VC2_FILTER_FLIT2_CNT',
    LABEL => 'AR_RTR_PT_5_2_INQ_PRF_INCOMING_PKT_VC2_FILTER_FLIT2_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts the number of incoming packets for VC2 or counts the incoming flits that match AR_RTR_PT_INQ_PRF_FLIT2_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_2_INQ_PRF_INCOMING_PKT_VC2_FILTER_FLIT2_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_3_INQ_PRF_INCOMING_PKT_VC2_FILTER_FLIT2_CNT'} = {
    NAME => 'AR_RTR_PT_5_3_INQ_PRF_INCOMING_PKT_VC2_FILTER_FLIT2_CNT',
    LABEL => 'AR_RTR_PT_5_3_INQ_PRF_INCOMING_PKT_VC2_FILTER_FLIT2_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts the number of incoming packets for VC2 or counts the incoming flits that match AR_RTR_PT_INQ_PRF_FLIT2_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_3_INQ_PRF_INCOMING_PKT_VC2_FILTER_FLIT2_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_4_INQ_PRF_INCOMING_PKT_VC2_FILTER_FLIT2_CNT'} = {
    NAME => 'AR_RTR_PT_5_4_INQ_PRF_INCOMING_PKT_VC2_FILTER_FLIT2_CNT',
    LABEL => 'AR_RTR_PT_5_4_INQ_PRF_INCOMING_PKT_VC2_FILTER_FLIT2_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts the number of incoming packets for VC2 or counts the incoming flits that match AR_RTR_PT_INQ_PRF_FLIT2_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_4_INQ_PRF_INCOMING_PKT_VC2_FILTER_FLIT2_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_5_INQ_PRF_INCOMING_PKT_VC2_FILTER_FLIT2_CNT'} = {
    NAME => 'AR_RTR_PT_5_5_INQ_PRF_INCOMING_PKT_VC2_FILTER_FLIT2_CNT',
    LABEL => 'AR_RTR_PT_5_5_INQ_PRF_INCOMING_PKT_VC2_FILTER_FLIT2_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts the number of incoming packets for VC2 or counts the incoming flits that match AR_RTR_PT_INQ_PRF_FLIT2_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_5_INQ_PRF_INCOMING_PKT_VC2_FILTER_FLIT2_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_6_INQ_PRF_INCOMING_PKT_VC2_FILTER_FLIT2_CNT'} = {
    NAME => 'AR_RTR_PT_5_6_INQ_PRF_INCOMING_PKT_VC2_FILTER_FLIT2_CNT',
    LABEL => 'AR_RTR_PT_5_6_INQ_PRF_INCOMING_PKT_VC2_FILTER_FLIT2_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts the number of incoming packets for VC2 or counts the incoming flits that match AR_RTR_PT_INQ_PRF_FLIT2_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_6_INQ_PRF_INCOMING_PKT_VC2_FILTER_FLIT2_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_7_INQ_PRF_INCOMING_PKT_VC2_FILTER_FLIT2_CNT'} = {
    NAME => 'AR_RTR_PT_5_7_INQ_PRF_INCOMING_PKT_VC2_FILTER_FLIT2_CNT',
    LABEL => 'AR_RTR_PT_5_7_INQ_PRF_INCOMING_PKT_VC2_FILTER_FLIT2_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts the number of incoming packets for VC2 or counts the incoming flits that match AR_RTR_PT_INQ_PRF_FLIT2_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_7_INQ_PRF_INCOMING_PKT_VC2_FILTER_FLIT2_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_0_INQ_PRF_INCOMING_PKT_VC3_FILTER_FLIT3_CNT'} = {
    NAME => 'AR_RTR_PT_5_0_INQ_PRF_INCOMING_PKT_VC3_FILTER_FLIT3_CNT',
    LABEL => 'AR_RTR_PT_5_0_INQ_PRF_INCOMING_PKT_VC3_FILTER_FLIT3_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts the number of incoming packets for VC3 or counts the incoming flits that match AR_RTR_PT_INQ_PRF_FLIT3_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_0_INQ_PRF_INCOMING_PKT_VC3_FILTER_FLIT3_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_1_INQ_PRF_INCOMING_PKT_VC3_FILTER_FLIT3_CNT'} = {
    NAME => 'AR_RTR_PT_5_1_INQ_PRF_INCOMING_PKT_VC3_FILTER_FLIT3_CNT',
    LABEL => 'AR_RTR_PT_5_1_INQ_PRF_INCOMING_PKT_VC3_FILTER_FLIT3_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts the number of incoming packets for VC3 or counts the incoming flits that match AR_RTR_PT_INQ_PRF_FLIT3_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_1_INQ_PRF_INCOMING_PKT_VC3_FILTER_FLIT3_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_2_INQ_PRF_INCOMING_PKT_VC3_FILTER_FLIT3_CNT'} = {
    NAME => 'AR_RTR_PT_5_2_INQ_PRF_INCOMING_PKT_VC3_FILTER_FLIT3_CNT',
    LABEL => 'AR_RTR_PT_5_2_INQ_PRF_INCOMING_PKT_VC3_FILTER_FLIT3_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts the number of incoming packets for VC3 or counts the incoming flits that match AR_RTR_PT_INQ_PRF_FLIT3_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_2_INQ_PRF_INCOMING_PKT_VC3_FILTER_FLIT3_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_3_INQ_PRF_INCOMING_PKT_VC3_FILTER_FLIT3_CNT'} = {
    NAME => 'AR_RTR_PT_5_3_INQ_PRF_INCOMING_PKT_VC3_FILTER_FLIT3_CNT',
    LABEL => 'AR_RTR_PT_5_3_INQ_PRF_INCOMING_PKT_VC3_FILTER_FLIT3_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts the number of incoming packets for VC3 or counts the incoming flits that match AR_RTR_PT_INQ_PRF_FLIT3_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_3_INQ_PRF_INCOMING_PKT_VC3_FILTER_FLIT3_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_4_INQ_PRF_INCOMING_PKT_VC3_FILTER_FLIT3_CNT'} = {
    NAME => 'AR_RTR_PT_5_4_INQ_PRF_INCOMING_PKT_VC3_FILTER_FLIT3_CNT',
    LABEL => 'AR_RTR_PT_5_4_INQ_PRF_INCOMING_PKT_VC3_FILTER_FLIT3_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts the number of incoming packets for VC3 or counts the incoming flits that match AR_RTR_PT_INQ_PRF_FLIT3_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_4_INQ_PRF_INCOMING_PKT_VC3_FILTER_FLIT3_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_5_INQ_PRF_INCOMING_PKT_VC3_FILTER_FLIT3_CNT'} = {
    NAME => 'AR_RTR_PT_5_5_INQ_PRF_INCOMING_PKT_VC3_FILTER_FLIT3_CNT',
    LABEL => 'AR_RTR_PT_5_5_INQ_PRF_INCOMING_PKT_VC3_FILTER_FLIT3_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts the number of incoming packets for VC3 or counts the incoming flits that match AR_RTR_PT_INQ_PRF_FLIT3_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_5_INQ_PRF_INCOMING_PKT_VC3_FILTER_FLIT3_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_6_INQ_PRF_INCOMING_PKT_VC3_FILTER_FLIT3_CNT'} = {
    NAME => 'AR_RTR_PT_5_6_INQ_PRF_INCOMING_PKT_VC3_FILTER_FLIT3_CNT',
    LABEL => 'AR_RTR_PT_5_6_INQ_PRF_INCOMING_PKT_VC3_FILTER_FLIT3_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts the number of incoming packets for VC3 or counts the incoming flits that match AR_RTR_PT_INQ_PRF_FLIT3_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_6_INQ_PRF_INCOMING_PKT_VC3_FILTER_FLIT3_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_7_INQ_PRF_INCOMING_PKT_VC3_FILTER_FLIT3_CNT'} = {
    NAME => 'AR_RTR_PT_5_7_INQ_PRF_INCOMING_PKT_VC3_FILTER_FLIT3_CNT',
    LABEL => 'AR_RTR_PT_5_7_INQ_PRF_INCOMING_PKT_VC3_FILTER_FLIT3_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts the number of incoming packets for VC3 or counts the incoming flits that match AR_RTR_PT_INQ_PRF_FLIT3_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_7_INQ_PRF_INCOMING_PKT_VC3_FILTER_FLIT3_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_0_INQ_PRF_INCOMING_PKT_VC4_FILTER_FLIT4_CNT'} = {
    NAME => 'AR_RTR_PT_5_0_INQ_PRF_INCOMING_PKT_VC4_FILTER_FLIT4_CNT',
    LABEL => 'AR_RTR_PT_5_0_INQ_PRF_INCOMING_PKT_VC4_FILTER_FLIT4_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts the number of incoming packets for VC4 or counts the incoming flits that match AR_RTR_PT_INQ_PRF_FLIT4_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_0_INQ_PRF_INCOMING_PKT_VC4_FILTER_FLIT4_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_1_INQ_PRF_INCOMING_PKT_VC4_FILTER_FLIT4_CNT'} = {
    NAME => 'AR_RTR_PT_5_1_INQ_PRF_INCOMING_PKT_VC4_FILTER_FLIT4_CNT',
    LABEL => 'AR_RTR_PT_5_1_INQ_PRF_INCOMING_PKT_VC4_FILTER_FLIT4_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts the number of incoming packets for VC4 or counts the incoming flits that match AR_RTR_PT_INQ_PRF_FLIT4_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_1_INQ_PRF_INCOMING_PKT_VC4_FILTER_FLIT4_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_2_INQ_PRF_INCOMING_PKT_VC4_FILTER_FLIT4_CNT'} = {
    NAME => 'AR_RTR_PT_5_2_INQ_PRF_INCOMING_PKT_VC4_FILTER_FLIT4_CNT',
    LABEL => 'AR_RTR_PT_5_2_INQ_PRF_INCOMING_PKT_VC4_FILTER_FLIT4_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts the number of incoming packets for VC4 or counts the incoming flits that match AR_RTR_PT_INQ_PRF_FLIT4_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_2_INQ_PRF_INCOMING_PKT_VC4_FILTER_FLIT4_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_3_INQ_PRF_INCOMING_PKT_VC4_FILTER_FLIT4_CNT'} = {
    NAME => 'AR_RTR_PT_5_3_INQ_PRF_INCOMING_PKT_VC4_FILTER_FLIT4_CNT',
    LABEL => 'AR_RTR_PT_5_3_INQ_PRF_INCOMING_PKT_VC4_FILTER_FLIT4_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts the number of incoming packets for VC4 or counts the incoming flits that match AR_RTR_PT_INQ_PRF_FLIT4_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_3_INQ_PRF_INCOMING_PKT_VC4_FILTER_FLIT4_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_4_INQ_PRF_INCOMING_PKT_VC4_FILTER_FLIT4_CNT'} = {
    NAME => 'AR_RTR_PT_5_4_INQ_PRF_INCOMING_PKT_VC4_FILTER_FLIT4_CNT',
    LABEL => 'AR_RTR_PT_5_4_INQ_PRF_INCOMING_PKT_VC4_FILTER_FLIT4_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts the number of incoming packets for VC4 or counts the incoming flits that match AR_RTR_PT_INQ_PRF_FLIT4_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_4_INQ_PRF_INCOMING_PKT_VC4_FILTER_FLIT4_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_5_INQ_PRF_INCOMING_PKT_VC4_FILTER_FLIT4_CNT'} = {
    NAME => 'AR_RTR_PT_5_5_INQ_PRF_INCOMING_PKT_VC4_FILTER_FLIT4_CNT',
    LABEL => 'AR_RTR_PT_5_5_INQ_PRF_INCOMING_PKT_VC4_FILTER_FLIT4_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts the number of incoming packets for VC4 or counts the incoming flits that match AR_RTR_PT_INQ_PRF_FLIT4_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_5_INQ_PRF_INCOMING_PKT_VC4_FILTER_FLIT4_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_6_INQ_PRF_INCOMING_PKT_VC4_FILTER_FLIT4_CNT'} = {
    NAME => 'AR_RTR_PT_5_6_INQ_PRF_INCOMING_PKT_VC4_FILTER_FLIT4_CNT',
    LABEL => 'AR_RTR_PT_5_6_INQ_PRF_INCOMING_PKT_VC4_FILTER_FLIT4_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts the number of incoming packets for VC4 or counts the incoming flits that match AR_RTR_PT_INQ_PRF_FLIT4_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_6_INQ_PRF_INCOMING_PKT_VC4_FILTER_FLIT4_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_7_INQ_PRF_INCOMING_PKT_VC4_FILTER_FLIT4_CNT'} = {
    NAME => 'AR_RTR_PT_5_7_INQ_PRF_INCOMING_PKT_VC4_FILTER_FLIT4_CNT',
    LABEL => 'AR_RTR_PT_5_7_INQ_PRF_INCOMING_PKT_VC4_FILTER_FLIT4_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts the number of incoming packets for VC4 or counts the incoming flits that match AR_RTR_PT_INQ_PRF_FLIT4_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_7_INQ_PRF_INCOMING_PKT_VC4_FILTER_FLIT4_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_0_INQ_PRF_INCOMING_PKT_VC5_FILTER_FLIT5_CNT'} = {
    NAME => 'AR_RTR_PT_5_0_INQ_PRF_INCOMING_PKT_VC5_FILTER_FLIT5_CNT',
    LABEL => 'AR_RTR_PT_5_0_INQ_PRF_INCOMING_PKT_VC5_FILTER_FLIT5_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts the number of incoming packets for VC5 or counts the incoming flits that match AR_RTR_PT_INQ_PRF_FLIT5_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_0_INQ_PRF_INCOMING_PKT_VC5_FILTER_FLIT5_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_1_INQ_PRF_INCOMING_PKT_VC5_FILTER_FLIT5_CNT'} = {
    NAME => 'AR_RTR_PT_5_1_INQ_PRF_INCOMING_PKT_VC5_FILTER_FLIT5_CNT',
    LABEL => 'AR_RTR_PT_5_1_INQ_PRF_INCOMING_PKT_VC5_FILTER_FLIT5_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts the number of incoming packets for VC5 or counts the incoming flits that match AR_RTR_PT_INQ_PRF_FLIT5_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_1_INQ_PRF_INCOMING_PKT_VC5_FILTER_FLIT5_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_2_INQ_PRF_INCOMING_PKT_VC5_FILTER_FLIT5_CNT'} = {
    NAME => 'AR_RTR_PT_5_2_INQ_PRF_INCOMING_PKT_VC5_FILTER_FLIT5_CNT',
    LABEL => 'AR_RTR_PT_5_2_INQ_PRF_INCOMING_PKT_VC5_FILTER_FLIT5_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts the number of incoming packets for VC5 or counts the incoming flits that match AR_RTR_PT_INQ_PRF_FLIT5_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_2_INQ_PRF_INCOMING_PKT_VC5_FILTER_FLIT5_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_3_INQ_PRF_INCOMING_PKT_VC5_FILTER_FLIT5_CNT'} = {
    NAME => 'AR_RTR_PT_5_3_INQ_PRF_INCOMING_PKT_VC5_FILTER_FLIT5_CNT',
    LABEL => 'AR_RTR_PT_5_3_INQ_PRF_INCOMING_PKT_VC5_FILTER_FLIT5_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts the number of incoming packets for VC5 or counts the incoming flits that match AR_RTR_PT_INQ_PRF_FLIT5_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_3_INQ_PRF_INCOMING_PKT_VC5_FILTER_FLIT5_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_4_INQ_PRF_INCOMING_PKT_VC5_FILTER_FLIT5_CNT'} = {
    NAME => 'AR_RTR_PT_5_4_INQ_PRF_INCOMING_PKT_VC5_FILTER_FLIT5_CNT',
    LABEL => 'AR_RTR_PT_5_4_INQ_PRF_INCOMING_PKT_VC5_FILTER_FLIT5_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts the number of incoming packets for VC5 or counts the incoming flits that match AR_RTR_PT_INQ_PRF_FLIT5_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_4_INQ_PRF_INCOMING_PKT_VC5_FILTER_FLIT5_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_5_INQ_PRF_INCOMING_PKT_VC5_FILTER_FLIT5_CNT'} = {
    NAME => 'AR_RTR_PT_5_5_INQ_PRF_INCOMING_PKT_VC5_FILTER_FLIT5_CNT',
    LABEL => 'AR_RTR_PT_5_5_INQ_PRF_INCOMING_PKT_VC5_FILTER_FLIT5_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts the number of incoming packets for VC5 or counts the incoming flits that match AR_RTR_PT_INQ_PRF_FLIT5_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_5_INQ_PRF_INCOMING_PKT_VC5_FILTER_FLIT5_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_6_INQ_PRF_INCOMING_PKT_VC5_FILTER_FLIT5_CNT'} = {
    NAME => 'AR_RTR_PT_5_6_INQ_PRF_INCOMING_PKT_VC5_FILTER_FLIT5_CNT',
    LABEL => 'AR_RTR_PT_5_6_INQ_PRF_INCOMING_PKT_VC5_FILTER_FLIT5_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts the number of incoming packets for VC5 or counts the incoming flits that match AR_RTR_PT_INQ_PRF_FLIT5_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_6_INQ_PRF_INCOMING_PKT_VC5_FILTER_FLIT5_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_7_INQ_PRF_INCOMING_PKT_VC5_FILTER_FLIT5_CNT'} = {
    NAME => 'AR_RTR_PT_5_7_INQ_PRF_INCOMING_PKT_VC5_FILTER_FLIT5_CNT',
    LABEL => 'AR_RTR_PT_5_7_INQ_PRF_INCOMING_PKT_VC5_FILTER_FLIT5_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts the number of incoming packets for VC5 or counts the incoming flits that match AR_RTR_PT_INQ_PRF_FLIT5_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_7_INQ_PRF_INCOMING_PKT_VC5_FILTER_FLIT5_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_0_INQ_PRF_INCOMING_PKT_VC6_FILTER_FLIT6_CNT'} = {
    NAME => 'AR_RTR_PT_5_0_INQ_PRF_INCOMING_PKT_VC6_FILTER_FLIT6_CNT',
    LABEL => 'AR_RTR_PT_5_0_INQ_PRF_INCOMING_PKT_VC6_FILTER_FLIT6_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts the number of incoming packets for VC6 or counts the incoming flits that match AR_RTR_PT_INQ_PRF_FLIT6_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_0_INQ_PRF_INCOMING_PKT_VC6_FILTER_FLIT6_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_1_INQ_PRF_INCOMING_PKT_VC6_FILTER_FLIT6_CNT'} = {
    NAME => 'AR_RTR_PT_5_1_INQ_PRF_INCOMING_PKT_VC6_FILTER_FLIT6_CNT',
    LABEL => 'AR_RTR_PT_5_1_INQ_PRF_INCOMING_PKT_VC6_FILTER_FLIT6_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts the number of incoming packets for VC6 or counts the incoming flits that match AR_RTR_PT_INQ_PRF_FLIT6_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_1_INQ_PRF_INCOMING_PKT_VC6_FILTER_FLIT6_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_2_INQ_PRF_INCOMING_PKT_VC6_FILTER_FLIT6_CNT'} = {
    NAME => 'AR_RTR_PT_5_2_INQ_PRF_INCOMING_PKT_VC6_FILTER_FLIT6_CNT',
    LABEL => 'AR_RTR_PT_5_2_INQ_PRF_INCOMING_PKT_VC6_FILTER_FLIT6_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts the number of incoming packets for VC6 or counts the incoming flits that match AR_RTR_PT_INQ_PRF_FLIT6_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_2_INQ_PRF_INCOMING_PKT_VC6_FILTER_FLIT6_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_3_INQ_PRF_INCOMING_PKT_VC6_FILTER_FLIT6_CNT'} = {
    NAME => 'AR_RTR_PT_5_3_INQ_PRF_INCOMING_PKT_VC6_FILTER_FLIT6_CNT',
    LABEL => 'AR_RTR_PT_5_3_INQ_PRF_INCOMING_PKT_VC6_FILTER_FLIT6_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts the number of incoming packets for VC6 or counts the incoming flits that match AR_RTR_PT_INQ_PRF_FLIT6_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_3_INQ_PRF_INCOMING_PKT_VC6_FILTER_FLIT6_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_4_INQ_PRF_INCOMING_PKT_VC6_FILTER_FLIT6_CNT'} = {
    NAME => 'AR_RTR_PT_5_4_INQ_PRF_INCOMING_PKT_VC6_FILTER_FLIT6_CNT',
    LABEL => 'AR_RTR_PT_5_4_INQ_PRF_INCOMING_PKT_VC6_FILTER_FLIT6_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts the number of incoming packets for VC6 or counts the incoming flits that match AR_RTR_PT_INQ_PRF_FLIT6_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_4_INQ_PRF_INCOMING_PKT_VC6_FILTER_FLIT6_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_5_INQ_PRF_INCOMING_PKT_VC6_FILTER_FLIT6_CNT'} = {
    NAME => 'AR_RTR_PT_5_5_INQ_PRF_INCOMING_PKT_VC6_FILTER_FLIT6_CNT',
    LABEL => 'AR_RTR_PT_5_5_INQ_PRF_INCOMING_PKT_VC6_FILTER_FLIT6_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts the number of incoming packets for VC6 or counts the incoming flits that match AR_RTR_PT_INQ_PRF_FLIT6_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_5_INQ_PRF_INCOMING_PKT_VC6_FILTER_FLIT6_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_6_INQ_PRF_INCOMING_PKT_VC6_FILTER_FLIT6_CNT'} = {
    NAME => 'AR_RTR_PT_5_6_INQ_PRF_INCOMING_PKT_VC6_FILTER_FLIT6_CNT',
    LABEL => 'AR_RTR_PT_5_6_INQ_PRF_INCOMING_PKT_VC6_FILTER_FLIT6_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts the number of incoming packets for VC6 or counts the incoming flits that match AR_RTR_PT_INQ_PRF_FLIT6_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_6_INQ_PRF_INCOMING_PKT_VC6_FILTER_FLIT6_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_7_INQ_PRF_INCOMING_PKT_VC6_FILTER_FLIT6_CNT'} = {
    NAME => 'AR_RTR_PT_5_7_INQ_PRF_INCOMING_PKT_VC6_FILTER_FLIT6_CNT',
    LABEL => 'AR_RTR_PT_5_7_INQ_PRF_INCOMING_PKT_VC6_FILTER_FLIT6_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts the number of incoming packets for VC6 or counts the incoming flits that match AR_RTR_PT_INQ_PRF_FLIT6_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_7_INQ_PRF_INCOMING_PKT_VC6_FILTER_FLIT6_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_0_INQ_PRF_INCOMING_PKT_VC7_FILTER_FLIT7_CNT'} = {
    NAME => 'AR_RTR_PT_5_0_INQ_PRF_INCOMING_PKT_VC7_FILTER_FLIT7_CNT',
    LABEL => 'AR_RTR_PT_5_0_INQ_PRF_INCOMING_PKT_VC7_FILTER_FLIT7_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts the number of incoming packets for VC7 or counts the incoming flits that match AR_RTR_PT_INQ_PRF_FLIT7_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_0_INQ_PRF_INCOMING_PKT_VC7_FILTER_FLIT7_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_1_INQ_PRF_INCOMING_PKT_VC7_FILTER_FLIT7_CNT'} = {
    NAME => 'AR_RTR_PT_5_1_INQ_PRF_INCOMING_PKT_VC7_FILTER_FLIT7_CNT',
    LABEL => 'AR_RTR_PT_5_1_INQ_PRF_INCOMING_PKT_VC7_FILTER_FLIT7_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts the number of incoming packets for VC7 or counts the incoming flits that match AR_RTR_PT_INQ_PRF_FLIT7_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_1_INQ_PRF_INCOMING_PKT_VC7_FILTER_FLIT7_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_2_INQ_PRF_INCOMING_PKT_VC7_FILTER_FLIT7_CNT'} = {
    NAME => 'AR_RTR_PT_5_2_INQ_PRF_INCOMING_PKT_VC7_FILTER_FLIT7_CNT',
    LABEL => 'AR_RTR_PT_5_2_INQ_PRF_INCOMING_PKT_VC7_FILTER_FLIT7_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts the number of incoming packets for VC7 or counts the incoming flits that match AR_RTR_PT_INQ_PRF_FLIT7_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_2_INQ_PRF_INCOMING_PKT_VC7_FILTER_FLIT7_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_3_INQ_PRF_INCOMING_PKT_VC7_FILTER_FLIT7_CNT'} = {
    NAME => 'AR_RTR_PT_5_3_INQ_PRF_INCOMING_PKT_VC7_FILTER_FLIT7_CNT',
    LABEL => 'AR_RTR_PT_5_3_INQ_PRF_INCOMING_PKT_VC7_FILTER_FLIT7_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts the number of incoming packets for VC7 or counts the incoming flits that match AR_RTR_PT_INQ_PRF_FLIT7_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_3_INQ_PRF_INCOMING_PKT_VC7_FILTER_FLIT7_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_4_INQ_PRF_INCOMING_PKT_VC7_FILTER_FLIT7_CNT'} = {
    NAME => 'AR_RTR_PT_5_4_INQ_PRF_INCOMING_PKT_VC7_FILTER_FLIT7_CNT',
    LABEL => 'AR_RTR_PT_5_4_INQ_PRF_INCOMING_PKT_VC7_FILTER_FLIT7_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts the number of incoming packets for VC7 or counts the incoming flits that match AR_RTR_PT_INQ_PRF_FLIT7_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_4_INQ_PRF_INCOMING_PKT_VC7_FILTER_FLIT7_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_5_INQ_PRF_INCOMING_PKT_VC7_FILTER_FLIT7_CNT'} = {
    NAME => 'AR_RTR_PT_5_5_INQ_PRF_INCOMING_PKT_VC7_FILTER_FLIT7_CNT',
    LABEL => 'AR_RTR_PT_5_5_INQ_PRF_INCOMING_PKT_VC7_FILTER_FLIT7_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts the number of incoming packets for VC7 or counts the incoming flits that match AR_RTR_PT_INQ_PRF_FLIT7_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_5_INQ_PRF_INCOMING_PKT_VC7_FILTER_FLIT7_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_6_INQ_PRF_INCOMING_PKT_VC7_FILTER_FLIT7_CNT'} = {
    NAME => 'AR_RTR_PT_5_6_INQ_PRF_INCOMING_PKT_VC7_FILTER_FLIT7_CNT',
    LABEL => 'AR_RTR_PT_5_6_INQ_PRF_INCOMING_PKT_VC7_FILTER_FLIT7_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts the number of incoming packets for VC7 or counts the incoming flits that match AR_RTR_PT_INQ_PRF_FLIT7_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_6_INQ_PRF_INCOMING_PKT_VC7_FILTER_FLIT7_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_7_INQ_PRF_INCOMING_PKT_VC7_FILTER_FLIT7_CNT'} = {
    NAME => 'AR_RTR_PT_5_7_INQ_PRF_INCOMING_PKT_VC7_FILTER_FLIT7_CNT',
    LABEL => 'AR_RTR_PT_5_7_INQ_PRF_INCOMING_PKT_VC7_FILTER_FLIT7_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts the number of incoming packets for VC7 or counts the incoming flits that match AR_RTR_PT_INQ_PRF_FLIT7_FILTERING_SETUP',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_7_INQ_PRF_INCOMING_PKT_VC7_FILTER_FLIT7_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_0_INQ_PRF_MATCH_FLIT_3_TO_0_FILTERING_CNT'} = {
    NAME => 'AR_RTR_PT_5_0_INQ_PRF_MATCH_FLIT_3_TO_0_FILTERING_CNT',
    LABEL => 'AR_RTR_PT_5_0_INQ_PRF_MATCH_FLIT_3_TO_0_FILTERING_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Increments when an incoming flit matches flit filtering setup registers 3 to 0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_0_INQ_PRF_MATCH_FLIT_3_TO_0_FILTERING_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_1_INQ_PRF_MATCH_FLIT_3_TO_0_FILTERING_CNT'} = {
    NAME => 'AR_RTR_PT_5_1_INQ_PRF_MATCH_FLIT_3_TO_0_FILTERING_CNT',
    LABEL => 'AR_RTR_PT_5_1_INQ_PRF_MATCH_FLIT_3_TO_0_FILTERING_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Increments when an incoming flit matches flit filtering setup registers 3 to 0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_1_INQ_PRF_MATCH_FLIT_3_TO_0_FILTERING_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_2_INQ_PRF_MATCH_FLIT_3_TO_0_FILTERING_CNT'} = {
    NAME => 'AR_RTR_PT_5_2_INQ_PRF_MATCH_FLIT_3_TO_0_FILTERING_CNT',
    LABEL => 'AR_RTR_PT_5_2_INQ_PRF_MATCH_FLIT_3_TO_0_FILTERING_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Increments when an incoming flit matches flit filtering setup registers 3 to 0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_2_INQ_PRF_MATCH_FLIT_3_TO_0_FILTERING_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_3_INQ_PRF_MATCH_FLIT_3_TO_0_FILTERING_CNT'} = {
    NAME => 'AR_RTR_PT_5_3_INQ_PRF_MATCH_FLIT_3_TO_0_FILTERING_CNT',
    LABEL => 'AR_RTR_PT_5_3_INQ_PRF_MATCH_FLIT_3_TO_0_FILTERING_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Increments when an incoming flit matches flit filtering setup registers 3 to 0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_3_INQ_PRF_MATCH_FLIT_3_TO_0_FILTERING_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_4_INQ_PRF_MATCH_FLIT_3_TO_0_FILTERING_CNT'} = {
    NAME => 'AR_RTR_PT_5_4_INQ_PRF_MATCH_FLIT_3_TO_0_FILTERING_CNT',
    LABEL => 'AR_RTR_PT_5_4_INQ_PRF_MATCH_FLIT_3_TO_0_FILTERING_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Increments when an incoming flit matches flit filtering setup registers 3 to 0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_4_INQ_PRF_MATCH_FLIT_3_TO_0_FILTERING_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_5_INQ_PRF_MATCH_FLIT_3_TO_0_FILTERING_CNT'} = {
    NAME => 'AR_RTR_PT_5_5_INQ_PRF_MATCH_FLIT_3_TO_0_FILTERING_CNT',
    LABEL => 'AR_RTR_PT_5_5_INQ_PRF_MATCH_FLIT_3_TO_0_FILTERING_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Increments when an incoming flit matches flit filtering setup registers 3 to 0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_5_INQ_PRF_MATCH_FLIT_3_TO_0_FILTERING_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_6_INQ_PRF_MATCH_FLIT_3_TO_0_FILTERING_CNT'} = {
    NAME => 'AR_RTR_PT_5_6_INQ_PRF_MATCH_FLIT_3_TO_0_FILTERING_CNT',
    LABEL => 'AR_RTR_PT_5_6_INQ_PRF_MATCH_FLIT_3_TO_0_FILTERING_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Increments when an incoming flit matches flit filtering setup registers 3 to 0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_6_INQ_PRF_MATCH_FLIT_3_TO_0_FILTERING_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_7_INQ_PRF_MATCH_FLIT_3_TO_0_FILTERING_CNT'} = {
    NAME => 'AR_RTR_PT_5_7_INQ_PRF_MATCH_FLIT_3_TO_0_FILTERING_CNT',
    LABEL => 'AR_RTR_PT_5_7_INQ_PRF_MATCH_FLIT_3_TO_0_FILTERING_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Increments when an incoming flit matches flit filtering setup registers 3 to 0',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_7_INQ_PRF_MATCH_FLIT_3_TO_0_FILTERING_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_0_INQ_PRF_MATCH_FLIT_7_TO_4_FILTERING_CNT'} = {
    NAME => 'AR_RTR_PT_5_0_INQ_PRF_MATCH_FLIT_7_TO_4_FILTERING_CNT',
    LABEL => 'AR_RTR_PT_5_0_INQ_PRF_MATCH_FLIT_7_TO_4_FILTERING_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Increments when an incoming flit matches flit filtering setup registers 7 to 4',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_0_INQ_PRF_MATCH_FLIT_7_TO_4_FILTERING_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_1_INQ_PRF_MATCH_FLIT_7_TO_4_FILTERING_CNT'} = {
    NAME => 'AR_RTR_PT_5_1_INQ_PRF_MATCH_FLIT_7_TO_4_FILTERING_CNT',
    LABEL => 'AR_RTR_PT_5_1_INQ_PRF_MATCH_FLIT_7_TO_4_FILTERING_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Increments when an incoming flit matches flit filtering setup registers 7 to 4',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_1_INQ_PRF_MATCH_FLIT_7_TO_4_FILTERING_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_2_INQ_PRF_MATCH_FLIT_7_TO_4_FILTERING_CNT'} = {
    NAME => 'AR_RTR_PT_5_2_INQ_PRF_MATCH_FLIT_7_TO_4_FILTERING_CNT',
    LABEL => 'AR_RTR_PT_5_2_INQ_PRF_MATCH_FLIT_7_TO_4_FILTERING_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Increments when an incoming flit matches flit filtering setup registers 7 to 4',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_2_INQ_PRF_MATCH_FLIT_7_TO_4_FILTERING_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_3_INQ_PRF_MATCH_FLIT_7_TO_4_FILTERING_CNT'} = {
    NAME => 'AR_RTR_PT_5_3_INQ_PRF_MATCH_FLIT_7_TO_4_FILTERING_CNT',
    LABEL => 'AR_RTR_PT_5_3_INQ_PRF_MATCH_FLIT_7_TO_4_FILTERING_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Increments when an incoming flit matches flit filtering setup registers 7 to 4',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_3_INQ_PRF_MATCH_FLIT_7_TO_4_FILTERING_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_4_INQ_PRF_MATCH_FLIT_7_TO_4_FILTERING_CNT'} = {
    NAME => 'AR_RTR_PT_5_4_INQ_PRF_MATCH_FLIT_7_TO_4_FILTERING_CNT',
    LABEL => 'AR_RTR_PT_5_4_INQ_PRF_MATCH_FLIT_7_TO_4_FILTERING_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Increments when an incoming flit matches flit filtering setup registers 7 to 4',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_4_INQ_PRF_MATCH_FLIT_7_TO_4_FILTERING_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_5_INQ_PRF_MATCH_FLIT_7_TO_4_FILTERING_CNT'} = {
    NAME => 'AR_RTR_PT_5_5_INQ_PRF_MATCH_FLIT_7_TO_4_FILTERING_CNT',
    LABEL => 'AR_RTR_PT_5_5_INQ_PRF_MATCH_FLIT_7_TO_4_FILTERING_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Increments when an incoming flit matches flit filtering setup registers 7 to 4',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_5_INQ_PRF_MATCH_FLIT_7_TO_4_FILTERING_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_6_INQ_PRF_MATCH_FLIT_7_TO_4_FILTERING_CNT'} = {
    NAME => 'AR_RTR_PT_5_6_INQ_PRF_MATCH_FLIT_7_TO_4_FILTERING_CNT',
    LABEL => 'AR_RTR_PT_5_6_INQ_PRF_MATCH_FLIT_7_TO_4_FILTERING_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Increments when an incoming flit matches flit filtering setup registers 7 to 4',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_6_INQ_PRF_MATCH_FLIT_7_TO_4_FILTERING_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_7_INQ_PRF_MATCH_FLIT_7_TO_4_FILTERING_CNT'} = {
    NAME => 'AR_RTR_PT_5_7_INQ_PRF_MATCH_FLIT_7_TO_4_FILTERING_CNT',
    LABEL => 'AR_RTR_PT_5_7_INQ_PRF_MATCH_FLIT_7_TO_4_FILTERING_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Increments when an incoming flit matches flit filtering setup registers 7 to 4',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_7_INQ_PRF_MATCH_FLIT_7_TO_4_FILTERING_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_0_INQ_PRF_REQ_ROWBUS_STALL_CNT'} = {
    NAME => 'AR_RTR_PT_5_0_INQ_PRF_REQ_ROWBUS_STALL_CNT',
    LABEL => 'AR_RTR_PT_5_0_INQ_PRF_REQ_ROWBUS_STALL_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts the occurrences when a row bus is not being used even whenvalid flits are sitting at the front of the OFIFOs but cannot be sent to the row buffers due to resource conflict',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_0_INQ_PRF_REQ_ROWBUS_STALL_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_1_INQ_PRF_REQ_ROWBUS_STALL_CNT'} = {
    NAME => 'AR_RTR_PT_5_1_INQ_PRF_REQ_ROWBUS_STALL_CNT',
    LABEL => 'AR_RTR_PT_5_1_INQ_PRF_REQ_ROWBUS_STALL_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts the occurrences when a row bus is not being used even whenvalid flits are sitting at the front of the OFIFOs but cannot be sent to the row buffers due to resource conflict',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_1_INQ_PRF_REQ_ROWBUS_STALL_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_2_INQ_PRF_REQ_ROWBUS_STALL_CNT'} = {
    NAME => 'AR_RTR_PT_5_2_INQ_PRF_REQ_ROWBUS_STALL_CNT',
    LABEL => 'AR_RTR_PT_5_2_INQ_PRF_REQ_ROWBUS_STALL_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts the occurrences when a row bus is not being used even whenvalid flits are sitting at the front of the OFIFOs but cannot be sent to the row buffers due to resource conflict',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_2_INQ_PRF_REQ_ROWBUS_STALL_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_3_INQ_PRF_REQ_ROWBUS_STALL_CNT'} = {
    NAME => 'AR_RTR_PT_5_3_INQ_PRF_REQ_ROWBUS_STALL_CNT',
    LABEL => 'AR_RTR_PT_5_3_INQ_PRF_REQ_ROWBUS_STALL_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts the occurrences when a row bus is not being used even whenvalid flits are sitting at the front of the OFIFOs but cannot be sent to the row buffers due to resource conflict',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_3_INQ_PRF_REQ_ROWBUS_STALL_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_4_INQ_PRF_REQ_ROWBUS_STALL_CNT'} = {
    NAME => 'AR_RTR_PT_5_4_INQ_PRF_REQ_ROWBUS_STALL_CNT',
    LABEL => 'AR_RTR_PT_5_4_INQ_PRF_REQ_ROWBUS_STALL_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts the occurrences when a row bus is not being used even whenvalid flits are sitting at the front of the OFIFOs but cannot be sent to the row buffers due to resource conflict',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_4_INQ_PRF_REQ_ROWBUS_STALL_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_5_INQ_PRF_REQ_ROWBUS_STALL_CNT'} = {
    NAME => 'AR_RTR_PT_5_5_INQ_PRF_REQ_ROWBUS_STALL_CNT',
    LABEL => 'AR_RTR_PT_5_5_INQ_PRF_REQ_ROWBUS_STALL_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts the occurrences when a row bus is not being used even whenvalid flits are sitting at the front of the OFIFOs but cannot be sent to the row buffers due to resource conflict',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_5_INQ_PRF_REQ_ROWBUS_STALL_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_6_INQ_PRF_REQ_ROWBUS_STALL_CNT'} = {
    NAME => 'AR_RTR_PT_5_6_INQ_PRF_REQ_ROWBUS_STALL_CNT',
    LABEL => 'AR_RTR_PT_5_6_INQ_PRF_REQ_ROWBUS_STALL_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts the occurrences when a row bus is not being used even whenvalid flits are sitting at the front of the OFIFOs but cannot be sent to the row buffers due to resource conflict',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_6_INQ_PRF_REQ_ROWBUS_STALL_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_7_INQ_PRF_REQ_ROWBUS_STALL_CNT'} = {
    NAME => 'AR_RTR_PT_5_7_INQ_PRF_REQ_ROWBUS_STALL_CNT',
    LABEL => 'AR_RTR_PT_5_7_INQ_PRF_REQ_ROWBUS_STALL_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts the occurrences when a row bus is not being used even whenvalid flits are sitting at the front of the OFIFOs but cannot be sent to the row buffers due to resource conflict',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_7_INQ_PRF_REQ_ROWBUS_STALL_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_0_INQ_PRF_RSP_ROWBUS_STALL_CNT'} = {
    NAME => 'AR_RTR_PT_5_0_INQ_PRF_RSP_ROWBUS_STALL_CNT',
    LABEL => 'AR_RTR_PT_5_0_INQ_PRF_RSP_ROWBUS_STALL_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts the occurrences when a row bus is not being used even whenvalid flits are sitting at the front of the OFIFOs but cannot be sent to the row buffers due to resource conflict',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_0_INQ_PRF_RSP_ROWBUS_STALL_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_1_INQ_PRF_RSP_ROWBUS_STALL_CNT'} = {
    NAME => 'AR_RTR_PT_5_1_INQ_PRF_RSP_ROWBUS_STALL_CNT',
    LABEL => 'AR_RTR_PT_5_1_INQ_PRF_RSP_ROWBUS_STALL_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts the occurrences when a row bus is not being used even whenvalid flits are sitting at the front of the OFIFOs but cannot be sent to the row buffers due to resource conflict',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_1_INQ_PRF_RSP_ROWBUS_STALL_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_2_INQ_PRF_RSP_ROWBUS_STALL_CNT'} = {
    NAME => 'AR_RTR_PT_5_2_INQ_PRF_RSP_ROWBUS_STALL_CNT',
    LABEL => 'AR_RTR_PT_5_2_INQ_PRF_RSP_ROWBUS_STALL_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts the occurrences when a row bus is not being used even whenvalid flits are sitting at the front of the OFIFOs but cannot be sent to the row buffers due to resource conflict',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_2_INQ_PRF_RSP_ROWBUS_STALL_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_3_INQ_PRF_RSP_ROWBUS_STALL_CNT'} = {
    NAME => 'AR_RTR_PT_5_3_INQ_PRF_RSP_ROWBUS_STALL_CNT',
    LABEL => 'AR_RTR_PT_5_3_INQ_PRF_RSP_ROWBUS_STALL_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts the occurrences when a row bus is not being used even whenvalid flits are sitting at the front of the OFIFOs but cannot be sent to the row buffers due to resource conflict',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_3_INQ_PRF_RSP_ROWBUS_STALL_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_4_INQ_PRF_RSP_ROWBUS_STALL_CNT'} = {
    NAME => 'AR_RTR_PT_5_4_INQ_PRF_RSP_ROWBUS_STALL_CNT',
    LABEL => 'AR_RTR_PT_5_4_INQ_PRF_RSP_ROWBUS_STALL_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts the occurrences when a row bus is not being used even whenvalid flits are sitting at the front of the OFIFOs but cannot be sent to the row buffers due to resource conflict',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_4_INQ_PRF_RSP_ROWBUS_STALL_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_5_INQ_PRF_RSP_ROWBUS_STALL_CNT'} = {
    NAME => 'AR_RTR_PT_5_5_INQ_PRF_RSP_ROWBUS_STALL_CNT',
    LABEL => 'AR_RTR_PT_5_5_INQ_PRF_RSP_ROWBUS_STALL_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts the occurrences when a row bus is not being used even whenvalid flits are sitting at the front of the OFIFOs but cannot be sent to the row buffers due to resource conflict',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_5_INQ_PRF_RSP_ROWBUS_STALL_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_6_INQ_PRF_RSP_ROWBUS_STALL_CNT'} = {
    NAME => 'AR_RTR_PT_5_6_INQ_PRF_RSP_ROWBUS_STALL_CNT',
    LABEL => 'AR_RTR_PT_5_6_INQ_PRF_RSP_ROWBUS_STALL_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts the occurrences when a row bus is not being used even whenvalid flits are sitting at the front of the OFIFOs but cannot be sent to the row buffers due to resource conflict',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_6_INQ_PRF_RSP_ROWBUS_STALL_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_7_INQ_PRF_RSP_ROWBUS_STALL_CNT'} = {
    NAME => 'AR_RTR_PT_5_7_INQ_PRF_RSP_ROWBUS_STALL_CNT',
    LABEL => 'AR_RTR_PT_5_7_INQ_PRF_RSP_ROWBUS_STALL_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts the occurrences when a row bus is not being used even whenvalid flits are sitting at the front of the OFIFOs but cannot be sent to the row buffers due to resource conflict',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_7_INQ_PRF_RSP_ROWBUS_STALL_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_0_INQ_PRF_ROWBUS_2X_USAGE_CNT'} = {
    NAME => 'AR_RTR_PT_5_0_INQ_PRF_ROWBUS_2X_USAGE_CNT',
    LABEL => 'AR_RTR_PT_5_0_INQ_PRF_ROWBUS_2X_USAGE_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts the occurrences where both paths are used simultaneously for delivering flits to the row buffers',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_0_INQ_PRF_ROWBUS_2X_USAGE_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_1_INQ_PRF_ROWBUS_2X_USAGE_CNT'} = {
    NAME => 'AR_RTR_PT_5_1_INQ_PRF_ROWBUS_2X_USAGE_CNT',
    LABEL => 'AR_RTR_PT_5_1_INQ_PRF_ROWBUS_2X_USAGE_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts the occurrences where both paths are used simultaneously for delivering flits to the row buffers',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_1_INQ_PRF_ROWBUS_2X_USAGE_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_2_INQ_PRF_ROWBUS_2X_USAGE_CNT'} = {
    NAME => 'AR_RTR_PT_5_2_INQ_PRF_ROWBUS_2X_USAGE_CNT',
    LABEL => 'AR_RTR_PT_5_2_INQ_PRF_ROWBUS_2X_USAGE_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts the occurrences where both paths are used simultaneously for delivering flits to the row buffers',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_2_INQ_PRF_ROWBUS_2X_USAGE_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_3_INQ_PRF_ROWBUS_2X_USAGE_CNT'} = {
    NAME => 'AR_RTR_PT_5_3_INQ_PRF_ROWBUS_2X_USAGE_CNT',
    LABEL => 'AR_RTR_PT_5_3_INQ_PRF_ROWBUS_2X_USAGE_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts the occurrences where both paths are used simultaneously for delivering flits to the row buffers',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_3_INQ_PRF_ROWBUS_2X_USAGE_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_4_INQ_PRF_ROWBUS_2X_USAGE_CNT'} = {
    NAME => 'AR_RTR_PT_5_4_INQ_PRF_ROWBUS_2X_USAGE_CNT',
    LABEL => 'AR_RTR_PT_5_4_INQ_PRF_ROWBUS_2X_USAGE_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts the occurrences where both paths are used simultaneously for delivering flits to the row buffers',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_4_INQ_PRF_ROWBUS_2X_USAGE_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_5_INQ_PRF_ROWBUS_2X_USAGE_CNT'} = {
    NAME => 'AR_RTR_PT_5_5_INQ_PRF_ROWBUS_2X_USAGE_CNT',
    LABEL => 'AR_RTR_PT_5_5_INQ_PRF_ROWBUS_2X_USAGE_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts the occurrences where both paths are used simultaneously for delivering flits to the row buffers',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_5_INQ_PRF_ROWBUS_2X_USAGE_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_6_INQ_PRF_ROWBUS_2X_USAGE_CNT'} = {
    NAME => 'AR_RTR_PT_5_6_INQ_PRF_ROWBUS_2X_USAGE_CNT',
    LABEL => 'AR_RTR_PT_5_6_INQ_PRF_ROWBUS_2X_USAGE_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts the occurrences where both paths are used simultaneously for delivering flits to the row buffers',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_6_INQ_PRF_ROWBUS_2X_USAGE_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_7_INQ_PRF_ROWBUS_2X_USAGE_CNT'} = {
    NAME => 'AR_RTR_PT_5_7_INQ_PRF_ROWBUS_2X_USAGE_CNT',
    LABEL => 'AR_RTR_PT_5_7_INQ_PRF_ROWBUS_2X_USAGE_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts the occurrences where both paths are used simultaneously for delivering flits to the row buffers',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_7_INQ_PRF_ROWBUS_2X_USAGE_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_0_INQ_PRF_PKT_TO_DEAD_LINK_CNT'} = {
    NAME => 'AR_RTR_PT_5_0_INQ_PRF_PKT_TO_DEAD_LINK_CNT',
    LABEL => 'AR_RTR_PT_5_0_INQ_PRF_PKT_TO_DEAD_LINK_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts the occurrences where packets are being routed toward a dead link',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_0_INQ_PRF_PKT_TO_DEAD_LINK_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_1_INQ_PRF_PKT_TO_DEAD_LINK_CNT'} = {
    NAME => 'AR_RTR_PT_5_1_INQ_PRF_PKT_TO_DEAD_LINK_CNT',
    LABEL => 'AR_RTR_PT_5_1_INQ_PRF_PKT_TO_DEAD_LINK_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts the occurrences where packets are being routed toward a dead link',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_1_INQ_PRF_PKT_TO_DEAD_LINK_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_2_INQ_PRF_PKT_TO_DEAD_LINK_CNT'} = {
    NAME => 'AR_RTR_PT_5_2_INQ_PRF_PKT_TO_DEAD_LINK_CNT',
    LABEL => 'AR_RTR_PT_5_2_INQ_PRF_PKT_TO_DEAD_LINK_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts the occurrences where packets are being routed toward a dead link',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_2_INQ_PRF_PKT_TO_DEAD_LINK_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_3_INQ_PRF_PKT_TO_DEAD_LINK_CNT'} = {
    NAME => 'AR_RTR_PT_5_3_INQ_PRF_PKT_TO_DEAD_LINK_CNT',
    LABEL => 'AR_RTR_PT_5_3_INQ_PRF_PKT_TO_DEAD_LINK_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts the occurrences where packets are being routed toward a dead link',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_3_INQ_PRF_PKT_TO_DEAD_LINK_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_4_INQ_PRF_PKT_TO_DEAD_LINK_CNT'} = {
    NAME => 'AR_RTR_PT_5_4_INQ_PRF_PKT_TO_DEAD_LINK_CNT',
    LABEL => 'AR_RTR_PT_5_4_INQ_PRF_PKT_TO_DEAD_LINK_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts the occurrences where packets are being routed toward a dead link',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_4_INQ_PRF_PKT_TO_DEAD_LINK_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_5_INQ_PRF_PKT_TO_DEAD_LINK_CNT'} = {
    NAME => 'AR_RTR_PT_5_5_INQ_PRF_PKT_TO_DEAD_LINK_CNT',
    LABEL => 'AR_RTR_PT_5_5_INQ_PRF_PKT_TO_DEAD_LINK_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts the occurrences where packets are being routed toward a dead link',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_5_INQ_PRF_PKT_TO_DEAD_LINK_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_6_INQ_PRF_PKT_TO_DEAD_LINK_CNT'} = {
    NAME => 'AR_RTR_PT_5_6_INQ_PRF_PKT_TO_DEAD_LINK_CNT',
    LABEL => 'AR_RTR_PT_5_6_INQ_PRF_PKT_TO_DEAD_LINK_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts the occurrences where packets are being routed toward a dead link',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_6_INQ_PRF_PKT_TO_DEAD_LINK_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_7_INQ_PRF_PKT_TO_DEAD_LINK_CNT'} = {
    NAME => 'AR_RTR_PT_5_7_INQ_PRF_PKT_TO_DEAD_LINK_CNT',
    LABEL => 'AR_RTR_PT_5_7_INQ_PRF_PKT_TO_DEAD_LINK_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Counts the occurrences where packets are being routed toward a dead link',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_7_INQ_PRF_PKT_TO_DEAD_LINK_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_0_COLBUF_PERF_STALL_RQ'} = {
    NAME => 'AR_RTR_PT_5_0_COLBUF_PERF_STALL_RQ',
    LABEL => 'AR_RTR_PT_5_0_COLBUF_PERF_STALL_RQ',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'The number of Lclks a valid request is stalled because of lack ofcredits',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_0_COLBUF_PERF_STALL_RQ'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_1_COLBUF_PERF_STALL_RQ'} = {
    NAME => 'AR_RTR_PT_5_1_COLBUF_PERF_STALL_RQ',
    LABEL => 'AR_RTR_PT_5_1_COLBUF_PERF_STALL_RQ',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'The number of Lclks a valid request is stalled because of lack ofcredits',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_1_COLBUF_PERF_STALL_RQ'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_2_COLBUF_PERF_STALL_RQ'} = {
    NAME => 'AR_RTR_PT_5_2_COLBUF_PERF_STALL_RQ',
    LABEL => 'AR_RTR_PT_5_2_COLBUF_PERF_STALL_RQ',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'The number of Lclks a valid request is stalled because of lack ofcredits',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_2_COLBUF_PERF_STALL_RQ'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_3_COLBUF_PERF_STALL_RQ'} = {
    NAME => 'AR_RTR_PT_5_3_COLBUF_PERF_STALL_RQ',
    LABEL => 'AR_RTR_PT_5_3_COLBUF_PERF_STALL_RQ',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'The number of Lclks a valid request is stalled because of lack ofcredits',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_3_COLBUF_PERF_STALL_RQ'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_4_COLBUF_PERF_STALL_RQ'} = {
    NAME => 'AR_RTR_PT_5_4_COLBUF_PERF_STALL_RQ',
    LABEL => 'AR_RTR_PT_5_4_COLBUF_PERF_STALL_RQ',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'The number of Lclks a valid request is stalled because of lack ofcredits',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_4_COLBUF_PERF_STALL_RQ'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_5_COLBUF_PERF_STALL_RQ'} = {
    NAME => 'AR_RTR_PT_5_5_COLBUF_PERF_STALL_RQ',
    LABEL => 'AR_RTR_PT_5_5_COLBUF_PERF_STALL_RQ',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'The number of Lclks a valid request is stalled because of lack ofcredits',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_5_COLBUF_PERF_STALL_RQ'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_6_COLBUF_PERF_STALL_RQ'} = {
    NAME => 'AR_RTR_PT_5_6_COLBUF_PERF_STALL_RQ',
    LABEL => 'AR_RTR_PT_5_6_COLBUF_PERF_STALL_RQ',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'The number of Lclks a valid request is stalled because of lack ofcredits',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_6_COLBUF_PERF_STALL_RQ'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_7_COLBUF_PERF_STALL_RQ'} = {
    NAME => 'AR_RTR_PT_5_7_COLBUF_PERF_STALL_RQ',
    LABEL => 'AR_RTR_PT_5_7_COLBUF_PERF_STALL_RQ',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'The number of Lclks a valid request is stalled because of lack ofcredits',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_7_COLBUF_PERF_STALL_RQ'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_0_COLBUF_PERF_STALL_RS'} = {
    NAME => 'AR_RTR_PT_5_0_COLBUF_PERF_STALL_RS',
    LABEL => 'AR_RTR_PT_5_0_COLBUF_PERF_STALL_RS',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'The number of Lclks a valid request is stalled because of lack ofcredits',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_0_COLBUF_PERF_STALL_RS'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_1_COLBUF_PERF_STALL_RS'} = {
    NAME => 'AR_RTR_PT_5_1_COLBUF_PERF_STALL_RS',
    LABEL => 'AR_RTR_PT_5_1_COLBUF_PERF_STALL_RS',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'The number of Lclks a valid request is stalled because of lack ofcredits',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_1_COLBUF_PERF_STALL_RS'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_2_COLBUF_PERF_STALL_RS'} = {
    NAME => 'AR_RTR_PT_5_2_COLBUF_PERF_STALL_RS',
    LABEL => 'AR_RTR_PT_5_2_COLBUF_PERF_STALL_RS',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'The number of Lclks a valid request is stalled because of lack ofcredits',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_2_COLBUF_PERF_STALL_RS'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_3_COLBUF_PERF_STALL_RS'} = {
    NAME => 'AR_RTR_PT_5_3_COLBUF_PERF_STALL_RS',
    LABEL => 'AR_RTR_PT_5_3_COLBUF_PERF_STALL_RS',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'The number of Lclks a valid request is stalled because of lack ofcredits',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_3_COLBUF_PERF_STALL_RS'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_4_COLBUF_PERF_STALL_RS'} = {
    NAME => 'AR_RTR_PT_5_4_COLBUF_PERF_STALL_RS',
    LABEL => 'AR_RTR_PT_5_4_COLBUF_PERF_STALL_RS',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'The number of Lclks a valid request is stalled because of lack ofcredits',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_4_COLBUF_PERF_STALL_RS'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_5_COLBUF_PERF_STALL_RS'} = {
    NAME => 'AR_RTR_PT_5_5_COLBUF_PERF_STALL_RS',
    LABEL => 'AR_RTR_PT_5_5_COLBUF_PERF_STALL_RS',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'The number of Lclks a valid request is stalled because of lack ofcredits',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_5_COLBUF_PERF_STALL_RS'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_6_COLBUF_PERF_STALL_RS'} = {
    NAME => 'AR_RTR_PT_5_6_COLBUF_PERF_STALL_RS',
    LABEL => 'AR_RTR_PT_5_6_COLBUF_PERF_STALL_RS',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'The number of Lclks a valid request is stalled because of lack ofcredits',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_6_COLBUF_PERF_STALL_RS'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_RTR_PT_5_7_COLBUF_PERF_STALL_RS'} = {
    NAME => 'AR_RTR_PT_5_7_COLBUF_PERF_STALL_RS',
    LABEL => 'AR_RTR_PT_5_7_COLBUF_PERF_STALL_RS',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'The number of Lclks a valid request is stalled because of lack ofcredits',
    CAT => 'craynpu',
};
$event_order{'AR_RTR_PT_5_7_COLBUF_PERF_STALL_RS'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_RAT_PRF_REQ_VAL0'} = {
    NAME => 'AR_NIC_RAT_PRF_REQ_VAL0',
    LABEL => 'AR_NIC_RAT_PRF_REQ_VAL0',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_RAT_PRF_REQ_VAL0'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_RAT_PRF_REQ_VAL0:FLIT_63_0'} = {
    NAME => 'AR_NIC_RAT_PRF_REQ_VAL0:FLIT_63_0',
    LABEL => 'AR_NIC_RAT_PRF_REQ_VAL0:FLIT_63_0',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Bits [63:0] of the flit',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_RAT_PRF_REQ_VAL0:FLIT_63_0'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_RAT_PRF_REQ_VAL1'} = {
    NAME => 'AR_NIC_RAT_PRF_REQ_VAL1',
    LABEL => 'AR_NIC_RAT_PRF_REQ_VAL1',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_RAT_PRF_REQ_VAL1'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_RAT_PRF_REQ_VAL1:FLIT_127_64'} = {
    NAME => 'AR_NIC_RAT_PRF_REQ_VAL1:FLIT_127_64',
    LABEL => 'AR_NIC_RAT_PRF_REQ_VAL1:FLIT_127_64',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Bits [127:64] of the flit',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_RAT_PRF_REQ_VAL1:FLIT_127_64'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_RAT_PRF_REQ_VAL2'} = {
    NAME => 'AR_NIC_RAT_PRF_REQ_VAL2',
    LABEL => 'AR_NIC_RAT_PRF_REQ_VAL2',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_RAT_PRF_REQ_VAL2'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_RAT_PRF_REQ_VAL2:IOMMU_EN'} = {
    NAME => 'AR_NIC_RAT_PRF_REQ_VAL2:IOMMU_EN',
    LABEL => 'AR_NIC_RAT_PRF_REQ_VAL2:IOMMU_EN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Enable this performance counter to look at incoming IOMMU requests',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_RAT_PRF_REQ_VAL2:IOMMU_EN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_RAT_PRF_REQ_VAL2:NL_EN'} = {
    NAME => 'AR_NIC_RAT_PRF_REQ_VAL2:NL_EN',
    LABEL => 'AR_NIC_RAT_PRF_REQ_VAL2:NL_EN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Enable this performance counter to look at incoming NL requests',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_RAT_PRF_REQ_VAL2:NL_EN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_RAT_PRF_REQ_VAL2:HDR'} = {
    NAME => 'AR_NIC_RAT_PRF_REQ_VAL2:HDR',
    LABEL => 'AR_NIC_RAT_PRF_REQ_VAL2:HDR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* 1 = Flit type is header',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_RAT_PRF_REQ_VAL2:HDR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_RAT_PRF_REQ_VAL2:TAIL'} = {
    NAME => 'AR_NIC_RAT_PRF_REQ_VAL2:TAIL',
    LABEL => 'AR_NIC_RAT_PRF_REQ_VAL2:TAIL',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* 1 = Flit is a tail flit',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_RAT_PRF_REQ_VAL2:TAIL'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_RAT_PRF_REQ_VAL2:FLIT_143_128'} = {
    NAME => 'AR_NIC_RAT_PRF_REQ_VAL2:FLIT_143_128',
    LABEL => 'AR_NIC_RAT_PRF_REQ_VAL2:FLIT_143_128',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Bits [143:128] of the flit',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_RAT_PRF_REQ_VAL2:FLIT_143_128'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_RAT_PRF_REQ_MASK0'} = {
    NAME => 'AR_NIC_RAT_PRF_REQ_MASK0',
    LABEL => 'AR_NIC_RAT_PRF_REQ_MASK0',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_RAT_PRF_REQ_MASK0'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_RAT_PRF_REQ_MASK0:FLIT_63_0'} = {
    NAME => 'AR_NIC_RAT_PRF_REQ_MASK0:FLIT_63_0',
    LABEL => 'AR_NIC_RAT_PRF_REQ_MASK0:FLIT_63_0',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Bits [63:0] of the flit',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_RAT_PRF_REQ_MASK0:FLIT_63_0'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_RAT_PRF_REQ_MASK1'} = {
    NAME => 'AR_NIC_RAT_PRF_REQ_MASK1',
    LABEL => 'AR_NIC_RAT_PRF_REQ_MASK1',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_RAT_PRF_REQ_MASK1'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_RAT_PRF_REQ_MASK1:FLIT_127_64'} = {
    NAME => 'AR_NIC_RAT_PRF_REQ_MASK1:FLIT_127_64',
    LABEL => 'AR_NIC_RAT_PRF_REQ_MASK1:FLIT_127_64',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Bits [127:64] of the flit',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_RAT_PRF_REQ_MASK1:FLIT_127_64'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_RAT_PRF_REQ_MASK2'} = {
    NAME => 'AR_NIC_RAT_PRF_REQ_MASK2',
    LABEL => 'AR_NIC_RAT_PRF_REQ_MASK2',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_RAT_PRF_REQ_MASK2'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_RAT_PRF_REQ_MASK2:HDR'} = {
    NAME => 'AR_NIC_RAT_PRF_REQ_MASK2:HDR',
    LABEL => 'AR_NIC_RAT_PRF_REQ_MASK2:HDR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Flit type (header/payload) To ensure atomicity, disable the counter (IOMMU_EN and NL_EN) before modifying the configuration',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_RAT_PRF_REQ_MASK2:HDR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_RAT_PRF_REQ_MASK2:TAIL'} = {
    NAME => 'AR_NIC_RAT_PRF_REQ_MASK2:TAIL',
    LABEL => 'AR_NIC_RAT_PRF_REQ_MASK2:TAIL',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Flit is a tail flit',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_RAT_PRF_REQ_MASK2:TAIL'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_RAT_PRF_REQ_MASK2:FLIT_143_128'} = {
    NAME => 'AR_NIC_RAT_PRF_REQ_MASK2:FLIT_143_128',
    LABEL => 'AR_NIC_RAT_PRF_REQ_MASK2:FLIT_143_128',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Bits [143:128] of the flit',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_RAT_PRF_REQ_MASK2:FLIT_143_128'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_RAT_PRF_RSP_VAL0'} = {
    NAME => 'AR_NIC_RAT_PRF_RSP_VAL0',
    LABEL => 'AR_NIC_RAT_PRF_RSP_VAL0',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_RAT_PRF_RSP_VAL0'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_RAT_PRF_RSP_VAL0:FLIT_63_0'} = {
    NAME => 'AR_NIC_RAT_PRF_RSP_VAL0:FLIT_63_0',
    LABEL => 'AR_NIC_RAT_PRF_RSP_VAL0:FLIT_63_0',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Bits [63:0] of the flit',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_RAT_PRF_RSP_VAL0:FLIT_63_0'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_RAT_PRF_RSP_VAL1'} = {
    NAME => 'AR_NIC_RAT_PRF_RSP_VAL1',
    LABEL => 'AR_NIC_RAT_PRF_RSP_VAL1',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_RAT_PRF_RSP_VAL1'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_RAT_PRF_RSP_VAL1:FLIT_127_64'} = {
    NAME => 'AR_NIC_RAT_PRF_RSP_VAL1:FLIT_127_64',
    LABEL => 'AR_NIC_RAT_PRF_RSP_VAL1:FLIT_127_64',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Bits [127:64] of the flit',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_RAT_PRF_RSP_VAL1:FLIT_127_64'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_RAT_PRF_RSP_VAL2'} = {
    NAME => 'AR_NIC_RAT_PRF_RSP_VAL2',
    LABEL => 'AR_NIC_RAT_PRF_RSP_VAL2',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_RAT_PRF_RSP_VAL2'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_RAT_PRF_RSP_VAL2:EN'} = {
    NAME => 'AR_NIC_RAT_PRF_RSP_VAL2:EN',
    LABEL => 'AR_NIC_RAT_PRF_RSP_VAL2:EN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Enable this performance counter',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_RAT_PRF_RSP_VAL2:EN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_RAT_PRF_RSP_VAL2:HDR'} = {
    NAME => 'AR_NIC_RAT_PRF_RSP_VAL2:HDR',
    LABEL => 'AR_NIC_RAT_PRF_RSP_VAL2:HDR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* 1 = Flit type is header',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_RAT_PRF_RSP_VAL2:HDR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_RAT_PRF_RSP_VAL2:TAIL'} = {
    NAME => 'AR_NIC_RAT_PRF_RSP_VAL2:TAIL',
    LABEL => 'AR_NIC_RAT_PRF_RSP_VAL2:TAIL',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* 1 = Flit is a tail flit',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_RAT_PRF_RSP_VAL2:TAIL'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_RAT_PRF_RSP_VAL2:FLIT_143_128'} = {
    NAME => 'AR_NIC_RAT_PRF_RSP_VAL2:FLIT_143_128',
    LABEL => 'AR_NIC_RAT_PRF_RSP_VAL2:FLIT_143_128',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Bits [143:128] of the flit',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_RAT_PRF_RSP_VAL2:FLIT_143_128'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_RAT_PRF_RSP_MASK0'} = {
    NAME => 'AR_NIC_RAT_PRF_RSP_MASK0',
    LABEL => 'AR_NIC_RAT_PRF_RSP_MASK0',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_RAT_PRF_RSP_MASK0'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_RAT_PRF_RSP_MASK0:FLIT_63_0'} = {
    NAME => 'AR_NIC_RAT_PRF_RSP_MASK0:FLIT_63_0',
    LABEL => 'AR_NIC_RAT_PRF_RSP_MASK0:FLIT_63_0',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Bits [63:0] of the flit',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_RAT_PRF_RSP_MASK0:FLIT_63_0'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_RAT_PRF_RSP_MASK1'} = {
    NAME => 'AR_NIC_RAT_PRF_RSP_MASK1',
    LABEL => 'AR_NIC_RAT_PRF_RSP_MASK1',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_RAT_PRF_RSP_MASK1'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_RAT_PRF_RSP_MASK1:FLIT_127_64'} = {
    NAME => 'AR_NIC_RAT_PRF_RSP_MASK1:FLIT_127_64',
    LABEL => 'AR_NIC_RAT_PRF_RSP_MASK1:FLIT_127_64',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Bits [127:64] of the flit',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_RAT_PRF_RSP_MASK1:FLIT_127_64'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_RAT_PRF_RSP_MASK2'} = {
    NAME => 'AR_NIC_RAT_PRF_RSP_MASK2',
    LABEL => 'AR_NIC_RAT_PRF_RSP_MASK2',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_RAT_PRF_RSP_MASK2'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_RAT_PRF_RSP_MASK2:HDR'} = {
    NAME => 'AR_NIC_RAT_PRF_RSP_MASK2:HDR',
    LABEL => 'AR_NIC_RAT_PRF_RSP_MASK2:HDR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Flit type (header/payload) To ensure atomicity, disable the counter (EN) before modifying the configuration',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_RAT_PRF_RSP_MASK2:HDR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_RAT_PRF_RSP_MASK2:TAIL'} = {
    NAME => 'AR_NIC_RAT_PRF_RSP_MASK2:TAIL',
    LABEL => 'AR_NIC_RAT_PRF_RSP_MASK2:TAIL',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Flit is a tail flit',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_RAT_PRF_RSP_MASK2:TAIL'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_RAT_PRF_RSP_MASK2:FLIT_143_128'} = {
    NAME => 'AR_NIC_RAT_PRF_RSP_MASK2:FLIT_143_128',
    LABEL => 'AR_NIC_RAT_PRF_RSP_MASK2:FLIT_143_128',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Bits [143:128] of the flit',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_RAT_PRF_RSP_MASK2:FLIT_143_128'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_RAT_PRF_EN'} = {
    NAME => 'AR_NIC_RAT_PRF_EN',
    LABEL => 'AR_NIC_RAT_PRF_EN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_RAT_PRF_EN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_RAT_PRF_EN:PRF_RSP_DURATION_EN'} = {
    NAME => 'AR_NIC_RAT_PRF_EN:PRF_RSP_DURATION_EN',
    LABEL => 'AR_NIC_RAT_PRF_EN:PRF_RSP_DURATION_EN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Enable register AR_NIC_RAT_PRF_RSP_STALL_DURATION',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_RAT_PRF_EN:PRF_RSP_DURATION_EN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_RAT_PRF_EN:PRF_REQ_DURATION_EN'} = {
    NAME => 'AR_NIC_RAT_PRF_EN:PRF_REQ_DURATION_EN',
    LABEL => 'AR_NIC_RAT_PRF_EN:PRF_REQ_DURATION_EN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Enable register AR_NIC_RAT_PRF_REQ_STALL_DURATION',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_RAT_PRF_EN:PRF_REQ_DURATION_EN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_RAT_PRF_REQ_STALL_DURATION'} = {
    NAME => 'AR_NIC_RAT_PRF_REQ_STALL_DURATION',
    LABEL => 'AR_NIC_RAT_PRF_REQ_STALL_DURATION',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Request stall duration',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_RAT_PRF_REQ_STALL_DURATION'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_RAT_PRF_RSP_STALL_DURATION'} = {
    NAME => 'AR_NIC_RAT_PRF_RSP_STALL_DURATION',
    LABEL => 'AR_NIC_RAT_PRF_RSP_STALL_DURATION',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Response stall duration',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_RAT_PRF_RSP_STALL_DURATION'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_RAT_PRF_REQ_BYTES_RCVD'} = {
    NAME => 'AR_NIC_RAT_PRF_REQ_BYTES_RCVD',
    LABEL => 'AR_NIC_RAT_PRF_REQ_BYTES_RCVD',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'The number of payload bytes received on the request channel',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_RAT_PRF_REQ_BYTES_RCVD'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_REQMON_PRF_EVENT_CNTR_CTRL'} = {
    NAME => 'AR_NIC_REQMON_PRF_EVENT_CNTR_CTRL',
    LABEL => 'AR_NIC_REQMON_PRF_EVENT_CNTR_CTRL',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_REQMON_PRF_EVENT_CNTR_CTRL'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_REQMON_PRF_EVENT_CNTR_CTRL:DISABLE_AUTO_UPDATE'} = {
    NAME => 'AR_NIC_REQMON_PRF_EVENT_CNTR_CTRL:DISABLE_AUTO_UPDATE',
    LABEL => 'AR_NIC_REQMON_PRF_EVENT_CNTR_CTRL:DISABLE_AUTO_UPDATE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Writing a 1 disables the auto-updating of the performance counter RAMs, turns off widget',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_REQMON_PRF_EVENT_CNTR_CTRL:DISABLE_AUTO_UPDATE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_REQMON_PRF_EVENT_CNTR_CTRL:ENABLE'} = {
    NAME => 'AR_NIC_REQMON_PRF_EVENT_CNTR_CTRL:ENABLE',
    LABEL => 'AR_NIC_REQMON_PRF_EVENT_CNTR_CTRL:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Writing a 1 enables performance counters, writing a 0 disables counting and allows all performance counters to be used as scratch',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_REQMON_PRF_EVENT_CNTR_CTRL:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_REQMON_PRF_EVENT_CNTR_CTRL:CLEAR'} = {
    NAME => 'AR_NIC_REQMON_PRF_EVENT_CNTR_CTRL:CLEAR',
    LABEL => 'AR_NIC_REQMON_PRF_EVENT_CNTR_CTRL:CLEAR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Writing a 1 initiates the clear sequence which clears all performance counters except scratch counters, read returns zero',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_REQMON_PRF_EVENT_CNTR_CTRL:CLEAR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_REQMON_PRF_EVENT_CNTR_CTRL:COUNTERS_CLEAR'} = {
    NAME => 'AR_NIC_REQMON_PRF_EVENT_CNTR_CTRL:COUNTERS_CLEAR',
    LABEL => 'AR_NIC_REQMON_PRF_EVENT_CNTR_CTRL:COUNTERS_CLEAR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* This bit is clear during the clear sequence and becomes set uponthe completion of the clear sequence',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_REQMON_PRF_EVENT_CNTR_CTRL:COUNTERS_CLEAR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_REQMON_PRF_EVENT_CNTR'} = {
    NAME => 'AR_NIC_REQMON_PRF_EVENT_CNTR',
    LABEL => 'AR_NIC_REQMON_PRF_EVENT_CNTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Event counters',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_REQMON_PRF_EVENT_CNTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_RMT_PRF_PUT_BYTES_RX'} = {
    NAME => 'AR_NIC_RMT_PRF_PUT_BYTES_RX',
    LABEL => 'AR_NIC_RMT_PRF_PUT_BYTES_RX',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Count of PUT bytes received',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_RMT_PRF_PUT_BYTES_RX'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_RMT_PRF_SEND_BYTES_RX'} = {
    NAME => 'AR_NIC_RMT_PRF_SEND_BYTES_RX',
    LABEL => 'AR_NIC_RMT_PRF_SEND_BYTES_RX',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Count of BTE_Send bytes received',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_RMT_PRF_SEND_BYTES_RX'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_RSPMON_PRF_EVENT_CNTR_CTRL'} = {
    NAME => 'AR_NIC_RSPMON_PRF_EVENT_CNTR_CTRL',
    LABEL => 'AR_NIC_RSPMON_PRF_EVENT_CNTR_CTRL',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_RSPMON_PRF_EVENT_CNTR_CTRL'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_RSPMON_PRF_EVENT_CNTR_CTRL:DISABLE_AUTO_UPDATE'} = {
    NAME => 'AR_NIC_RSPMON_PRF_EVENT_CNTR_CTRL:DISABLE_AUTO_UPDATE',
    LABEL => 'AR_NIC_RSPMON_PRF_EVENT_CNTR_CTRL:DISABLE_AUTO_UPDATE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Writing a 1 disables the auto-updating of the performance counter RAMs, turns off widget',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_RSPMON_PRF_EVENT_CNTR_CTRL:DISABLE_AUTO_UPDATE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_RSPMON_PRF_EVENT_CNTR_CTRL:ENABLE'} = {
    NAME => 'AR_NIC_RSPMON_PRF_EVENT_CNTR_CTRL:ENABLE',
    LABEL => 'AR_NIC_RSPMON_PRF_EVENT_CNTR_CTRL:ENABLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Writing a 1 enables performance counters, writing a 0 disables counting and allows all performance counters to be used as scratch',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_RSPMON_PRF_EVENT_CNTR_CTRL:ENABLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_RSPMON_PRF_EVENT_CNTR_CTRL:CLEAR'} = {
    NAME => 'AR_NIC_RSPMON_PRF_EVENT_CNTR_CTRL:CLEAR',
    LABEL => 'AR_NIC_RSPMON_PRF_EVENT_CNTR_CTRL:CLEAR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Writing a 1 initiates the clear sequence which clears all performance counters except scratch counters, read returns zero',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_RSPMON_PRF_EVENT_CNTR_CTRL:CLEAR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_RSPMON_PRF_EVENT_CNTR_CTRL:COUNTERS_CLEAR'} = {
    NAME => 'AR_NIC_RSPMON_PRF_EVENT_CNTR_CTRL:COUNTERS_CLEAR',
    LABEL => 'AR_NIC_RSPMON_PRF_EVENT_CNTR_CTRL:COUNTERS_CLEAR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* This bit is clear during the clear sequence and becomes set uponthe completion of the clear sequence',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_RSPMON_PRF_EVENT_CNTR_CTRL:COUNTERS_CLEAR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_RSPMON_PRF_EVENT_CNTR'} = {
    NAME => 'AR_NIC_RSPMON_PRF_EVENT_CNTR',
    LABEL => 'AR_NIC_RSPMON_PRF_EVENT_CNTR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Event counters',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_RSPMON_PRF_EVENT_CNTR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_SSID_CFG_EVENT_CNTR_FILTER'} = {
    NAME => 'AR_NIC_SSID_CFG_EVENT_CNTR_FILTER',
    LABEL => 'AR_NIC_SSID_CFG_EVENT_CNTR_FILTER',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Set to zero to configure default values',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_SSID_CFG_EVENT_CNTR_FILTER'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_SSID_CFG_EVENT_CNTR_FILTER:CHANNEL'} = {
    NAME => 'AR_NIC_SSID_CFG_EVENT_CNTR_FILTER:CHANNEL',
    LABEL => 'AR_NIC_SSID_CFG_EVENT_CNTR_FILTER:CHANNEL',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* The ID of the FMA descriptor, BTE channel, or virtual CE for which counting is enabled',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_SSID_CFG_EVENT_CNTR_FILTER:CHANNEL'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_SSID_CFG_EVENT_CNTR_FILTER:INITIATOR'} = {
    NAME => 'AR_NIC_SSID_CFG_EVENT_CNTR_FILTER:INITIATOR',
    LABEL => 'AR_NIC_SSID_CFG_EVENT_CNTR_FILTER:INITIATOR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* Selects whether counting is enabled for a FMA descriptor, a BTEchannel, or a virtual CE',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_SSID_CFG_EVENT_CNTR_FILTER:INITIATOR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_SSID_CFG_EVENT_CNTR_FILTER:ALL_CHAN_EN'} = {
    NAME => 'AR_NIC_SSID_CFG_EVENT_CNTR_FILTER:ALL_CHAN_EN',
    LABEL => 'AR_NIC_SSID_CFG_EVENT_CNTR_FILTER:ALL_CHAN_EN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => '* When set to 1, counting is enabled for all FMA descriptors, BTEchannels, and virtual CEs',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_SSID_CFG_EVENT_CNTR_FILTER:ALL_CHAN_EN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_SSID_PRF_CNTR_SSIDS_IN_USE:MAX_SSIDS_IN_USE'} = {
    NAME => 'AR_NIC_SSID_PRF_CNTR_SSIDS_IN_USE:MAX_SSIDS_IN_USE',
    LABEL => 'AR_NIC_SSID_PRF_CNTR_SSIDS_IN_USE:MAX_SSIDS_IN_USE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'The maximum number of SSIDs that have been in use simultaneously since this register was last initialized',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_SSID_PRF_CNTR_SSIDS_IN_USE:MAX_SSIDS_IN_USE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_SSID_PRF_CNTR_SSIDS_IN_USE:CUR_SSIDS_IN_USE'} = {
    NAME => 'AR_NIC_SSID_PRF_CNTR_SSIDS_IN_USE:CUR_SSIDS_IN_USE',
    LABEL => 'AR_NIC_SSID_PRF_CNTR_SSIDS_IN_USE:CUR_SSIDS_IN_USE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'The number of SSIDs currently in use across all Request Channels',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_SSID_PRF_CNTR_SSIDS_IN_USE:CUR_SSIDS_IN_USE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_WC_PRF_RSP_BYTES_RCVD'} = {
    NAME => 'AR_NIC_WC_PRF_RSP_BYTES_RCVD',
    LABEL => 'AR_NIC_WC_PRF_RSP_BYTES_RCVD',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Byte Count',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_WC_PRF_RSP_BYTES_RCVD'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_WC_PRF_BUFS_VLD'} = {
    NAME => 'AR_NIC_WC_PRF_BUFS_VLD',
    LABEL => 'AR_NIC_WC_PRF_BUFS_VLD',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Valid Buffers Count',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_WC_PRF_BUFS_VLD'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NL_PRF_PTILE_0_REQ_TO_NIC_0'} = {
    NAME => 'AR_NL_PRF_PTILE_0_REQ_TO_NIC_0',
    LABEL => 'AR_NL_PRF_PTILE_0_REQ_TO_NIC_0',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Requests from PTILE 0 to NIC 0',
    CAT => 'craynpu',
};
$event_order{'AR_NL_PRF_PTILE_0_REQ_TO_NIC_0'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NL_PRF_PTILE_0_REQ_TO_NIC_1'} = {
    NAME => 'AR_NL_PRF_PTILE_0_REQ_TO_NIC_1',
    LABEL => 'AR_NL_PRF_PTILE_0_REQ_TO_NIC_1',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Requests from PTILE 0 to NIC 1',
    CAT => 'craynpu',
};
$event_order{'AR_NL_PRF_PTILE_0_REQ_TO_NIC_1'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NL_PRF_PTILE_0_REQ_TO_NIC_0_STALLED'} = {
    NAME => 'AR_NL_PRF_PTILE_0_REQ_TO_NIC_0_STALLED',
    LABEL => 'AR_NL_PRF_PTILE_0_REQ_TO_NIC_0_STALLED',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Clock cycles PTILE 0 requests are stalled to NIC 0',
    CAT => 'craynpu',
};
$event_order{'AR_NL_PRF_PTILE_0_REQ_TO_NIC_0_STALLED'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NL_PRF_PTILE_0_REQ_TO_NIC_1_STALLED'} = {
    NAME => 'AR_NL_PRF_PTILE_0_REQ_TO_NIC_1_STALLED',
    LABEL => 'AR_NL_PRF_PTILE_0_REQ_TO_NIC_1_STALLED',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Clock cycles PTILE 0 requests are stalled to NIC 1',
    CAT => 'craynpu',
};
$event_order{'AR_NL_PRF_PTILE_0_REQ_TO_NIC_1_STALLED'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NL_PRF_PTILE_0_REQ_IN_NW_FLITS'} = {
    NAME => 'AR_NL_PRF_PTILE_0_REQ_IN_NW_FLITS',
    LABEL => 'AR_NL_PRF_PTILE_0_REQ_IN_NW_FLITS',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'NW request flits received from PTILE 0',
    CAT => 'craynpu',
};
$event_order{'AR_NL_PRF_PTILE_0_REQ_IN_NW_FLITS'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NL_PRF_PTILE_0_REQ_IN_NW_PKTS'} = {
    NAME => 'AR_NL_PRF_PTILE_0_REQ_IN_NW_PKTS',
    LABEL => 'AR_NL_PRF_PTILE_0_REQ_IN_NW_PKTS',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Request packets received from PTILE 0',
    CAT => 'craynpu',
};
$event_order{'AR_NL_PRF_PTILE_0_REQ_IN_NW_PKTS'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NL_PRF_PTILE_1_REQ_TO_NIC_0'} = {
    NAME => 'AR_NL_PRF_PTILE_1_REQ_TO_NIC_0',
    LABEL => 'AR_NL_PRF_PTILE_1_REQ_TO_NIC_0',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Requests from PTILE 1 to NIC 0',
    CAT => 'craynpu',
};
$event_order{'AR_NL_PRF_PTILE_1_REQ_TO_NIC_0'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NL_PRF_PTILE_1_REQ_TO_NIC_1'} = {
    NAME => 'AR_NL_PRF_PTILE_1_REQ_TO_NIC_1',
    LABEL => 'AR_NL_PRF_PTILE_1_REQ_TO_NIC_1',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Requests from PTILE 1 to NIC 1',
    CAT => 'craynpu',
};
$event_order{'AR_NL_PRF_PTILE_1_REQ_TO_NIC_1'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NL_PRF_PTILE_1_REQ_TO_NIC_0_STALLED'} = {
    NAME => 'AR_NL_PRF_PTILE_1_REQ_TO_NIC_0_STALLED',
    LABEL => 'AR_NL_PRF_PTILE_1_REQ_TO_NIC_0_STALLED',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Clock cycles PTILE 1 requests are stalled to NIC 0',
    CAT => 'craynpu',
};
$event_order{'AR_NL_PRF_PTILE_1_REQ_TO_NIC_0_STALLED'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NL_PRF_PTILE_1_REQ_TO_NIC_1_STALLED'} = {
    NAME => 'AR_NL_PRF_PTILE_1_REQ_TO_NIC_1_STALLED',
    LABEL => 'AR_NL_PRF_PTILE_1_REQ_TO_NIC_1_STALLED',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Clock cycles PTILE 1 requests are stalled to NIC 1',
    CAT => 'craynpu',
};
$event_order{'AR_NL_PRF_PTILE_1_REQ_TO_NIC_1_STALLED'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NL_PRF_PTILE_1_REQ_IN_NW_FLITS'} = {
    NAME => 'AR_NL_PRF_PTILE_1_REQ_IN_NW_FLITS',
    LABEL => 'AR_NL_PRF_PTILE_1_REQ_IN_NW_FLITS',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'NW request flits received from PTILE 1',
    CAT => 'craynpu',
};
$event_order{'AR_NL_PRF_PTILE_1_REQ_IN_NW_FLITS'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NL_PRF_PTILE_1_REQ_IN_NW_PKTS'} = {
    NAME => 'AR_NL_PRF_PTILE_1_REQ_IN_NW_PKTS',
    LABEL => 'AR_NL_PRF_PTILE_1_REQ_IN_NW_PKTS',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Request packets received from PTILE 1',
    CAT => 'craynpu',
};
$event_order{'AR_NL_PRF_PTILE_1_REQ_IN_NW_PKTS'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NL_PRF_PTILE_2_REQ_TO_NIC_0'} = {
    NAME => 'AR_NL_PRF_PTILE_2_REQ_TO_NIC_0',
    LABEL => 'AR_NL_PRF_PTILE_2_REQ_TO_NIC_0',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Requests from PTILE 2 to NIC 0',
    CAT => 'craynpu',
};
$event_order{'AR_NL_PRF_PTILE_2_REQ_TO_NIC_0'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NL_PRF_PTILE_2_REQ_TO_NIC_1'} = {
    NAME => 'AR_NL_PRF_PTILE_2_REQ_TO_NIC_1',
    LABEL => 'AR_NL_PRF_PTILE_2_REQ_TO_NIC_1',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Requests from PTILE 2 to NIC 1',
    CAT => 'craynpu',
};
$event_order{'AR_NL_PRF_PTILE_2_REQ_TO_NIC_1'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NL_PRF_PTILE_2_REQ_TO_NIC_0_STALLED'} = {
    NAME => 'AR_NL_PRF_PTILE_2_REQ_TO_NIC_0_STALLED',
    LABEL => 'AR_NL_PRF_PTILE_2_REQ_TO_NIC_0_STALLED',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Clock cycles PTILE 2 requests are stalled to NIC 0',
    CAT => 'craynpu',
};
$event_order{'AR_NL_PRF_PTILE_2_REQ_TO_NIC_0_STALLED'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NL_PRF_PTILE_2_REQ_TO_NIC_1_STALLED'} = {
    NAME => 'AR_NL_PRF_PTILE_2_REQ_TO_NIC_1_STALLED',
    LABEL => 'AR_NL_PRF_PTILE_2_REQ_TO_NIC_1_STALLED',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Clock cycles PTILE 2 requests are stalled to NIC 1',
    CAT => 'craynpu',
};
$event_order{'AR_NL_PRF_PTILE_2_REQ_TO_NIC_1_STALLED'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NL_PRF_PTILE_2_REQ_IN_NW_FLITS'} = {
    NAME => 'AR_NL_PRF_PTILE_2_REQ_IN_NW_FLITS',
    LABEL => 'AR_NL_PRF_PTILE_2_REQ_IN_NW_FLITS',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'NW request flits received from PTILE 2',
    CAT => 'craynpu',
};
$event_order{'AR_NL_PRF_PTILE_2_REQ_IN_NW_FLITS'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NL_PRF_PTILE_2_REQ_IN_NW_PKTS'} = {
    NAME => 'AR_NL_PRF_PTILE_2_REQ_IN_NW_PKTS',
    LABEL => 'AR_NL_PRF_PTILE_2_REQ_IN_NW_PKTS',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Request packets received from PTILE 2',
    CAT => 'craynpu',
};
$event_order{'AR_NL_PRF_PTILE_2_REQ_IN_NW_PKTS'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NL_PRF_PTILE_3_REQ_TO_NIC_0'} = {
    NAME => 'AR_NL_PRF_PTILE_3_REQ_TO_NIC_0',
    LABEL => 'AR_NL_PRF_PTILE_3_REQ_TO_NIC_0',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Requests from PTILE 3 to NIC 0',
    CAT => 'craynpu',
};
$event_order{'AR_NL_PRF_PTILE_3_REQ_TO_NIC_0'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NL_PRF_PTILE_3_REQ_TO_NIC_1'} = {
    NAME => 'AR_NL_PRF_PTILE_3_REQ_TO_NIC_1',
    LABEL => 'AR_NL_PRF_PTILE_3_REQ_TO_NIC_1',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Requests from PTILE 3 to NIC 1',
    CAT => 'craynpu',
};
$event_order{'AR_NL_PRF_PTILE_3_REQ_TO_NIC_1'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NL_PRF_PTILE_3_REQ_TO_NIC_0_STALLED'} = {
    NAME => 'AR_NL_PRF_PTILE_3_REQ_TO_NIC_0_STALLED',
    LABEL => 'AR_NL_PRF_PTILE_3_REQ_TO_NIC_0_STALLED',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Clock cycles PTILE 3 requests are stalled to NIC 0',
    CAT => 'craynpu',
};
$event_order{'AR_NL_PRF_PTILE_3_REQ_TO_NIC_0_STALLED'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NL_PRF_PTILE_3_REQ_TO_NIC_1_STALLED'} = {
    NAME => 'AR_NL_PRF_PTILE_3_REQ_TO_NIC_1_STALLED',
    LABEL => 'AR_NL_PRF_PTILE_3_REQ_TO_NIC_1_STALLED',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Clock cycles PTILE 3 requests are stalled to NIC 1',
    CAT => 'craynpu',
};
$event_order{'AR_NL_PRF_PTILE_3_REQ_TO_NIC_1_STALLED'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NL_PRF_PTILE_3_REQ_IN_NW_FLITS'} = {
    NAME => 'AR_NL_PRF_PTILE_3_REQ_IN_NW_FLITS',
    LABEL => 'AR_NL_PRF_PTILE_3_REQ_IN_NW_FLITS',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'NW request flits received from PTILE 3',
    CAT => 'craynpu',
};
$event_order{'AR_NL_PRF_PTILE_3_REQ_IN_NW_FLITS'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NL_PRF_PTILE_3_REQ_IN_NW_PKTS'} = {
    NAME => 'AR_NL_PRF_PTILE_3_REQ_IN_NW_PKTS',
    LABEL => 'AR_NL_PRF_PTILE_3_REQ_IN_NW_PKTS',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Request packets received from PTILE 3',
    CAT => 'craynpu',
};
$event_order{'AR_NL_PRF_PTILE_3_REQ_IN_NW_PKTS'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NL_PRF_PTILE_4_REQ_TO_NIC_2'} = {
    NAME => 'AR_NL_PRF_PTILE_4_REQ_TO_NIC_2',
    LABEL => 'AR_NL_PRF_PTILE_4_REQ_TO_NIC_2',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Requests from PTILE 4 to NIC 2',
    CAT => 'craynpu',
};
$event_order{'AR_NL_PRF_PTILE_4_REQ_TO_NIC_2'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NL_PRF_PTILE_4_REQ_TO_NIC_3'} = {
    NAME => 'AR_NL_PRF_PTILE_4_REQ_TO_NIC_3',
    LABEL => 'AR_NL_PRF_PTILE_4_REQ_TO_NIC_3',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Requests from PTILE 4 to NIC 3',
    CAT => 'craynpu',
};
$event_order{'AR_NL_PRF_PTILE_4_REQ_TO_NIC_3'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NL_PRF_PTILE_4_REQ_TO_NIC_2_STALLED'} = {
    NAME => 'AR_NL_PRF_PTILE_4_REQ_TO_NIC_2_STALLED',
    LABEL => 'AR_NL_PRF_PTILE_4_REQ_TO_NIC_2_STALLED',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Clock cycles PTILE 4 requests are stalled to NIC 2',
    CAT => 'craynpu',
};
$event_order{'AR_NL_PRF_PTILE_4_REQ_TO_NIC_2_STALLED'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NL_PRF_PTILE_4_REQ_TO_NIC_3_STALLED'} = {
    NAME => 'AR_NL_PRF_PTILE_4_REQ_TO_NIC_3_STALLED',
    LABEL => 'AR_NL_PRF_PTILE_4_REQ_TO_NIC_3_STALLED',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Clock cycles PTILE 4 requests are stalled to NIC 3',
    CAT => 'craynpu',
};
$event_order{'AR_NL_PRF_PTILE_4_REQ_TO_NIC_3_STALLED'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NL_PRF_PTILE_4_REQ_IN_NW_FLITS'} = {
    NAME => 'AR_NL_PRF_PTILE_4_REQ_IN_NW_FLITS',
    LABEL => 'AR_NL_PRF_PTILE_4_REQ_IN_NW_FLITS',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'NW request flits received from PTILE 4',
    CAT => 'craynpu',
};
$event_order{'AR_NL_PRF_PTILE_4_REQ_IN_NW_FLITS'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NL_PRF_PTILE_4_REQ_IN_NW_PKTS'} = {
    NAME => 'AR_NL_PRF_PTILE_4_REQ_IN_NW_PKTS',
    LABEL => 'AR_NL_PRF_PTILE_4_REQ_IN_NW_PKTS',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Request packets received from PTILE 4',
    CAT => 'craynpu',
};
$event_order{'AR_NL_PRF_PTILE_4_REQ_IN_NW_PKTS'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NL_PRF_PTILE_5_REQ_TO_NIC_2'} = {
    NAME => 'AR_NL_PRF_PTILE_5_REQ_TO_NIC_2',
    LABEL => 'AR_NL_PRF_PTILE_5_REQ_TO_NIC_2',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Requests from PTILE 5 to NIC 2',
    CAT => 'craynpu',
};
$event_order{'AR_NL_PRF_PTILE_5_REQ_TO_NIC_2'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NL_PRF_PTILE_5_REQ_TO_NIC_3'} = {
    NAME => 'AR_NL_PRF_PTILE_5_REQ_TO_NIC_3',
    LABEL => 'AR_NL_PRF_PTILE_5_REQ_TO_NIC_3',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Requests from PTILE 5 to NIC 3',
    CAT => 'craynpu',
};
$event_order{'AR_NL_PRF_PTILE_5_REQ_TO_NIC_3'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NL_PRF_PTILE_5_REQ_TO_NIC_2_STALLED'} = {
    NAME => 'AR_NL_PRF_PTILE_5_REQ_TO_NIC_2_STALLED',
    LABEL => 'AR_NL_PRF_PTILE_5_REQ_TO_NIC_2_STALLED',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Clock cycles PTILE 5 requests are stalled to NIC 2',
    CAT => 'craynpu',
};
$event_order{'AR_NL_PRF_PTILE_5_REQ_TO_NIC_2_STALLED'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NL_PRF_PTILE_5_REQ_TO_NIC_3_STALLED'} = {
    NAME => 'AR_NL_PRF_PTILE_5_REQ_TO_NIC_3_STALLED',
    LABEL => 'AR_NL_PRF_PTILE_5_REQ_TO_NIC_3_STALLED',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Clock cycles PTILE 5 requests are stalled to NIC 3',
    CAT => 'craynpu',
};
$event_order{'AR_NL_PRF_PTILE_5_REQ_TO_NIC_3_STALLED'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NL_PRF_PTILE_5_REQ_IN_NW_FLITS'} = {
    NAME => 'AR_NL_PRF_PTILE_5_REQ_IN_NW_FLITS',
    LABEL => 'AR_NL_PRF_PTILE_5_REQ_IN_NW_FLITS',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'NW request flits received from PTILE 5',
    CAT => 'craynpu',
};
$event_order{'AR_NL_PRF_PTILE_5_REQ_IN_NW_FLITS'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NL_PRF_PTILE_5_REQ_IN_NW_PKTS'} = {
    NAME => 'AR_NL_PRF_PTILE_5_REQ_IN_NW_PKTS',
    LABEL => 'AR_NL_PRF_PTILE_5_REQ_IN_NW_PKTS',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Request packets received from PTILE 5',
    CAT => 'craynpu',
};
$event_order{'AR_NL_PRF_PTILE_5_REQ_IN_NW_PKTS'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NL_PRF_PTILE_6_REQ_TO_NIC_2'} = {
    NAME => 'AR_NL_PRF_PTILE_6_REQ_TO_NIC_2',
    LABEL => 'AR_NL_PRF_PTILE_6_REQ_TO_NIC_2',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Requests from PTILE 6 to NIC 2',
    CAT => 'craynpu',
};
$event_order{'AR_NL_PRF_PTILE_6_REQ_TO_NIC_2'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NL_PRF_PTILE_6_REQ_TO_NIC_3'} = {
    NAME => 'AR_NL_PRF_PTILE_6_REQ_TO_NIC_3',
    LABEL => 'AR_NL_PRF_PTILE_6_REQ_TO_NIC_3',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Requests from PTILE 6 to NIC 3',
    CAT => 'craynpu',
};
$event_order{'AR_NL_PRF_PTILE_6_REQ_TO_NIC_3'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NL_PRF_PTILE_6_REQ_TO_NIC_2_STALLED'} = {
    NAME => 'AR_NL_PRF_PTILE_6_REQ_TO_NIC_2_STALLED',
    LABEL => 'AR_NL_PRF_PTILE_6_REQ_TO_NIC_2_STALLED',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Clock cycles PTILE 6 requests are stalled to NIC 2',
    CAT => 'craynpu',
};
$event_order{'AR_NL_PRF_PTILE_6_REQ_TO_NIC_2_STALLED'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NL_PRF_PTILE_6_REQ_TO_NIC_3_STALLED'} = {
    NAME => 'AR_NL_PRF_PTILE_6_REQ_TO_NIC_3_STALLED',
    LABEL => 'AR_NL_PRF_PTILE_6_REQ_TO_NIC_3_STALLED',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Clock cycles PTILE 6 requests are stalled to NIC 3',
    CAT => 'craynpu',
};
$event_order{'AR_NL_PRF_PTILE_6_REQ_TO_NIC_3_STALLED'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NL_PRF_PTILE_6_REQ_IN_NW_FLITS'} = {
    NAME => 'AR_NL_PRF_PTILE_6_REQ_IN_NW_FLITS',
    LABEL => 'AR_NL_PRF_PTILE_6_REQ_IN_NW_FLITS',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'NW request flits received from PTILE 6',
    CAT => 'craynpu',
};
$event_order{'AR_NL_PRF_PTILE_6_REQ_IN_NW_FLITS'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NL_PRF_PTILE_6_REQ_IN_NW_PKTS'} = {
    NAME => 'AR_NL_PRF_PTILE_6_REQ_IN_NW_PKTS',
    LABEL => 'AR_NL_PRF_PTILE_6_REQ_IN_NW_PKTS',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Request packets received from PTILE 6',
    CAT => 'craynpu',
};
$event_order{'AR_NL_PRF_PTILE_6_REQ_IN_NW_PKTS'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NL_PRF_PTILE_7_REQ_TO_NIC_2'} = {
    NAME => 'AR_NL_PRF_PTILE_7_REQ_TO_NIC_2',
    LABEL => 'AR_NL_PRF_PTILE_7_REQ_TO_NIC_2',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Requests from PTILE 7 to NIC 2',
    CAT => 'craynpu',
};
$event_order{'AR_NL_PRF_PTILE_7_REQ_TO_NIC_2'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NL_PRF_PTILE_7_REQ_TO_NIC_3'} = {
    NAME => 'AR_NL_PRF_PTILE_7_REQ_TO_NIC_3',
    LABEL => 'AR_NL_PRF_PTILE_7_REQ_TO_NIC_3',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Requests from PTILE 7 to NIC 3',
    CAT => 'craynpu',
};
$event_order{'AR_NL_PRF_PTILE_7_REQ_TO_NIC_3'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NL_PRF_PTILE_7_REQ_TO_NIC_2_STALLED'} = {
    NAME => 'AR_NL_PRF_PTILE_7_REQ_TO_NIC_2_STALLED',
    LABEL => 'AR_NL_PRF_PTILE_7_REQ_TO_NIC_2_STALLED',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Clock cycles PTILE 7 requests are stalled to NIC 2',
    CAT => 'craynpu',
};
$event_order{'AR_NL_PRF_PTILE_7_REQ_TO_NIC_2_STALLED'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NL_PRF_PTILE_7_REQ_TO_NIC_3_STALLED'} = {
    NAME => 'AR_NL_PRF_PTILE_7_REQ_TO_NIC_3_STALLED',
    LABEL => 'AR_NL_PRF_PTILE_7_REQ_TO_NIC_3_STALLED',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Clock cycles PTILE 7 requests are stalled to NIC 3',
    CAT => 'craynpu',
};
$event_order{'AR_NL_PRF_PTILE_7_REQ_TO_NIC_3_STALLED'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NL_PRF_PTILE_7_REQ_IN_NW_FLITS'} = {
    NAME => 'AR_NL_PRF_PTILE_7_REQ_IN_NW_FLITS',
    LABEL => 'AR_NL_PRF_PTILE_7_REQ_IN_NW_FLITS',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'NW request flits received from PTILE 7',
    CAT => 'craynpu',
};
$event_order{'AR_NL_PRF_PTILE_7_REQ_IN_NW_FLITS'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NL_PRF_PTILE_7_REQ_IN_NW_PKTS'} = {
    NAME => 'AR_NL_PRF_PTILE_7_REQ_IN_NW_PKTS',
    LABEL => 'AR_NL_PRF_PTILE_7_REQ_IN_NW_PKTS',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Request packets received from PTILE 7',
    CAT => 'craynpu',
};
$event_order{'AR_NL_PRF_PTILE_7_REQ_IN_NW_PKTS'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NL_PRF_PTILE_0_RSP_TO_NIC_0'} = {
    NAME => 'AR_NL_PRF_PTILE_0_RSP_TO_NIC_0',
    LABEL => 'AR_NL_PRF_PTILE_0_RSP_TO_NIC_0',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Responses from PTILE 0 to NIC 0',
    CAT => 'craynpu',
};
$event_order{'AR_NL_PRF_PTILE_0_RSP_TO_NIC_0'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NL_PRF_PTILE_0_RSP_TO_NIC_1'} = {
    NAME => 'AR_NL_PRF_PTILE_0_RSP_TO_NIC_1',
    LABEL => 'AR_NL_PRF_PTILE_0_RSP_TO_NIC_1',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Responses from PTILE 0 to NIC 1',
    CAT => 'craynpu',
};
$event_order{'AR_NL_PRF_PTILE_0_RSP_TO_NIC_1'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NL_PRF_PTILE_0_RSP_TO_NIC_0_STALLED'} = {
    NAME => 'AR_NL_PRF_PTILE_0_RSP_TO_NIC_0_STALLED',
    LABEL => 'AR_NL_PRF_PTILE_0_RSP_TO_NIC_0_STALLED',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Clock cycles PTILE 0 responses are stalled to NIC 0',
    CAT => 'craynpu',
};
$event_order{'AR_NL_PRF_PTILE_0_RSP_TO_NIC_0_STALLED'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NL_PRF_PTILE_0_RSP_TO_NIC_1_STALLED'} = {
    NAME => 'AR_NL_PRF_PTILE_0_RSP_TO_NIC_1_STALLED',
    LABEL => 'AR_NL_PRF_PTILE_0_RSP_TO_NIC_1_STALLED',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Clock cycles PTILE 0 responses are stalled to NIC 1',
    CAT => 'craynpu',
};
$event_order{'AR_NL_PRF_PTILE_0_RSP_TO_NIC_1_STALLED'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NL_PRF_PTILE_0_RSP_IN_NW_FLITS'} = {
    NAME => 'AR_NL_PRF_PTILE_0_RSP_IN_NW_FLITS',
    LABEL => 'AR_NL_PRF_PTILE_0_RSP_IN_NW_FLITS',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'NW response flits received from PTILE 0',
    CAT => 'craynpu',
};
$event_order{'AR_NL_PRF_PTILE_0_RSP_IN_NW_FLITS'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NL_PRF_PTILE_0_RSP_IN_NW_PKTS'} = {
    NAME => 'AR_NL_PRF_PTILE_0_RSP_IN_NW_PKTS',
    LABEL => 'AR_NL_PRF_PTILE_0_RSP_IN_NW_PKTS',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Response packets received from PTILE 0',
    CAT => 'craynpu',
};
$event_order{'AR_NL_PRF_PTILE_0_RSP_IN_NW_PKTS'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NL_PRF_PTILE_1_RSP_TO_NIC_0'} = {
    NAME => 'AR_NL_PRF_PTILE_1_RSP_TO_NIC_0',
    LABEL => 'AR_NL_PRF_PTILE_1_RSP_TO_NIC_0',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Responses from PTILE 1 to NIC 0',
    CAT => 'craynpu',
};
$event_order{'AR_NL_PRF_PTILE_1_RSP_TO_NIC_0'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NL_PRF_PTILE_1_RSP_TO_NIC_1'} = {
    NAME => 'AR_NL_PRF_PTILE_1_RSP_TO_NIC_1',
    LABEL => 'AR_NL_PRF_PTILE_1_RSP_TO_NIC_1',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Responses from PTILE 1 to NIC 1',
    CAT => 'craynpu',
};
$event_order{'AR_NL_PRF_PTILE_1_RSP_TO_NIC_1'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NL_PRF_PTILE_1_RSP_TO_NIC_0_STALLED'} = {
    NAME => 'AR_NL_PRF_PTILE_1_RSP_TO_NIC_0_STALLED',
    LABEL => 'AR_NL_PRF_PTILE_1_RSP_TO_NIC_0_STALLED',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Clock cycles PTILE 1 responses are stalled to NIC 0',
    CAT => 'craynpu',
};
$event_order{'AR_NL_PRF_PTILE_1_RSP_TO_NIC_0_STALLED'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NL_PRF_PTILE_1_RSP_TO_NIC_1_STALLED'} = {
    NAME => 'AR_NL_PRF_PTILE_1_RSP_TO_NIC_1_STALLED',
    LABEL => 'AR_NL_PRF_PTILE_1_RSP_TO_NIC_1_STALLED',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Clock cycles PTILE 1 responses are stalled to NIC 1',
    CAT => 'craynpu',
};
$event_order{'AR_NL_PRF_PTILE_1_RSP_TO_NIC_1_STALLED'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NL_PRF_PTILE_1_RSP_IN_NW_FLITS'} = {
    NAME => 'AR_NL_PRF_PTILE_1_RSP_IN_NW_FLITS',
    LABEL => 'AR_NL_PRF_PTILE_1_RSP_IN_NW_FLITS',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'NW response flits received from PTILE 1',
    CAT => 'craynpu',
};
$event_order{'AR_NL_PRF_PTILE_1_RSP_IN_NW_FLITS'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NL_PRF_PTILE_1_RSP_IN_NW_PKTS'} = {
    NAME => 'AR_NL_PRF_PTILE_1_RSP_IN_NW_PKTS',
    LABEL => 'AR_NL_PRF_PTILE_1_RSP_IN_NW_PKTS',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Response packets received from PTILE 1',
    CAT => 'craynpu',
};
$event_order{'AR_NL_PRF_PTILE_1_RSP_IN_NW_PKTS'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NL_PRF_PTILE_2_RSP_TO_NIC_0'} = {
    NAME => 'AR_NL_PRF_PTILE_2_RSP_TO_NIC_0',
    LABEL => 'AR_NL_PRF_PTILE_2_RSP_TO_NIC_0',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Responses from PTILE 2 to NIC 0',
    CAT => 'craynpu',
};
$event_order{'AR_NL_PRF_PTILE_2_RSP_TO_NIC_0'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NL_PRF_PTILE_2_RSP_TO_NIC_1'} = {
    NAME => 'AR_NL_PRF_PTILE_2_RSP_TO_NIC_1',
    LABEL => 'AR_NL_PRF_PTILE_2_RSP_TO_NIC_1',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Responses from PTILE 2 to NIC 1',
    CAT => 'craynpu',
};
$event_order{'AR_NL_PRF_PTILE_2_RSP_TO_NIC_1'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NL_PRF_PTILE_2_RSP_TO_NIC_0_STALLED'} = {
    NAME => 'AR_NL_PRF_PTILE_2_RSP_TO_NIC_0_STALLED',
    LABEL => 'AR_NL_PRF_PTILE_2_RSP_TO_NIC_0_STALLED',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Clock cycles PTILE 2 responses are stalled to NIC 0',
    CAT => 'craynpu',
};
$event_order{'AR_NL_PRF_PTILE_2_RSP_TO_NIC_0_STALLED'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NL_PRF_PTILE_2_RSP_TO_NIC_1_STALLED'} = {
    NAME => 'AR_NL_PRF_PTILE_2_RSP_TO_NIC_1_STALLED',
    LABEL => 'AR_NL_PRF_PTILE_2_RSP_TO_NIC_1_STALLED',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Clock cycles PTILE 2 responses are stalled to NIC 1',
    CAT => 'craynpu',
};
$event_order{'AR_NL_PRF_PTILE_2_RSP_TO_NIC_1_STALLED'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NL_PRF_PTILE_2_RSP_IN_NW_FLITS'} = {
    NAME => 'AR_NL_PRF_PTILE_2_RSP_IN_NW_FLITS',
    LABEL => 'AR_NL_PRF_PTILE_2_RSP_IN_NW_FLITS',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'NW response flits received from PTILE 2',
    CAT => 'craynpu',
};
$event_order{'AR_NL_PRF_PTILE_2_RSP_IN_NW_FLITS'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NL_PRF_PTILE_2_RSP_IN_NW_PKTS'} = {
    NAME => 'AR_NL_PRF_PTILE_2_RSP_IN_NW_PKTS',
    LABEL => 'AR_NL_PRF_PTILE_2_RSP_IN_NW_PKTS',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Response packets received from PTILE 2',
    CAT => 'craynpu',
};
$event_order{'AR_NL_PRF_PTILE_2_RSP_IN_NW_PKTS'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NL_PRF_PTILE_3_RSP_TO_NIC_0'} = {
    NAME => 'AR_NL_PRF_PTILE_3_RSP_TO_NIC_0',
    LABEL => 'AR_NL_PRF_PTILE_3_RSP_TO_NIC_0',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Responses from PTILE 3 to NIC 0',
    CAT => 'craynpu',
};
$event_order{'AR_NL_PRF_PTILE_3_RSP_TO_NIC_0'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NL_PRF_PTILE_3_RSP_TO_NIC_1'} = {
    NAME => 'AR_NL_PRF_PTILE_3_RSP_TO_NIC_1',
    LABEL => 'AR_NL_PRF_PTILE_3_RSP_TO_NIC_1',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Responses from PTILE 3 to NIC 1',
    CAT => 'craynpu',
};
$event_order{'AR_NL_PRF_PTILE_3_RSP_TO_NIC_1'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NL_PRF_PTILE_3_RSP_TO_NIC_0_STALLED'} = {
    NAME => 'AR_NL_PRF_PTILE_3_RSP_TO_NIC_0_STALLED',
    LABEL => 'AR_NL_PRF_PTILE_3_RSP_TO_NIC_0_STALLED',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Clock cycles PTILE 3 responses are stalled to NIC 0',
    CAT => 'craynpu',
};
$event_order{'AR_NL_PRF_PTILE_3_RSP_TO_NIC_0_STALLED'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NL_PRF_PTILE_3_RSP_TO_NIC_1_STALLED'} = {
    NAME => 'AR_NL_PRF_PTILE_3_RSP_TO_NIC_1_STALLED',
    LABEL => 'AR_NL_PRF_PTILE_3_RSP_TO_NIC_1_STALLED',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Clock cycles PTILE 3 responses are stalled to NIC 1',
    CAT => 'craynpu',
};
$event_order{'AR_NL_PRF_PTILE_3_RSP_TO_NIC_1_STALLED'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NL_PRF_PTILE_3_RSP_IN_NW_FLITS'} = {
    NAME => 'AR_NL_PRF_PTILE_3_RSP_IN_NW_FLITS',
    LABEL => 'AR_NL_PRF_PTILE_3_RSP_IN_NW_FLITS',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'NW response flits received from PTILE 3',
    CAT => 'craynpu',
};
$event_order{'AR_NL_PRF_PTILE_3_RSP_IN_NW_FLITS'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NL_PRF_PTILE_3_RSP_IN_NW_PKTS'} = {
    NAME => 'AR_NL_PRF_PTILE_3_RSP_IN_NW_PKTS',
    LABEL => 'AR_NL_PRF_PTILE_3_RSP_IN_NW_PKTS',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Response packets received from PTILE 3',
    CAT => 'craynpu',
};
$event_order{'AR_NL_PRF_PTILE_3_RSP_IN_NW_PKTS'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NL_PRF_PTILE_4_RSP_TO_NIC_2'} = {
    NAME => 'AR_NL_PRF_PTILE_4_RSP_TO_NIC_2',
    LABEL => 'AR_NL_PRF_PTILE_4_RSP_TO_NIC_2',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Responses from PTILE 4 to NIC 2',
    CAT => 'craynpu',
};
$event_order{'AR_NL_PRF_PTILE_4_RSP_TO_NIC_2'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NL_PRF_PTILE_4_RSP_TO_NIC_3'} = {
    NAME => 'AR_NL_PRF_PTILE_4_RSP_TO_NIC_3',
    LABEL => 'AR_NL_PRF_PTILE_4_RSP_TO_NIC_3',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Responses from PTILE 4 to NIC 3',
    CAT => 'craynpu',
};
$event_order{'AR_NL_PRF_PTILE_4_RSP_TO_NIC_3'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NL_PRF_PTILE_4_RSP_TO_NIC_2_STALLED'} = {
    NAME => 'AR_NL_PRF_PTILE_4_RSP_TO_NIC_2_STALLED',
    LABEL => 'AR_NL_PRF_PTILE_4_RSP_TO_NIC_2_STALLED',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Clock cycles PTILE 4 responses are stalled to NIC 2',
    CAT => 'craynpu',
};
$event_order{'AR_NL_PRF_PTILE_4_RSP_TO_NIC_2_STALLED'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NL_PRF_PTILE_4_RSP_TO_NIC_3_STALLED'} = {
    NAME => 'AR_NL_PRF_PTILE_4_RSP_TO_NIC_3_STALLED',
    LABEL => 'AR_NL_PRF_PTILE_4_RSP_TO_NIC_3_STALLED',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Clock cycles PTILE 4 responses are stalled to NIC 3',
    CAT => 'craynpu',
};
$event_order{'AR_NL_PRF_PTILE_4_RSP_TO_NIC_3_STALLED'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NL_PRF_PTILE_4_RSP_IN_NW_FLITS'} = {
    NAME => 'AR_NL_PRF_PTILE_4_RSP_IN_NW_FLITS',
    LABEL => 'AR_NL_PRF_PTILE_4_RSP_IN_NW_FLITS',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'NW response flits received from PTILE 4',
    CAT => 'craynpu',
};
$event_order{'AR_NL_PRF_PTILE_4_RSP_IN_NW_FLITS'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NL_PRF_PTILE_4_RSP_IN_NW_PKTS'} = {
    NAME => 'AR_NL_PRF_PTILE_4_RSP_IN_NW_PKTS',
    LABEL => 'AR_NL_PRF_PTILE_4_RSP_IN_NW_PKTS',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Response packets received from PTILE 4',
    CAT => 'craynpu',
};
$event_order{'AR_NL_PRF_PTILE_4_RSP_IN_NW_PKTS'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NL_PRF_PTILE_5_RSP_TO_NIC_2'} = {
    NAME => 'AR_NL_PRF_PTILE_5_RSP_TO_NIC_2',
    LABEL => 'AR_NL_PRF_PTILE_5_RSP_TO_NIC_2',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Responses from PTILE 5 to NIC 2',
    CAT => 'craynpu',
};
$event_order{'AR_NL_PRF_PTILE_5_RSP_TO_NIC_2'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NL_PRF_PTILE_5_RSP_TO_NIC_3'} = {
    NAME => 'AR_NL_PRF_PTILE_5_RSP_TO_NIC_3',
    LABEL => 'AR_NL_PRF_PTILE_5_RSP_TO_NIC_3',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Responses from PTILE 5 to NIC 3',
    CAT => 'craynpu',
};
$event_order{'AR_NL_PRF_PTILE_5_RSP_TO_NIC_3'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NL_PRF_PTILE_5_RSP_TO_NIC_2_STALLED'} = {
    NAME => 'AR_NL_PRF_PTILE_5_RSP_TO_NIC_2_STALLED',
    LABEL => 'AR_NL_PRF_PTILE_5_RSP_TO_NIC_2_STALLED',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Clock cycles PTILE 5 responses are stalled to NIC 2',
    CAT => 'craynpu',
};
$event_order{'AR_NL_PRF_PTILE_5_RSP_TO_NIC_2_STALLED'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NL_PRF_PTILE_5_RSP_TO_NIC_3_STALLED'} = {
    NAME => 'AR_NL_PRF_PTILE_5_RSP_TO_NIC_3_STALLED',
    LABEL => 'AR_NL_PRF_PTILE_5_RSP_TO_NIC_3_STALLED',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Clock cycles PTILE 5 responses are stalled to NIC 3',
    CAT => 'craynpu',
};
$event_order{'AR_NL_PRF_PTILE_5_RSP_TO_NIC_3_STALLED'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NL_PRF_PTILE_5_RSP_IN_NW_FLITS'} = {
    NAME => 'AR_NL_PRF_PTILE_5_RSP_IN_NW_FLITS',
    LABEL => 'AR_NL_PRF_PTILE_5_RSP_IN_NW_FLITS',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'NW response flits received from PTILE 5',
    CAT => 'craynpu',
};
$event_order{'AR_NL_PRF_PTILE_5_RSP_IN_NW_FLITS'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NL_PRF_PTILE_5_RSP_IN_NW_PKTS'} = {
    NAME => 'AR_NL_PRF_PTILE_5_RSP_IN_NW_PKTS',
    LABEL => 'AR_NL_PRF_PTILE_5_RSP_IN_NW_PKTS',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Response packets received from PTILE 5',
    CAT => 'craynpu',
};
$event_order{'AR_NL_PRF_PTILE_5_RSP_IN_NW_PKTS'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NL_PRF_PTILE_6_RSP_TO_NIC_2'} = {
    NAME => 'AR_NL_PRF_PTILE_6_RSP_TO_NIC_2',
    LABEL => 'AR_NL_PRF_PTILE_6_RSP_TO_NIC_2',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Responses from PTILE 6 to NIC 2',
    CAT => 'craynpu',
};
$event_order{'AR_NL_PRF_PTILE_6_RSP_TO_NIC_2'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NL_PRF_PTILE_6_RSP_TO_NIC_3'} = {
    NAME => 'AR_NL_PRF_PTILE_6_RSP_TO_NIC_3',
    LABEL => 'AR_NL_PRF_PTILE_6_RSP_TO_NIC_3',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Responses from PTILE 6 to NIC 3',
    CAT => 'craynpu',
};
$event_order{'AR_NL_PRF_PTILE_6_RSP_TO_NIC_3'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NL_PRF_PTILE_6_RSP_TO_NIC_2_STALLED'} = {
    NAME => 'AR_NL_PRF_PTILE_6_RSP_TO_NIC_2_STALLED',
    LABEL => 'AR_NL_PRF_PTILE_6_RSP_TO_NIC_2_STALLED',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Clock cycles PTILE 6 responses are stalled to NIC 2',
    CAT => 'craynpu',
};
$event_order{'AR_NL_PRF_PTILE_6_RSP_TO_NIC_2_STALLED'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NL_PRF_PTILE_6_RSP_TO_NIC_3_STALLED'} = {
    NAME => 'AR_NL_PRF_PTILE_6_RSP_TO_NIC_3_STALLED',
    LABEL => 'AR_NL_PRF_PTILE_6_RSP_TO_NIC_3_STALLED',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Clock cycles PTILE 6 responses are stalled to NIC 3',
    CAT => 'craynpu',
};
$event_order{'AR_NL_PRF_PTILE_6_RSP_TO_NIC_3_STALLED'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NL_PRF_PTILE_6_RSP_IN_NW_FLITS'} = {
    NAME => 'AR_NL_PRF_PTILE_6_RSP_IN_NW_FLITS',
    LABEL => 'AR_NL_PRF_PTILE_6_RSP_IN_NW_FLITS',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'NW response flits received from PTILE 6',
    CAT => 'craynpu',
};
$event_order{'AR_NL_PRF_PTILE_6_RSP_IN_NW_FLITS'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NL_PRF_PTILE_6_RSP_IN_NW_PKTS'} = {
    NAME => 'AR_NL_PRF_PTILE_6_RSP_IN_NW_PKTS',
    LABEL => 'AR_NL_PRF_PTILE_6_RSP_IN_NW_PKTS',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Response packets received from PTILE 6',
    CAT => 'craynpu',
};
$event_order{'AR_NL_PRF_PTILE_6_RSP_IN_NW_PKTS'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NL_PRF_PTILE_7_RSP_TO_NIC_2'} = {
    NAME => 'AR_NL_PRF_PTILE_7_RSP_TO_NIC_2',
    LABEL => 'AR_NL_PRF_PTILE_7_RSP_TO_NIC_2',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Responses from PTILE 7 to NIC 2',
    CAT => 'craynpu',
};
$event_order{'AR_NL_PRF_PTILE_7_RSP_TO_NIC_2'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NL_PRF_PTILE_7_RSP_TO_NIC_3'} = {
    NAME => 'AR_NL_PRF_PTILE_7_RSP_TO_NIC_3',
    LABEL => 'AR_NL_PRF_PTILE_7_RSP_TO_NIC_3',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Responses from PTILE 7 to NIC 3',
    CAT => 'craynpu',
};
$event_order{'AR_NL_PRF_PTILE_7_RSP_TO_NIC_3'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NL_PRF_PTILE_7_RSP_TO_NIC_2_STALLED'} = {
    NAME => 'AR_NL_PRF_PTILE_7_RSP_TO_NIC_2_STALLED',
    LABEL => 'AR_NL_PRF_PTILE_7_RSP_TO_NIC_2_STALLED',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Clock cycles PTILE 7 responses are stalled to NIC 2',
    CAT => 'craynpu',
};
$event_order{'AR_NL_PRF_PTILE_7_RSP_TO_NIC_2_STALLED'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NL_PRF_PTILE_7_RSP_TO_NIC_3_STALLED'} = {
    NAME => 'AR_NL_PRF_PTILE_7_RSP_TO_NIC_3_STALLED',
    LABEL => 'AR_NL_PRF_PTILE_7_RSP_TO_NIC_3_STALLED',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Clock cycles PTILE 7 responses are stalled to NIC 3',
    CAT => 'craynpu',
};
$event_order{'AR_NL_PRF_PTILE_7_RSP_TO_NIC_3_STALLED'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NL_PRF_PTILE_7_RSP_IN_NW_FLITS'} = {
    NAME => 'AR_NL_PRF_PTILE_7_RSP_IN_NW_FLITS',
    LABEL => 'AR_NL_PRF_PTILE_7_RSP_IN_NW_FLITS',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'NW response flits received from PTILE 7',
    CAT => 'craynpu',
};
$event_order{'AR_NL_PRF_PTILE_7_RSP_IN_NW_FLITS'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NL_PRF_PTILE_7_RSP_IN_NW_PKTS'} = {
    NAME => 'AR_NL_PRF_PTILE_7_RSP_IN_NW_PKTS',
    LABEL => 'AR_NL_PRF_PTILE_7_RSP_IN_NW_PKTS',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Response packets received from PTILE 7',
    CAT => 'craynpu',
};
$event_order{'AR_NL_PRF_PTILE_7_RSP_IN_NW_PKTS'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NL_PRF_REQ_PTILES_TO_NIC_0_FLITS'} = {
    NAME => 'AR_NL_PRF_REQ_PTILES_TO_NIC_0_FLITS',
    LABEL => 'AR_NL_PRF_REQ_PTILES_TO_NIC_0_FLITS',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'NIC request flits to NIC 0',
    CAT => 'craynpu',
};
$event_order{'AR_NL_PRF_REQ_PTILES_TO_NIC_0_FLITS'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NL_PRF_REQ_PTILES_TO_NIC_0_PKTS'} = {
    NAME => 'AR_NL_PRF_REQ_PTILES_TO_NIC_0_PKTS',
    LABEL => 'AR_NL_PRF_REQ_PTILES_TO_NIC_0_PKTS',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Request packets to NIC 0',
    CAT => 'craynpu',
};
$event_order{'AR_NL_PRF_REQ_PTILES_TO_NIC_0_PKTS'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NL_PRF_REQ_PTILES_TO_NIC_0_STALLED'} = {
    NAME => 'AR_NL_PRF_REQ_PTILES_TO_NIC_0_STALLED',
    LABEL => 'AR_NL_PRF_REQ_PTILES_TO_NIC_0_STALLED',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Clocks all request PTILEs have stalled to NIC 0',
    CAT => 'craynpu',
};
$event_order{'AR_NL_PRF_REQ_PTILES_TO_NIC_0_STALLED'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NL_PRF_REQ_PTILES_TO_NIC_1_FLITS'} = {
    NAME => 'AR_NL_PRF_REQ_PTILES_TO_NIC_1_FLITS',
    LABEL => 'AR_NL_PRF_REQ_PTILES_TO_NIC_1_FLITS',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'NIC request flits to NIC 1',
    CAT => 'craynpu',
};
$event_order{'AR_NL_PRF_REQ_PTILES_TO_NIC_1_FLITS'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NL_PRF_REQ_PTILES_TO_NIC_1_PKTS'} = {
    NAME => 'AR_NL_PRF_REQ_PTILES_TO_NIC_1_PKTS',
    LABEL => 'AR_NL_PRF_REQ_PTILES_TO_NIC_1_PKTS',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Request packets to NIC 1',
    CAT => 'craynpu',
};
$event_order{'AR_NL_PRF_REQ_PTILES_TO_NIC_1_PKTS'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NL_PRF_REQ_PTILES_TO_NIC_1_STALLED'} = {
    NAME => 'AR_NL_PRF_REQ_PTILES_TO_NIC_1_STALLED',
    LABEL => 'AR_NL_PRF_REQ_PTILES_TO_NIC_1_STALLED',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Clocks all request PTILEs have stalled to NIC 1',
    CAT => 'craynpu',
};
$event_order{'AR_NL_PRF_REQ_PTILES_TO_NIC_1_STALLED'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NL_PRF_REQ_PTILES_TO_NIC_2_FLITS'} = {
    NAME => 'AR_NL_PRF_REQ_PTILES_TO_NIC_2_FLITS',
    LABEL => 'AR_NL_PRF_REQ_PTILES_TO_NIC_2_FLITS',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'NIC request flits to NIC 2',
    CAT => 'craynpu',
};
$event_order{'AR_NL_PRF_REQ_PTILES_TO_NIC_2_FLITS'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NL_PRF_REQ_PTILES_TO_NIC_2_PKTS'} = {
    NAME => 'AR_NL_PRF_REQ_PTILES_TO_NIC_2_PKTS',
    LABEL => 'AR_NL_PRF_REQ_PTILES_TO_NIC_2_PKTS',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Request packets to NIC 2',
    CAT => 'craynpu',
};
$event_order{'AR_NL_PRF_REQ_PTILES_TO_NIC_2_PKTS'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NL_PRF_REQ_PTILES_TO_NIC_2_STALLED'} = {
    NAME => 'AR_NL_PRF_REQ_PTILES_TO_NIC_2_STALLED',
    LABEL => 'AR_NL_PRF_REQ_PTILES_TO_NIC_2_STALLED',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Clocks all request PTILEs have stalled to NIC 2',
    CAT => 'craynpu',
};
$event_order{'AR_NL_PRF_REQ_PTILES_TO_NIC_2_STALLED'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NL_PRF_REQ_PTILES_TO_NIC_3_FLITS'} = {
    NAME => 'AR_NL_PRF_REQ_PTILES_TO_NIC_3_FLITS',
    LABEL => 'AR_NL_PRF_REQ_PTILES_TO_NIC_3_FLITS',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'NIC request flits to NIC 3',
    CAT => 'craynpu',
};
$event_order{'AR_NL_PRF_REQ_PTILES_TO_NIC_3_FLITS'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NL_PRF_REQ_PTILES_TO_NIC_3_PKTS'} = {
    NAME => 'AR_NL_PRF_REQ_PTILES_TO_NIC_3_PKTS',
    LABEL => 'AR_NL_PRF_REQ_PTILES_TO_NIC_3_PKTS',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Request packets to NIC 3',
    CAT => 'craynpu',
};
$event_order{'AR_NL_PRF_REQ_PTILES_TO_NIC_3_PKTS'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NL_PRF_REQ_PTILES_TO_NIC_3_STALLED'} = {
    NAME => 'AR_NL_PRF_REQ_PTILES_TO_NIC_3_STALLED',
    LABEL => 'AR_NL_PRF_REQ_PTILES_TO_NIC_3_STALLED',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Clocks all request PTILEs have stalled to NIC 3',
    CAT => 'craynpu',
};
$event_order{'AR_NL_PRF_REQ_PTILES_TO_NIC_3_STALLED'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NL_PRF_RSP_PTILES_TO_NIC_0_FLITS'} = {
    NAME => 'AR_NL_PRF_RSP_PTILES_TO_NIC_0_FLITS',
    LABEL => 'AR_NL_PRF_RSP_PTILES_TO_NIC_0_FLITS',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'NIC response flits to NIC 0',
    CAT => 'craynpu',
};
$event_order{'AR_NL_PRF_RSP_PTILES_TO_NIC_0_FLITS'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NL_PRF_RSP_PTILES_TO_NIC_0_PKTS'} = {
    NAME => 'AR_NL_PRF_RSP_PTILES_TO_NIC_0_PKTS',
    LABEL => 'AR_NL_PRF_RSP_PTILES_TO_NIC_0_PKTS',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Response packets to NIC 0',
    CAT => 'craynpu',
};
$event_order{'AR_NL_PRF_RSP_PTILES_TO_NIC_0_PKTS'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NL_PRF_RSP_PTILES_TO_NIC_0_STALLED'} = {
    NAME => 'AR_NL_PRF_RSP_PTILES_TO_NIC_0_STALLED',
    LABEL => 'AR_NL_PRF_RSP_PTILES_TO_NIC_0_STALLED',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Clocks all response PTILEs have stalled to NIC 0',
    CAT => 'craynpu',
};
$event_order{'AR_NL_PRF_RSP_PTILES_TO_NIC_0_STALLED'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NL_PRF_RSP_PTILES_TO_NIC_1_FLITS'} = {
    NAME => 'AR_NL_PRF_RSP_PTILES_TO_NIC_1_FLITS',
    LABEL => 'AR_NL_PRF_RSP_PTILES_TO_NIC_1_FLITS',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'NIC response flits to NIC 1',
    CAT => 'craynpu',
};
$event_order{'AR_NL_PRF_RSP_PTILES_TO_NIC_1_FLITS'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NL_PRF_RSP_PTILES_TO_NIC_1_PKTS'} = {
    NAME => 'AR_NL_PRF_RSP_PTILES_TO_NIC_1_PKTS',
    LABEL => 'AR_NL_PRF_RSP_PTILES_TO_NIC_1_PKTS',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Response packets to NIC 1',
    CAT => 'craynpu',
};
$event_order{'AR_NL_PRF_RSP_PTILES_TO_NIC_1_PKTS'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NL_PRF_RSP_PTILES_TO_NIC_1_STALLED'} = {
    NAME => 'AR_NL_PRF_RSP_PTILES_TO_NIC_1_STALLED',
    LABEL => 'AR_NL_PRF_RSP_PTILES_TO_NIC_1_STALLED',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Clocks all response PTILEs have stalled to NIC 1',
    CAT => 'craynpu',
};
$event_order{'AR_NL_PRF_RSP_PTILES_TO_NIC_1_STALLED'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NL_PRF_RSP_PTILES_TO_NIC_2_FLITS'} = {
    NAME => 'AR_NL_PRF_RSP_PTILES_TO_NIC_2_FLITS',
    LABEL => 'AR_NL_PRF_RSP_PTILES_TO_NIC_2_FLITS',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'NIC response flits to NIC 2',
    CAT => 'craynpu',
};
$event_order{'AR_NL_PRF_RSP_PTILES_TO_NIC_2_FLITS'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NL_PRF_RSP_PTILES_TO_NIC_2_PKTS'} = {
    NAME => 'AR_NL_PRF_RSP_PTILES_TO_NIC_2_PKTS',
    LABEL => 'AR_NL_PRF_RSP_PTILES_TO_NIC_2_PKTS',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Response packets to NIC 2',
    CAT => 'craynpu',
};
$event_order{'AR_NL_PRF_RSP_PTILES_TO_NIC_2_PKTS'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NL_PRF_RSP_PTILES_TO_NIC_2_STALLED'} = {
    NAME => 'AR_NL_PRF_RSP_PTILES_TO_NIC_2_STALLED',
    LABEL => 'AR_NL_PRF_RSP_PTILES_TO_NIC_2_STALLED',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Clocks all response PTILEs have stalled to NIC 2',
    CAT => 'craynpu',
};
$event_order{'AR_NL_PRF_RSP_PTILES_TO_NIC_2_STALLED'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NL_PRF_RSP_PTILES_TO_NIC_3_FLITS'} = {
    NAME => 'AR_NL_PRF_RSP_PTILES_TO_NIC_3_FLITS',
    LABEL => 'AR_NL_PRF_RSP_PTILES_TO_NIC_3_FLITS',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'NIC response flits to NIC 3',
    CAT => 'craynpu',
};
$event_order{'AR_NL_PRF_RSP_PTILES_TO_NIC_3_FLITS'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NL_PRF_RSP_PTILES_TO_NIC_3_PKTS'} = {
    NAME => 'AR_NL_PRF_RSP_PTILES_TO_NIC_3_PKTS',
    LABEL => 'AR_NL_PRF_RSP_PTILES_TO_NIC_3_PKTS',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Response packets to NIC 3',
    CAT => 'craynpu',
};
$event_order{'AR_NL_PRF_RSP_PTILES_TO_NIC_3_PKTS'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NL_PRF_RSP_PTILES_TO_NIC_3_STALLED'} = {
    NAME => 'AR_NL_PRF_RSP_PTILES_TO_NIC_3_STALLED',
    LABEL => 'AR_NL_PRF_RSP_PTILES_TO_NIC_3_STALLED',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Clocks all response PTILEs have stalled to NIC 3',
    CAT => 'craynpu',
};
$event_order{'AR_NL_PRF_RSP_PTILES_TO_NIC_3_STALLED'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NL_PRF_NIC_0_REQ_TO_PTILE_0'} = {
    NAME => 'AR_NL_PRF_NIC_0_REQ_TO_PTILE_0',
    LABEL => 'AR_NL_PRF_NIC_0_REQ_TO_PTILE_0',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Requests from NIC 0 to PTILE 0',
    CAT => 'craynpu',
};
$event_order{'AR_NL_PRF_NIC_0_REQ_TO_PTILE_0'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NL_PRF_NIC_1_REQ_TO_PTILE_0'} = {
    NAME => 'AR_NL_PRF_NIC_1_REQ_TO_PTILE_0',
    LABEL => 'AR_NL_PRF_NIC_1_REQ_TO_PTILE_0',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Requests from NIC 1 to PTILE 0',
    CAT => 'craynpu',
};
$event_order{'AR_NL_PRF_NIC_1_REQ_TO_PTILE_0'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NL_PRF_NIC_0_REQ_TO_PTILE_0_STALLED'} = {
    NAME => 'AR_NL_PRF_NIC_0_REQ_TO_PTILE_0_STALLED',
    LABEL => 'AR_NL_PRF_NIC_0_REQ_TO_PTILE_0_STALLED',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Clock cycles NIC 0 requests are stalled to PTILE 0',
    CAT => 'craynpu',
};
$event_order{'AR_NL_PRF_NIC_0_REQ_TO_PTILE_0_STALLED'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NL_PRF_NIC_1_REQ_TO_PTILE_0_STALLED'} = {
    NAME => 'AR_NL_PRF_NIC_1_REQ_TO_PTILE_0_STALLED',
    LABEL => 'AR_NL_PRF_NIC_1_REQ_TO_PTILE_0_STALLED',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Clock cycles NIC 1 requests are stalled to PTILE 0',
    CAT => 'craynpu',
};
$event_order{'AR_NL_PRF_NIC_1_REQ_TO_PTILE_0_STALLED'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NL_PRF_PTILE_0_REQ_OUT_NW_FLITS'} = {
    NAME => 'AR_NL_PRF_PTILE_0_REQ_OUT_NW_FLITS',
    LABEL => 'AR_NL_PRF_PTILE_0_REQ_OUT_NW_FLITS',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'NW request flits sent to PTILE 0',
    CAT => 'craynpu',
};
$event_order{'AR_NL_PRF_PTILE_0_REQ_OUT_NW_FLITS'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NL_PRF_PTILE_0_REQ_OUT_NW_PKTS'} = {
    NAME => 'AR_NL_PRF_PTILE_0_REQ_OUT_NW_PKTS',
    LABEL => 'AR_NL_PRF_PTILE_0_REQ_OUT_NW_PKTS',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Request packets sent to PTILE 0',
    CAT => 'craynpu',
};
$event_order{'AR_NL_PRF_PTILE_0_REQ_OUT_NW_PKTS'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NL_PRF_NIC_0_REQ_TO_PTILE_1'} = {
    NAME => 'AR_NL_PRF_NIC_0_REQ_TO_PTILE_1',
    LABEL => 'AR_NL_PRF_NIC_0_REQ_TO_PTILE_1',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Requests from NIC 0 to PTILE 1',
    CAT => 'craynpu',
};
$event_order{'AR_NL_PRF_NIC_0_REQ_TO_PTILE_1'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NL_PRF_NIC_1_REQ_TO_PTILE_1'} = {
    NAME => 'AR_NL_PRF_NIC_1_REQ_TO_PTILE_1',
    LABEL => 'AR_NL_PRF_NIC_1_REQ_TO_PTILE_1',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Requests from NIC 1 to PTILE 1',
    CAT => 'craynpu',
};
$event_order{'AR_NL_PRF_NIC_1_REQ_TO_PTILE_1'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NL_PRF_NIC_0_REQ_TO_PTILE_1_STALLED'} = {
    NAME => 'AR_NL_PRF_NIC_0_REQ_TO_PTILE_1_STALLED',
    LABEL => 'AR_NL_PRF_NIC_0_REQ_TO_PTILE_1_STALLED',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Clock cycles NIC 0 requests are stalled to PTILE 1',
    CAT => 'craynpu',
};
$event_order{'AR_NL_PRF_NIC_0_REQ_TO_PTILE_1_STALLED'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NL_PRF_NIC_1_REQ_TO_PTILE_1_STALLED'} = {
    NAME => 'AR_NL_PRF_NIC_1_REQ_TO_PTILE_1_STALLED',
    LABEL => 'AR_NL_PRF_NIC_1_REQ_TO_PTILE_1_STALLED',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Clock cycles NIC 1 requests are stalled to PTILE 1',
    CAT => 'craynpu',
};
$event_order{'AR_NL_PRF_NIC_1_REQ_TO_PTILE_1_STALLED'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NL_PRF_PTILE_1_REQ_OUT_NW_FLITS'} = {
    NAME => 'AR_NL_PRF_PTILE_1_REQ_OUT_NW_FLITS',
    LABEL => 'AR_NL_PRF_PTILE_1_REQ_OUT_NW_FLITS',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'NW request flits sent to PTILE 1',
    CAT => 'craynpu',
};
$event_order{'AR_NL_PRF_PTILE_1_REQ_OUT_NW_FLITS'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NL_PRF_PTILE_1_REQ_OUT_NW_PKTS'} = {
    NAME => 'AR_NL_PRF_PTILE_1_REQ_OUT_NW_PKTS',
    LABEL => 'AR_NL_PRF_PTILE_1_REQ_OUT_NW_PKTS',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Request packets sent to PTILE 1',
    CAT => 'craynpu',
};
$event_order{'AR_NL_PRF_PTILE_1_REQ_OUT_NW_PKTS'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NL_PRF_NIC_0_REQ_TO_PTILE_2'} = {
    NAME => 'AR_NL_PRF_NIC_0_REQ_TO_PTILE_2',
    LABEL => 'AR_NL_PRF_NIC_0_REQ_TO_PTILE_2',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Requests from NIC 0 to PTILE 2',
    CAT => 'craynpu',
};
$event_order{'AR_NL_PRF_NIC_0_REQ_TO_PTILE_2'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NL_PRF_NIC_1_REQ_TO_PTILE_2'} = {
    NAME => 'AR_NL_PRF_NIC_1_REQ_TO_PTILE_2',
    LABEL => 'AR_NL_PRF_NIC_1_REQ_TO_PTILE_2',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Requests from NIC 1 to PTILE 2',
    CAT => 'craynpu',
};
$event_order{'AR_NL_PRF_NIC_1_REQ_TO_PTILE_2'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NL_PRF_NIC_0_REQ_TO_PTILE_2_STALLED'} = {
    NAME => 'AR_NL_PRF_NIC_0_REQ_TO_PTILE_2_STALLED',
    LABEL => 'AR_NL_PRF_NIC_0_REQ_TO_PTILE_2_STALLED',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Clock cycles NIC 0 requests are stalled to PTILE 2',
    CAT => 'craynpu',
};
$event_order{'AR_NL_PRF_NIC_0_REQ_TO_PTILE_2_STALLED'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NL_PRF_NIC_1_REQ_TO_PTILE_2_STALLED'} = {
    NAME => 'AR_NL_PRF_NIC_1_REQ_TO_PTILE_2_STALLED',
    LABEL => 'AR_NL_PRF_NIC_1_REQ_TO_PTILE_2_STALLED',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Clock cycles NIC 1 requests are stalled to PTILE 2',
    CAT => 'craynpu',
};
$event_order{'AR_NL_PRF_NIC_1_REQ_TO_PTILE_2_STALLED'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NL_PRF_PTILE_2_REQ_OUT_NW_FLITS'} = {
    NAME => 'AR_NL_PRF_PTILE_2_REQ_OUT_NW_FLITS',
    LABEL => 'AR_NL_PRF_PTILE_2_REQ_OUT_NW_FLITS',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'NW request flits sent to PTILE 2',
    CAT => 'craynpu',
};
$event_order{'AR_NL_PRF_PTILE_2_REQ_OUT_NW_FLITS'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NL_PRF_PTILE_2_REQ_OUT_NW_PKTS'} = {
    NAME => 'AR_NL_PRF_PTILE_2_REQ_OUT_NW_PKTS',
    LABEL => 'AR_NL_PRF_PTILE_2_REQ_OUT_NW_PKTS',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Request packets sent to PTILE 2',
    CAT => 'craynpu',
};
$event_order{'AR_NL_PRF_PTILE_2_REQ_OUT_NW_PKTS'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NL_PRF_NIC_0_REQ_TO_PTILE_3'} = {
    NAME => 'AR_NL_PRF_NIC_0_REQ_TO_PTILE_3',
    LABEL => 'AR_NL_PRF_NIC_0_REQ_TO_PTILE_3',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Requests from NIC 0 to PTILE 3',
    CAT => 'craynpu',
};
$event_order{'AR_NL_PRF_NIC_0_REQ_TO_PTILE_3'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NL_PRF_NIC_1_REQ_TO_PTILE_3'} = {
    NAME => 'AR_NL_PRF_NIC_1_REQ_TO_PTILE_3',
    LABEL => 'AR_NL_PRF_NIC_1_REQ_TO_PTILE_3',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Requests from NIC 1 to PTILE 3',
    CAT => 'craynpu',
};
$event_order{'AR_NL_PRF_NIC_1_REQ_TO_PTILE_3'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NL_PRF_NIC_0_REQ_TO_PTILE_3_STALLED'} = {
    NAME => 'AR_NL_PRF_NIC_0_REQ_TO_PTILE_3_STALLED',
    LABEL => 'AR_NL_PRF_NIC_0_REQ_TO_PTILE_3_STALLED',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Clock cycles NIC 0 requests are stalled to PTILE 3',
    CAT => 'craynpu',
};
$event_order{'AR_NL_PRF_NIC_0_REQ_TO_PTILE_3_STALLED'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NL_PRF_NIC_1_REQ_TO_PTILE_3_STALLED'} = {
    NAME => 'AR_NL_PRF_NIC_1_REQ_TO_PTILE_3_STALLED',
    LABEL => 'AR_NL_PRF_NIC_1_REQ_TO_PTILE_3_STALLED',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Clock cycles NIC 1 requests are stalled to PTILE 3',
    CAT => 'craynpu',
};
$event_order{'AR_NL_PRF_NIC_1_REQ_TO_PTILE_3_STALLED'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NL_PRF_PTILE_3_REQ_OUT_NW_FLITS'} = {
    NAME => 'AR_NL_PRF_PTILE_3_REQ_OUT_NW_FLITS',
    LABEL => 'AR_NL_PRF_PTILE_3_REQ_OUT_NW_FLITS',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'NW request flits sent to PTILE 3',
    CAT => 'craynpu',
};
$event_order{'AR_NL_PRF_PTILE_3_REQ_OUT_NW_FLITS'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NL_PRF_PTILE_3_REQ_OUT_NW_PKTS'} = {
    NAME => 'AR_NL_PRF_PTILE_3_REQ_OUT_NW_PKTS',
    LABEL => 'AR_NL_PRF_PTILE_3_REQ_OUT_NW_PKTS',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Request packets sent to PTILE 3',
    CAT => 'craynpu',
};
$event_order{'AR_NL_PRF_PTILE_3_REQ_OUT_NW_PKTS'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NL_PRF_NIC_2_REQ_TO_PTILE_4'} = {
    NAME => 'AR_NL_PRF_NIC_2_REQ_TO_PTILE_4',
    LABEL => 'AR_NL_PRF_NIC_2_REQ_TO_PTILE_4',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Requests from NIC 2 to PTILE 4',
    CAT => 'craynpu',
};
$event_order{'AR_NL_PRF_NIC_2_REQ_TO_PTILE_4'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NL_PRF_NIC_3_REQ_TO_PTILE_4'} = {
    NAME => 'AR_NL_PRF_NIC_3_REQ_TO_PTILE_4',
    LABEL => 'AR_NL_PRF_NIC_3_REQ_TO_PTILE_4',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Requests from NIC 3 to PTILE 4',
    CAT => 'craynpu',
};
$event_order{'AR_NL_PRF_NIC_3_REQ_TO_PTILE_4'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NL_PRF_NIC_2_REQ_TO_PTILE_4_STALLED'} = {
    NAME => 'AR_NL_PRF_NIC_2_REQ_TO_PTILE_4_STALLED',
    LABEL => 'AR_NL_PRF_NIC_2_REQ_TO_PTILE_4_STALLED',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Clock cycles NIC 2 requests are stalled to PTILE 4',
    CAT => 'craynpu',
};
$event_order{'AR_NL_PRF_NIC_2_REQ_TO_PTILE_4_STALLED'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NL_PRF_NIC_3_REQ_TO_PTILE_4_STALLED'} = {
    NAME => 'AR_NL_PRF_NIC_3_REQ_TO_PTILE_4_STALLED',
    LABEL => 'AR_NL_PRF_NIC_3_REQ_TO_PTILE_4_STALLED',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Clock cycles NIC 3 requests are stalled to PTILE 4',
    CAT => 'craynpu',
};
$event_order{'AR_NL_PRF_NIC_3_REQ_TO_PTILE_4_STALLED'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NL_PRF_PTILE_4_REQ_OUT_NW_FLITS'} = {
    NAME => 'AR_NL_PRF_PTILE_4_REQ_OUT_NW_FLITS',
    LABEL => 'AR_NL_PRF_PTILE_4_REQ_OUT_NW_FLITS',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'NW request flits sent to PTILE 4',
    CAT => 'craynpu',
};
$event_order{'AR_NL_PRF_PTILE_4_REQ_OUT_NW_FLITS'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NL_PRF_PTILE_4_REQ_OUT_NW_PKTS'} = {
    NAME => 'AR_NL_PRF_PTILE_4_REQ_OUT_NW_PKTS',
    LABEL => 'AR_NL_PRF_PTILE_4_REQ_OUT_NW_PKTS',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Request packets sent to PTILE 4',
    CAT => 'craynpu',
};
$event_order{'AR_NL_PRF_PTILE_4_REQ_OUT_NW_PKTS'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NL_PRF_NIC_2_REQ_TO_PTILE_5'} = {
    NAME => 'AR_NL_PRF_NIC_2_REQ_TO_PTILE_5',
    LABEL => 'AR_NL_PRF_NIC_2_REQ_TO_PTILE_5',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Requests from NIC 2 to PTILE 5',
    CAT => 'craynpu',
};
$event_order{'AR_NL_PRF_NIC_2_REQ_TO_PTILE_5'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NL_PRF_NIC_3_REQ_TO_PTILE_5'} = {
    NAME => 'AR_NL_PRF_NIC_3_REQ_TO_PTILE_5',
    LABEL => 'AR_NL_PRF_NIC_3_REQ_TO_PTILE_5',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Requests from NIC 3 to PTILE 5',
    CAT => 'craynpu',
};
$event_order{'AR_NL_PRF_NIC_3_REQ_TO_PTILE_5'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NL_PRF_NIC_2_REQ_TO_PTILE_5_STALLED'} = {
    NAME => 'AR_NL_PRF_NIC_2_REQ_TO_PTILE_5_STALLED',
    LABEL => 'AR_NL_PRF_NIC_2_REQ_TO_PTILE_5_STALLED',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Clock cycles NIC 2 requests are stalled to PTILE 5',
    CAT => 'craynpu',
};
$event_order{'AR_NL_PRF_NIC_2_REQ_TO_PTILE_5_STALLED'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NL_PRF_NIC_3_REQ_TO_PTILE_5_STALLED'} = {
    NAME => 'AR_NL_PRF_NIC_3_REQ_TO_PTILE_5_STALLED',
    LABEL => 'AR_NL_PRF_NIC_3_REQ_TO_PTILE_5_STALLED',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Clock cycles NIC 3 requests are stalled to PTILE 5',
    CAT => 'craynpu',
};
$event_order{'AR_NL_PRF_NIC_3_REQ_TO_PTILE_5_STALLED'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NL_PRF_PTILE_5_REQ_OUT_NW_PKTS'} = {
    NAME => 'AR_NL_PRF_PTILE_5_REQ_OUT_NW_PKTS',
    LABEL => 'AR_NL_PRF_PTILE_5_REQ_OUT_NW_PKTS',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'NW request flits sent to PTILE 5',
    CAT => 'craynpu',
};
$event_order{'AR_NL_PRF_PTILE_5_REQ_OUT_NW_PKTS'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NL_PRF_PTILE_5_REQ_OUT_NW_FLITS'} = {
    NAME => 'AR_NL_PRF_PTILE_5_REQ_OUT_NW_FLITS',
    LABEL => 'AR_NL_PRF_PTILE_5_REQ_OUT_NW_FLITS',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Request packets sent to PTILE 5',
    CAT => 'craynpu',
};
$event_order{'AR_NL_PRF_PTILE_5_REQ_OUT_NW_FLITS'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NL_PRF_NIC_2_REQ_TO_PTILE_6'} = {
    NAME => 'AR_NL_PRF_NIC_2_REQ_TO_PTILE_6',
    LABEL => 'AR_NL_PRF_NIC_2_REQ_TO_PTILE_6',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Requests from NIC 2 to PTILE 6',
    CAT => 'craynpu',
};
$event_order{'AR_NL_PRF_NIC_2_REQ_TO_PTILE_6'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NL_PRF_NIC_3_REQ_TO_PTILE_6'} = {
    NAME => 'AR_NL_PRF_NIC_3_REQ_TO_PTILE_6',
    LABEL => 'AR_NL_PRF_NIC_3_REQ_TO_PTILE_6',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Requests from NIC 3 to PTILE 6',
    CAT => 'craynpu',
};
$event_order{'AR_NL_PRF_NIC_3_REQ_TO_PTILE_6'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NL_PRF_NIC_2_REQ_TO_PTILE_6_STALLED'} = {
    NAME => 'AR_NL_PRF_NIC_2_REQ_TO_PTILE_6_STALLED',
    LABEL => 'AR_NL_PRF_NIC_2_REQ_TO_PTILE_6_STALLED',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Clock cycles NIC 2 requests are stalled to PTILE 6',
    CAT => 'craynpu',
};
$event_order{'AR_NL_PRF_NIC_2_REQ_TO_PTILE_6_STALLED'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NL_PRF_NIC_3_REQ_TO_PTILE_6_STALLED'} = {
    NAME => 'AR_NL_PRF_NIC_3_REQ_TO_PTILE_6_STALLED',
    LABEL => 'AR_NL_PRF_NIC_3_REQ_TO_PTILE_6_STALLED',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Clock cycles NIC 3 requests are stalled to PTILE 6',
    CAT => 'craynpu',
};
$event_order{'AR_NL_PRF_NIC_3_REQ_TO_PTILE_6_STALLED'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NL_PRF_PTILE_6_REQ_OUT_NW_FLITS'} = {
    NAME => 'AR_NL_PRF_PTILE_6_REQ_OUT_NW_FLITS',
    LABEL => 'AR_NL_PRF_PTILE_6_REQ_OUT_NW_FLITS',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'NW request flits sent to PTILE 6',
    CAT => 'craynpu',
};
$event_order{'AR_NL_PRF_PTILE_6_REQ_OUT_NW_FLITS'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NL_PRF_PTILE_6_REQ_OUT_NW_PKTS'} = {
    NAME => 'AR_NL_PRF_PTILE_6_REQ_OUT_NW_PKTS',
    LABEL => 'AR_NL_PRF_PTILE_6_REQ_OUT_NW_PKTS',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Request packets sent to PTILE 6',
    CAT => 'craynpu',
};
$event_order{'AR_NL_PRF_PTILE_6_REQ_OUT_NW_PKTS'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NL_PRF_NIC_2_REQ_TO_PTILE_7'} = {
    NAME => 'AR_NL_PRF_NIC_2_REQ_TO_PTILE_7',
    LABEL => 'AR_NL_PRF_NIC_2_REQ_TO_PTILE_7',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Requests from NIC 2 to PTILE 7',
    CAT => 'craynpu',
};
$event_order{'AR_NL_PRF_NIC_2_REQ_TO_PTILE_7'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NL_PRF_NIC_3_REQ_TO_PTILE_7'} = {
    NAME => 'AR_NL_PRF_NIC_3_REQ_TO_PTILE_7',
    LABEL => 'AR_NL_PRF_NIC_3_REQ_TO_PTILE_7',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Requests from NIC 3 to PTILE 7',
    CAT => 'craynpu',
};
$event_order{'AR_NL_PRF_NIC_3_REQ_TO_PTILE_7'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NL_PRF_NIC_2_REQ_TO_PTILE_7_STALLED'} = {
    NAME => 'AR_NL_PRF_NIC_2_REQ_TO_PTILE_7_STALLED',
    LABEL => 'AR_NL_PRF_NIC_2_REQ_TO_PTILE_7_STALLED',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Clock cycles NIC 2 requests are stalled to PTILE 7',
    CAT => 'craynpu',
};
$event_order{'AR_NL_PRF_NIC_2_REQ_TO_PTILE_7_STALLED'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NL_PRF_NIC_3_REQ_TO_PTILE_7_STALLED'} = {
    NAME => 'AR_NL_PRF_NIC_3_REQ_TO_PTILE_7_STALLED',
    LABEL => 'AR_NL_PRF_NIC_3_REQ_TO_PTILE_7_STALLED',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Clock cycles NIC 3 requests are stalled to PTILE 7',
    CAT => 'craynpu',
};
$event_order{'AR_NL_PRF_NIC_3_REQ_TO_PTILE_7_STALLED'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NL_PRF_PTILE_7_REQ_OUT_NW_FLITS'} = {
    NAME => 'AR_NL_PRF_PTILE_7_REQ_OUT_NW_FLITS',
    LABEL => 'AR_NL_PRF_PTILE_7_REQ_OUT_NW_FLITS',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'NW request flits sent to PTILE 7',
    CAT => 'craynpu',
};
$event_order{'AR_NL_PRF_PTILE_7_REQ_OUT_NW_FLITS'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NL_PRF_PTILE_7_REQ_OUT_NW_PKTS'} = {
    NAME => 'AR_NL_PRF_PTILE_7_REQ_OUT_NW_PKTS',
    LABEL => 'AR_NL_PRF_PTILE_7_REQ_OUT_NW_PKTS',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Request packets sent to PTILE 7',
    CAT => 'craynpu',
};
$event_order{'AR_NL_PRF_PTILE_7_REQ_OUT_NW_PKTS'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NL_PRF_NIC_0_RSP_TO_PTILE_0'} = {
    NAME => 'AR_NL_PRF_NIC_0_RSP_TO_PTILE_0',
    LABEL => 'AR_NL_PRF_NIC_0_RSP_TO_PTILE_0',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Responses from NIC 0 to PTILE 0',
    CAT => 'craynpu',
};
$event_order{'AR_NL_PRF_NIC_0_RSP_TO_PTILE_0'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NL_PRF_NIC_1_RSP_TO_PTILE_0'} = {
    NAME => 'AR_NL_PRF_NIC_1_RSP_TO_PTILE_0',
    LABEL => 'AR_NL_PRF_NIC_1_RSP_TO_PTILE_0',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Responses from NIC 1 to PTILE 0',
    CAT => 'craynpu',
};
$event_order{'AR_NL_PRF_NIC_1_RSP_TO_PTILE_0'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NL_PRF_NIC_0_RSP_TO_PTILE_0_STALLED'} = {
    NAME => 'AR_NL_PRF_NIC_0_RSP_TO_PTILE_0_STALLED',
    LABEL => 'AR_NL_PRF_NIC_0_RSP_TO_PTILE_0_STALLED',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Clock cycles NIC 0 responses are stalled to PTILE 0',
    CAT => 'craynpu',
};
$event_order{'AR_NL_PRF_NIC_0_RSP_TO_PTILE_0_STALLED'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NL_PRF_NIC_1_RSP_TO_PTILE_0_STALLED'} = {
    NAME => 'AR_NL_PRF_NIC_1_RSP_TO_PTILE_0_STALLED',
    LABEL => 'AR_NL_PRF_NIC_1_RSP_TO_PTILE_0_STALLED',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Clock cycles NIC 1 responses are stalled to PTILE 0',
    CAT => 'craynpu',
};
$event_order{'AR_NL_PRF_NIC_1_RSP_TO_PTILE_0_STALLED'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NL_PRF_PTILE_0_RSP_OUT_NW_FLITS'} = {
    NAME => 'AR_NL_PRF_PTILE_0_RSP_OUT_NW_FLITS',
    LABEL => 'AR_NL_PRF_PTILE_0_RSP_OUT_NW_FLITS',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'NW response flits sent to PTILE 0',
    CAT => 'craynpu',
};
$event_order{'AR_NL_PRF_PTILE_0_RSP_OUT_NW_FLITS'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NL_PRF_PTILE_0_RSP_OUT_NW_PKTS'} = {
    NAME => 'AR_NL_PRF_PTILE_0_RSP_OUT_NW_PKTS',
    LABEL => 'AR_NL_PRF_PTILE_0_RSP_OUT_NW_PKTS',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Response packets sent to PTILE 0',
    CAT => 'craynpu',
};
$event_order{'AR_NL_PRF_PTILE_0_RSP_OUT_NW_PKTS'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NL_PRF_NIC_0_RSP_TO_PTILE_1'} = {
    NAME => 'AR_NL_PRF_NIC_0_RSP_TO_PTILE_1',
    LABEL => 'AR_NL_PRF_NIC_0_RSP_TO_PTILE_1',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Responses from NIC 0 to PTILE 1',
    CAT => 'craynpu',
};
$event_order{'AR_NL_PRF_NIC_0_RSP_TO_PTILE_1'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NL_PRF_NIC_1_RSP_TO_PTILE_1'} = {
    NAME => 'AR_NL_PRF_NIC_1_RSP_TO_PTILE_1',
    LABEL => 'AR_NL_PRF_NIC_1_RSP_TO_PTILE_1',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Responses from NIC 1 to PTILE 1',
    CAT => 'craynpu',
};
$event_order{'AR_NL_PRF_NIC_1_RSP_TO_PTILE_1'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NL_PRF_NIC_0_RSP_TO_PTILE_1_STALLED'} = {
    NAME => 'AR_NL_PRF_NIC_0_RSP_TO_PTILE_1_STALLED',
    LABEL => 'AR_NL_PRF_NIC_0_RSP_TO_PTILE_1_STALLED',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Clock cycles NIC 0 responses are stalled to PTILE 1',
    CAT => 'craynpu',
};
$event_order{'AR_NL_PRF_NIC_0_RSP_TO_PTILE_1_STALLED'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NL_PRF_NIC_1_RSP_TO_PTILE_1_STALLED'} = {
    NAME => 'AR_NL_PRF_NIC_1_RSP_TO_PTILE_1_STALLED',
    LABEL => 'AR_NL_PRF_NIC_1_RSP_TO_PTILE_1_STALLED',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Clock cycles NIC 1 responses are stalled to PTILE 1',
    CAT => 'craynpu',
};
$event_order{'AR_NL_PRF_NIC_1_RSP_TO_PTILE_1_STALLED'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NL_PRF_PTILE_1_RSP_OUT_NW_FLITS'} = {
    NAME => 'AR_NL_PRF_PTILE_1_RSP_OUT_NW_FLITS',
    LABEL => 'AR_NL_PRF_PTILE_1_RSP_OUT_NW_FLITS',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'NW response flits sent to PTILE 1',
    CAT => 'craynpu',
};
$event_order{'AR_NL_PRF_PTILE_1_RSP_OUT_NW_FLITS'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NL_PRF_PTILE_1_RSP_OUT_NW_PKTS'} = {
    NAME => 'AR_NL_PRF_PTILE_1_RSP_OUT_NW_PKTS',
    LABEL => 'AR_NL_PRF_PTILE_1_RSP_OUT_NW_PKTS',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Response packets sent to PTILE 1',
    CAT => 'craynpu',
};
$event_order{'AR_NL_PRF_PTILE_1_RSP_OUT_NW_PKTS'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NL_PRF_NIC_0_RSP_TO_PTILE_2'} = {
    NAME => 'AR_NL_PRF_NIC_0_RSP_TO_PTILE_2',
    LABEL => 'AR_NL_PRF_NIC_0_RSP_TO_PTILE_2',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Responses from NIC 0 to PTILE 2',
    CAT => 'craynpu',
};
$event_order{'AR_NL_PRF_NIC_0_RSP_TO_PTILE_2'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NL_PRF_NIC_1_RSP_TO_PTILE_2'} = {
    NAME => 'AR_NL_PRF_NIC_1_RSP_TO_PTILE_2',
    LABEL => 'AR_NL_PRF_NIC_1_RSP_TO_PTILE_2',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Responses from NIC 1 to PTILE 2',
    CAT => 'craynpu',
};
$event_order{'AR_NL_PRF_NIC_1_RSP_TO_PTILE_2'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NL_PRF_NIC_0_RSP_TO_PTILE_2_STALLED'} = {
    NAME => 'AR_NL_PRF_NIC_0_RSP_TO_PTILE_2_STALLED',
    LABEL => 'AR_NL_PRF_NIC_0_RSP_TO_PTILE_2_STALLED',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Clock cycles NIC 0 responses are stalled to PTILE 2',
    CAT => 'craynpu',
};
$event_order{'AR_NL_PRF_NIC_0_RSP_TO_PTILE_2_STALLED'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NL_PRF_NIC_1_RSP_TO_PTILE_2_STALLED'} = {
    NAME => 'AR_NL_PRF_NIC_1_RSP_TO_PTILE_2_STALLED',
    LABEL => 'AR_NL_PRF_NIC_1_RSP_TO_PTILE_2_STALLED',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Clock cycles NIC 1 responses are stalled to PTILE 2',
    CAT => 'craynpu',
};
$event_order{'AR_NL_PRF_NIC_1_RSP_TO_PTILE_2_STALLED'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NL_PRF_PTILE_2_RSP_OUT_NW_FLITS'} = {
    NAME => 'AR_NL_PRF_PTILE_2_RSP_OUT_NW_FLITS',
    LABEL => 'AR_NL_PRF_PTILE_2_RSP_OUT_NW_FLITS',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'NW response flits sent to PTILE 2',
    CAT => 'craynpu',
};
$event_order{'AR_NL_PRF_PTILE_2_RSP_OUT_NW_FLITS'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NL_PRF_PTILE_2_RSP_OUT_NW_PKTS'} = {
    NAME => 'AR_NL_PRF_PTILE_2_RSP_OUT_NW_PKTS',
    LABEL => 'AR_NL_PRF_PTILE_2_RSP_OUT_NW_PKTS',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Response packets sent to PTILE 2',
    CAT => 'craynpu',
};
$event_order{'AR_NL_PRF_PTILE_2_RSP_OUT_NW_PKTS'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NL_PRF_NIC_0_RSP_TO_PTILE_3'} = {
    NAME => 'AR_NL_PRF_NIC_0_RSP_TO_PTILE_3',
    LABEL => 'AR_NL_PRF_NIC_0_RSP_TO_PTILE_3',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Responses from NIC 0 to PTILE 3',
    CAT => 'craynpu',
};
$event_order{'AR_NL_PRF_NIC_0_RSP_TO_PTILE_3'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NL_PRF_NIC_1_RSP_TO_PTILE_3'} = {
    NAME => 'AR_NL_PRF_NIC_1_RSP_TO_PTILE_3',
    LABEL => 'AR_NL_PRF_NIC_1_RSP_TO_PTILE_3',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Responses from NIC 1 to PTILE 3',
    CAT => 'craynpu',
};
$event_order{'AR_NL_PRF_NIC_1_RSP_TO_PTILE_3'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NL_PRF_NIC_0_RSP_TO_PTILE_3_STALLED'} = {
    NAME => 'AR_NL_PRF_NIC_0_RSP_TO_PTILE_3_STALLED',
    LABEL => 'AR_NL_PRF_NIC_0_RSP_TO_PTILE_3_STALLED',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Clock cycles NIC 0 responses are stalled to PTILE 3',
    CAT => 'craynpu',
};
$event_order{'AR_NL_PRF_NIC_0_RSP_TO_PTILE_3_STALLED'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NL_PRF_NIC_1_RSP_TO_PTILE_3_STALLED'} = {
    NAME => 'AR_NL_PRF_NIC_1_RSP_TO_PTILE_3_STALLED',
    LABEL => 'AR_NL_PRF_NIC_1_RSP_TO_PTILE_3_STALLED',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Clock cycles NIC 1 responses are stalled to PTILE 3',
    CAT => 'craynpu',
};
$event_order{'AR_NL_PRF_NIC_1_RSP_TO_PTILE_3_STALLED'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NL_PRF_PTILE_3_RSP_OUT_NW_FLITS'} = {
    NAME => 'AR_NL_PRF_PTILE_3_RSP_OUT_NW_FLITS',
    LABEL => 'AR_NL_PRF_PTILE_3_RSP_OUT_NW_FLITS',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'NW response flits sent to PTILE 3',
    CAT => 'craynpu',
};
$event_order{'AR_NL_PRF_PTILE_3_RSP_OUT_NW_FLITS'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NL_PRF_PTILE_3_RSP_OUT_NW_PKTS'} = {
    NAME => 'AR_NL_PRF_PTILE_3_RSP_OUT_NW_PKTS',
    LABEL => 'AR_NL_PRF_PTILE_3_RSP_OUT_NW_PKTS',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Response packets sent to PTILE 3',
    CAT => 'craynpu',
};
$event_order{'AR_NL_PRF_PTILE_3_RSP_OUT_NW_PKTS'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NL_PRF_NIC_2_RSP_TO_PTILE_4'} = {
    NAME => 'AR_NL_PRF_NIC_2_RSP_TO_PTILE_4',
    LABEL => 'AR_NL_PRF_NIC_2_RSP_TO_PTILE_4',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Responses from NIC 2 to PTILE 4',
    CAT => 'craynpu',
};
$event_order{'AR_NL_PRF_NIC_2_RSP_TO_PTILE_4'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NL_PRF_NIC_3_RSP_TO_PTILE_4'} = {
    NAME => 'AR_NL_PRF_NIC_3_RSP_TO_PTILE_4',
    LABEL => 'AR_NL_PRF_NIC_3_RSP_TO_PTILE_4',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Responses from NIC 3 to PTILE 4',
    CAT => 'craynpu',
};
$event_order{'AR_NL_PRF_NIC_3_RSP_TO_PTILE_4'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NL_PRF_NIC_2_RSP_TO_PTILE_4_STALLED'} = {
    NAME => 'AR_NL_PRF_NIC_2_RSP_TO_PTILE_4_STALLED',
    LABEL => 'AR_NL_PRF_NIC_2_RSP_TO_PTILE_4_STALLED',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Clock cycles NIC 2 responses are stalled to PTILE 4',
    CAT => 'craynpu',
};
$event_order{'AR_NL_PRF_NIC_2_RSP_TO_PTILE_4_STALLED'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NL_PRF_NIC_3_RSP_TO_PTILE_4_STALLED'} = {
    NAME => 'AR_NL_PRF_NIC_3_RSP_TO_PTILE_4_STALLED',
    LABEL => 'AR_NL_PRF_NIC_3_RSP_TO_PTILE_4_STALLED',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Clock cycles NIC 3 responses are stalled to PTILE 4',
    CAT => 'craynpu',
};
$event_order{'AR_NL_PRF_NIC_3_RSP_TO_PTILE_4_STALLED'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NL_PRF_PTILE_4_RSP_OUT_NW_FLITS'} = {
    NAME => 'AR_NL_PRF_PTILE_4_RSP_OUT_NW_FLITS',
    LABEL => 'AR_NL_PRF_PTILE_4_RSP_OUT_NW_FLITS',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'NW response flits sent to PTILE 4',
    CAT => 'craynpu',
};
$event_order{'AR_NL_PRF_PTILE_4_RSP_OUT_NW_FLITS'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NL_PRF_PTILE_4_RSP_OUT_NW_PKTS'} = {
    NAME => 'AR_NL_PRF_PTILE_4_RSP_OUT_NW_PKTS',
    LABEL => 'AR_NL_PRF_PTILE_4_RSP_OUT_NW_PKTS',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Response packets sent to PTILE 4',
    CAT => 'craynpu',
};
$event_order{'AR_NL_PRF_PTILE_4_RSP_OUT_NW_PKTS'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NL_PRF_NIC_2_RSP_TO_PTILE_5'} = {
    NAME => 'AR_NL_PRF_NIC_2_RSP_TO_PTILE_5',
    LABEL => 'AR_NL_PRF_NIC_2_RSP_TO_PTILE_5',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Responses from NIC 2 to PTILE 5',
    CAT => 'craynpu',
};
$event_order{'AR_NL_PRF_NIC_2_RSP_TO_PTILE_5'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NL_PRF_NIC_3_RSP_TO_PTILE_5'} = {
    NAME => 'AR_NL_PRF_NIC_3_RSP_TO_PTILE_5',
    LABEL => 'AR_NL_PRF_NIC_3_RSP_TO_PTILE_5',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Responses from NIC 3 to PTILE 5',
    CAT => 'craynpu',
};
$event_order{'AR_NL_PRF_NIC_3_RSP_TO_PTILE_5'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NL_PRF_NIC_2_RSP_TO_PTILE_5_STALLED'} = {
    NAME => 'AR_NL_PRF_NIC_2_RSP_TO_PTILE_5_STALLED',
    LABEL => 'AR_NL_PRF_NIC_2_RSP_TO_PTILE_5_STALLED',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Clock cycles NIC 2 responses are stalled to PTILE 5',
    CAT => 'craynpu',
};
$event_order{'AR_NL_PRF_NIC_2_RSP_TO_PTILE_5_STALLED'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NL_PRF_NIC_3_RSP_TO_PTILE_5_STALLED'} = {
    NAME => 'AR_NL_PRF_NIC_3_RSP_TO_PTILE_5_STALLED',
    LABEL => 'AR_NL_PRF_NIC_3_RSP_TO_PTILE_5_STALLED',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Clock cycles NIC 3 responses are stalled to PTILE 5',
    CAT => 'craynpu',
};
$event_order{'AR_NL_PRF_NIC_3_RSP_TO_PTILE_5_STALLED'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NL_PRF_PTILE_5_RSP_OUT_NW_FLITS'} = {
    NAME => 'AR_NL_PRF_PTILE_5_RSP_OUT_NW_FLITS',
    LABEL => 'AR_NL_PRF_PTILE_5_RSP_OUT_NW_FLITS',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'NW response flits sent to PTILE 5',
    CAT => 'craynpu',
};
$event_order{'AR_NL_PRF_PTILE_5_RSP_OUT_NW_FLITS'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NL_PRF_PTILE_5_RSP_OUT_NW_PKTS'} = {
    NAME => 'AR_NL_PRF_PTILE_5_RSP_OUT_NW_PKTS',
    LABEL => 'AR_NL_PRF_PTILE_5_RSP_OUT_NW_PKTS',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Response packets sent to PTILE 5',
    CAT => 'craynpu',
};
$event_order{'AR_NL_PRF_PTILE_5_RSP_OUT_NW_PKTS'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NL_PRF_NIC_2_RSP_TO_PTILE_6'} = {
    NAME => 'AR_NL_PRF_NIC_2_RSP_TO_PTILE_6',
    LABEL => 'AR_NL_PRF_NIC_2_RSP_TO_PTILE_6',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Responses from NIC 2 to PTILE 6',
    CAT => 'craynpu',
};
$event_order{'AR_NL_PRF_NIC_2_RSP_TO_PTILE_6'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NL_PRF_NIC_3_RSP_TO_PTILE_6'} = {
    NAME => 'AR_NL_PRF_NIC_3_RSP_TO_PTILE_6',
    LABEL => 'AR_NL_PRF_NIC_3_RSP_TO_PTILE_6',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Responses from NIC 3 to PTILE 6',
    CAT => 'craynpu',
};
$event_order{'AR_NL_PRF_NIC_3_RSP_TO_PTILE_6'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NL_PRF_NIC_2_RSP_TO_PTILE_6_STALLED'} = {
    NAME => 'AR_NL_PRF_NIC_2_RSP_TO_PTILE_6_STALLED',
    LABEL => 'AR_NL_PRF_NIC_2_RSP_TO_PTILE_6_STALLED',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Clock cycles NIC 2 responses are stalled to PTILE 6',
    CAT => 'craynpu',
};
$event_order{'AR_NL_PRF_NIC_2_RSP_TO_PTILE_6_STALLED'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NL_PRF_NIC_3_RSP_TO_PTILE_6_STALLED'} = {
    NAME => 'AR_NL_PRF_NIC_3_RSP_TO_PTILE_6_STALLED',
    LABEL => 'AR_NL_PRF_NIC_3_RSP_TO_PTILE_6_STALLED',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Clock cycles NIC 3 responses are stalled to PTILE 6',
    CAT => 'craynpu',
};
$event_order{'AR_NL_PRF_NIC_3_RSP_TO_PTILE_6_STALLED'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NL_PRF_PTILE_6_RSP_OUT_NW_FLITS'} = {
    NAME => 'AR_NL_PRF_PTILE_6_RSP_OUT_NW_FLITS',
    LABEL => 'AR_NL_PRF_PTILE_6_RSP_OUT_NW_FLITS',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'NW response flits sent to PTILE 6',
    CAT => 'craynpu',
};
$event_order{'AR_NL_PRF_PTILE_6_RSP_OUT_NW_FLITS'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NL_PRF_PTILE_6_RSP_OUT_NW_PKTS'} = {
    NAME => 'AR_NL_PRF_PTILE_6_RSP_OUT_NW_PKTS',
    LABEL => 'AR_NL_PRF_PTILE_6_RSP_OUT_NW_PKTS',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Response packets sent to PTILE 6',
    CAT => 'craynpu',
};
$event_order{'AR_NL_PRF_PTILE_6_RSP_OUT_NW_PKTS'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NL_PRF_NIC_2_RSP_TO_PTILE_7'} = {
    NAME => 'AR_NL_PRF_NIC_2_RSP_TO_PTILE_7',
    LABEL => 'AR_NL_PRF_NIC_2_RSP_TO_PTILE_7',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Responses from NIC 2 to PTILE 7',
    CAT => 'craynpu',
};
$event_order{'AR_NL_PRF_NIC_2_RSP_TO_PTILE_7'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NL_PRF_NIC_3_RSP_TO_PTILE_7'} = {
    NAME => 'AR_NL_PRF_NIC_3_RSP_TO_PTILE_7',
    LABEL => 'AR_NL_PRF_NIC_3_RSP_TO_PTILE_7',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Responses from NIC 3 to PTILE 7',
    CAT => 'craynpu',
};
$event_order{'AR_NL_PRF_NIC_3_RSP_TO_PTILE_7'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NL_PRF_NIC_2_RSP_TO_PTILE_7_STALLED'} = {
    NAME => 'AR_NL_PRF_NIC_2_RSP_TO_PTILE_7_STALLED',
    LABEL => 'AR_NL_PRF_NIC_2_RSP_TO_PTILE_7_STALLED',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Clock cycles NIC 2 responses are stalled to PTILE 7',
    CAT => 'craynpu',
};
$event_order{'AR_NL_PRF_NIC_2_RSP_TO_PTILE_7_STALLED'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NL_PRF_NIC_3_RSP_TO_PTILE_7_STALLED'} = {
    NAME => 'AR_NL_PRF_NIC_3_RSP_TO_PTILE_7_STALLED',
    LABEL => 'AR_NL_PRF_NIC_3_RSP_TO_PTILE_7_STALLED',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Clock cycles NIC 3 responses are stalled to PTILE 7',
    CAT => 'craynpu',
};
$event_order{'AR_NL_PRF_NIC_3_RSP_TO_PTILE_7_STALLED'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NL_PRF_PTILE_7_RSP_OUT_NW_FLITS'} = {
    NAME => 'AR_NL_PRF_PTILE_7_RSP_OUT_NW_FLITS',
    LABEL => 'AR_NL_PRF_PTILE_7_RSP_OUT_NW_FLITS',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'NW response flits sent to PTILE 7',
    CAT => 'craynpu',
};
$event_order{'AR_NL_PRF_PTILE_7_RSP_OUT_NW_FLITS'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NL_PRF_PTILE_7_RSP_OUT_NW_PKTS'} = {
    NAME => 'AR_NL_PRF_PTILE_7_RSP_OUT_NW_PKTS',
    LABEL => 'AR_NL_PRF_PTILE_7_RSP_OUT_NW_PKTS',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Response packets sent to PTILE 7',
    CAT => 'craynpu',
};
$event_order{'AR_NL_PRF_PTILE_7_RSP_OUT_NW_PKTS'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NL_PRF_REQ_NIC_0_TO_PTILES_FLITS'} = {
    NAME => 'AR_NL_PRF_REQ_NIC_0_TO_PTILES_FLITS',
    LABEL => 'AR_NL_PRF_REQ_NIC_0_TO_PTILES_FLITS',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'NIC request flits from NIC 0',
    CAT => 'craynpu',
};
$event_order{'AR_NL_PRF_REQ_NIC_0_TO_PTILES_FLITS'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NL_PRF_REQ_NIC_0_TO_PTILES_PKTS'} = {
    NAME => 'AR_NL_PRF_REQ_NIC_0_TO_PTILES_PKTS',
    LABEL => 'AR_NL_PRF_REQ_NIC_0_TO_PTILES_PKTS',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Request packets from NIC 0',
    CAT => 'craynpu',
};
$event_order{'AR_NL_PRF_REQ_NIC_0_TO_PTILES_PKTS'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NL_PRF_REQ_NIC_0_TO_PTILES_STALLED'} = {
    NAME => 'AR_NL_PRF_REQ_NIC_0_TO_PTILES_STALLED',
    LABEL => 'AR_NL_PRF_REQ_NIC_0_TO_PTILES_STALLED',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'CPs requests from NIC 0 have stalled to all PTILEs',
    CAT => 'craynpu',
};
$event_order{'AR_NL_PRF_REQ_NIC_0_TO_PTILES_STALLED'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NL_PRF_REQ_NIC_1_TO_PTILES_FLITS'} = {
    NAME => 'AR_NL_PRF_REQ_NIC_1_TO_PTILES_FLITS',
    LABEL => 'AR_NL_PRF_REQ_NIC_1_TO_PTILES_FLITS',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'NIC request flits from NIC 1',
    CAT => 'craynpu',
};
$event_order{'AR_NL_PRF_REQ_NIC_1_TO_PTILES_FLITS'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NL_PRF_REQ_NIC_1_TO_PTILES_PKTS'} = {
    NAME => 'AR_NL_PRF_REQ_NIC_1_TO_PTILES_PKTS',
    LABEL => 'AR_NL_PRF_REQ_NIC_1_TO_PTILES_PKTS',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Request packets from NIC 1',
    CAT => 'craynpu',
};
$event_order{'AR_NL_PRF_REQ_NIC_1_TO_PTILES_PKTS'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NL_PRF_REQ_NIC_1_TO_PTILES_STALLED'} = {
    NAME => 'AR_NL_PRF_REQ_NIC_1_TO_PTILES_STALLED',
    LABEL => 'AR_NL_PRF_REQ_NIC_1_TO_PTILES_STALLED',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'CPs requests from NIC 1 have stalled to all PTILEs',
    CAT => 'craynpu',
};
$event_order{'AR_NL_PRF_REQ_NIC_1_TO_PTILES_STALLED'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NL_PRF_REQ_NIC_2_TO_PTILES_FLITS'} = {
    NAME => 'AR_NL_PRF_REQ_NIC_2_TO_PTILES_FLITS',
    LABEL => 'AR_NL_PRF_REQ_NIC_2_TO_PTILES_FLITS',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'NIC request flits from NIC 2',
    CAT => 'craynpu',
};
$event_order{'AR_NL_PRF_REQ_NIC_2_TO_PTILES_FLITS'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NL_PRF_REQ_NIC_2_TO_PTILES_PKTS'} = {
    NAME => 'AR_NL_PRF_REQ_NIC_2_TO_PTILES_PKTS',
    LABEL => 'AR_NL_PRF_REQ_NIC_2_TO_PTILES_PKTS',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Request packets from NIC 2',
    CAT => 'craynpu',
};
$event_order{'AR_NL_PRF_REQ_NIC_2_TO_PTILES_PKTS'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NL_PRF_REQ_NIC_2_TO_PTILES_STALLED'} = {
    NAME => 'AR_NL_PRF_REQ_NIC_2_TO_PTILES_STALLED',
    LABEL => 'AR_NL_PRF_REQ_NIC_2_TO_PTILES_STALLED',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'CPs requests from NIC 2 have stalled to all PTILEs',
    CAT => 'craynpu',
};
$event_order{'AR_NL_PRF_REQ_NIC_2_TO_PTILES_STALLED'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NL_PRF_REQ_NIC_3_TO_PTILES_FLITS'} = {
    NAME => 'AR_NL_PRF_REQ_NIC_3_TO_PTILES_FLITS',
    LABEL => 'AR_NL_PRF_REQ_NIC_3_TO_PTILES_FLITS',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'NIC request flits from NIC 3',
    CAT => 'craynpu',
};
$event_order{'AR_NL_PRF_REQ_NIC_3_TO_PTILES_FLITS'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NL_PRF_REQ_NIC_3_TO_PTILES_PKTS'} = {
    NAME => 'AR_NL_PRF_REQ_NIC_3_TO_PTILES_PKTS',
    LABEL => 'AR_NL_PRF_REQ_NIC_3_TO_PTILES_PKTS',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Request packets from NIC 3',
    CAT => 'craynpu',
};
$event_order{'AR_NL_PRF_REQ_NIC_3_TO_PTILES_PKTS'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NL_PRF_REQ_NIC_3_TO_PTILES_STALLED'} = {
    NAME => 'AR_NL_PRF_REQ_NIC_3_TO_PTILES_STALLED',
    LABEL => 'AR_NL_PRF_REQ_NIC_3_TO_PTILES_STALLED',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'CPs requests from NIC 3 have stalled to all PTILEs',
    CAT => 'craynpu',
};
$event_order{'AR_NL_PRF_REQ_NIC_3_TO_PTILES_STALLED'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NL_PRF_RSP_NIC_0_TO_PTILES_FLITS'} = {
    NAME => 'AR_NL_PRF_RSP_NIC_0_TO_PTILES_FLITS',
    LABEL => 'AR_NL_PRF_RSP_NIC_0_TO_PTILES_FLITS',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'NIC response flits from NIC 0',
    CAT => 'craynpu',
};
$event_order{'AR_NL_PRF_RSP_NIC_0_TO_PTILES_FLITS'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NL_PRF_RSP_NIC_0_TO_PTILES_PKTS'} = {
    NAME => 'AR_NL_PRF_RSP_NIC_0_TO_PTILES_PKTS',
    LABEL => 'AR_NL_PRF_RSP_NIC_0_TO_PTILES_PKTS',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Response packets from NIC 0',
    CAT => 'craynpu',
};
$event_order{'AR_NL_PRF_RSP_NIC_0_TO_PTILES_PKTS'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NL_PRF_RSP_NIC_0_TO_PTILES_STALLED'} = {
    NAME => 'AR_NL_PRF_RSP_NIC_0_TO_PTILES_STALLED',
    LABEL => 'AR_NL_PRF_RSP_NIC_0_TO_PTILES_STALLED',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'CPs responses from NIC 0 have stalled to all PTILEs',
    CAT => 'craynpu',
};
$event_order{'AR_NL_PRF_RSP_NIC_0_TO_PTILES_STALLED'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NL_PRF_RSP_NIC_1_TO_PTILES_FLITS'} = {
    NAME => 'AR_NL_PRF_RSP_NIC_1_TO_PTILES_FLITS',
    LABEL => 'AR_NL_PRF_RSP_NIC_1_TO_PTILES_FLITS',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'NIC response flits from NIC 1',
    CAT => 'craynpu',
};
$event_order{'AR_NL_PRF_RSP_NIC_1_TO_PTILES_FLITS'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NL_PRF_RSP_NIC_1_TO_PTILES_PKTS'} = {
    NAME => 'AR_NL_PRF_RSP_NIC_1_TO_PTILES_PKTS',
    LABEL => 'AR_NL_PRF_RSP_NIC_1_TO_PTILES_PKTS',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Response packets from NIC 1',
    CAT => 'craynpu',
};
$event_order{'AR_NL_PRF_RSP_NIC_1_TO_PTILES_PKTS'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NL_PRF_RSP_NIC_1_TO_PTILES_STALLED'} = {
    NAME => 'AR_NL_PRF_RSP_NIC_1_TO_PTILES_STALLED',
    LABEL => 'AR_NL_PRF_RSP_NIC_1_TO_PTILES_STALLED',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'CPs responses from NIC 1 have stalled to all PTILEs',
    CAT => 'craynpu',
};
$event_order{'AR_NL_PRF_RSP_NIC_1_TO_PTILES_STALLED'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NL_PRF_RSP_NIC_2_TO_PTILES_FLITS'} = {
    NAME => 'AR_NL_PRF_RSP_NIC_2_TO_PTILES_FLITS',
    LABEL => 'AR_NL_PRF_RSP_NIC_2_TO_PTILES_FLITS',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'NIC response flits from NIC 2',
    CAT => 'craynpu',
};
$event_order{'AR_NL_PRF_RSP_NIC_2_TO_PTILES_FLITS'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NL_PRF_RSP_NIC_2_TO_PTILES_PKTS'} = {
    NAME => 'AR_NL_PRF_RSP_NIC_2_TO_PTILES_PKTS',
    LABEL => 'AR_NL_PRF_RSP_NIC_2_TO_PTILES_PKTS',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Response packets from NIC 2',
    CAT => 'craynpu',
};
$event_order{'AR_NL_PRF_RSP_NIC_2_TO_PTILES_PKTS'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NL_PRF_RSP_NIC_2_TO_PTILES_STALLED'} = {
    NAME => 'AR_NL_PRF_RSP_NIC_2_TO_PTILES_STALLED',
    LABEL => 'AR_NL_PRF_RSP_NIC_2_TO_PTILES_STALLED',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'CPs responses from NIC 2 have stalled to all PTILEs',
    CAT => 'craynpu',
};
$event_order{'AR_NL_PRF_RSP_NIC_2_TO_PTILES_STALLED'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NL_PRF_RSP_NIC_3_TO_PTILES_FLITS'} = {
    NAME => 'AR_NL_PRF_RSP_NIC_3_TO_PTILES_FLITS',
    LABEL => 'AR_NL_PRF_RSP_NIC_3_TO_PTILES_FLITS',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'NIC response flits from NIC 3',
    CAT => 'craynpu',
};
$event_order{'AR_NL_PRF_RSP_NIC_3_TO_PTILES_FLITS'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NL_PRF_RSP_NIC_3_TO_PTILES_PKTS'} = {
    NAME => 'AR_NL_PRF_RSP_NIC_3_TO_PTILES_PKTS',
    LABEL => 'AR_NL_PRF_RSP_NIC_3_TO_PTILES_PKTS',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Response packets from NIC 3',
    CAT => 'craynpu',
};
$event_order{'AR_NL_PRF_RSP_NIC_3_TO_PTILES_PKTS'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NL_PRF_RSP_NIC_3_TO_PTILES_STALLED'} = {
    NAME => 'AR_NL_PRF_RSP_NIC_3_TO_PTILES_STALLED',
    LABEL => 'AR_NL_PRF_RSP_NIC_3_TO_PTILES_STALLED',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'CPs responses from NIC 3 have stalled to all PTILEs',
    CAT => 'craynpu',
};
$event_order{'AR_NL_PRF_RSP_NIC_3_TO_PTILES_STALLED'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_NETMON_NETMON_EVENT_CNTR_TRIGGER0'} = {
    NAME => 'AR_NIC_NETMON_NETMON_EVENT_CNTR_TRIGGER0',
    LABEL => 'AR_NIC_NETMON_NETMON_EVENT_CNTR_TRIGGER0',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'TRIGGER 0 count',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_NETMON_NETMON_EVENT_CNTR_TRIGGER0'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_NETMON_NETMON_EVENT_CNTR_TRIGGER1'} = {
    NAME => 'AR_NIC_NETMON_NETMON_EVENT_CNTR_TRIGGER1',
    LABEL => 'AR_NIC_NETMON_NETMON_EVENT_CNTR_TRIGGER1',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'TRIGGER 1 count',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_NETMON_NETMON_EVENT_CNTR_TRIGGER1'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_NETMON_NAT_EVENT_CNTR_RAT_TRANSLATIONS'} = {
    NAME => 'AR_NIC_NETMON_NAT_EVENT_CNTR_RAT_TRANSLATIONS',
    LABEL => 'AR_NIC_NETMON_NAT_EVENT_CNTR_RAT_TRANSLATIONS',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'RAT translation count',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_NETMON_NAT_EVENT_CNTR_RAT_TRANSLATIONS'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_NETMON_NAT_EVENT_CNTR_RAT_STALLED'} = {
    NAME => 'AR_NIC_NETMON_NAT_EVENT_CNTR_RAT_STALLED',
    LABEL => 'AR_NIC_NETMON_NAT_EVENT_CNTR_RAT_STALLED',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'RAT stalled count',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_NETMON_NAT_EVENT_CNTR_RAT_STALLED'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_NETMON_NAT_EVENT_CNTR_RAT_BLOCKED'} = {
    NAME => 'AR_NIC_NETMON_NAT_EVENT_CNTR_RAT_BLOCKED',
    LABEL => 'AR_NIC_NETMON_NAT_EVENT_CNTR_RAT_BLOCKED',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'RAT blocked count',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_NETMON_NAT_EVENT_CNTR_RAT_BLOCKED'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_NETMON_NAT_EVENT_CNTR_CQ_TRANSLATIONS'} = {
    NAME => 'AR_NIC_NETMON_NAT_EVENT_CNTR_CQ_TRANSLATIONS',
    LABEL => 'AR_NIC_NETMON_NAT_EVENT_CNTR_CQ_TRANSLATIONS',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'CQ translation count',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_NETMON_NAT_EVENT_CNTR_CQ_TRANSLATIONS'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_NETMON_NAT_EVENT_CNTR_CQ_STALLED'} = {
    NAME => 'AR_NIC_NETMON_NAT_EVENT_CNTR_CQ_STALLED',
    LABEL => 'AR_NIC_NETMON_NAT_EVENT_CNTR_CQ_STALLED',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'CQ stalled count',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_NETMON_NAT_EVENT_CNTR_CQ_STALLED'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_NETMON_NAT_EVENT_CNTR_CQ_BLOCKED'} = {
    NAME => 'AR_NIC_NETMON_NAT_EVENT_CNTR_CQ_BLOCKED',
    LABEL => 'AR_NIC_NETMON_NAT_EVENT_CNTR_CQ_BLOCKED',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'CQ blocked count',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_NETMON_NAT_EVENT_CNTR_CQ_BLOCKED'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_NETMON_NAT_EVENT_CNTR_BTE_TRANSLATIONS'} = {
    NAME => 'AR_NIC_NETMON_NAT_EVENT_CNTR_BTE_TRANSLATIONS',
    LABEL => 'AR_NIC_NETMON_NAT_EVENT_CNTR_BTE_TRANSLATIONS',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'BTE translation count',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_NETMON_NAT_EVENT_CNTR_BTE_TRANSLATIONS'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_NETMON_NAT_EVENT_CNTR_BTE_STALLED'} = {
    NAME => 'AR_NIC_NETMON_NAT_EVENT_CNTR_BTE_STALLED',
    LABEL => 'AR_NIC_NETMON_NAT_EVENT_CNTR_BTE_STALLED',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'BTE stalled count',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_NETMON_NAT_EVENT_CNTR_BTE_STALLED'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_NETMON_NAT_EVENT_CNTR_BTE_BLOCKED'} = {
    NAME => 'AR_NIC_NETMON_NAT_EVENT_CNTR_BTE_BLOCKED',
    LABEL => 'AR_NIC_NETMON_NAT_EVENT_CNTR_BTE_BLOCKED',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'BTE blocked count',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_NETMON_NAT_EVENT_CNTR_BTE_BLOCKED'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_NETMON_NAT_EVENT_CNTR_PIPELINE_STALLED'} = {
    NAME => 'AR_NIC_NETMON_NAT_EVENT_CNTR_PIPELINE_STALLED',
    LABEL => 'AR_NIC_NETMON_NAT_EVENT_CNTR_PIPELINE_STALLED',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Translation pipeline stalls',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_NETMON_NAT_EVENT_CNTR_PIPELINE_STALLED'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_NETMON_NAT_EVENT_CNTR_MDDT0_SBE'} = {
    NAME => 'AR_NIC_NETMON_NAT_EVENT_CNTR_MDDT0_SBE',
    LABEL => 'AR_NIC_NETMON_NAT_EVENT_CNTR_MDDT0_SBE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'SBE’s in MDDT RAM 0',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_NETMON_NAT_EVENT_CNTR_MDDT0_SBE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_NETMON_NAT_EVENT_CNTR_MDDT0_MBE'} = {
    NAME => 'AR_NIC_NETMON_NAT_EVENT_CNTR_MDDT0_MBE',
    LABEL => 'AR_NIC_NETMON_NAT_EVENT_CNTR_MDDT0_MBE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'MBE’s in MDDT RAM 0',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_NETMON_NAT_EVENT_CNTR_MDDT0_MBE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_NETMON_NAT_EVENT_CNTR_MDDT1_SBE'} = {
    NAME => 'AR_NIC_NETMON_NAT_EVENT_CNTR_MDDT1_SBE',
    LABEL => 'AR_NIC_NETMON_NAT_EVENT_CNTR_MDDT1_SBE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'SBE’s in MDDT RAM 1',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_NETMON_NAT_EVENT_CNTR_MDDT1_SBE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_NETMON_NAT_EVENT_CNTR_MDDT1_MBE'} = {
    NAME => 'AR_NIC_NETMON_NAT_EVENT_CNTR_MDDT1_MBE',
    LABEL => 'AR_NIC_NETMON_NAT_EVENT_CNTR_MDDT1_MBE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'MBE’s in MDDT RAM 1',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_NETMON_NAT_EVENT_CNTR_MDDT1_MBE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_NETMON_NAT_EVENT_CNTR_PTT_SBE'} = {
    NAME => 'AR_NIC_NETMON_NAT_EVENT_CNTR_PTT_SBE',
    LABEL => 'AR_NIC_NETMON_NAT_EVENT_CNTR_PTT_SBE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'SBE’s in PTT RAM',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_NETMON_NAT_EVENT_CNTR_PTT_SBE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_NETMON_NAT_EVENT_CNTR_PTT_MBE'} = {
    NAME => 'AR_NIC_NETMON_NAT_EVENT_CNTR_PTT_MBE',
    LABEL => 'AR_NIC_NETMON_NAT_EVENT_CNTR_PTT_MBE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'MBE’s in PTT RAM',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_NETMON_NAT_EVENT_CNTR_PTT_MBE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_NETMON_CE_EVENT_CNTR_REDUCT_SCAT0'} = {
    NAME => 'AR_NIC_NETMON_CE_EVENT_CNTR_REDUCT_SCAT0',
    LABEL => 'AR_NIC_NETMON_CE_EVENT_CNTR_REDUCT_SCAT0',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Channel 0 Reduction/Scatter count',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_NETMON_CE_EVENT_CNTR_REDUCT_SCAT0'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_NETMON_CE_EVENT_CNTR_REDUCT_SCAT1'} = {
    NAME => 'AR_NIC_NETMON_CE_EVENT_CNTR_REDUCT_SCAT1',
    LABEL => 'AR_NIC_NETMON_CE_EVENT_CNTR_REDUCT_SCAT1',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Channel 1 Reduction/Scatter count',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_NETMON_CE_EVENT_CNTR_REDUCT_SCAT1'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_NETMON_CE_EVENT_CNTR_REDUCT_SCAT2'} = {
    NAME => 'AR_NIC_NETMON_CE_EVENT_CNTR_REDUCT_SCAT2',
    LABEL => 'AR_NIC_NETMON_CE_EVENT_CNTR_REDUCT_SCAT2',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Channel 2 Reduction/Scatter count',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_NETMON_CE_EVENT_CNTR_REDUCT_SCAT2'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_NETMON_CE_EVENT_CNTR_REDUCT_SCAT3'} = {
    NAME => 'AR_NIC_NETMON_CE_EVENT_CNTR_REDUCT_SCAT3',
    LABEL => 'AR_NIC_NETMON_CE_EVENT_CNTR_REDUCT_SCAT3',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Channel 3 Reduction/Scatter count',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_NETMON_CE_EVENT_CNTR_REDUCT_SCAT3'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_NETMON_CE_EVENT_CNTR_DFLIT_SBE'} = {
    NAME => 'AR_NIC_NETMON_CE_EVENT_CNTR_DFLIT_SBE',
    LABEL => 'AR_NIC_NETMON_CE_EVENT_CNTR_DFLIT_SBE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'SBE data flit count',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_NETMON_CE_EVENT_CNTR_DFLIT_SBE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_NETMON_CE_EVENT_CNTR_DFLIT_MBE'} = {
    NAME => 'AR_NIC_NETMON_CE_EVENT_CNTR_DFLIT_MBE',
    LABEL => 'AR_NIC_NETMON_CE_EVENT_CNTR_DFLIT_MBE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'MBE data flit count',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_NETMON_CE_EVENT_CNTR_DFLIT_MBE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_NETMON_CE_EVENT_CNTR_CONFIG_SBE'} = {
    NAME => 'AR_NIC_NETMON_CE_EVENT_CNTR_CONFIG_SBE',
    LABEL => 'AR_NIC_NETMON_CE_EVENT_CNTR_CONFIG_SBE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Config MMR SBE count',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_NETMON_CE_EVENT_CNTR_CONFIG_SBE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_NETMON_CE_EVENT_CNTR_CONFIG_MBE'} = {
    NAME => 'AR_NIC_NETMON_CE_EVENT_CNTR_CONFIG_MBE',
    LABEL => 'AR_NIC_NETMON_CE_EVENT_CNTR_CONFIG_MBE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Config MMR MBE count',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_NETMON_CE_EVENT_CNTR_CONFIG_MBE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_NETMON_CE_EVENT_CNTR_HEADER_PC'} = {
    NAME => 'AR_NIC_NETMON_CE_EVENT_CNTR_HEADER_PC',
    LABEL => 'AR_NIC_NETMON_CE_EVENT_CNTR_HEADER_PC',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Header flit parity error count',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_NETMON_CE_EVENT_CNTR_HEADER_PC'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_NETMON_CE_EVENT_CNTR_BAD_REQS'} = {
    NAME => 'AR_NIC_NETMON_CE_EVENT_CNTR_BAD_REQS',
    LABEL => 'AR_NIC_NETMON_CE_EVENT_CNTR_BAD_REQS',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Rejected request count',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_NETMON_CE_EVENT_CNTR_BAD_REQS'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_NETMON_SSID_EVENT_CNTR_ALLOCATIONS'} = {
    NAME => 'AR_NIC_NETMON_SSID_EVENT_CNTR_ALLOCATIONS',
    LABEL => 'AR_NIC_NETMON_SSID_EVENT_CNTR_ALLOCATIONS',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Successful SSID allocations across all source blocks (FMA, BTE, CE)',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_NETMON_SSID_EVENT_CNTR_ALLOCATIONS'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_NETMON_SSID_EVENT_CNTR_NO_SSID'} = {
    NAME => 'AR_NIC_NETMON_SSID_EVENT_CNTR_NO_SSID',
    LABEL => 'AR_NIC_NETMON_SSID_EVENT_CNTR_NO_SSID',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Out of SSIDs events',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_NETMON_SSID_EVENT_CNTR_NO_SSID'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_NETMON_SSID_EVENT_CNTR_NO_SSID_DURATN'} = {
    NAME => 'AR_NIC_NETMON_SSID_EVENT_CNTR_NO_SSID_DURATN',
    LABEL => 'AR_NIC_NETMON_SSID_EVENT_CNTR_NO_SSID_DURATN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Out of SSIDs duration',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_NETMON_SSID_EVENT_CNTR_NO_SSID_DURATN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_NETMON_SSID_EVENT_CNTR_REQ_STALLED_DURATN'} = {
    NAME => 'AR_NIC_NETMON_SSID_EVENT_CNTR_REQ_STALLED_DURATN',
    LABEL => 'AR_NIC_NETMON_SSID_EVENT_CNTR_REQ_STALLED_DURATN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Stalled requests duration',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_NETMON_SSID_EVENT_CNTR_REQ_STALLED_DURATN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_NETMON_SSID_EVENT_CNTR_DSMN_OPTIMAL'} = {
    NAME => 'AR_NIC_NETMON_SSID_EVENT_CNTR_DSMN_OPTIMAL',
    LABEL => 'AR_NIC_NETMON_SSID_EVENT_CNTR_DSMN_OPTIMAL',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Optimally completed DSMN transactions',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_NETMON_SSID_EVENT_CNTR_DSMN_OPTIMAL'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_NETMON_SSID_EVENT_CNTR_DSMN_SUBOPTIMAL'} = {
    NAME => 'AR_NIC_NETMON_SSID_EVENT_CNTR_DSMN_SUBOPTIMAL',
    LABEL => 'AR_NIC_NETMON_SSID_EVENT_CNTR_DSMN_SUBOPTIMAL',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Suboptimally completed DSMN transactions',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_NETMON_SSID_EVENT_CNTR_DSMN_SUBOPTIMAL'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_NETMON_SSID_EVENT_CNTR_BTESEND_SUCCESSFUL'} = {
    NAME => 'AR_NIC_NETMON_SSID_EVENT_CNTR_BTESEND_SUCCESSFUL',
    LABEL => 'AR_NIC_NETMON_SSID_EVENT_CNTR_BTESEND_SUCCESSFUL',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Successfully completed BTE_Send transactions',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_NETMON_SSID_EVENT_CNTR_BTESEND_SUCCESSFUL'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_NETMON_SSID_EVENT_CNTR_BTESEND_UNSUCCESSFUL'} = {
    NAME => 'AR_NIC_NETMON_SSID_EVENT_CNTR_BTESEND_UNSUCCESSFUL',
    LABEL => 'AR_NIC_NETMON_SSID_EVENT_CNTR_BTESEND_UNSUCCESSFUL',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Unsuccessfully completed BTE_Send transactions',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_NETMON_SSID_EVENT_CNTR_BTESEND_UNSUCCESSFUL'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_NETMON_SSID_EVENT_CNTR_NO_DEST_NOTIFY'} = {
    NAME => 'AR_NIC_NETMON_SSID_EVENT_CNTR_NO_DEST_NOTIFY',
    LABEL => 'AR_NIC_NETMON_SSID_EVENT_CNTR_NO_DEST_NOTIFY',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Transactions completed without destination notification',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_NETMON_SSID_EVENT_CNTR_NO_DEST_NOTIFY'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_NETMON_SSID_EVENT_CNTR_LATE_FIRST_REQRSP'} = {
    NAME => 'AR_NIC_NETMON_SSID_EVENT_CNTR_LATE_FIRST_REQRSP',
    LABEL => 'AR_NIC_NETMON_SSID_EVENT_CNTR_LATE_FIRST_REQRSP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Transactions completed with late response arrival',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_NETMON_SSID_EVENT_CNTR_LATE_FIRST_REQRSP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_NETMON_SSID_EVENT_CNTR_INTENTIONAL_TIMEOUT'} = {
    NAME => 'AR_NIC_NETMON_SSID_EVENT_CNTR_INTENTIONAL_TIMEOUT',
    LABEL => 'AR_NIC_NETMON_SSID_EVENT_CNTR_INTENTIONAL_TIMEOUT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Transactions completed with an intentional SSID entry timeout',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_NETMON_SSID_EVENT_CNTR_INTENTIONAL_TIMEOUT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_NETMON_SSID_EVENT_CNTR_LREQ_ERR_HSS'} = {
    NAME => 'AR_NIC_NETMON_SSID_EVENT_CNTR_LREQ_ERR_HSS',
    LABEL => 'AR_NIC_NETMON_SSID_EVENT_CNTR_LREQ_ERR_HSS',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Local request errors of interest to HSS',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_NETMON_SSID_EVENT_CNTR_LREQ_ERR_HSS'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_NETMON_SSID_EVENT_CNTR_LREQ_ERR_OS'} = {
    NAME => 'AR_NIC_NETMON_SSID_EVENT_CNTR_LREQ_ERR_OS',
    LABEL => 'AR_NIC_NETMON_SSID_EVENT_CNTR_LREQ_ERR_OS',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Local request errors of interest to OS',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_NETMON_SSID_EVENT_CNTR_LREQ_ERR_OS'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_NETMON_SSID_EVENT_CNTR_RREQ_HSS'} = {
    NAME => 'AR_NIC_NETMON_SSID_EVENT_CNTR_RREQ_HSS',
    LABEL => 'AR_NIC_NETMON_SSID_EVENT_CNTR_RREQ_HSS',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Remote request errors of interest to HSS',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_NETMON_SSID_EVENT_CNTR_RREQ_HSS'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_NETMON_SSID_EVENT_CNTR_RREQ_OS'} = {
    NAME => 'AR_NIC_NETMON_SSID_EVENT_CNTR_RREQ_OS',
    LABEL => 'AR_NIC_NETMON_SSID_EVENT_CNTR_RREQ_OS',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Remote request errors of interest to OS',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_NETMON_SSID_EVENT_CNTR_RREQ_OS'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_NETMON_SSID_EVENT_CNTR_RSP_HSS'} = {
    NAME => 'AR_NIC_NETMON_SSID_EVENT_CNTR_RSP_HSS',
    LABEL => 'AR_NIC_NETMON_SSID_EVENT_CNTR_RSP_HSS',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Response errors of interest to HSS',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_NETMON_SSID_EVENT_CNTR_RSP_HSS'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_NETMON_SSID_EVENT_CNTR_RSP_OS'} = {
    NAME => 'AR_NIC_NETMON_SSID_EVENT_CNTR_RSP_OS',
    LABEL => 'AR_NIC_NETMON_SSID_EVENT_CNTR_RSP_OS',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Response errors of interest to OS',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_NETMON_SSID_EVENT_CNTR_RSP_OS'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_NETMON_SSID_EVENT_CNTR_STALE_SSID'} = {
    NAME => 'AR_NIC_NETMON_SSID_EVENT_CNTR_STALE_SSID',
    LABEL => 'AR_NIC_NETMON_SSID_EVENT_CNTR_STALE_SSID',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Stale SSID entries count',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_NETMON_SSID_EVENT_CNTR_STALE_SSID'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_NETMON_SSID_EVENT_CNTR_SEQ_ERR_HSS'} = {
    NAME => 'AR_NIC_NETMON_SSID_EVENT_CNTR_SEQ_ERR_HSS',
    LABEL => 'AR_NIC_NETMON_SSID_EVENT_CNTR_SEQ_ERR_HSS',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Sequence errors of interest to HSS',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_NETMON_SSID_EVENT_CNTR_SEQ_ERR_HSS'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_NETMON_SSID_EVENT_CNTR_SEQ_ERR_OS'} = {
    NAME => 'AR_NIC_NETMON_SSID_EVENT_CNTR_SEQ_ERR_OS',
    LABEL => 'AR_NIC_NETMON_SSID_EVENT_CNTR_SEQ_ERR_OS',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Sequence errors of interest to OS',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_NETMON_SSID_EVENT_CNTR_SEQ_ERR_OS'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_NETMON_SSID_EVENT_CNTR_UNEXPTD_RSP'} = {
    NAME => 'AR_NIC_NETMON_SSID_EVENT_CNTR_UNEXPTD_RSP',
    LABEL => 'AR_NIC_NETMON_SSID_EVENT_CNTR_UNEXPTD_RSP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Unexpected response',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_NETMON_SSID_EVENT_CNTR_UNEXPTD_RSP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_NETMON_SSID_EVENT_CNTR_MEM_ERR_CORR'} = {
    NAME => 'AR_NIC_NETMON_SSID_EVENT_CNTR_MEM_ERR_CORR',
    LABEL => 'AR_NIC_NETMON_SSID_EVENT_CNTR_MEM_ERR_CORR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Correctable memory errors',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_NETMON_SSID_EVENT_CNTR_MEM_ERR_CORR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_NETMON_SSID_EVENT_CNTR_MEM_ERR_UNCORR'} = {
    NAME => 'AR_NIC_NETMON_SSID_EVENT_CNTR_MEM_ERR_UNCORR',
    LABEL => 'AR_NIC_NETMON_SSID_EVENT_CNTR_MEM_ERR_UNCORR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Uncorrectable memory errors',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_NETMON_SSID_EVENT_CNTR_MEM_ERR_UNCORR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_NETMON_SSID_EVENT_CNTR_CORRUPT_REQ_HD'} = {
    NAME => 'AR_NIC_NETMON_SSID_EVENT_CNTR_CORRUPT_REQ_HD',
    LABEL => 'AR_NIC_NETMON_SSID_EVENT_CNTR_CORRUPT_REQ_HD',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Request packets with corrupt head flits',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_NETMON_SSID_EVENT_CNTR_CORRUPT_REQ_HD'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_NETMON_SSID_EVENT_CNTR_CORR_REQ_PAYLD_ERR'} = {
    NAME => 'AR_NIC_NETMON_SSID_EVENT_CNTR_CORR_REQ_PAYLD_ERR',
    LABEL => 'AR_NIC_NETMON_SSID_EVENT_CNTR_CORR_REQ_PAYLD_ERR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Correctable errors in request packet payload flits',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_NETMON_SSID_EVENT_CNTR_CORR_REQ_PAYLD_ERR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_NETMON_SSID_EVENT_CNTR_UNCORR_REQ_PAYLD_ERR'} = {
    NAME => 'AR_NIC_NETMON_SSID_EVENT_CNTR_UNCORR_REQ_PAYLD_ERR',
    LABEL => 'AR_NIC_NETMON_SSID_EVENT_CNTR_UNCORR_REQ_PAYLD_ERR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Uncorrectable errors in request packet payload flits',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_NETMON_SSID_EVENT_CNTR_UNCORR_REQ_PAYLD_ERR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_NETMON_SSID_EVENT_CNTR_REQ_LEN_ERR'} = {
    NAME => 'AR_NIC_NETMON_SSID_EVENT_CNTR_REQ_LEN_ERR',
    LABEL => 'AR_NIC_NETMON_SSID_EVENT_CNTR_REQ_LEN_ERR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Request packets with incorrect length',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_NETMON_SSID_EVENT_CNTR_REQ_LEN_ERR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_NETMON_SSID_EVENT_CNTR_CORRUPT_RSP'} = {
    NAME => 'AR_NIC_NETMON_SSID_EVENT_CNTR_CORRUPT_RSP',
    LABEL => 'AR_NIC_NETMON_SSID_EVENT_CNTR_CORRUPT_RSP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Corrupt response head flits',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_NETMON_SSID_EVENT_CNTR_CORRUPT_RSP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_NETMON_SSID_EVENT_CNTR_BYPASSED_REQ'} = {
    NAME => 'AR_NIC_NETMON_SSID_EVENT_CNTR_BYPASSED_REQ',
    LABEL => 'AR_NIC_NETMON_SSID_EVENT_CNTR_BYPASSED_REQ',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Good request packets not forwarded toward network',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_NETMON_SSID_EVENT_CNTR_BYPASSED_REQ'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_NETMON_ORB_EVENT_CNTR_REQ_FLITS'} = {
    NAME => 'AR_NIC_NETMON_ORB_EVENT_CNTR_REQ_FLITS',
    LABEL => 'AR_NIC_NETMON_ORB_EVENT_CNTR_REQ_FLITS',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'ORB request flits event count',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_NETMON_ORB_EVENT_CNTR_REQ_FLITS'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_NETMON_ORB_EVENT_CNTR_REQ_PKTS'} = {
    NAME => 'AR_NIC_NETMON_ORB_EVENT_CNTR_REQ_PKTS',
    LABEL => 'AR_NIC_NETMON_ORB_EVENT_CNTR_REQ_PKTS',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'ORB request packets event count',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_NETMON_ORB_EVENT_CNTR_REQ_PKTS'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_NETMON_ORB_EVENT_CNTR_REQ_STALLED'} = {
    NAME => 'AR_NIC_NETMON_ORB_EVENT_CNTR_REQ_STALLED',
    LABEL => 'AR_NIC_NETMON_ORB_EVENT_CNTR_REQ_STALLED',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'ORB request stalled event count',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_NETMON_ORB_EVENT_CNTR_REQ_STALLED'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_NETMON_ORB_EVENT_CNTR_RSP_NET_TRACK'} = {
    NAME => 'AR_NIC_NETMON_ORB_EVENT_CNTR_RSP_NET_TRACK',
    LABEL => 'AR_NIC_NETMON_ORB_EVENT_CNTR_RSP_NET_TRACK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'ORB response packets tracked count',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_NETMON_ORB_EVENT_CNTR_RSP_NET_TRACK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_NETMON_ORB_EVENT_CNTR_RSP_FLITS'} = {
    NAME => 'AR_NIC_NETMON_ORB_EVENT_CNTR_RSP_FLITS',
    LABEL => 'AR_NIC_NETMON_ORB_EVENT_CNTR_RSP_FLITS',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'ORB response flits event count',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_NETMON_ORB_EVENT_CNTR_RSP_FLITS'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_NETMON_ORB_EVENT_CNTR_RSP_PKTS'} = {
    NAME => 'AR_NIC_NETMON_ORB_EVENT_CNTR_RSP_PKTS',
    LABEL => 'AR_NIC_NETMON_ORB_EVENT_CNTR_RSP_PKTS',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'ORB response packets event count',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_NETMON_ORB_EVENT_CNTR_RSP_PKTS'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_NETMON_ORB_EVENT_CNTR_RSP_STALLED'} = {
    NAME => 'AR_NIC_NETMON_ORB_EVENT_CNTR_RSP_STALLED',
    LABEL => 'AR_NIC_NETMON_ORB_EVENT_CNTR_RSP_STALLED',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'ORB response stalled event count',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_NETMON_ORB_EVENT_CNTR_RSP_STALLED'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_NETMON_ORB_EVENT_CNTR_RSP_BLOCKED'} = {
    NAME => 'AR_NIC_NETMON_ORB_EVENT_CNTR_RSP_BLOCKED',
    LABEL => 'AR_NIC_NETMON_ORB_EVENT_CNTR_RSP_BLOCKED',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'ORB response blocked event count',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_NETMON_ORB_EVENT_CNTR_RSP_BLOCKED'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_NETMON_ORB_EVENT_CNTR_RSP_BLOCKED_PKT_GEN'} = {
    NAME => 'AR_NIC_NETMON_ORB_EVENT_CNTR_RSP_BLOCKED_PKT_GEN',
    LABEL => 'AR_NIC_NETMON_ORB_EVENT_CNTR_RSP_BLOCKED_PKT_GEN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'ORB response blocked due to GET packet generation event count',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_NETMON_ORB_EVENT_CNTR_RSP_BLOCKED_PKT_GEN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_NETMON_ORB_EVENT_CNTR_ORD_RAM_READ'} = {
    NAME => 'AR_NIC_NETMON_ORB_EVENT_CNTR_ORD_RAM_READ',
    LABEL => 'AR_NIC_NETMON_ORB_EVENT_CNTR_ORD_RAM_READ',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'ORB response packets read from ORD event count',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_NETMON_ORB_EVENT_CNTR_ORD_RAM_READ'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_NETMON_ORB_EVENT_CNTR_NTT_SBE'} = {
    NAME => 'AR_NIC_NETMON_ORB_EVENT_CNTR_NTT_SBE',
    LABEL => 'AR_NIC_NETMON_ORB_EVENT_CNTR_NTT_SBE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'ORB NTT SBE event count',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_NETMON_ORB_EVENT_CNTR_NTT_SBE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_NETMON_ORB_EVENT_CNTR_NTT_MBE'} = {
    NAME => 'AR_NIC_NETMON_ORB_EVENT_CNTR_NTT_MBE',
    LABEL => 'AR_NIC_NETMON_ORB_EVENT_CNTR_NTT_MBE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'ORB NTT MBE event count',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_NETMON_ORB_EVENT_CNTR_NTT_MBE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_NETMON_ORB_EVENT_CNTR_PTT_SBE'} = {
    NAME => 'AR_NIC_NETMON_ORB_EVENT_CNTR_PTT_SBE',
    LABEL => 'AR_NIC_NETMON_ORB_EVENT_CNTR_PTT_SBE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'ORB PTT SBE event count',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_NETMON_ORB_EVENT_CNTR_PTT_SBE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_NETMON_ORB_EVENT_CNTR_PTT_MBE'} = {
    NAME => 'AR_NIC_NETMON_ORB_EVENT_CNTR_PTT_MBE',
    LABEL => 'AR_NIC_NETMON_ORB_EVENT_CNTR_PTT_MBE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'ORB PTT MBE event count',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_NETMON_ORB_EVENT_CNTR_PTT_MBE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_NETMON_ORB_EVENT_CNTR_REQ_FIFO_SBE'} = {
    NAME => 'AR_NIC_NETMON_ORB_EVENT_CNTR_REQ_FIFO_SBE',
    LABEL => 'AR_NIC_NETMON_ORB_EVENT_CNTR_REQ_FIFO_SBE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'ORB request FIFO SBE event count',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_NETMON_ORB_EVENT_CNTR_REQ_FIFO_SBE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_NETMON_ORB_EVENT_CNTR_REQ_FIFO_MBE'} = {
    NAME => 'AR_NIC_NETMON_ORB_EVENT_CNTR_REQ_FIFO_MBE',
    LABEL => 'AR_NIC_NETMON_ORB_EVENT_CNTR_REQ_FIFO_MBE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'ORB request FIFO MBE event count',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_NETMON_ORB_EVENT_CNTR_REQ_FIFO_MBE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_NETMON_ORB_EVENT_CNTR_REQ_FIFO_PE'} = {
    NAME => 'AR_NIC_NETMON_ORB_EVENT_CNTR_REQ_FIFO_PE',
    LABEL => 'AR_NIC_NETMON_ORB_EVENT_CNTR_REQ_FIFO_PE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'ORB request FIFO PE event count',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_NETMON_ORB_EVENT_CNTR_REQ_FIFO_PE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_NETMON_ORB_EVENT_CNTR_RSP_FIFO_SBE'} = {
    NAME => 'AR_NIC_NETMON_ORB_EVENT_CNTR_RSP_FIFO_SBE',
    LABEL => 'AR_NIC_NETMON_ORB_EVENT_CNTR_RSP_FIFO_SBE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'ORB response FIFO SBE event count',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_NETMON_ORB_EVENT_CNTR_RSP_FIFO_SBE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_NETMON_ORB_EVENT_CNTR_RSP_FIFO_MBE'} = {
    NAME => 'AR_NIC_NETMON_ORB_EVENT_CNTR_RSP_FIFO_MBE',
    LABEL => 'AR_NIC_NETMON_ORB_EVENT_CNTR_RSP_FIFO_MBE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'ORB response FIFO MBE count',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_NETMON_ORB_EVENT_CNTR_RSP_FIFO_MBE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_NETMON_ORB_EVENT_CNTR_RSP_FIFO_PE'} = {
    NAME => 'AR_NIC_NETMON_ORB_EVENT_CNTR_RSP_FIFO_PE',
    LABEL => 'AR_NIC_NETMON_ORB_EVENT_CNTR_RSP_FIFO_PE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'ORB response FIFO PE event count',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_NETMON_ORB_EVENT_CNTR_RSP_FIFO_PE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_NETMON_ORB_EVENT_CNTR_RSP_FIFO_SPKT'} = {
    NAME => 'AR_NIC_NETMON_ORB_EVENT_CNTR_RSP_FIFO_SPKT',
    LABEL => 'AR_NIC_NETMON_ORB_EVENT_CNTR_RSP_FIFO_SPKT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Response FIFO super packet count',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_NETMON_ORB_EVENT_CNTR_RSP_FIFO_SPKT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_NETMON_ORB_EVENT_CNTR_ORD_SBE'} = {
    NAME => 'AR_NIC_NETMON_ORB_EVENT_CNTR_ORD_SBE',
    LABEL => 'AR_NIC_NETMON_ORB_EVENT_CNTR_ORD_SBE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'ORB outstanding request data RAM SBE event count',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_NETMON_ORB_EVENT_CNTR_ORD_SBE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_NETMON_ORB_EVENT_CNTR_ORD_MBE'} = {
    NAME => 'AR_NIC_NETMON_ORB_EVENT_CNTR_ORD_MBE',
    LABEL => 'AR_NIC_NETMON_ORB_EVENT_CNTR_ORD_MBE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'ORB outstanding request data RAM MBE event count',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_NETMON_ORB_EVENT_CNTR_ORD_MBE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_NETMON_ORB_EVENT_CNTR_SCRUB_CNT'} = {
    NAME => 'AR_NIC_NETMON_ORB_EVENT_CNTR_SCRUB_CNT',
    LABEL => 'AR_NIC_NETMON_ORB_EVENT_CNTR_SCRUB_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'ORB Scrub entry count',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_NETMON_ORB_EVENT_CNTR_SCRUB_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_NETMON_ORB_EVENT_CNTR_NO_ENTRY'} = {
    NAME => 'AR_NIC_NETMON_ORB_EVENT_CNTR_NO_ENTRY',
    LABEL => 'AR_NIC_NETMON_ORB_EVENT_CNTR_NO_ENTRY',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'No entry in ORD event count',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_NETMON_ORB_EVENT_CNTR_NO_ENTRY'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_NETMON_ORB_EVENT_CNTR_CMD_MISMATCH'} = {
    NAME => 'AR_NIC_NETMON_ORB_EVENT_CNTR_CMD_MISMATCH',
    LABEL => 'AR_NIC_NETMON_ORB_EVENT_CNTR_CMD_MISMATCH',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Command mismatch event count',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_NETMON_ORB_EVENT_CNTR_CMD_MISMATCH'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_NETMON_ORB_EVENT_CNTR_ILLEGAL_PKTID'} = {
    NAME => 'AR_NIC_NETMON_ORB_EVENT_CNTR_ILLEGAL_PKTID',
    LABEL => 'AR_NIC_NETMON_ORB_EVENT_CNTR_ILLEGAL_PKTID',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Illegal packet ID in response count',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_NETMON_ORB_EVENT_CNTR_ILLEGAL_PKTID'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_NETMON_ORB_EVENT_CNTR_ILLEGAL_LSTATUS'} = {
    NAME => 'AR_NIC_NETMON_ORB_EVENT_CNTR_ILLEGAL_LSTATUS',
    LABEL => 'AR_NIC_NETMON_ORB_EVENT_CNTR_ILLEGAL_LSTATUS',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Illegal local status in response count',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_NETMON_ORB_EVENT_CNTR_ILLEGAL_LSTATUS'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_NETMON_RAT_EVENT_CNTR_NL_PKTS'} = {
    NAME => 'AR_NIC_NETMON_RAT_EVENT_CNTR_NL_PKTS',
    LABEL => 'AR_NIC_NETMON_RAT_EVENT_CNTR_NL_PKTS',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'NL packet count',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_NETMON_RAT_EVENT_CNTR_NL_PKTS'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_NETMON_RAT_EVENT_CNTR_NL_FLITS'} = {
    NAME => 'AR_NIC_NETMON_RAT_EVENT_CNTR_NL_FLITS',
    LABEL => 'AR_NIC_NETMON_RAT_EVENT_CNTR_NL_FLITS',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'NL flit count',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_NETMON_RAT_EVENT_CNTR_NL_FLITS'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_NETMON_RAT_EVENT_CNTR_NL_BLOCKED'} = {
    NAME => 'AR_NIC_NETMON_RAT_EVENT_CNTR_NL_BLOCKED',
    LABEL => 'AR_NIC_NETMON_RAT_EVENT_CNTR_NL_BLOCKED',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'NL blocked count',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_NETMON_RAT_EVENT_CNTR_NL_BLOCKED'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_NETMON_RAT_EVENT_CNTR_IOMMU_PKTS'} = {
    NAME => 'AR_NIC_NETMON_RAT_EVENT_CNTR_IOMMU_PKTS',
    LABEL => 'AR_NIC_NETMON_RAT_EVENT_CNTR_IOMMU_PKTS',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'IOMMU packet count',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_NETMON_RAT_EVENT_CNTR_IOMMU_PKTS'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_NETMON_RAT_EVENT_CNTR_IOMMU_FLITS'} = {
    NAME => 'AR_NIC_NETMON_RAT_EVENT_CNTR_IOMMU_FLITS',
    LABEL => 'AR_NIC_NETMON_RAT_EVENT_CNTR_IOMMU_FLITS',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'IOMMU flit count',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_NETMON_RAT_EVENT_CNTR_IOMMU_FLITS'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_NETMON_RAT_EVENT_CNTR_IOMMU_BLOCKED'} = {
    NAME => 'AR_NIC_NETMON_RAT_EVENT_CNTR_IOMMU_BLOCKED',
    LABEL => 'AR_NIC_NETMON_RAT_EVENT_CNTR_IOMMU_BLOCKED',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'IOMMU blocked count',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_NETMON_RAT_EVENT_CNTR_IOMMU_BLOCKED'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_NETMON_RAT_EVENT_CNTR_REQ_STALLED'} = {
    NAME => 'AR_NIC_NETMON_RAT_EVENT_CNTR_REQ_STALLED',
    LABEL => 'AR_NIC_NETMON_RAT_EVENT_CNTR_REQ_STALLED',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Request channel (NL or IOMMU) stalled count',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_NETMON_RAT_EVENT_CNTR_REQ_STALLED'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_NETMON_RAT_EVENT_CNTR_ORB_PKTS'} = {
    NAME => 'AR_NIC_NETMON_RAT_EVENT_CNTR_ORB_PKTS',
    LABEL => 'AR_NIC_NETMON_RAT_EVENT_CNTR_ORB_PKTS',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'ORB packet count',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_NETMON_RAT_EVENT_CNTR_ORB_PKTS'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_NETMON_RAT_EVENT_CNTR_ORB_FLITS'} = {
    NAME => 'AR_NIC_NETMON_RAT_EVENT_CNTR_ORB_FLITS',
    LABEL => 'AR_NIC_NETMON_RAT_EVENT_CNTR_ORB_FLITS',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'ORB flit count',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_NETMON_RAT_EVENT_CNTR_ORB_FLITS'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_NETMON_RAT_EVENT_CNTR_RSP_STALLED'} = {
    NAME => 'AR_NIC_NETMON_RAT_EVENT_CNTR_RSP_STALLED',
    LABEL => 'AR_NIC_NETMON_RAT_EVENT_CNTR_RSP_STALLED',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'ResponseChannel (ORB) stalled count',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_NETMON_RAT_EVENT_CNTR_RSP_STALLED'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_NETMON_RAT_EVENT_CNTR_REQ_PARITY_INPUT'} = {
    NAME => 'AR_NIC_NETMON_RAT_EVENT_CNTR_REQ_PARITY_INPUT',
    LABEL => 'AR_NIC_NETMON_RAT_EVENT_CNTR_REQ_PARITY_INPUT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Parity error in request packet input (excludes IOMMU)',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_NETMON_RAT_EVENT_CNTR_REQ_PARITY_INPUT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_NETMON_RAT_EVENT_CNTR_RSP_PARITY_INPUT'} = {
    NAME => 'AR_NIC_NETMON_RAT_EVENT_CNTR_RSP_PARITY_INPUT',
    LABEL => 'AR_NIC_NETMON_RAT_EVENT_CNTR_RSP_PARITY_INPUT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Parity error in response packet input',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_NETMON_RAT_EVENT_CNTR_RSP_PARITY_INPUT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_NETMON_RAT_EVENT_CNTR_REQ_PARITY_OUTPUT'} = {
    NAME => 'AR_NIC_NETMON_RAT_EVENT_CNTR_REQ_PARITY_OUTPUT',
    LABEL => 'AR_NIC_NETMON_RAT_EVENT_CNTR_REQ_PARITY_OUTPUT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Parity error in request packet output (includes IOMMU)',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_NETMON_RAT_EVENT_CNTR_REQ_PARITY_OUTPUT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_NETMON_RAT_EVENT_CNTR_RSP_PARITY_OUTPUT'} = {
    NAME => 'AR_NIC_NETMON_RAT_EVENT_CNTR_RSP_PARITY_OUTPUT',
    LABEL => 'AR_NIC_NETMON_RAT_EVENT_CNTR_RSP_PARITY_OUTPUT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Parity error in response packet output',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_NETMON_RAT_EVENT_CNTR_RSP_PARITY_OUTPUT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_NETMON_RAT_EVENT_CNTR_REQ_XLAT_ERR'} = {
    NAME => 'AR_NIC_NETMON_RAT_EVENT_CNTR_REQ_XLAT_ERR',
    LABEL => 'AR_NIC_NETMON_RAT_EVENT_CNTR_REQ_XLAT_ERR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Translation error in request (detected in output processing)',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_NETMON_RAT_EVENT_CNTR_REQ_XLAT_ERR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_NETMON_RAT_EVENT_CNTR_REQ_PAYLD_ERR'} = {
    NAME => 'AR_NIC_NETMON_RAT_EVENT_CNTR_REQ_PAYLD_ERR',
    LABEL => 'AR_NIC_NETMON_RAT_EVENT_CNTR_REQ_PAYLD_ERR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Payload error in request (detected in output processing)',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_NETMON_RAT_EVENT_CNTR_REQ_PAYLD_ERR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_NETMON_RAT_EVENT_CNTR_RSP_XLAT_ERR'} = {
    NAME => 'AR_NIC_NETMON_RAT_EVENT_CNTR_RSP_XLAT_ERR',
    LABEL => 'AR_NIC_NETMON_RAT_EVENT_CNTR_RSP_XLAT_ERR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Translation error in response (detected in output processing)',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_NETMON_RAT_EVENT_CNTR_RSP_XLAT_ERR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_NETMON_RAT_EVENT_CNTR_RSP_PAYLD_ERR'} = {
    NAME => 'AR_NIC_NETMON_RAT_EVENT_CNTR_RSP_PAYLD_ERR',
    LABEL => 'AR_NIC_NETMON_RAT_EVENT_CNTR_RSP_PAYLD_ERR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Payload error in response (detected in output processing)',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_NETMON_RAT_EVENT_CNTR_RSP_PAYLD_ERR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_NETMON_RAT_EVENT_CNTR_IOMMU_PARITY_INPUT'} = {
    NAME => 'AR_NIC_NETMON_RAT_EVENT_CNTR_IOMMU_PARITY_INPUT',
    LABEL => 'AR_NIC_NETMON_RAT_EVENT_CNTR_IOMMU_PARITY_INPUT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Parity error in IOMMU request packet input',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_NETMON_RAT_EVENT_CNTR_IOMMU_PARITY_INPUT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_NETMON_RAT_EVENT_CNTR_IOMMU_DROP_INPUT'} = {
    NAME => 'AR_NIC_NETMON_RAT_EVENT_CNTR_IOMMU_DROP_INPUT',
    LABEL => 'AR_NIC_NETMON_RAT_EVENT_CNTR_IOMMU_DROP_INPUT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'IOMMU request was dropped during input processing (e.g. invalid command)',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_NETMON_RAT_EVENT_CNTR_IOMMU_DROP_INPUT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_NETMON_RAT_EVENT_CNTR_IOMMU_PAYLD_ERR'} = {
    NAME => 'AR_NIC_NETMON_RAT_EVENT_CNTR_IOMMU_PAYLD_ERR',
    LABEL => 'AR_NIC_NETMON_RAT_EVENT_CNTR_IOMMU_PAYLD_ERR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Payload error in IOMMU request (detected in output processing)',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_NETMON_RAT_EVENT_CNTR_IOMMU_PAYLD_ERR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_NETMON_RAT_EVENT_CNTR_REQ_MALFORMED'} = {
    NAME => 'AR_NIC_NETMON_RAT_EVENT_CNTR_REQ_MALFORMED',
    LABEL => 'AR_NIC_NETMON_RAT_EVENT_CNTR_REQ_MALFORMED',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Malformed request packet (detected in input processing)',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_NETMON_RAT_EVENT_CNTR_REQ_MALFORMED'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_NETMON_RAT_EVENT_CNTR_REQ_INV_CMD'} = {
    NAME => 'AR_NIC_NETMON_RAT_EVENT_CNTR_REQ_INV_CMD',
    LABEL => 'AR_NIC_NETMON_RAT_EVENT_CNTR_REQ_INV_CMD',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Invalid command in request (detected in input processing)',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_NETMON_RAT_EVENT_CNTR_REQ_INV_CMD'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_NETMON_RAT_EVENT_CNTR_RSP_MALFORMED'} = {
    NAME => 'AR_NIC_NETMON_RAT_EVENT_CNTR_RSP_MALFORMED',
    LABEL => 'AR_NIC_NETMON_RAT_EVENT_CNTR_RSP_MALFORMED',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Malformed response packet (detected in input processing)',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_NETMON_RAT_EVENT_CNTR_RSP_MALFORMED'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_NETMON_RAT_EVENT_CNTR_RSP_INV_CMD'} = {
    NAME => 'AR_NIC_NETMON_RAT_EVENT_CNTR_RSP_INV_CMD',
    LABEL => 'AR_NIC_NETMON_RAT_EVENT_CNTR_RSP_INV_CMD',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Invalid command in response (detected in input processing)',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_NETMON_RAT_EVENT_CNTR_RSP_INV_CMD'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_NETMON_RAT_EVENT_CNTR_REQ_FLIT'} = {
    NAME => 'AR_NIC_NETMON_RAT_EVENT_CNTR_REQ_FLIT',
    LABEL => 'AR_NIC_NETMON_RAT_EVENT_CNTR_REQ_FLIT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Configurable performance counter, request channel (includes IOMMU)',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_NETMON_RAT_EVENT_CNTR_REQ_FLIT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_NETMON_RAT_EVENT_CNTR_RSP_FLIT'} = {
    NAME => 'AR_NIC_NETMON_RAT_EVENT_CNTR_RSP_FLIT',
    LABEL => 'AR_NIC_NETMON_RAT_EVENT_CNTR_RSP_FLIT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Configurable performance counter, response channel',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_NETMON_RAT_EVENT_CNTR_RSP_FLIT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_NETMON_TARB_EVENT_CNTR_CE_FLITS'} = {
    NAME => 'AR_NIC_NETMON_TARB_EVENT_CNTR_CE_FLITS',
    LABEL => 'AR_NIC_NETMON_TARB_EVENT_CNTR_CE_FLITS',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'CE flit count',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_NETMON_TARB_EVENT_CNTR_CE_FLITS'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_NETMON_TARB_EVENT_CNTR_CE_PKTS'} = {
    NAME => 'AR_NIC_NETMON_TARB_EVENT_CNTR_CE_PKTS',
    LABEL => 'AR_NIC_NETMON_TARB_EVENT_CNTR_CE_PKTS',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'CE packet count',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_NETMON_TARB_EVENT_CNTR_CE_PKTS'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_NETMON_TARB_EVENT_CNTR_CE_BLOCKED'} = {
    NAME => 'AR_NIC_NETMON_TARB_EVENT_CNTR_CE_BLOCKED',
    LABEL => 'AR_NIC_NETMON_TARB_EVENT_CNTR_CE_BLOCKED',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'CE blocked count',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_NETMON_TARB_EVENT_CNTR_CE_BLOCKED'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_NETMON_TARB_EVENT_CNTR_BTE_FLITS'} = {
    NAME => 'AR_NIC_NETMON_TARB_EVENT_CNTR_BTE_FLITS',
    LABEL => 'AR_NIC_NETMON_TARB_EVENT_CNTR_BTE_FLITS',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'BTE flit count',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_NETMON_TARB_EVENT_CNTR_BTE_FLITS'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_NETMON_TARB_EVENT_CNTR_BTE_PKTS'} = {
    NAME => 'AR_NIC_NETMON_TARB_EVENT_CNTR_BTE_PKTS',
    LABEL => 'AR_NIC_NETMON_TARB_EVENT_CNTR_BTE_PKTS',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'BTE packet count',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_NETMON_TARB_EVENT_CNTR_BTE_PKTS'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_NETMON_TARB_EVENT_CNTR_BTE_BLOCKED'} = {
    NAME => 'AR_NIC_NETMON_TARB_EVENT_CNTR_BTE_BLOCKED',
    LABEL => 'AR_NIC_NETMON_TARB_EVENT_CNTR_BTE_BLOCKED',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'BTE blocked count',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_NETMON_TARB_EVENT_CNTR_BTE_BLOCKED'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_NETMON_TARB_EVENT_CNTR_DLA_FLITS'} = {
    NAME => 'AR_NIC_NETMON_TARB_EVENT_CNTR_DLA_FLITS',
    LABEL => 'AR_NIC_NETMON_TARB_EVENT_CNTR_DLA_FLITS',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'DLA flit count',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_NETMON_TARB_EVENT_CNTR_DLA_FLITS'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_NETMON_TARB_EVENT_CNTR_DLA_PKTS'} = {
    NAME => 'AR_NIC_NETMON_TARB_EVENT_CNTR_DLA_PKTS',
    LABEL => 'AR_NIC_NETMON_TARB_EVENT_CNTR_DLA_PKTS',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'DLA packet count',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_NETMON_TARB_EVENT_CNTR_DLA_PKTS'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_NETMON_TARB_EVENT_CNTR_DLA_BLOCKED'} = {
    NAME => 'AR_NIC_NETMON_TARB_EVENT_CNTR_DLA_BLOCKED',
    LABEL => 'AR_NIC_NETMON_TARB_EVENT_CNTR_DLA_BLOCKED',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'DLA blocked count',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_NETMON_TARB_EVENT_CNTR_DLA_BLOCKED'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_NETMON_TARB_EVENT_CNTR_SSID_FLITS'} = {
    NAME => 'AR_NIC_NETMON_TARB_EVENT_CNTR_SSID_FLITS',
    LABEL => 'AR_NIC_NETMON_TARB_EVENT_CNTR_SSID_FLITS',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'SSID flit count',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_NETMON_TARB_EVENT_CNTR_SSID_FLITS'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_NETMON_TARB_EVENT_CNTR_SSID_PKTS'} = {
    NAME => 'AR_NIC_NETMON_TARB_EVENT_CNTR_SSID_PKTS',
    LABEL => 'AR_NIC_NETMON_TARB_EVENT_CNTR_SSID_PKTS',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'SSID packet count',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_NETMON_TARB_EVENT_CNTR_SSID_PKTS'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_NETMON_TARB_EVENT_CNTR_SSID_STALLED'} = {
    NAME => 'AR_NIC_NETMON_TARB_EVENT_CNTR_SSID_STALLED',
    LABEL => 'AR_NIC_NETMON_TARB_EVENT_CNTR_SSID_STALLED',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'SSID stalled count',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_NETMON_TARB_EVENT_CNTR_SSID_STALLED'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_REQMON_REQMON_EVENT_CNTR_TRIGGER0'} = {
    NAME => 'AR_NIC_REQMON_REQMON_EVENT_CNTR_TRIGGER0',
    LABEL => 'AR_NIC_REQMON_REQMON_EVENT_CNTR_TRIGGER0',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'TRIGGER 0 count',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_REQMON_REQMON_EVENT_CNTR_TRIGGER0'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_REQMON_REQMON_EVENT_CNTR_TRIGGER1'} = {
    NAME => 'AR_NIC_REQMON_REQMON_EVENT_CNTR_TRIGGER1',
    LABEL => 'AR_NIC_REQMON_REQMON_EVENT_CNTR_TRIGGER1',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'TRIGGER 1 count',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_REQMON_REQMON_EVENT_CNTR_TRIGGER1'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_REQMON_BTE_EVENT_CNTR_NET_PKT0'} = {
    NAME => 'AR_NIC_REQMON_BTE_EVENT_CNTR_NET_PKT0',
    LABEL => 'AR_NIC_REQMON_BTE_EVENT_CNTR_NET_PKT0',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'BTE Channel 0 network packets',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_REQMON_BTE_EVENT_CNTR_NET_PKT0'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_REQMON_BTE_EVENT_CNTR_NET_PKT1'} = {
    NAME => 'AR_NIC_REQMON_BTE_EVENT_CNTR_NET_PKT1',
    LABEL => 'AR_NIC_REQMON_BTE_EVENT_CNTR_NET_PKT1',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'BTE Channel 1 network packets',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_REQMON_BTE_EVENT_CNTR_NET_PKT1'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_REQMON_BTE_EVENT_CNTR_NET_PKT2'} = {
    NAME => 'AR_NIC_REQMON_BTE_EVENT_CNTR_NET_PKT2',
    LABEL => 'AR_NIC_REQMON_BTE_EVENT_CNTR_NET_PKT2',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'BTE Channel 2 network packets',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_REQMON_BTE_EVENT_CNTR_NET_PKT2'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_REQMON_BTE_EVENT_CNTR_NET_PKT3'} = {
    NAME => 'AR_NIC_REQMON_BTE_EVENT_CNTR_NET_PKT3',
    LABEL => 'AR_NIC_REQMON_BTE_EVENT_CNTR_NET_PKT3',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'BTE Channel 3 network packets',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_REQMON_BTE_EVENT_CNTR_NET_PKT3'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_REQMON_BTE_EVENT_CNTR_DESC0'} = {
    NAME => 'AR_NIC_REQMON_BTE_EVENT_CNTR_DESC0',
    LABEL => 'AR_NIC_REQMON_BTE_EVENT_CNTR_DESC0',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'BTE Channel 0 TX descriptors processed',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_REQMON_BTE_EVENT_CNTR_DESC0'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_REQMON_BTE_EVENT_CNTR_DESC1'} = {
    NAME => 'AR_NIC_REQMON_BTE_EVENT_CNTR_DESC1',
    LABEL => 'AR_NIC_REQMON_BTE_EVENT_CNTR_DESC1',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'BTE Channel 1 TX descriptors processed',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_REQMON_BTE_EVENT_CNTR_DESC1'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_REQMON_BTE_EVENT_CNTR_DESC2'} = {
    NAME => 'AR_NIC_REQMON_BTE_EVENT_CNTR_DESC2',
    LABEL => 'AR_NIC_REQMON_BTE_EVENT_CNTR_DESC2',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'BTE Channel 2 TX descriptors processed',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_REQMON_BTE_EVENT_CNTR_DESC2'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_REQMON_BTE_EVENT_CNTR_DESC3'} = {
    NAME => 'AR_NIC_REQMON_BTE_EVENT_CNTR_DESC3',
    LABEL => 'AR_NIC_REQMON_BTE_EVENT_CNTR_DESC3',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'BTE Channel 3 TX descriptors processed',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_REQMON_BTE_EVENT_CNTR_DESC3'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_REQMON_BTE_EVENT_CNTR_PROC_TIME0'} = {
    NAME => 'AR_NIC_REQMON_BTE_EVENT_CNTR_PROC_TIME0',
    LABEL => 'AR_NIC_REQMON_BTE_EVENT_CNTR_PROC_TIME0',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'BTE Channel 0 descriptor processing time',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_REQMON_BTE_EVENT_CNTR_PROC_TIME0'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_REQMON_BTE_EVENT_CNTR_PROC_TIME1'} = {
    NAME => 'AR_NIC_REQMON_BTE_EVENT_CNTR_PROC_TIME1',
    LABEL => 'AR_NIC_REQMON_BTE_EVENT_CNTR_PROC_TIME1',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'BTE Channel 1 descriptor processing time',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_REQMON_BTE_EVENT_CNTR_PROC_TIME1'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_REQMON_BTE_EVENT_CNTR_PROC_TIME2'} = {
    NAME => 'AR_NIC_REQMON_BTE_EVENT_CNTR_PROC_TIME2',
    LABEL => 'AR_NIC_REQMON_BTE_EVENT_CNTR_PROC_TIME2',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'BTE Channel 2 descriptor processing time',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_REQMON_BTE_EVENT_CNTR_PROC_TIME2'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_REQMON_BTE_EVENT_CNTR_PROC_TIME3'} = {
    NAME => 'AR_NIC_REQMON_BTE_EVENT_CNTR_PROC_TIME3',
    LABEL => 'AR_NIC_REQMON_BTE_EVENT_CNTR_PROC_TIME3',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'BTE Channel 3 descriptor processing time',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_REQMON_BTE_EVENT_CNTR_PROC_TIME3'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_REQMON_BTE_EVENT_CNTR_TARB_FLT_BLK'} = {
    NAME => 'AR_NIC_REQMON_BTE_EVENT_CNTR_TARB_FLT_BLK',
    LABEL => 'AR_NIC_REQMON_BTE_EVENT_CNTR_TARB_FLT_BLK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'TARB flits blocked (ready to send, but no flit credits)',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_REQMON_BTE_EVENT_CNTR_TARB_FLT_BLK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_REQMON_BTE_EVENT_CNTR_TARB_PKT_BLK'} = {
    NAME => 'AR_NIC_REQMON_BTE_EVENT_CNTR_TARB_PKT_BLK',
    LABEL => 'AR_NIC_REQMON_BTE_EVENT_CNTR_TARB_PKT_BLK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'TARB packets blocked (ready to send, but no packet credits)',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_REQMON_BTE_EVENT_CNTR_TARB_PKT_BLK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_REQMON_BTE_EVENT_CNTR_PARB_WR_FLT_BLK'} = {
    NAME => 'AR_NIC_REQMON_BTE_EVENT_CNTR_PARB_WR_FLT_BLK',
    LABEL => 'AR_NIC_REQMON_BTE_EVENT_CNTR_PARB_WR_FLT_BLK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'PARB write flits blocked (ready to send, but no flit credits)',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_REQMON_BTE_EVENT_CNTR_PARB_WR_FLT_BLK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_REQMON_BTE_EVENT_CNTR_PARB_RD_FLT_BLK'} = {
    NAME => 'AR_NIC_REQMON_BTE_EVENT_CNTR_PARB_RD_FLT_BLK',
    LABEL => 'AR_NIC_REQMON_BTE_EVENT_CNTR_PARB_RD_FLT_BLK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'PARB read flits blocked (ready to send, but no flit credits)',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_REQMON_BTE_EVENT_CNTR_PARB_RD_FLT_BLK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_REQMON_BTE_EVENT_CNTR_PARB_RD_PKT_BLK'} = {
    NAME => 'AR_NIC_REQMON_BTE_EVENT_CNTR_PARB_RD_PKT_BLK',
    LABEL => 'AR_NIC_REQMON_BTE_EVENT_CNTR_PARB_RD_PKT_BLK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'PARB read packets blocked (ready to send, but no packet credits)',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_REQMON_BTE_EVENT_CNTR_PARB_RD_PKT_BLK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_REQMON_BTE_EVENT_CNTR_RD_REQ0'} = {
    NAME => 'AR_NIC_REQMON_BTE_EVENT_CNTR_RD_REQ0',
    LABEL => 'AR_NIC_REQMON_BTE_EVENT_CNTR_RD_REQ0',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'BTE Channel 0 read request packets set',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_REQMON_BTE_EVENT_CNTR_RD_REQ0'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_REQMON_BTE_EVENT_CNTR_RD_REQ1'} = {
    NAME => 'AR_NIC_REQMON_BTE_EVENT_CNTR_RD_REQ1',
    LABEL => 'AR_NIC_REQMON_BTE_EVENT_CNTR_RD_REQ1',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'BTE Channel 1 read request packets set',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_REQMON_BTE_EVENT_CNTR_RD_REQ1'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_REQMON_BTE_EVENT_CNTR_RD_REQ2'} = {
    NAME => 'AR_NIC_REQMON_BTE_EVENT_CNTR_RD_REQ2',
    LABEL => 'AR_NIC_REQMON_BTE_EVENT_CNTR_RD_REQ2',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'BTE Channel 2 read request packets set',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_REQMON_BTE_EVENT_CNTR_RD_REQ2'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_REQMON_BTE_EVENT_CNTR_RD_REQ3'} = {
    NAME => 'AR_NIC_REQMON_BTE_EVENT_CNTR_RD_REQ3',
    LABEL => 'AR_NIC_REQMON_BTE_EVENT_CNTR_RD_REQ3',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'BTE Channel 3 read request packets set',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_REQMON_BTE_EVENT_CNTR_RD_REQ3'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_REQMON_BTE_EVENT_CNTR_RD_RSP0'} = {
    NAME => 'AR_NIC_REQMON_BTE_EVENT_CNTR_RD_RSP0',
    LABEL => 'AR_NIC_REQMON_BTE_EVENT_CNTR_RD_RSP0',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'BTE Channel 0 read response packets received',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_REQMON_BTE_EVENT_CNTR_RD_RSP0'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_REQMON_BTE_EVENT_CNTR_RD_RSP1'} = {
    NAME => 'AR_NIC_REQMON_BTE_EVENT_CNTR_RD_RSP1',
    LABEL => 'AR_NIC_REQMON_BTE_EVENT_CNTR_RD_RSP1',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'BTE Channel 1 read response packets received',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_REQMON_BTE_EVENT_CNTR_RD_RSP1'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_REQMON_BTE_EVENT_CNTR_RD_RSP2'} = {
    NAME => 'AR_NIC_REQMON_BTE_EVENT_CNTR_RD_RSP2',
    LABEL => 'AR_NIC_REQMON_BTE_EVENT_CNTR_RD_RSP2',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'BTE Channel 2 read response packets received',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_REQMON_BTE_EVENT_CNTR_RD_RSP2'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_REQMON_BTE_EVENT_CNTR_RD_RSP3'} = {
    NAME => 'AR_NIC_REQMON_BTE_EVENT_CNTR_RD_RSP3',
    LABEL => 'AR_NIC_REQMON_BTE_EVENT_CNTR_RD_RSP3',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'BTE Channel 3 read response packets received',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_REQMON_BTE_EVENT_CNTR_RD_RSP3'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_REQMON_BTE_EVENT_CNTR_PI_RD_RSP_ERR0'} = {
    NAME => 'AR_NIC_REQMON_BTE_EVENT_CNTR_PI_RD_RSP_ERR0',
    LABEL => 'AR_NIC_REQMON_BTE_EVENT_CNTR_PI_RD_RSP_ERR0',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Channel 0 PI read response errors',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_REQMON_BTE_EVENT_CNTR_PI_RD_RSP_ERR0'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_REQMON_BTE_EVENT_CNTR_PI_RD_RSP_ERR1'} = {
    NAME => 'AR_NIC_REQMON_BTE_EVENT_CNTR_PI_RD_RSP_ERR1',
    LABEL => 'AR_NIC_REQMON_BTE_EVENT_CNTR_PI_RD_RSP_ERR1',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Channel 1 PI read response errors',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_REQMON_BTE_EVENT_CNTR_PI_RD_RSP_ERR1'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_REQMON_BTE_EVENT_CNTR_PI_RD_RSP_ERR2'} = {
    NAME => 'AR_NIC_REQMON_BTE_EVENT_CNTR_PI_RD_RSP_ERR2',
    LABEL => 'AR_NIC_REQMON_BTE_EVENT_CNTR_PI_RD_RSP_ERR2',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Channel 2 PI read response errors',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_REQMON_BTE_EVENT_CNTR_PI_RD_RSP_ERR2'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_REQMON_BTE_EVENT_CNTR_PI_RD_RSP_ERR3'} = {
    NAME => 'AR_NIC_REQMON_BTE_EVENT_CNTR_PI_RD_RSP_ERR3',
    LABEL => 'AR_NIC_REQMON_BTE_EVENT_CNTR_PI_RD_RSP_ERR3',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Channel 3 PI read response errors',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_REQMON_BTE_EVENT_CNTR_PI_RD_RSP_ERR3'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_REQMON_BTE_EVENT_CNTR_NAT_ERR0'} = {
    NAME => 'AR_NIC_REQMON_BTE_EVENT_CNTR_NAT_ERR0',
    LABEL => 'AR_NIC_REQMON_BTE_EVENT_CNTR_NAT_ERR0',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Channel 0 NAT errors',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_REQMON_BTE_EVENT_CNTR_NAT_ERR0'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_REQMON_BTE_EVENT_CNTR_NAT_ERR1'} = {
    NAME => 'AR_NIC_REQMON_BTE_EVENT_CNTR_NAT_ERR1',
    LABEL => 'AR_NIC_REQMON_BTE_EVENT_CNTR_NAT_ERR1',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Channel 1 NAT errors',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_REQMON_BTE_EVENT_CNTR_NAT_ERR1'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_REQMON_BTE_EVENT_CNTR_NAT_ERR2'} = {
    NAME => 'AR_NIC_REQMON_BTE_EVENT_CNTR_NAT_ERR2',
    LABEL => 'AR_NIC_REQMON_BTE_EVENT_CNTR_NAT_ERR2',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Channel 2 NAT errors',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_REQMON_BTE_EVENT_CNTR_NAT_ERR2'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_REQMON_BTE_EVENT_CNTR_NAT_ERR3'} = {
    NAME => 'AR_NIC_REQMON_BTE_EVENT_CNTR_NAT_ERR3',
    LABEL => 'AR_NIC_REQMON_BTE_EVENT_CNTR_NAT_ERR3',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Channel 3 NAT errors',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_REQMON_BTE_EVENT_CNTR_NAT_ERR3'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_REQMON_BTE_EVENT_CNTR_TIMEOUT_ERR0'} = {
    NAME => 'AR_NIC_REQMON_BTE_EVENT_CNTR_TIMEOUT_ERR0',
    LABEL => 'AR_NIC_REQMON_BTE_EVENT_CNTR_TIMEOUT_ERR0',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Channel 0 timeout errors',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_REQMON_BTE_EVENT_CNTR_TIMEOUT_ERR0'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_REQMON_BTE_EVENT_CNTR_TIMEOUT_ERR1'} = {
    NAME => 'AR_NIC_REQMON_BTE_EVENT_CNTR_TIMEOUT_ERR1',
    LABEL => 'AR_NIC_REQMON_BTE_EVENT_CNTR_TIMEOUT_ERR1',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Channel 1 timeout errors',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_REQMON_BTE_EVENT_CNTR_TIMEOUT_ERR1'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_REQMON_BTE_EVENT_CNTR_TIMEOUT_ERR2'} = {
    NAME => 'AR_NIC_REQMON_BTE_EVENT_CNTR_TIMEOUT_ERR2',
    LABEL => 'AR_NIC_REQMON_BTE_EVENT_CNTR_TIMEOUT_ERR2',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Channel 2 timeout errors',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_REQMON_BTE_EVENT_CNTR_TIMEOUT_ERR2'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_REQMON_BTE_EVENT_CNTR_TIMEOUT_ERR3'} = {
    NAME => 'AR_NIC_REQMON_BTE_EVENT_CNTR_TIMEOUT_ERR3',
    LABEL => 'AR_NIC_REQMON_BTE_EVENT_CNTR_TIMEOUT_ERR3',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Channel 3 timeout errors',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_REQMON_BTE_EVENT_CNTR_TIMEOUT_ERR3'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_REQMON_BTE_EVENT_CNTR_UNCORRECTABLE_ERR0'} = {
    NAME => 'AR_NIC_REQMON_BTE_EVENT_CNTR_UNCORRECTABLE_ERR0',
    LABEL => 'AR_NIC_REQMON_BTE_EVENT_CNTR_UNCORRECTABLE_ERR0',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Channel 0 uncorrectable errors',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_REQMON_BTE_EVENT_CNTR_UNCORRECTABLE_ERR0'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_REQMON_BTE_EVENT_CNTR_UNCORRECTABLE_ERR1'} = {
    NAME => 'AR_NIC_REQMON_BTE_EVENT_CNTR_UNCORRECTABLE_ERR1',
    LABEL => 'AR_NIC_REQMON_BTE_EVENT_CNTR_UNCORRECTABLE_ERR1',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Channel 1 uncorrectable errors',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_REQMON_BTE_EVENT_CNTR_UNCORRECTABLE_ERR1'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_REQMON_BTE_EVENT_CNTR_UNCORRECTABLE_ERR2'} = {
    NAME => 'AR_NIC_REQMON_BTE_EVENT_CNTR_UNCORRECTABLE_ERR2',
    LABEL => 'AR_NIC_REQMON_BTE_EVENT_CNTR_UNCORRECTABLE_ERR2',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Channel 2 uncorrectable errors',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_REQMON_BTE_EVENT_CNTR_UNCORRECTABLE_ERR2'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_REQMON_BTE_EVENT_CNTR_UNCORRECTABLE_ERR3'} = {
    NAME => 'AR_NIC_REQMON_BTE_EVENT_CNTR_UNCORRECTABLE_ERR3',
    LABEL => 'AR_NIC_REQMON_BTE_EVENT_CNTR_UNCORRECTABLE_ERR3',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Channel 3 uncorrectable errors',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_REQMON_BTE_EVENT_CNTR_UNCORRECTABLE_ERR3'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_REQMON_BTE_EVENT_CNTR_INV_CMD0'} = {
    NAME => 'AR_NIC_REQMON_BTE_EVENT_CNTR_INV_CMD0',
    LABEL => 'AR_NIC_REQMON_BTE_EVENT_CNTR_INV_CMD0',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Channel 0 Invalid command errors',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_REQMON_BTE_EVENT_CNTR_INV_CMD0'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_REQMON_BTE_EVENT_CNTR_INV_CMD1'} = {
    NAME => 'AR_NIC_REQMON_BTE_EVENT_CNTR_INV_CMD1',
    LABEL => 'AR_NIC_REQMON_BTE_EVENT_CNTR_INV_CMD1',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Channel 1 Invalid command errors',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_REQMON_BTE_EVENT_CNTR_INV_CMD1'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_REQMON_BTE_EVENT_CNTR_INV_CMD2'} = {
    NAME => 'AR_NIC_REQMON_BTE_EVENT_CNTR_INV_CMD2',
    LABEL => 'AR_NIC_REQMON_BTE_EVENT_CNTR_INV_CMD2',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Channel 2 Invalid command errors',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_REQMON_BTE_EVENT_CNTR_INV_CMD2'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_REQMON_BTE_EVENT_CNTR_INV_CMD3'} = {
    NAME => 'AR_NIC_REQMON_BTE_EVENT_CNTR_INV_CMD3',
    LABEL => 'AR_NIC_REQMON_BTE_EVENT_CNTR_INV_CMD3',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Channel 3 Invalid command errors',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_REQMON_BTE_EVENT_CNTR_INV_CMD3'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_REQMON_BTE_EVENT_CNTR_AGGREGATED_CQE'} = {
    NAME => 'AR_NIC_REQMON_BTE_EVENT_CNTR_AGGREGATED_CQE',
    LABEL => 'AR_NIC_REQMON_BTE_EVENT_CNTR_AGGREGATED_CQE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Aggregated FMAL CQEs',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_REQMON_BTE_EVENT_CNTR_AGGREGATED_CQE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_REQMON_FMA_EVENT_CNTR_PKT'} = {
    NAME => 'AR_NIC_REQMON_FMA_EVENT_CNTR_PKT',
    LABEL => 'AR_NIC_REQMON_FMA_EVENT_CNTR_PKT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'FMA to TARB packets',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_REQMON_FMA_EVENT_CNTR_PKT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_REQMON_FMA_EVENT_CNTR_FLIT'} = {
    NAME => 'AR_NIC_REQMON_FMA_EVENT_CNTR_FLIT',
    LABEL => 'AR_NIC_REQMON_FMA_EVENT_CNTR_FLIT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'FMA to DLA flits',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_REQMON_FMA_EVENT_CNTR_FLIT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_REQMON_FMA_EVENT_CNTR_TARB_STALLED'} = {
    NAME => 'AR_NIC_REQMON_FMA_EVENT_CNTR_TARB_STALLED',
    LABEL => 'AR_NIC_REQMON_FMA_EVENT_CNTR_TARB_STALLED',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'FMA to DLA stalls',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_REQMON_FMA_EVENT_CNTR_TARB_STALLED'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_REQMON_FMA_EVENT_CNTR_PI_PKT'} = {
    NAME => 'AR_NIC_REQMON_FMA_EVENT_CNTR_PI_PKT',
    LABEL => 'AR_NIC_REQMON_FMA_EVENT_CNTR_PI_PKT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Processor interface packets',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_REQMON_FMA_EVENT_CNTR_PI_PKT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_REQMON_FMA_EVENT_CNTR_PI_FLIT'} = {
    NAME => 'AR_NIC_REQMON_FMA_EVENT_CNTR_PI_FLIT',
    LABEL => 'AR_NIC_REQMON_FMA_EVENT_CNTR_PI_FLIT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Processor interface flits',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_REQMON_FMA_EVENT_CNTR_PI_FLIT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_REQMON_FMA_EVENT_CNTR_CQ'} = {
    NAME => 'AR_NIC_REQMON_FMA_EVENT_CNTR_CQ',
    LABEL => 'AR_NIC_REQMON_FMA_EVENT_CNTR_CQ',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'CQ read index updates',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_REQMON_FMA_EVENT_CNTR_CQ'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_REQMON_FMA_EVENT_CNTR_CQ_STALL'} = {
    NAME => 'AR_NIC_REQMON_FMA_EVENT_CNTR_CQ_STALL',
    LABEL => 'AR_NIC_REQMON_FMA_EVENT_CNTR_CQ_STALL',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'CQ read index update stalls',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_REQMON_FMA_EVENT_CNTR_CQ_STALL'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_REQMON_FMA_EVENT_CNTR_GET_REQ'} = {
    NAME => 'AR_NIC_REQMON_FMA_EVENT_CNTR_GET_REQ',
    LABEL => 'AR_NIC_REQMON_FMA_EVENT_CNTR_GET_REQ',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Network GET requests',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_REQMON_FMA_EVENT_CNTR_GET_REQ'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_REQMON_FMA_EVENT_CNTR_FAMO_REQ'} = {
    NAME => 'AR_NIC_REQMON_FMA_EVENT_CNTR_FAMO_REQ',
    LABEL => 'AR_NIC_REQMON_FMA_EVENT_CNTR_FAMO_REQ',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Fetching AMO requests',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_REQMON_FMA_EVENT_CNTR_FAMO_REQ'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_REQMON_FMA_EVENT_CNTR_PUT_REQ'} = {
    NAME => 'AR_NIC_REQMON_FMA_EVENT_CNTR_PUT_REQ',
    LABEL => 'AR_NIC_REQMON_FMA_EVENT_CNTR_PUT_REQ',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Network PUT requests',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_REQMON_FMA_EVENT_CNTR_PUT_REQ'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_REQMON_FMA_EVENT_CNTR_NFAMO_REQ'} = {
    NAME => 'AR_NIC_REQMON_FMA_EVENT_CNTR_NFAMO_REQ',
    LABEL => 'AR_NIC_REQMON_FMA_EVENT_CNTR_NFAMO_REQ',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Non-fetching AMO requests',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_REQMON_FMA_EVENT_CNTR_NFAMO_REQ'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_REQMON_FMA_EVENT_CNTR_HDR_PERR'} = {
    NAME => 'AR_NIC_REQMON_FMA_EVENT_CNTR_HDR_PERR',
    LABEL => 'AR_NIC_REQMON_FMA_EVENT_CNTR_HDR_PERR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Header flit parity errors',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_REQMON_FMA_EVENT_CNTR_HDR_PERR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_REQMON_FMA_EVENT_CNTR_DATA_MBE'} = {
    NAME => 'AR_NIC_REQMON_FMA_EVENT_CNTR_DATA_MBE',
    LABEL => 'AR_NIC_REQMON_FMA_EVENT_CNTR_DATA_MBE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Uncorrectable data flit errors',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_REQMON_FMA_EVENT_CNTR_DATA_MBE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_REQMON_FMA_EVENT_CNTR_DESC_MBE'} = {
    NAME => 'AR_NIC_REQMON_FMA_EVENT_CNTR_DESC_MBE',
    LABEL => 'AR_NIC_REQMON_FMA_EVENT_CNTR_DESC_MBE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Uncorrectable descriptor errors',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_REQMON_FMA_EVENT_CNTR_DESC_MBE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_REQMON_FMA_EVENT_CNTR_INV_CMD'} = {
    NAME => 'AR_NIC_REQMON_FMA_EVENT_CNTR_INV_CMD',
    LABEL => 'AR_NIC_REQMON_FMA_EVENT_CNTR_INV_CMD',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Invalid command errors',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_REQMON_FMA_EVENT_CNTR_INV_CMD'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_REQMON_FMA_EVENT_CNTR_TDATA_SBE'} = {
    NAME => 'AR_NIC_REQMON_FMA_EVENT_CNTR_TDATA_SBE',
    LABEL => 'AR_NIC_REQMON_FMA_EVENT_CNTR_TDATA_SBE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'TARB data buffer SBEs',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_REQMON_FMA_EVENT_CNTR_TDATA_SBE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_REQMON_DLA_EVENT_CNTR_LO_CD_ALLOC_PASS'} = {
    NAME => 'AR_NIC_REQMON_DLA_EVENT_CNTR_LO_CD_ALLOC_PASS',
    LABEL => 'AR_NIC_REQMON_DLA_EVENT_CNTR_LO_CD_ALLOC_PASS',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Successful low priority CD allocations',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_REQMON_DLA_EVENT_CNTR_LO_CD_ALLOC_PASS'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_REQMON_DLA_EVENT_CNTR_LO_CD_ALLOC_FAIL'} = {
    NAME => 'AR_NIC_REQMON_DLA_EVENT_CNTR_LO_CD_ALLOC_FAIL',
    LABEL => 'AR_NIC_REQMON_DLA_EVENT_CNTR_LO_CD_ALLOC_FAIL',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Unsuccessful low priority CD allocations',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_REQMON_DLA_EVENT_CNTR_LO_CD_ALLOC_FAIL'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_REQMON_DLA_EVENT_CNTR_HI_CD_ALLOC_PASS'} = {
    NAME => 'AR_NIC_REQMON_DLA_EVENT_CNTR_HI_CD_ALLOC_PASS',
    LABEL => 'AR_NIC_REQMON_DLA_EVENT_CNTR_HI_CD_ALLOC_PASS',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Successful high priority CD allocations',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_REQMON_DLA_EVENT_CNTR_HI_CD_ALLOC_PASS'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_REQMON_DLA_EVENT_CNTR_HI_CD_ALLOC_FAIL'} = {
    NAME => 'AR_NIC_REQMON_DLA_EVENT_CNTR_HI_CD_ALLOC_FAIL',
    LABEL => 'AR_NIC_REQMON_DLA_EVENT_CNTR_HI_CD_ALLOC_FAIL',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Unsuccessful high priority CD allocations',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_REQMON_DLA_EVENT_CNTR_HI_CD_ALLOC_FAIL'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_REQMON_DLA_EVENT_CNTR_PR_ALLOC_PASS'} = {
    NAME => 'AR_NIC_REQMON_DLA_EVENT_CNTR_PR_ALLOC_PASS',
    LABEL => 'AR_NIC_REQMON_DLA_EVENT_CNTR_PR_ALLOC_PASS',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Successful high priority CD allocations',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_REQMON_DLA_EVENT_CNTR_PR_ALLOC_PASS'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_REQMON_DLA_EVENT_CNTR_PR_ALLOC_FAIL'} = {
    NAME => 'AR_NIC_REQMON_DLA_EVENT_CNTR_PR_ALLOC_FAIL',
    LABEL => 'AR_NIC_REQMON_DLA_EVENT_CNTR_PR_ALLOC_FAIL',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Unsuccessful high priority CD allocations',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_REQMON_DLA_EVENT_CNTR_PR_ALLOC_FAIL'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_REQMON_DLA_EVENT_CNTR_HDR_PERR'} = {
    NAME => 'AR_NIC_REQMON_DLA_EVENT_CNTR_HDR_PERR',
    LABEL => 'AR_NIC_REQMON_DLA_EVENT_CNTR_HDR_PERR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Header flit parity error',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_REQMON_DLA_EVENT_CNTR_HDR_PERR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_REQMON_DLA_EVENT_CNTR_DATA_MBE'} = {
    NAME => 'AR_NIC_REQMON_DLA_EVENT_CNTR_DATA_MBE',
    LABEL => 'AR_NIC_REQMON_DLA_EVENT_CNTR_DATA_MBE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Data flit MBE',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_REQMON_DLA_EVENT_CNTR_DATA_MBE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_REQMON_DLA_EVENT_CNTR_FIFO_HDR_MBE'} = {
    NAME => 'AR_NIC_REQMON_DLA_EVENT_CNTR_FIFO_HDR_MBE',
    LABEL => 'AR_NIC_REQMON_DLA_EVENT_CNTR_FIFO_HDR_MBE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'MBE on packet header removed from FIFO',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_REQMON_DLA_EVENT_CNTR_FIFO_HDR_MBE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_REQMON_DLA_EVENT_CNTR_FIFO_ENQ_PKT'} = {
    NAME => 'AR_NIC_REQMON_DLA_EVENT_CNTR_FIFO_ENQ_PKT',
    LABEL => 'AR_NIC_REQMON_DLA_EVENT_CNTR_FIFO_ENQ_PKT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Packet intended for FIFO',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_REQMON_DLA_EVENT_CNTR_FIFO_ENQ_PKT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_REQMON_DLA_EVENT_CNTR_LO_CD_ENQ'} = {
    NAME => 'AR_NIC_REQMON_DLA_EVENT_CNTR_LO_CD_ENQ',
    LABEL => 'AR_NIC_REQMON_DLA_EVENT_CNTR_LO_CD_ENQ',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'FIFO Enqueued low priority controlled discard packet',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_REQMON_DLA_EVENT_CNTR_LO_CD_ENQ'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_REQMON_DLA_EVENT_CNTR_HI_CD_ENQ'} = {
    NAME => 'AR_NIC_REQMON_DLA_EVENT_CNTR_HI_CD_ENQ',
    LABEL => 'AR_NIC_REQMON_DLA_EVENT_CNTR_HI_CD_ENQ',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'FIFO Enqueued high priority controlled discard packet',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_REQMON_DLA_EVENT_CNTR_HI_CD_ENQ'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_REQMON_DLA_EVENT_CNTR_PR_ENQ'} = {
    NAME => 'AR_NIC_REQMON_DLA_EVENT_CNTR_PR_ENQ',
    LABEL => 'AR_NIC_REQMON_DLA_EVENT_CNTR_PR_ENQ',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'FIFO Enqueued persistent reservation packet',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_REQMON_DLA_EVENT_CNTR_PR_ENQ'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_REQMON_DLA_EVENT_CNTR_FMA_PKT_ERR'} = {
    NAME => 'AR_NIC_REQMON_DLA_EVENT_CNTR_FMA_PKT_ERR',
    LABEL => 'AR_NIC_REQMON_DLA_EVENT_CNTR_FMA_PKT_ERR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'AllocSSID, SyncComplete, or DLAMARKER request packet received fromFMA with an lstatus of A_STATUS_FMA_UNCORRECTABLE or A_STATUS_DATA_ERR',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_REQMON_DLA_EVENT_CNTR_FMA_PKT_ERR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_REQMON_DLA_EVENT_CNTR_TARB_STALLED'} = {
    NAME => 'AR_NIC_REQMON_DLA_EVENT_CNTR_TARB_STALLED',
    LABEL => 'AR_NIC_REQMON_DLA_EVENT_CNTR_TARB_STALLED',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'DLA to TARB stalls',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_REQMON_DLA_EVENT_CNTR_TARB_STALLED'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_REQMON_AMO_EVENT_CNTR_REQ0_PKT'} = {
    NAME => 'AR_NIC_REQMON_AMO_EVENT_CNTR_REQ0_PKT',
    LABEL => 'AR_NIC_REQMON_AMO_EVENT_CNTR_REQ0_PKT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Packet sent from normal request queue',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_REQMON_AMO_EVENT_CNTR_REQ0_PKT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_REQMON_AMO_EVENT_CNTR_REQ0_FLIT'} = {
    NAME => 'AR_NIC_REQMON_AMO_EVENT_CNTR_REQ0_FLIT',
    LABEL => 'AR_NIC_REQMON_AMO_EVENT_CNTR_REQ0_FLIT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit sent from normal request queue',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_REQMON_AMO_EVENT_CNTR_REQ0_FLIT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_REQMON_AMO_EVENT_CNTR_REQ0_STALL'} = {
    NAME => 'AR_NIC_REQMON_AMO_EVENT_CNTR_REQ0_STALL',
    LABEL => 'AR_NIC_REQMON_AMO_EVENT_CNTR_REQ0_STALL',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Stalling normal request queue',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_REQMON_AMO_EVENT_CNTR_REQ0_STALL'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_REQMON_AMO_EVENT_CNTR_REQ0_BLOCK'} = {
    NAME => 'AR_NIC_REQMON_AMO_EVENT_CNTR_REQ0_BLOCK',
    LABEL => 'AR_NIC_REQMON_AMO_EVENT_CNTR_REQ0_BLOCK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Blocking normal request queue',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_REQMON_AMO_EVENT_CNTR_REQ0_BLOCK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_REQMON_AMO_EVENT_CNTR_REQ1_PKT'} = {
    NAME => 'AR_NIC_REQMON_AMO_EVENT_CNTR_REQ1_PKT',
    LABEL => 'AR_NIC_REQMON_AMO_EVENT_CNTR_REQ1_PKT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Packet sent from AMO-generated request queue (each packet is two flits)',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_REQMON_AMO_EVENT_CNTR_REQ1_PKT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_REQMON_AMO_EVENT_CNTR_REQ1_STALL'} = {
    NAME => 'AR_NIC_REQMON_AMO_EVENT_CNTR_REQ1_STALL',
    LABEL => 'AR_NIC_REQMON_AMO_EVENT_CNTR_REQ1_STALL',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Stalling AMO-generated request',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_REQMON_AMO_EVENT_CNTR_REQ1_STALL'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_REQMON_AMO_EVENT_CNTR_REQ1_BLOCK'} = {
    NAME => 'AR_NIC_REQMON_AMO_EVENT_CNTR_REQ1_BLOCK',
    LABEL => 'AR_NIC_REQMON_AMO_EVENT_CNTR_REQ1_BLOCK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Blocking AMO-generated request queue',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_REQMON_AMO_EVENT_CNTR_REQ1_BLOCK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_REQMON_AMO_EVENT_CNTR_RSP0_PKT'} = {
    NAME => 'AR_NIC_REQMON_AMO_EVENT_CNTR_RSP0_PKT',
    LABEL => 'AR_NIC_REQMON_AMO_EVENT_CNTR_RSP0_PKT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Packet sent from normal response queue',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_REQMON_AMO_EVENT_CNTR_RSP0_PKT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_REQMON_AMO_EVENT_CNTR_RSP0_FLIT'} = {
    NAME => 'AR_NIC_REQMON_AMO_EVENT_CNTR_RSP0_FLIT',
    LABEL => 'AR_NIC_REQMON_AMO_EVENT_CNTR_RSP0_FLIT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit sent from normal response queue',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_REQMON_AMO_EVENT_CNTR_RSP0_FLIT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_REQMON_AMO_EVENT_CNTR_RSP0_BLOCK'} = {
    NAME => 'AR_NIC_REQMON_AMO_EVENT_CNTR_RSP0_BLOCK',
    LABEL => 'AR_NIC_REQMON_AMO_EVENT_CNTR_RSP0_BLOCK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Blocking normal response queue',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_REQMON_AMO_EVENT_CNTR_RSP0_BLOCK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_REQMON_AMO_EVENT_CNTR_RSP1_PKT'} = {
    NAME => 'AR_NIC_REQMON_AMO_EVENT_CNTR_RSP1_PKT',
    LABEL => 'AR_NIC_REQMON_AMO_EVENT_CNTR_RSP1_PKT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Packet sent from AMO-generated response queue',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_REQMON_AMO_EVENT_CNTR_RSP1_PKT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_REQMON_AMO_EVENT_CNTR_RSP1_FLIT'} = {
    NAME => 'AR_NIC_REQMON_AMO_EVENT_CNTR_RSP1_FLIT',
    LABEL => 'AR_NIC_REQMON_AMO_EVENT_CNTR_RSP1_FLIT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Flit sent from AMO-generated response queue',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_REQMON_AMO_EVENT_CNTR_RSP1_FLIT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_REQMON_AMO_EVENT_CNTR_RSP1_BLOCK'} = {
    NAME => 'AR_NIC_REQMON_AMO_EVENT_CNTR_RSP1_BLOCK',
    LABEL => 'AR_NIC_REQMON_AMO_EVENT_CNTR_RSP1_BLOCK',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Blocking AMO-generated response queue',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_REQMON_AMO_EVENT_CNTR_RSP1_BLOCK'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_REQMON_AMO_EVENT_CNTR_AMO_DONE'} = {
    NAME => 'AR_NIC_REQMON_AMO_EVENT_CNTR_AMO_DONE',
    LABEL => 'AR_NIC_REQMON_AMO_EVENT_CNTR_AMO_DONE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'AMO requests processed',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_REQMON_AMO_EVENT_CNTR_AMO_DONE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_REQMON_AMO_EVENT_CNTR_AMO_HIT'} = {
    NAME => 'AR_NIC_REQMON_AMO_EVENT_CNTR_AMO_HIT',
    LABEL => 'AR_NIC_REQMON_AMO_EVENT_CNTR_AMO_HIT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Hits in AMO cache (AMO requests only)',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_REQMON_AMO_EVENT_CNTR_AMO_HIT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_REQMON_AMO_EVENT_CNTR_AMO_MISS'} = {
    NAME => 'AR_NIC_REQMON_AMO_EVENT_CNTR_AMO_MISS',
    LABEL => 'AR_NIC_REQMON_AMO_EVENT_CNTR_AMO_MISS',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Misses in AMO cache (AMO requests only, generate fill requests)',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_REQMON_AMO_EVENT_CNTR_AMO_MISS'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_REQMON_AMO_EVENT_CNTR_STALL_MATCH'} = {
    NAME => 'AR_NIC_REQMON_AMO_EVENT_CNTR_STALL_MATCH',
    LABEL => 'AR_NIC_REQMON_AMO_EVENT_CNTR_STALL_MATCH',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Stalls due to a match in the cache',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_REQMON_AMO_EVENT_CNTR_STALL_MATCH'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_REQMON_AMO_EVENT_CNTR_STALL_FLUSH'} = {
    NAME => 'AR_NIC_REQMON_AMO_EVENT_CNTR_STALL_FLUSH',
    LABEL => 'AR_NIC_REQMON_AMO_EVENT_CNTR_STALL_FLUSH',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Stalls due to flushing the cache',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_REQMON_AMO_EVENT_CNTR_STALL_FLUSH'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_REQMON_AMO_EVENT_CNTR_STALL_FULL'} = {
    NAME => 'AR_NIC_REQMON_AMO_EVENT_CNTR_STALL_FULL',
    LABEL => 'AR_NIC_REQMON_AMO_EVENT_CNTR_STALL_FULL',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Stalls due to the cache being full',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_REQMON_AMO_EVENT_CNTR_STALL_FULL'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_REQMON_AMO_EVENT_CNTR_STALL_ORDERED'} = {
    NAME => 'AR_NIC_REQMON_AMO_EVENT_CNTR_STALL_ORDERED',
    LABEL => 'AR_NIC_REQMON_AMO_EVENT_CNTR_STALL_ORDERED',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Stalls waiting for the cache to become clean',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_REQMON_AMO_EVENT_CNTR_STALL_ORDERED'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_REQMON_AMO_EVENT_CNTR_FILL_RSP'} = {
    NAME => 'AR_NIC_REQMON_AMO_EVENT_CNTR_FILL_RSP',
    LABEL => 'AR_NIC_REQMON_AMO_EVENT_CNTR_FILL_RSP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Fill responses received',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_REQMON_AMO_EVENT_CNTR_FILL_RSP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_REQMON_AMO_EVENT_CNTR_INVALIDATE'} = {
    NAME => 'AR_NIC_REQMON_AMO_EVENT_CNTR_INVALIDATE',
    LABEL => 'AR_NIC_REQMON_AMO_EVENT_CNTR_INVALIDATE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Cache invalidations (capacity)',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_REQMON_AMO_EVENT_CNTR_INVALIDATE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_REQMON_AMO_EVENT_CNTR_ERR_REQ_PARITY'} = {
    NAME => 'AR_NIC_REQMON_AMO_EVENT_CNTR_ERR_REQ_PARITY',
    LABEL => 'AR_NIC_REQMON_AMO_EVENT_CNTR_ERR_REQ_PARITY',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Parity errors on requests',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_REQMON_AMO_EVENT_CNTR_ERR_REQ_PARITY'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_REQMON_AMO_EVENT_CNTR_ERR_REQ_SBE'} = {
    NAME => 'AR_NIC_REQMON_AMO_EVENT_CNTR_ERR_REQ_SBE',
    LABEL => 'AR_NIC_REQMON_AMO_EVENT_CNTR_ERR_REQ_SBE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'SBEs in AMO request payload',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_REQMON_AMO_EVENT_CNTR_ERR_REQ_SBE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_REQMON_AMO_EVENT_CNTR_ERR_REQ_MBE'} = {
    NAME => 'AR_NIC_REQMON_AMO_EVENT_CNTR_ERR_REQ_MBE',
    LABEL => 'AR_NIC_REQMON_AMO_EVENT_CNTR_ERR_REQ_MBE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'MBEs in AMO request payload',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_REQMON_AMO_EVENT_CNTR_ERR_REQ_MBE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_REQMON_AMO_EVENT_CNTR_ERR_RSP_PARITY'} = {
    NAME => 'AR_NIC_REQMON_AMO_EVENT_CNTR_ERR_RSP_PARITY',
    LABEL => 'AR_NIC_REQMON_AMO_EVENT_CNTR_ERR_RSP_PARITY',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Parity errors on responses',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_REQMON_AMO_EVENT_CNTR_ERR_RSP_PARITY'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_REQMON_AMO_EVENT_CNTR_ERR_RSP_SBE'} = {
    NAME => 'AR_NIC_REQMON_AMO_EVENT_CNTR_ERR_RSP_SBE',
    LABEL => 'AR_NIC_REQMON_AMO_EVENT_CNTR_ERR_RSP_SBE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'SBEs in fill response payload',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_REQMON_AMO_EVENT_CNTR_ERR_RSP_SBE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_REQMON_AMO_EVENT_CNTR_DATASTORE_WR_POISON'} = {
    NAME => 'AR_NIC_REQMON_AMO_EVENT_CNTR_DATASTORE_WR_POISON',
    LABEL => 'AR_NIC_REQMON_AMO_EVENT_CNTR_DATASTORE_WR_POISON',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Datastore was written with poisoned fill data',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_REQMON_AMO_EVENT_CNTR_DATASTORE_WR_POISON'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_REQMON_AMO_EVENT_CNTR_DATASTORE_RD_POISON'} = {
    NAME => 'AR_NIC_REQMON_AMO_EVENT_CNTR_DATASTORE_RD_POISON',
    LABEL => 'AR_NIC_REQMON_AMO_EVENT_CNTR_DATASTORE_RD_POISON',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Datastore was read with poisoned fill data',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_REQMON_AMO_EVENT_CNTR_DATASTORE_RD_POISON'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_REQMON_AMO_EVENT_CNTR_ERR_REQLIST_SBE'} = {
    NAME => 'AR_NIC_REQMON_AMO_EVENT_CNTR_ERR_REQLIST_SBE',
    LABEL => 'AR_NIC_REQMON_AMO_EVENT_CNTR_ERR_REQLIST_SBE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'SBEs in request list',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_REQMON_AMO_EVENT_CNTR_ERR_REQLIST_SBE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_REQMON_AMO_EVENT_CNTR_ERR_REQLIST_MBE'} = {
    NAME => 'AR_NIC_REQMON_AMO_EVENT_CNTR_ERR_REQLIST_MBE',
    LABEL => 'AR_NIC_REQMON_AMO_EVENT_CNTR_ERR_REQLIST_MBE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'MBEs in request list',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_REQMON_AMO_EVENT_CNTR_ERR_REQLIST_MBE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_REQMON_AMO_EVENT_CNTR_TIMEOUT_ARM'} = {
    NAME => 'AR_NIC_REQMON_AMO_EVENT_CNTR_TIMEOUT_ARM',
    LABEL => 'AR_NIC_REQMON_AMO_EVENT_CNTR_TIMEOUT_ARM',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Cycles spent in this pre-timeout state',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_REQMON_AMO_EVENT_CNTR_TIMEOUT_ARM'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_REQMON_WC_EVENT_CNTR_RAT_GETRESP'} = {
    NAME => 'AR_NIC_REQMON_WC_EVENT_CNTR_RAT_GETRESP',
    LABEL => 'AR_NIC_REQMON_WC_EVENT_CNTR_RAT_GETRESP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'GetResp or FetchingAMOResp packets received from RAT',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_REQMON_WC_EVENT_CNTR_RAT_GETRESP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_REQMON_WC_EVENT_CNTR_PARB_PUT'} = {
    NAME => 'AR_NIC_REQMON_WC_EVENT_CNTR_PARB_PUT',
    LABEL => 'AR_NIC_REQMON_WC_EVENT_CNTR_PARB_PUT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Put packets sent to PARB',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_REQMON_WC_EVENT_CNTR_PARB_PUT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_REQMON_WC_EVENT_CNTR_WC_IN'} = {
    NAME => 'AR_NIC_REQMON_WC_EVENT_CNTR_WC_IN',
    LABEL => 'AR_NIC_REQMON_WC_EVENT_CNTR_WC_IN',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Packets entering the write combining buffers',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_REQMON_WC_EVENT_CNTR_WC_IN'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_REQMON_WC_EVENT_CNTR_WC_OUT'} = {
    NAME => 'AR_NIC_REQMON_WC_EVENT_CNTR_WC_OUT',
    LABEL => 'AR_NIC_REQMON_WC_EVENT_CNTR_WC_OUT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Packets exiting the write combining buffers',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_REQMON_WC_EVENT_CNTR_WC_OUT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_REQMON_WC_EVENT_CNTR_BUF0_ALLOCATION'} = {
    NAME => 'AR_NIC_REQMON_WC_EVENT_CNTR_BUF0_ALLOCATION',
    LABEL => 'AR_NIC_REQMON_WC_EVENT_CNTR_BUF0_ALLOCATION',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Buffer allocations that have been done in write combining buffer block 0',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_REQMON_WC_EVENT_CNTR_BUF0_ALLOCATION'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_REQMON_WC_EVENT_CNTR_BUF0_COMBINE'} = {
    NAME => 'AR_NIC_REQMON_WC_EVENT_CNTR_BUF0_COMBINE',
    LABEL => 'AR_NIC_REQMON_WC_EVENT_CNTR_BUF0_COMBINE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Times a buffer has combined in write combining buffer block 0',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_REQMON_WC_EVENT_CNTR_BUF0_COMBINE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_REQMON_WC_EVENT_CNTR_BUF0_EVICTION'} = {
    NAME => 'AR_NIC_REQMON_WC_EVENT_CNTR_BUF0_EVICTION',
    LABEL => 'AR_NIC_REQMON_WC_EVENT_CNTR_BUF0_EVICTION',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Evictions that have been done in write combining buffer block 0',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_REQMON_WC_EVENT_CNTR_BUF0_EVICTION'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_REQMON_WC_EVENT_CNTR_BUF1_ALLOCATION'} = {
    NAME => 'AR_NIC_REQMON_WC_EVENT_CNTR_BUF1_ALLOCATION',
    LABEL => 'AR_NIC_REQMON_WC_EVENT_CNTR_BUF1_ALLOCATION',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Buffer allocations that have been done in write combining buffer block 1',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_REQMON_WC_EVENT_CNTR_BUF1_ALLOCATION'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_REQMON_WC_EVENT_CNTR_BUF1_COMBINE'} = {
    NAME => 'AR_NIC_REQMON_WC_EVENT_CNTR_BUF1_COMBINE',
    LABEL => 'AR_NIC_REQMON_WC_EVENT_CNTR_BUF1_COMBINE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Times a buffer has combined in write combining buffer block 1',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_REQMON_WC_EVENT_CNTR_BUF1_COMBINE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_REQMON_WC_EVENT_CNTR_BUF1_EVICTION'} = {
    NAME => 'AR_NIC_REQMON_WC_EVENT_CNTR_BUF1_EVICTION',
    LABEL => 'AR_NIC_REQMON_WC_EVENT_CNTR_BUF1_EVICTION',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Evictions that have been done in write combining buffer block 1',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_REQMON_WC_EVENT_CNTR_BUF1_EVICTION'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_REQMON_WC_EVENT_CNTR_TAG_PBE'} = {
    NAME => 'AR_NIC_REQMON_WC_EVENT_CNTR_TAG_PBE',
    LABEL => 'AR_NIC_REQMON_WC_EVENT_CNTR_TAG_PBE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'TAG PBEs',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_REQMON_WC_EVENT_CNTR_TAG_PBE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_REQMON_WC_EVENT_CNTR_NTWK_RSP_HDR_PBE'} = {
    NAME => 'AR_NIC_REQMON_WC_EVENT_CNTR_NTWK_RSP_HDR_PBE',
    LABEL => 'AR_NIC_REQMON_WC_EVENT_CNTR_NTWK_RSP_HDR_PBE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Network response header PBEs',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_REQMON_WC_EVENT_CNTR_NTWK_RSP_HDR_PBE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_REQMON_WC_EVENT_CNTR_RSPIN0_HDR_PBE'} = {
    NAME => 'AR_NIC_REQMON_WC_EVENT_CNTR_RSPIN0_HDR_PBE',
    LABEL => 'AR_NIC_REQMON_WC_EVENT_CNTR_RSPIN0_HDR_PBE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Buffer block 0 Rspin FIFO header PBEs',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_REQMON_WC_EVENT_CNTR_RSPIN0_HDR_PBE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_REQMON_WC_EVENT_CNTR_RSPIN1_HDR_PBE'} = {
    NAME => 'AR_NIC_REQMON_WC_EVENT_CNTR_RSPIN1_HDR_PBE',
    LABEL => 'AR_NIC_REQMON_WC_EVENT_CNTR_RSPIN1_HDR_PBE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Buffer block 1 Rspin FIFO header PBEs',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_REQMON_WC_EVENT_CNTR_RSPIN1_HDR_PBE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_REQMON_WC_EVENT_CNTR_BUFFER_TIMEOUT'} = {
    NAME => 'AR_NIC_REQMON_WC_EVENT_CNTR_BUFFER_TIMEOUT',
    LABEL => 'AR_NIC_REQMON_WC_EVENT_CNTR_BUFFER_TIMEOUT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Buffer timeouts',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_REQMON_WC_EVENT_CNTR_BUFFER_TIMEOUT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_RSPMON_RSPMON_EVENT_CNTR_TRIGGER0'} = {
    NAME => 'AR_NIC_RSPMON_RSPMON_EVENT_CNTR_TRIGGER0',
    LABEL => 'AR_NIC_RSPMON_RSPMON_EVENT_CNTR_TRIGGER0',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'TRIGGER 0 count',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_RSPMON_RSPMON_EVENT_CNTR_TRIGGER0'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_RSPMON_RSPMON_EVENT_CNTR_TRIGGER1'} = {
    NAME => 'AR_NIC_RSPMON_RSPMON_EVENT_CNTR_TRIGGER1',
    LABEL => 'AR_NIC_RSPMON_RSPMON_EVENT_CNTR_TRIGGER1',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'TRIGGER 1 count',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_RSPMON_RSPMON_EVENT_CNTR_TRIGGER1'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_RSPMON_CQ_EVENT_CNTR_SSID'} = {
    NAME => 'AR_NIC_RSPMON_CQ_EVENT_CNTR_SSID',
    LABEL => 'AR_NIC_RSPMON_CQ_EVENT_CNTR_SSID',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'SSID requests to CQ',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_RSPMON_CQ_EVENT_CNTR_SSID'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_RSPMON_CQ_EVENT_CNTR_BTE'} = {
    NAME => 'AR_NIC_RSPMON_CQ_EVENT_CNTR_BTE',
    LABEL => 'AR_NIC_RSPMON_CQ_EVENT_CNTR_BTE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'BTE requests to CQ',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_RSPMON_CQ_EVENT_CNTR_BTE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_RSPMON_CQ_EVENT_CNTR_DLA'} = {
    NAME => 'AR_NIC_RSPMON_CQ_EVENT_CNTR_DLA',
    LABEL => 'AR_NIC_RSPMON_CQ_EVENT_CNTR_DLA',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'DLA requests to CQ',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_RSPMON_CQ_EVENT_CNTR_DLA'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_RSPMON_CQ_EVENT_CNTR_RMT'} = {
    NAME => 'AR_NIC_RSPMON_CQ_EVENT_CNTR_RMT',
    LABEL => 'AR_NIC_RSPMON_CQ_EVENT_CNTR_RMT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'RMT requests to CQ',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_RSPMON_CQ_EVENT_CNTR_RMT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_RSPMON_CQ_EVENT_CNTR_FMA'} = {
    NAME => 'AR_NIC_RSPMON_CQ_EVENT_CNTR_FMA',
    LABEL => 'AR_NIC_RSPMON_CQ_EVENT_CNTR_FMA',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'FMA read index update requests to CQ',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_RSPMON_CQ_EVENT_CNTR_FMA'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_RSPMON_CQ_EVENT_CNTR_SSID_STALLED'} = {
    NAME => 'AR_NIC_RSPMON_CQ_EVENT_CNTR_SSID_STALLED',
    LABEL => 'AR_NIC_RSPMON_CQ_EVENT_CNTR_SSID_STALLED',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Clocks when SSID event is stalled due to not enough CAM entries',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_RSPMON_CQ_EVENT_CNTR_SSID_STALLED'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_RSPMON_CQ_EVENT_CNTR_BTE_STALLED'} = {
    NAME => 'AR_NIC_RSPMON_CQ_EVENT_CNTR_BTE_STALLED',
    LABEL => 'AR_NIC_RSPMON_CQ_EVENT_CNTR_BTE_STALLED',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Clocks when BTE event is stalled due to not enough CAM entries',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_RSPMON_CQ_EVENT_CNTR_BTE_STALLED'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_RSPMON_CQ_EVENT_CNTR_DLA_STALLED'} = {
    NAME => 'AR_NIC_RSPMON_CQ_EVENT_CNTR_DLA_STALLED',
    LABEL => 'AR_NIC_RSPMON_CQ_EVENT_CNTR_DLA_STALLED',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Clocks when DLA event is stalled due to not enough CAM entries',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_RSPMON_CQ_EVENT_CNTR_DLA_STALLED'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_RSPMON_CQ_EVENT_CNTR_RMT_STALLED'} = {
    NAME => 'AR_NIC_RSPMON_CQ_EVENT_CNTR_RMT_STALLED',
    LABEL => 'AR_NIC_RSPMON_CQ_EVENT_CNTR_RMT_STALLED',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Clocks when RMT event is stalled due to not enough CAM entries',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_RSPMON_CQ_EVENT_CNTR_RMT_STALLED'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_RSPMON_CQ_EVENT_CNTR_SSID_BLOCKED'} = {
    NAME => 'AR_NIC_RSPMON_CQ_EVENT_CNTR_SSID_BLOCKED',
    LABEL => 'AR_NIC_RSPMON_CQ_EVENT_CNTR_SSID_BLOCKED',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Clocks when SSID event is blocked from leaving the SSID input buffer',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_RSPMON_CQ_EVENT_CNTR_SSID_BLOCKED'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_RSPMON_CQ_EVENT_CNTR_BTE_BLOCKED'} = {
    NAME => 'AR_NIC_RSPMON_CQ_EVENT_CNTR_BTE_BLOCKED',
    LABEL => 'AR_NIC_RSPMON_CQ_EVENT_CNTR_BTE_BLOCKED',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Clocks when BTE event is blocked from leaving the BTE input buffer',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_RSPMON_CQ_EVENT_CNTR_BTE_BLOCKED'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_RSPMON_CQ_EVENT_CNTR_DLA_BLOCKED'} = {
    NAME => 'AR_NIC_RSPMON_CQ_EVENT_CNTR_DLA_BLOCKED',
    LABEL => 'AR_NIC_RSPMON_CQ_EVENT_CNTR_DLA_BLOCKED',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Clocks when DLA event is blocked from leaving the DLA input buffer',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_RSPMON_CQ_EVENT_CNTR_DLA_BLOCKED'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_RSPMON_CQ_EVENT_CNTR_RMT_BLOCKED'} = {
    NAME => 'AR_NIC_RSPMON_CQ_EVENT_CNTR_RMT_BLOCKED',
    LABEL => 'AR_NIC_RSPMON_CQ_EVENT_CNTR_RMT_BLOCKED',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Clocks when RMTevent is blocked from leaving the RMT input buffer',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_RSPMON_CQ_EVENT_CNTR_RMT_BLOCKED'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_RSPMON_CQ_EVENT_CNTR_SSID_DROPPED'} = {
    NAME => 'AR_NIC_RSPMON_CQ_EVENT_CNTR_SSID_DROPPED',
    LABEL => 'AR_NIC_RSPMON_CQ_EVENT_CNTR_SSID_DROPPED',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Dropped SSID completion queue events',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_RSPMON_CQ_EVENT_CNTR_SSID_DROPPED'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_RSPMON_CQ_EVENT_CNTR_BTE_DROPPED'} = {
    NAME => 'AR_NIC_RSPMON_CQ_EVENT_CNTR_BTE_DROPPED',
    LABEL => 'AR_NIC_RSPMON_CQ_EVENT_CNTR_BTE_DROPPED',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Dropped BTE completion queue events',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_RSPMON_CQ_EVENT_CNTR_BTE_DROPPED'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_RSPMON_CQ_EVENT_CNTR_DLA_DROPPED'} = {
    NAME => 'AR_NIC_RSPMON_CQ_EVENT_CNTR_DLA_DROPPED',
    LABEL => 'AR_NIC_RSPMON_CQ_EVENT_CNTR_DLA_DROPPED',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Dropped DLA completion queue events',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_RSPMON_CQ_EVENT_CNTR_DLA_DROPPED'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_RSPMON_CQ_EVENT_CNTR_RMT_DROPPED'} = {
    NAME => 'AR_NIC_RSPMON_CQ_EVENT_CNTR_RMT_DROPPED',
    LABEL => 'AR_NIC_RSPMON_CQ_EVENT_CNTR_RMT_DROPPED',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Dropped RMT completion queue events',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_RSPMON_CQ_EVENT_CNTR_RMT_DROPPED'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_RSPMON_CQ_EVENT_CNTR_NPT_PKT'} = {
    NAME => 'AR_NIC_RSPMON_CQ_EVENT_CNTR_NPT_PKT',
    LABEL => 'AR_NIC_RSPMON_CQ_EVENT_CNTR_NPT_PKT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'CQ NPT packets',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_RSPMON_CQ_EVENT_CNTR_NPT_PKT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_RSPMON_CQ_EVENT_CNTR_NPT_FLIT'} = {
    NAME => 'AR_NIC_RSPMON_CQ_EVENT_CNTR_NPT_FLIT',
    LABEL => 'AR_NIC_RSPMON_CQ_EVENT_CNTR_NPT_FLIT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'CQ NPT flits',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_RSPMON_CQ_EVENT_CNTR_NPT_FLIT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_RSPMON_CQ_EVENT_CNTR_NPT_STALLED'} = {
    NAME => 'AR_NIC_RSPMON_CQ_EVENT_CNTR_NPT_STALLED',
    LABEL => 'AR_NIC_RSPMON_CQ_EVENT_CNTR_NPT_STALLED',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Clocks when NPT packet is stalled due to not enough credits',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_RSPMON_CQ_EVENT_CNTR_NPT_STALLED'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_RSPMON_CQ_EVENT_CNTR_DESC_TBL_SBE0'} = {
    NAME => 'AR_NIC_RSPMON_CQ_EVENT_CNTR_DESC_TBL_SBE0',
    LABEL => 'AR_NIC_RSPMON_CQ_EVENT_CNTR_DESC_TBL_SBE0',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'CQ descriptor table RAM 0 uncorrectable errors',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_RSPMON_CQ_EVENT_CNTR_DESC_TBL_SBE0'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_RSPMON_CQ_EVENT_CNTR_DESC_TBL_SBE1'} = {
    NAME => 'AR_NIC_RSPMON_CQ_EVENT_CNTR_DESC_TBL_SBE1',
    LABEL => 'AR_NIC_RSPMON_CQ_EVENT_CNTR_DESC_TBL_SBE1',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'CQ descriptor table RAM 1 uncorrectable errors',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_RSPMON_CQ_EVENT_CNTR_DESC_TBL_SBE1'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_RSPMON_CQ_EVENT_CNTR_DESC_TBL_SBE2'} = {
    NAME => 'AR_NIC_RSPMON_CQ_EVENT_CNTR_DESC_TBL_SBE2',
    LABEL => 'AR_NIC_RSPMON_CQ_EVENT_CNTR_DESC_TBL_SBE2',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'CQ descriptor table RAM 2 uncorrectable errors',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_RSPMON_CQ_EVENT_CNTR_DESC_TBL_SBE2'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_RSPMON_CQ_EVENT_CNTR_DESC_TBL_SBE3'} = {
    NAME => 'AR_NIC_RSPMON_CQ_EVENT_CNTR_DESC_TBL_SBE3',
    LABEL => 'AR_NIC_RSPMON_CQ_EVENT_CNTR_DESC_TBL_SBE3',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'CQ descriptor table RAM 3 uncorrectable errors',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_RSPMON_CQ_EVENT_CNTR_DESC_TBL_SBE3'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_RSPMON_CQ_EVENT_CNTR_DESC_TBL_MBE0'} = {
    NAME => 'AR_NIC_RSPMON_CQ_EVENT_CNTR_DESC_TBL_MBE0',
    LABEL => 'AR_NIC_RSPMON_CQ_EVENT_CNTR_DESC_TBL_MBE0',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'CQ descriptor table RAM 0 correctable errors',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_RSPMON_CQ_EVENT_CNTR_DESC_TBL_MBE0'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_RSPMON_CQ_EVENT_CNTR_DESC_TBL_MBE1'} = {
    NAME => 'AR_NIC_RSPMON_CQ_EVENT_CNTR_DESC_TBL_MBE1',
    LABEL => 'AR_NIC_RSPMON_CQ_EVENT_CNTR_DESC_TBL_MBE1',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'CQ descriptor table RAM 1 correctable errors',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_RSPMON_CQ_EVENT_CNTR_DESC_TBL_MBE1'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_RSPMON_CQ_EVENT_CNTR_DESC_TBL_MBE2'} = {
    NAME => 'AR_NIC_RSPMON_CQ_EVENT_CNTR_DESC_TBL_MBE2',
    LABEL => 'AR_NIC_RSPMON_CQ_EVENT_CNTR_DESC_TBL_MBE2',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'CQ descriptor table RAM 2 correctable errors',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_RSPMON_CQ_EVENT_CNTR_DESC_TBL_MBE2'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_RSPMON_CQ_EVENT_CNTR_DESC_TBL_MBE3'} = {
    NAME => 'AR_NIC_RSPMON_CQ_EVENT_CNTR_DESC_TBL_MBE3',
    LABEL => 'AR_NIC_RSPMON_CQ_EVENT_CNTR_DESC_TBL_MBE3',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'CQ descriptor table RAM 3 correctable errors',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_RSPMON_CQ_EVENT_CNTR_DESC_TBL_MBE3'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_RSPMON_CQ_EVENT_CNTR_RMT_INPUT_RMT_DATA_PARITY_ERR'} = {
    NAME => 'AR_NIC_RSPMON_CQ_EVENT_CNTR_RMT_INPUT_RMT_DATA_PARITY_ERR',
    LABEL => 'AR_NIC_RSPMON_CQ_EVENT_CNTR_RMT_INPUT_RMT_DATA_PARITY_ERR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'RMT input RMT data buffer parity error count',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_RSPMON_CQ_EVENT_CNTR_RMT_INPUT_RMT_DATA_PARITY_ERR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_RSPMON_CQ_EVENT_CNTR_RMT_INPUT_EVENT_DATA_PARITY_ERR'} = {
    NAME => 'AR_NIC_RSPMON_CQ_EVENT_CNTR_RMT_INPUT_EVENT_DATA_PARITY_ERR',
    LABEL => 'AR_NIC_RSPMON_CQ_EVENT_CNTR_RMT_INPUT_EVENT_DATA_PARITY_ERR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'RMT input event data buffer parity error count',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_RSPMON_CQ_EVENT_CNTR_RMT_INPUT_EVENT_DATA_PARITY_ERR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_RSPMON_CQ_EVENT_CNTR_DLA_INPUT_EVENT_DATA_PARITY_ERR'} = {
    NAME => 'AR_NIC_RSPMON_CQ_EVENT_CNTR_DLA_INPUT_EVENT_DATA_PARITY_ERR',
    LABEL => 'AR_NIC_RSPMON_CQ_EVENT_CNTR_DLA_INPUT_EVENT_DATA_PARITY_ERR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'DLA input event data buffer parity error count',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_RSPMON_CQ_EVENT_CNTR_DLA_INPUT_EVENT_DATA_PARITY_ERR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_RSPMON_CQ_EVENT_CNTR_BTE_INPUT_EVENT_DATA_PARITY_ERR'} = {
    NAME => 'AR_NIC_RSPMON_CQ_EVENT_CNTR_BTE_INPUT_EVENT_DATA_PARITY_ERR',
    LABEL => 'AR_NIC_RSPMON_CQ_EVENT_CNTR_BTE_INPUT_EVENT_DATA_PARITY_ERR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'BTE input event data buffer parity error count',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_RSPMON_CQ_EVENT_CNTR_BTE_INPUT_EVENT_DATA_PARITY_ERR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_RSPMON_CQ_EVENT_CNTR_SSID_INPUT_EVENT_DATA_PARITY_ERR'} = {
    NAME => 'AR_NIC_RSPMON_CQ_EVENT_CNTR_SSID_INPUT_EVENT_DATA_PARITY_ERR',
    LABEL => 'AR_NIC_RSPMON_CQ_EVENT_CNTR_SSID_INPUT_EVENT_DATA_PARITY_ERR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'SSID input event data buffer parity error count',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_RSPMON_CQ_EVENT_CNTR_SSID_INPUT_EVENT_DATA_PARITY_ERR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_RSPMON_CQ_EVENT_CNTR_TRANS_CMP_Q_PARITY_ERR'} = {
    NAME => 'AR_NIC_RSPMON_CQ_EVENT_CNTR_TRANS_CMP_Q_PARITY_ERR',
    LABEL => 'AR_NIC_RSPMON_CQ_EVENT_CNTR_TRANS_CMP_Q_PARITY_ERR',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Translation complete Q parity error count',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_RSPMON_CQ_EVENT_CNTR_TRANS_CMP_Q_PARITY_ERR'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_RSPMON_RMT_EVENT_CNTR_INQ_PARITY'} = {
    NAME => 'AR_NIC_RSPMON_RMT_EVENT_CNTR_INQ_PARITY',
    LABEL => 'AR_NIC_RSPMON_RMT_EVENT_CNTR_INQ_PARITY',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Input queue header flit parity error count',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_RSPMON_RMT_EVENT_CNTR_INQ_PARITY'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_RSPMON_RMT_EVENT_CNTR_PAYLOAD_SBE'} = {
    NAME => 'AR_NIC_RSPMON_RMT_EVENT_CNTR_PAYLOAD_SBE',
    LABEL => 'AR_NIC_RSPMON_RMT_EVENT_CNTR_PAYLOAD_SBE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Payload flit SBE count',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_RSPMON_RMT_EVENT_CNTR_PAYLOAD_SBE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_RSPMON_RMT_EVENT_CNTR_PAYLOAD_MBE'} = {
    NAME => 'AR_NIC_RSPMON_RMT_EVENT_CNTR_PAYLOAD_MBE',
    LABEL => 'AR_NIC_RSPMON_RMT_EVENT_CNTR_PAYLOAD_MBE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Payload flit MBE count',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_RSPMON_RMT_EVENT_CNTR_PAYLOAD_MBE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_RSPMON_RMT_EVENT_CNTR_SEQ_TBL_SBE'} = {
    NAME => 'AR_NIC_RSPMON_RMT_EVENT_CNTR_SEQ_TBL_SBE',
    LABEL => 'AR_NIC_RSPMON_RMT_EVENT_CNTR_SEQ_TBL_SBE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Sequence table SBE count',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_RSPMON_RMT_EVENT_CNTR_SEQ_TBL_SBE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_RSPMON_RMT_EVENT_CNTR_SEQ_TBL_MBE'} = {
    NAME => 'AR_NIC_RSPMON_RMT_EVENT_CNTR_SEQ_TBL_MBE',
    LABEL => 'AR_NIC_RSPMON_RMT_EVENT_CNTR_SEQ_TBL_MBE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Sequence table MBE count',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_RSPMON_RMT_EVENT_CNTR_SEQ_TBL_MBE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_RSPMON_RMT_EVENT_CNTR_DESC_TBL_SBE'} = {
    NAME => 'AR_NIC_RSPMON_RMT_EVENT_CNTR_DESC_TBL_SBE',
    LABEL => 'AR_NIC_RSPMON_RMT_EVENT_CNTR_DESC_TBL_SBE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Rx descriptor table SBE count',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_RSPMON_RMT_EVENT_CNTR_DESC_TBL_SBE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_RSPMON_RMT_EVENT_CNTR_DESC_TBL_MBE'} = {
    NAME => 'AR_NIC_RSPMON_RMT_EVENT_CNTR_DESC_TBL_MBE',
    LABEL => 'AR_NIC_RSPMON_RMT_EVENT_CNTR_DESC_TBL_MBE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Rx descriptor table MBE count',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_RSPMON_RMT_EVENT_CNTR_DESC_TBL_MBE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_RSPMON_RMT_EVENT_CNTR_UNDELIVERABLE_CQE'} = {
    NAME => 'AR_NIC_RSPMON_RMT_EVENT_CNTR_UNDELIVERABLE_CQE',
    LABEL => 'AR_NIC_RSPMON_RMT_EVENT_CNTR_UNDELIVERABLE_CQE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Undeliverable CQE (due to errored or malformed CQWrite or MsgRcvComplete) count',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_RSPMON_RMT_EVENT_CNTR_UNDELIVERABLE_CQE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_RSPMON_RMT_EVENT_CNTR_PUT_CAM_FILLS'} = {
    NAME => 'AR_NIC_RSPMON_RMT_EVENT_CNTR_PUT_CAM_FILLS',
    LABEL => 'AR_NIC_RSPMON_RMT_EVENT_CNTR_PUT_CAM_FILLS',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'PUT/MsgSendComplete CAM fill count',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_RSPMON_RMT_EVENT_CNTR_PUT_CAM_FILLS'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_RSPMON_RMT_EVENT_CNTR_PUT_CAM_MISSES'} = {
    NAME => 'AR_NIC_RSPMON_RMT_EVENT_CNTR_PUT_CAM_MISSES',
    LABEL => 'AR_NIC_RSPMON_RMT_EVENT_CNTR_PUT_CAM_MISSES',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'PUT/MsgSendComplete CAM miss count',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_RSPMON_RMT_EVENT_CNTR_PUT_CAM_MISSES'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_RSPMON_RMT_EVENT_CNTR_PUT_CAM_EVICTS'} = {
    NAME => 'AR_NIC_RSPMON_RMT_EVENT_CNTR_PUT_CAM_EVICTS',
    LABEL => 'AR_NIC_RSPMON_RMT_EVENT_CNTR_PUT_CAM_EVICTS',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'DSMN Sequence CAM evict count',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_RSPMON_RMT_EVENT_CNTR_PUT_CAM_EVICTS'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_RSPMON_RMT_EVENT_CNTR_PUT_CAM_HITS'} = {
    NAME => 'AR_NIC_RSPMON_RMT_EVENT_CNTR_PUT_CAM_HITS',
    LABEL => 'AR_NIC_RSPMON_RMT_EVENT_CNTR_PUT_CAM_HITS',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'PUT/MsgSendComplete CAM hit count',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_RSPMON_RMT_EVENT_CNTR_PUT_CAM_HITS'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_RSPMON_RMT_EVENT_CNTR_PUT_MBE_EVICTS'} = {
    NAME => 'AR_NIC_RSPMON_RMT_EVENT_CNTR_PUT_MBE_EVICTS',
    LABEL => 'AR_NIC_RSPMON_RMT_EVENT_CNTR_PUT_MBE_EVICTS',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'DSMN Sequence CAM MBE evict count',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_RSPMON_RMT_EVENT_CNTR_PUT_MBE_EVICTS'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_RSPMON_RMT_EVENT_CNTR_PUT_TIMEOUTS'} = {
    NAME => 'AR_NIC_RSPMON_RMT_EVENT_CNTR_PUT_TIMEOUTS',
    LABEL => 'AR_NIC_RSPMON_RMT_EVENT_CNTR_PUT_TIMEOUTS',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'DSMN Sequence CAM MBE timeout count',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_RSPMON_RMT_EVENT_CNTR_PUT_TIMEOUTS'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_RSPMON_RMT_EVENT_CNTR_RCV_COMPLETES'} = {
    NAME => 'AR_NIC_RSPMON_RMT_EVENT_CNTR_RCV_COMPLETES',
    LABEL => 'AR_NIC_RSPMON_RMT_EVENT_CNTR_RCV_COMPLETES',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'MsgRcvComplete count',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_RSPMON_RMT_EVENT_CNTR_RCV_COMPLETES'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_RSPMON_RMT_EVENT_CNTR_SEND_CAM_FILLS'} = {
    NAME => 'AR_NIC_RSPMON_RMT_EVENT_CNTR_SEND_CAM_FILLS',
    LABEL => 'AR_NIC_RSPMON_RMT_EVENT_CNTR_SEND_CAM_FILLS',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'BTE_Send/BTE_SendComplete CAM fill count',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_RSPMON_RMT_EVENT_CNTR_SEND_CAM_FILLS'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_RSPMON_RMT_EVENT_CNTR_SEND_CAM_MISSES'} = {
    NAME => 'AR_NIC_RSPMON_RMT_EVENT_CNTR_SEND_CAM_MISSES',
    LABEL => 'AR_NIC_RSPMON_RMT_EVENT_CNTR_SEND_CAM_MISSES',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'BTE_Send/BTE_SendComplete CAM miss count',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_RSPMON_RMT_EVENT_CNTR_SEND_CAM_MISSES'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_RSPMON_RMT_EVENT_CNTR_SEND_CAM_EVICTS'} = {
    NAME => 'AR_NIC_RSPMON_RMT_EVENT_CNTR_SEND_CAM_EVICTS',
    LABEL => 'AR_NIC_RSPMON_RMT_EVENT_CNTR_SEND_CAM_EVICTS',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'BTE_Send Sequence CAM evict count',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_RSPMON_RMT_EVENT_CNTR_SEND_CAM_EVICTS'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_RSPMON_RMT_EVENT_CNTR_SEND_CAM_HITS'} = {
    NAME => 'AR_NIC_RSPMON_RMT_EVENT_CNTR_SEND_CAM_HITS',
    LABEL => 'AR_NIC_RSPMON_RMT_EVENT_CNTR_SEND_CAM_HITS',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'BTE_Send/BTE_SendComplete CAM hit count',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_RSPMON_RMT_EVENT_CNTR_SEND_CAM_HITS'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_RSPMON_RMT_EVENT_CNTR_SEND_MBE_EVICTS'} = {
    NAME => 'AR_NIC_RSPMON_RMT_EVENT_CNTR_SEND_MBE_EVICTS',
    LABEL => 'AR_NIC_RSPMON_RMT_EVENT_CNTR_SEND_MBE_EVICTS',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'BTE_Send Sequence CAM MBE evict count',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_RSPMON_RMT_EVENT_CNTR_SEND_MBE_EVICTS'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_RSPMON_RMT_EVENT_CNTR_SEND_TIMEOUTS'} = {
    NAME => 'AR_NIC_RSPMON_RMT_EVENT_CNTR_SEND_TIMEOUTS',
    LABEL => 'AR_NIC_RSPMON_RMT_EVENT_CNTR_SEND_TIMEOUTS',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'BTE_Send Sequence CAM MBE timeout count',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_RSPMON_RMT_EVENT_CNTR_SEND_TIMEOUTS'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_RSPMON_RMT_EVENT_CNTR_ABORTS'} = {
    NAME => 'AR_NIC_RSPMON_RMT_EVENT_CNTR_ABORTS',
    LABEL => 'AR_NIC_RSPMON_RMT_EVENT_CNTR_ABORTS',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Abort count',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_RSPMON_RMT_EVENT_CNTR_ABORTS'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_RSPMON_IOMMU_EVENT_CNTR_IDLE'} = {
    NAME => 'AR_NIC_RSPMON_IOMMU_EVENT_CNTR_IDLE',
    LABEL => 'AR_NIC_RSPMON_IOMMU_EVENT_CNTR_IDLE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'IOMMU Idle',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_RSPMON_IOMMU_EVENT_CNTR_IDLE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_RSPMON_IOMMU_EVENT_CNTR_TR_RCVD'} = {
    NAME => 'AR_NIC_RSPMON_IOMMU_EVENT_CNTR_TR_RCVD',
    LABEL => 'AR_NIC_RSPMON_IOMMU_EVENT_CNTR_TR_RCVD',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Translation requests received',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_RSPMON_IOMMU_EVENT_CNTR_TR_RCVD'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_RSPMON_IOMMU_EVENT_CNTR_TR_1LVL_RSP'} = {
    NAME => 'AR_NIC_RSPMON_IOMMU_EVENT_CNTR_TR_1LVL_RSP',
    LABEL => 'AR_NIC_RSPMON_IOMMU_EVENT_CNTR_TR_1LVL_RSP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'One level translation requests completed',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_RSPMON_IOMMU_EVENT_CNTR_TR_1LVL_RSP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_RSPMON_IOMMU_EVENT_CNTR_TR_2LVL_RSP'} = {
    NAME => 'AR_NIC_RSPMON_IOMMU_EVENT_CNTR_TR_2LVL_RSP',
    LABEL => 'AR_NIC_RSPMON_IOMMU_EVENT_CNTR_TR_2LVL_RSP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Two level translation requests completed',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_RSPMON_IOMMU_EVENT_CNTR_TR_2LVL_RSP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_RSPMON_IOMMU_EVENT_CNTR_IOPF_PTE'} = {
    NAME => 'AR_NIC_RSPMON_IOMMU_EVENT_CNTR_IOPF_PTE',
    LABEL => 'AR_NIC_RSPMON_IOMMU_EVENT_CNTR_IOPF_PTE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'IO page fault invalid page table entry',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_RSPMON_IOMMU_EVENT_CNTR_IOPF_PTE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_RSPMON_IOMMU_EVENT_CNTR_IOPF_TC'} = {
    NAME => 'AR_NIC_RSPMON_IOMMU_EVENT_CNTR_IOPF_TC',
    LABEL => 'AR_NIC_RSPMON_IOMMU_EVENT_CNTR_IOPF_TC',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'IO page fault invalid translation context',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_RSPMON_IOMMU_EVENT_CNTR_IOPF_TC'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_RSPMON_IOMMU_EVENT_CNTR_IOPF_ACCESS'} = {
    NAME => 'AR_NIC_RSPMON_IOMMU_EVENT_CNTR_IOPF_ACCESS',
    LABEL => 'AR_NIC_RSPMON_IOMMU_EVENT_CNTR_IOPF_ACCESS',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'IO page fault incorrect access permissions',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_RSPMON_IOMMU_EVENT_CNTR_IOPF_ACCESS'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_RSPMON_IOMMU_EVENT_CNTR_PTEC_HIT'} = {
    NAME => 'AR_NIC_RSPMON_IOMMU_EVENT_CNTR_PTEC_HIT',
    LABEL => 'AR_NIC_RSPMON_IOMMU_EVENT_CNTR_PTEC_HIT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Page table entry cache hits',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_RSPMON_IOMMU_EVENT_CNTR_PTEC_HIT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_RSPMON_IOMMU_EVENT_CNTR_PTEC_MISS'} = {
    NAME => 'AR_NIC_RSPMON_IOMMU_EVENT_CNTR_PTEC_MISS',
    LABEL => 'AR_NIC_RSPMON_IOMMU_EVENT_CNTR_PTEC_MISS',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Page table entry cache misses',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_RSPMON_IOMMU_EVENT_CNTR_PTEC_MISS'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_RSPMON_IOMMU_EVENT_CNTR_PTEC_EVICT'} = {
    NAME => 'AR_NIC_RSPMON_IOMMU_EVENT_CNTR_PTEC_EVICT',
    LABEL => 'AR_NIC_RSPMON_IOMMU_EVENT_CNTR_PTEC_EVICT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Page table entry cache',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_RSPMON_IOMMU_EVENT_CNTR_PTEC_EVICT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_RSPMON_IOMMU_EVENT_CNTR_PTEC_INVAL'} = {
    NAME => 'AR_NIC_RSPMON_IOMMU_EVENT_CNTR_PTEC_INVAL',
    LABEL => 'AR_NIC_RSPMON_IOMMU_EVENT_CNTR_PTEC_INVAL',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Page table entry cache invalidations',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_RSPMON_IOMMU_EVENT_CNTR_PTEC_INVAL'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_RSPMON_IOMMU_EVENT_CNTR_STALL_PTEC_CA'} = {
    NAME => 'AR_NIC_RSPMON_IOMMU_EVENT_CNTR_STALL_PTEC_CA',
    LABEL => 'AR_NIC_RSPMON_IOMMU_EVENT_CNTR_STALL_PTEC_CA',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Stalls for page table entry cache can’t allocate an entry (all ways pending)',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_RSPMON_IOMMU_EVENT_CNTR_STALL_PTEC_CA'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_RSPMON_IOMMU_EVENT_CNTR_OFB_CA'} = {
    NAME => 'AR_NIC_RSPMON_IOMMU_EVENT_CNTR_OFB_CA',
    LABEL => 'AR_NIC_RSPMON_IOMMU_EVENT_CNTR_OFB_CA',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Stalls for page table entry cache outstanding fetch buffer allocation',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_RSPMON_IOMMU_EVENT_CNTR_OFB_CA'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_RSPMON_IOMMU_EVENT_CNTR_PTE_RF'} = {
    NAME => 'AR_NIC_RSPMON_IOMMU_EVENT_CNTR_PTE_RF',
    LABEL => 'AR_NIC_RSPMON_IOMMU_EVENT_CNTR_PTE_RF',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Page table entry re-fetches for PTE not present',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_RSPMON_IOMMU_EVENT_CNTR_PTE_RF'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_RSPMON_IOMMU_EVENT_CNTR_PTE_INV'} = {
    NAME => 'AR_NIC_RSPMON_IOMMU_EVENT_CNTR_PTE_INV',
    LABEL => 'AR_NIC_RSPMON_IOMMU_EVENT_CNTR_PTE_INV',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Page table entry cache entry invalidations',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_RSPMON_IOMMU_EVENT_CNTR_PTE_INV'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_RSPMON_IOMMU_EVENT_CNTR_EVENTS'} = {
    NAME => 'AR_NIC_RSPMON_IOMMU_EVENT_CNTR_EVENTS',
    LABEL => 'AR_NIC_RSPMON_IOMMU_EVENT_CNTR_EVENTS',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Events logged',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_RSPMON_IOMMU_EVENT_CNTR_EVENTS'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_RSPMON_PARB_EVENT_CNTR_BTE_RD_PKTS'} = {
    NAME => 'AR_NIC_RSPMON_PARB_EVENT_CNTR_BTE_RD_PKTS',
    LABEL => 'AR_NIC_RSPMON_PARB_EVENT_CNTR_BTE_RD_PKTS',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'BTE read packet count',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_RSPMON_PARB_EVENT_CNTR_BTE_RD_PKTS'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_RSPMON_PARB_EVENT_CNTR_BTE_RD_FLITS'} = {
    NAME => 'AR_NIC_RSPMON_PARB_EVENT_CNTR_BTE_RD_FLITS',
    LABEL => 'AR_NIC_RSPMON_PARB_EVENT_CNTR_BTE_RD_FLITS',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'BTE read flit count',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_RSPMON_PARB_EVENT_CNTR_BTE_RD_FLITS'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_RSPMON_PARB_EVENT_CNTR_BTE_RD_BLOCKED'} = {
    NAME => 'AR_NIC_RSPMON_PARB_EVENT_CNTR_BTE_RD_BLOCKED',
    LABEL => 'AR_NIC_RSPMON_PARB_EVENT_CNTR_BTE_RD_BLOCKED',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'BTE read blocked count',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_RSPMON_PARB_EVENT_CNTR_BTE_RD_BLOCKED'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_RSPMON_PARB_EVENT_CNTR_BTE_WR_PKTS'} = {
    NAME => 'AR_NIC_RSPMON_PARB_EVENT_CNTR_BTE_WR_PKTS',
    LABEL => 'AR_NIC_RSPMON_PARB_EVENT_CNTR_BTE_WR_PKTS',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'BTE write packet count',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_RSPMON_PARB_EVENT_CNTR_BTE_WR_PKTS'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_RSPMON_PARB_EVENT_CNTR_BTE_WR_FLITS'} = {
    NAME => 'AR_NIC_RSPMON_PARB_EVENT_CNTR_BTE_WR_FLITS',
    LABEL => 'AR_NIC_RSPMON_PARB_EVENT_CNTR_BTE_WR_FLITS',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'BTE write flit count',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_RSPMON_PARB_EVENT_CNTR_BTE_WR_FLITS'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_RSPMON_PARB_EVENT_CNTR_BTE_WR_BLOCKED'} = {
    NAME => 'AR_NIC_RSPMON_PARB_EVENT_CNTR_BTE_WR_BLOCKED',
    LABEL => 'AR_NIC_RSPMON_PARB_EVENT_CNTR_BTE_WR_BLOCKED',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'BTE write blocked count',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_RSPMON_PARB_EVENT_CNTR_BTE_WR_BLOCKED'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_RSPMON_PARB_EVENT_CNTR_AMO_PKTS'} = {
    NAME => 'AR_NIC_RSPMON_PARB_EVENT_CNTR_AMO_PKTS',
    LABEL => 'AR_NIC_RSPMON_PARB_EVENT_CNTR_AMO_PKTS',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'AMO packet count',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_RSPMON_PARB_EVENT_CNTR_AMO_PKTS'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_RSPMON_PARB_EVENT_CNTR_AMO_FLITS'} = {
    NAME => 'AR_NIC_RSPMON_PARB_EVENT_CNTR_AMO_FLITS',
    LABEL => 'AR_NIC_RSPMON_PARB_EVENT_CNTR_AMO_FLITS',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'AMO flit count',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_RSPMON_PARB_EVENT_CNTR_AMO_FLITS'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_RSPMON_PARB_EVENT_CNTR_AMO_BLOCKED'} = {
    NAME => 'AR_NIC_RSPMON_PARB_EVENT_CNTR_AMO_BLOCKED',
    LABEL => 'AR_NIC_RSPMON_PARB_EVENT_CNTR_AMO_BLOCKED',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'AMO blocked count',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_RSPMON_PARB_EVENT_CNTR_AMO_BLOCKED'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_RSPMON_PARB_EVENT_CNTR_WC_PKTS'} = {
    NAME => 'AR_NIC_RSPMON_PARB_EVENT_CNTR_WC_PKTS',
    LABEL => 'AR_NIC_RSPMON_PARB_EVENT_CNTR_WC_PKTS',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'WC packet count',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_RSPMON_PARB_EVENT_CNTR_WC_PKTS'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_RSPMON_PARB_EVENT_CNTR_WC_FLITS'} = {
    NAME => 'AR_NIC_RSPMON_PARB_EVENT_CNTR_WC_FLITS',
    LABEL => 'AR_NIC_RSPMON_PARB_EVENT_CNTR_WC_FLITS',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'WC flit count',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_RSPMON_PARB_EVENT_CNTR_WC_FLITS'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_RSPMON_PARB_EVENT_CNTR_WC_BLOCKED'} = {
    NAME => 'AR_NIC_RSPMON_PARB_EVENT_CNTR_WC_BLOCKED',
    LABEL => 'AR_NIC_RSPMON_PARB_EVENT_CNTR_WC_BLOCKED',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'WC blocked count',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_RSPMON_PARB_EVENT_CNTR_WC_BLOCKED'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_RSPMON_PARB_EVENT_CNTR_IOMMU_PKTS'} = {
    NAME => 'AR_NIC_RSPMON_PARB_EVENT_CNTR_IOMMU_PKTS',
    LABEL => 'AR_NIC_RSPMON_PARB_EVENT_CNTR_IOMMU_PKTS',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'IOMMU packet count',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_RSPMON_PARB_EVENT_CNTR_IOMMU_PKTS'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_RSPMON_PARB_EVENT_CNTR_IOMMU_FLITS'} = {
    NAME => 'AR_NIC_RSPMON_PARB_EVENT_CNTR_IOMMU_FLITS',
    LABEL => 'AR_NIC_RSPMON_PARB_EVENT_CNTR_IOMMU_FLITS',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'IOMMU flit count',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_RSPMON_PARB_EVENT_CNTR_IOMMU_FLITS'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_RSPMON_PARB_EVENT_CNTR_IOMMU_BLOCKED'} = {
    NAME => 'AR_NIC_RSPMON_PARB_EVENT_CNTR_IOMMU_BLOCKED',
    LABEL => 'AR_NIC_RSPMON_PARB_EVENT_CNTR_IOMMU_BLOCKED',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'IOMMU blocked count',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_RSPMON_PARB_EVENT_CNTR_IOMMU_BLOCKED'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_RSPMON_PARB_EVENT_CNTR_DLA_PKTS'} = {
    NAME => 'AR_NIC_RSPMON_PARB_EVENT_CNTR_DLA_PKTS',
    LABEL => 'AR_NIC_RSPMON_PARB_EVENT_CNTR_DLA_PKTS',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'DLA packet count',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_RSPMON_PARB_EVENT_CNTR_DLA_PKTS'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_RSPMON_PARB_EVENT_CNTR_DLA_FLITS'} = {
    NAME => 'AR_NIC_RSPMON_PARB_EVENT_CNTR_DLA_FLITS',
    LABEL => 'AR_NIC_RSPMON_PARB_EVENT_CNTR_DLA_FLITS',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'DLA flit count',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_RSPMON_PARB_EVENT_CNTR_DLA_FLITS'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_RSPMON_PARB_EVENT_CNTR_DLA_BLOCKED'} = {
    NAME => 'AR_NIC_RSPMON_PARB_EVENT_CNTR_DLA_BLOCKED',
    LABEL => 'AR_NIC_RSPMON_PARB_EVENT_CNTR_DLA_BLOCKED',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'DLA blocked count',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_RSPMON_PARB_EVENT_CNTR_DLA_BLOCKED'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_RSPMON_PARB_EVENT_CNTR_MAINT_PKTS'} = {
    NAME => 'AR_NIC_RSPMON_PARB_EVENT_CNTR_MAINT_PKTS',
    LABEL => 'AR_NIC_RSPMON_PARB_EVENT_CNTR_MAINT_PKTS',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'MAINT packet count',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_RSPMON_PARB_EVENT_CNTR_MAINT_PKTS'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_RSPMON_PARB_EVENT_CNTR_MAINT_FLITS'} = {
    NAME => 'AR_NIC_RSPMON_PARB_EVENT_CNTR_MAINT_FLITS',
    LABEL => 'AR_NIC_RSPMON_PARB_EVENT_CNTR_MAINT_FLITS',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'MAINT flit count',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_RSPMON_PARB_EVENT_CNTR_MAINT_FLITS'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_RSPMON_PARB_EVENT_CNTR_MAINT_BLOCKED'} = {
    NAME => 'AR_NIC_RSPMON_PARB_EVENT_CNTR_MAINT_BLOCKED',
    LABEL => 'AR_NIC_RSPMON_PARB_EVENT_CNTR_MAINT_BLOCKED',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'MAINT blocked count',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_RSPMON_PARB_EVENT_CNTR_MAINT_BLOCKED'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_RSPMON_PARB_EVENT_CNTR_PI_PKTS'} = {
    NAME => 'AR_NIC_RSPMON_PARB_EVENT_CNTR_PI_PKTS',
    LABEL => 'AR_NIC_RSPMON_PARB_EVENT_CNTR_PI_PKTS',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'PI packet count',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_RSPMON_PARB_EVENT_CNTR_PI_PKTS'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_RSPMON_PARB_EVENT_CNTR_PI_FLITS'} = {
    NAME => 'AR_NIC_RSPMON_PARB_EVENT_CNTR_PI_FLITS',
    LABEL => 'AR_NIC_RSPMON_PARB_EVENT_CNTR_PI_FLITS',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'PI flit count',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_RSPMON_PARB_EVENT_CNTR_PI_FLITS'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_RSPMON_PARB_EVENT_CNTR_PI_STALLED'} = {
    NAME => 'AR_NIC_RSPMON_PARB_EVENT_CNTR_PI_STALLED',
    LABEL => 'AR_NIC_RSPMON_PARB_EVENT_CNTR_PI_STALLED',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'PI stalled count',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_RSPMON_PARB_EVENT_CNTR_PI_STALLED'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_RSPMON_NPT_EVENT_CNTR_CQ_PKTS'} = {
    NAME => 'AR_NIC_RSPMON_NPT_EVENT_CNTR_CQ_PKTS',
    LABEL => 'AR_NIC_RSPMON_NPT_EVENT_CNTR_CQ_PKTS',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'CQ input packet count',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_RSPMON_NPT_EVENT_CNTR_CQ_PKTS'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_RSPMON_NPT_EVENT_CNTR_CQ_FLITS'} = {
    NAME => 'AR_NIC_RSPMON_NPT_EVENT_CNTR_CQ_FLITS',
    LABEL => 'AR_NIC_RSPMON_NPT_EVENT_CNTR_CQ_FLITS',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'CQ input flit count',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_RSPMON_NPT_EVENT_CNTR_CQ_FLITS'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_RSPMON_NPT_EVENT_CNTR_CQ_BLOCKED'} = {
    NAME => 'AR_NIC_RSPMON_NPT_EVENT_CNTR_CQ_BLOCKED',
    LABEL => 'AR_NIC_RSPMON_NPT_EVENT_CNTR_CQ_BLOCKED',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'CQ input blocked count',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_RSPMON_NPT_EVENT_CNTR_CQ_BLOCKED'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_RSPMON_NPT_EVENT_CNTR_RMT_PKTS'} = {
    NAME => 'AR_NIC_RSPMON_NPT_EVENT_CNTR_RMT_PKTS',
    LABEL => 'AR_NIC_RSPMON_NPT_EVENT_CNTR_RMT_PKTS',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'RMT input packet count',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_RSPMON_NPT_EVENT_CNTR_RMT_PKTS'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_RSPMON_NPT_EVENT_CNTR_RMT_FLITS'} = {
    NAME => 'AR_NIC_RSPMON_NPT_EVENT_CNTR_RMT_FLITS',
    LABEL => 'AR_NIC_RSPMON_NPT_EVENT_CNTR_RMT_FLITS',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'RMT input flit count',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_RSPMON_NPT_EVENT_CNTR_RMT_FLITS'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_RSPMON_NPT_EVENT_CNTR_RMT_BLOCKED'} = {
    NAME => 'AR_NIC_RSPMON_NPT_EVENT_CNTR_RMT_BLOCKED',
    LABEL => 'AR_NIC_RSPMON_NPT_EVENT_CNTR_RMT_BLOCKED',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'RMT input blocked count',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_RSPMON_NPT_EVENT_CNTR_RMT_BLOCKED'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_RSPMON_NPT_EVENT_CNTR_INPUT_PKTS'} = {
    NAME => 'AR_NIC_RSPMON_NPT_EVENT_CNTR_INPUT_PKTS',
    LABEL => 'AR_NIC_RSPMON_NPT_EVENT_CNTR_INPUT_PKTS',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'INPUT (RMT or CQ) packet count',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_RSPMON_NPT_EVENT_CNTR_INPUT_PKTS'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_RSPMON_NPT_EVENT_CNTR_INPUT_FLITS'} = {
    NAME => 'AR_NIC_RSPMON_NPT_EVENT_CNTR_INPUT_FLITS',
    LABEL => 'AR_NIC_RSPMON_NPT_EVENT_CNTR_INPUT_FLITS',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'INPUT (RMT or CQ) flit count',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_RSPMON_NPT_EVENT_CNTR_INPUT_FLITS'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_RSPMON_NPT_EVENT_CNTR_INPUT_STALLED'} = {
    NAME => 'AR_NIC_RSPMON_NPT_EVENT_CNTR_INPUT_STALLED',
    LABEL => 'AR_NIC_RSPMON_NPT_EVENT_CNTR_INPUT_STALLED',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'INPUT (RMT or CQ) stalled count',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_RSPMON_NPT_EVENT_CNTR_INPUT_STALLED'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_RSPMON_NPT_EVENT_CNTR_NP_PKTS'} = {
    NAME => 'AR_NIC_RSPMON_NPT_EVENT_CNTR_NP_PKTS',
    LABEL => 'AR_NIC_RSPMON_NPT_EVENT_CNTR_NP_PKTS',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Non-posted response packet count (packets that are not PKT_IGNORE,PKT_DROP, or PKT_CW)',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_RSPMON_NPT_EVENT_CNTR_NP_PKTS'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_RSPMON_NPT_EVENT_CNTR_NP_FLITS'} = {
    NAME => 'AR_NIC_RSPMON_NPT_EVENT_CNTR_NP_FLITS',
    LABEL => 'AR_NIC_RSPMON_NPT_EVENT_CNTR_NP_FLITS',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Non-posted response flit count',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_RSPMON_NPT_EVENT_CNTR_NP_FLITS'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_RSPMON_NPT_EVENT_CNTR_NP_BLOCKED'} = {
    NAME => 'AR_NIC_RSPMON_NPT_EVENT_CNTR_NP_BLOCKED',
    LABEL => 'AR_NIC_RSPMON_NPT_EVENT_CNTR_NP_BLOCKED',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Non-posted response blocked count',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_RSPMON_NPT_EVENT_CNTR_NP_BLOCKED'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_RSPMON_NPT_EVENT_CNTR_P_PKTS'} = {
    NAME => 'AR_NIC_RSPMON_NPT_EVENT_CNTR_P_PKTS',
    LABEL => 'AR_NIC_RSPMON_NPT_EVENT_CNTR_P_PKTS',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Posted response packet count',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_RSPMON_NPT_EVENT_CNTR_P_PKTS'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_RSPMON_NPT_EVENT_CNTR_P_BLOCKED'} = {
    NAME => 'AR_NIC_RSPMON_NPT_EVENT_CNTR_P_BLOCKED',
    LABEL => 'AR_NIC_RSPMON_NPT_EVENT_CNTR_P_BLOCKED',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Posted response blocked count',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_RSPMON_NPT_EVENT_CNTR_P_BLOCKED'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_RSPMON_NPT_EVENT_CNTR_CE_PKTS'} = {
    NAME => 'AR_NIC_RSPMON_NPT_EVENT_CNTR_CE_PKTS',
    LABEL => 'AR_NIC_RSPMON_NPT_EVENT_CNTR_CE_PKTS',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'CE response packet count',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_RSPMON_NPT_EVENT_CNTR_CE_PKTS'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_RSPMON_NPT_EVENT_CNTR_CE_BLOCKED'} = {
    NAME => 'AR_NIC_RSPMON_NPT_EVENT_CNTR_CE_BLOCKED',
    LABEL => 'AR_NIC_RSPMON_NPT_EVENT_CNTR_CE_BLOCKED',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'CE response blocked count',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_RSPMON_NPT_EVENT_CNTR_CE_BLOCKED'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_RSPMON_NPT_EVENT_CNTR_NL_PKTS'} = {
    NAME => 'AR_NIC_RSPMON_NPT_EVENT_CNTR_NL_PKTS',
    LABEL => 'AR_NIC_RSPMON_NPT_EVENT_CNTR_NL_PKTS',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'NL response packet count',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_RSPMON_NPT_EVENT_CNTR_NL_PKTS'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_RSPMON_NPT_EVENT_CNTR_NL_FLITS'} = {
    NAME => 'AR_NIC_RSPMON_NPT_EVENT_CNTR_NL_FLITS',
    LABEL => 'AR_NIC_RSPMON_NPT_EVENT_CNTR_NL_FLITS',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'NL response flit count',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_RSPMON_NPT_EVENT_CNTR_NL_FLITS'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_RSPMON_NPT_EVENT_CNTR_NL_STALLED'} = {
    NAME => 'AR_NIC_RSPMON_NPT_EVENT_CNTR_NL_STALLED',
    LABEL => 'AR_NIC_RSPMON_NPT_EVENT_CNTR_NL_STALLED',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'NL response stalled count',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_RSPMON_NPT_EVENT_CNTR_NL_STALLED'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_RSPMON_NPT_EVENT_CNTR_RSP_PKT'} = {
    NAME => 'AR_NIC_RSPMON_NPT_EVENT_CNTR_RSP_PKT',
    LABEL => 'AR_NIC_RSPMON_NPT_EVENT_CNTR_RSP_PKT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'PI response packet count',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_RSPMON_NPT_EVENT_CNTR_RSP_PKT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_RSPMON_NPT_EVENT_CNTR_RSP_FLIT'} = {
    NAME => 'AR_NIC_RSPMON_NPT_EVENT_CNTR_RSP_FLIT',
    LABEL => 'AR_NIC_RSPMON_NPT_EVENT_CNTR_RSP_FLIT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'PI response flit count',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_RSPMON_NPT_EVENT_CNTR_RSP_FLIT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_RSPMON_NPT_EVENT_CNTR_PKT_IGNORE'} = {
    NAME => 'AR_NIC_RSPMON_NPT_EVENT_CNTR_PKT_IGNORE',
    LABEL => 'AR_NIC_RSPMON_NPT_EVENT_CNTR_PKT_IGNORE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'PI packets not intended for the NPT (including unsolicited and parity errors)',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_RSPMON_NPT_EVENT_CNTR_PKT_IGNORE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_RSPMON_NPT_EVENT_CNTR_PKT_DROP'} = {
    NAME => 'AR_NIC_RSPMON_NPT_EVENT_CNTR_PKT_DROP',
    LABEL => 'AR_NIC_RSPMON_NPT_EVENT_CNTR_PKT_DROP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'PI packets intended for the NPT but dropped (either response suppressed or MBE on NPT RAM)',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_RSPMON_NPT_EVENT_CNTR_PKT_DROP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_RSPMON_NPT_EVENT_CNTR_PKT_CW'} = {
    NAME => 'AR_NIC_RSPMON_NPT_EVENT_CNTR_PKT_CW',
    LABEL => 'AR_NIC_RSPMON_NPT_EVENT_CNTR_PKT_CW',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'PI packets (completion wait flush response)',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_RSPMON_NPT_EVENT_CNTR_PKT_CW'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_RSPMON_NPT_EVENT_CNTR_ERR_SBE'} = {
    NAME => 'AR_NIC_RSPMON_NPT_EVENT_CNTR_ERR_SBE',
    LABEL => 'AR_NIC_RSPMON_NPT_EVENT_CNTR_ERR_SBE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'SBE’s on NPT RAM',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_RSPMON_NPT_EVENT_CNTR_ERR_SBE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_RSPMON_NPT_EVENT_CNTR_ERR_MBE'} = {
    NAME => 'AR_NIC_RSPMON_NPT_EVENT_CNTR_ERR_MBE',
    LABEL => 'AR_NIC_RSPMON_NPT_EVENT_CNTR_ERR_MBE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'MBE’s on NPT RAM',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_RSPMON_NPT_EVENT_CNTR_ERR_MBE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_RSPMON_NPT_EVENT_CNTR_REQ_PE'} = {
    NAME => 'AR_NIC_RSPMON_NPT_EVENT_CNTR_REQ_PE',
    LABEL => 'AR_NIC_RSPMON_NPT_EVENT_CNTR_REQ_PE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Parity error in request header',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_RSPMON_NPT_EVENT_CNTR_REQ_PE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_RSPMON_NPT_EVENT_CNTR_RSP_PE'} = {
    NAME => 'AR_NIC_RSPMON_NPT_EVENT_CNTR_RSP_PE',
    LABEL => 'AR_NIC_RSPMON_NPT_EVENT_CNTR_RSP_PE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Parity error in response header',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_RSPMON_NPT_EVENT_CNTR_RSP_PE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_RSPMON_NPT_EVENT_CNTR_RSP_SBE'} = {
    NAME => 'AR_NIC_RSPMON_NPT_EVENT_CNTR_RSP_SBE',
    LABEL => 'AR_NIC_RSPMON_NPT_EVENT_CNTR_RSP_SBE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'SBE in response payload',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_RSPMON_NPT_EVENT_CNTR_RSP_SBE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_NIC_RSPMON_NPT_EVENT_CNTR_RSP_MBE'} = {
    NAME => 'AR_NIC_RSPMON_NPT_EVENT_CNTR_RSP_MBE',
    LABEL => 'AR_NIC_RSPMON_NPT_EVENT_CNTR_RSP_MBE',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'MBE in response payload',
    CAT => 'craynpu',
};
$event_order{'AR_NIC_RSPMON_NPT_EVENT_CNTR_RSP_MBE'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_PI_PMI_PCLK_PRSP_PKTS'} = {
    NAME => 'AR_PI_PMI_PCLK_PRSP_PKTS',
    LABEL => 'AR_PI_PMI_PCLK_PRSP_PKTS',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Incremented when the PMI receives a response from the Denali IP',
    CAT => 'craynpu',
};
$event_order{'AR_PI_PMI_PCLK_PRSP_PKTS'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_PI_PMI_PCLK_PRSP_FLITS'} = {
    NAME => 'AR_PI_PMI_PCLK_PRSP_FLITS',
    LABEL => 'AR_PI_PMI_PCLK_PRSP_FLITS',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Incremented when the PMI receives a valid flit from the Denali IP(header or data payload)',
    CAT => 'craynpu',
};
$event_order{'AR_PI_PMI_PCLK_PRSP_FLITS'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_PI_PMI_PCLK_PRSP_BLKD'} = {
    NAME => 'AR_PI_PMI_PCLK_PRSP_BLKD',
    LABEL => 'AR_PI_PMI_PCLK_PRSP_BLKD',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Incremented when the PMI blocks a valid response flit from the Denali IP',
    CAT => 'craynpu',
};
$event_order{'AR_PI_PMI_PCLK_PRSP_BLKD'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_PI_PMI_PCLK_PREQ_PKTS'} = {
    NAME => 'AR_PI_PMI_PCLK_PREQ_PKTS',
    LABEL => 'AR_PI_PMI_PCLK_PREQ_PKTS',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Incremented when the PMI sends a request to the Denali IP',
    CAT => 'craynpu',
};
$event_order{'AR_PI_PMI_PCLK_PREQ_PKTS'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_PI_PMI_PCLK_PREQ_FLITS'} = {
    NAME => 'AR_PI_PMI_PCLK_PREQ_FLITS',
    LABEL => 'AR_PI_PMI_PCLK_PREQ_FLITS',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Incremented when the PMI sends a valid flit to the Denali IP (header or data payload)',
    CAT => 'craynpu',
};
$event_order{'AR_PI_PMI_PCLK_PREQ_FLITS'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_PI_PMI_PCLK_PREQ_BLKD'} = {
    NAME => 'AR_PI_PMI_PCLK_PREQ_BLKD',
    LABEL => 'AR_PI_PMI_PCLK_PREQ_BLKD',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Incremented when the PMI is blocked from sending a valid request flit to the Denali IP due to the de-assertion of HAL Ready',
    CAT => 'craynpu',
};
$event_order{'AR_PI_PMI_PCLK_PREQ_BLKD'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_PI_PMI_PCLK_PREQ_PTC_BLKD0'} = {
    NAME => 'AR_PI_PMI_PCLK_PREQ_PTC_BLKD0',
    LABEL => 'AR_PI_PMI_PCLK_PREQ_PTC_BLKD0',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Incremented when the PMI is blocked from sending the head requestfrom PReq buffer 0 due to lack of header or data payload credits advertised by the root complex',
    CAT => 'craynpu',
};
$event_order{'AR_PI_PMI_PCLK_PREQ_PTC_BLKD0'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_PI_PMI_PCLK_PREQ_PTC_BLKD1'} = {
    NAME => 'AR_PI_PMI_PCLK_PREQ_PTC_BLKD1',
    LABEL => 'AR_PI_PMI_PCLK_PREQ_PTC_BLKD1',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Incremented when the PMI is blocked from sending the head requestfrom PReq buffer 1 due to lack of header or data payload credits advertised by the root complex',
    CAT => 'craynpu',
};
$event_order{'AR_PI_PMI_PCLK_PREQ_PTC_BLKD1'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_PI_PMI_PCLK_PREQ_PTC_BLKD2'} = {
    NAME => 'AR_PI_PMI_PCLK_PREQ_PTC_BLKD2',
    LABEL => 'AR_PI_PMI_PCLK_PREQ_PTC_BLKD2',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'When PM_SELECT is set, PM is incremented when the PMI is blocked from sending the head request from PReq buffer 2 due to lack of header or data payload credits advertised by the root complex',
    CAT => 'craynpu',
};
$event_order{'AR_PI_PMI_PCLK_PREQ_PTC_BLKD2'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_PI_PTI_PCLK_NIF_RX_PKT_CNT'} = {
    NAME => 'AR_PI_PTI_PCLK_NIF_RX_PKT_CNT',
    LABEL => 'AR_PI_PTI_PCLK_NIF_RX_PKT_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Incremented when a packet received from the HAL is written into the NIF asynchronous FIFO',
    CAT => 'craynpu',
};
$event_order{'AR_PI_PTI_PCLK_NIF_RX_PKT_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_PI_PTI_PCLK_LIF_RX_PKT_CNT'} = {
    NAME => 'AR_PI_PTI_PCLK_LIF_RX_PKT_CNT',
    LABEL => 'AR_PI_PTI_PCLK_LIF_RX_PKT_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Incremented when a packet received from the HAL is written into the LIF asynchronous FIFO',
    CAT => 'craynpu',
};
$event_order{'AR_PI_PTI_PCLK_LIF_RX_PKT_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_PI_PTI_PCLK_TRSP_TX_PKT_CNT'} = {
    NAME => 'AR_PI_PTI_PCLK_TRSP_TX_PKT_CNT',
    LABEL => 'AR_PI_PTI_PCLK_TRSP_TX_PKT_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Incremented when a packet is read from the LIF response FIFO and sent to the HAL',
    CAT => 'craynpu',
};
$event_order{'AR_PI_PTI_PCLK_TRSP_TX_PKT_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_PI_PTI_PCLK_TRSP_OFIFO_SBE_CNT'} = {
    NAME => 'AR_PI_PTI_PCLK_TRSP_OFIFO_SBE_CNT',
    LABEL => 'AR_PI_PTI_PCLK_TRSP_OFIFO_SBE_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Incremented when an SBE is detected while reading from the LIF response FIFO',
    CAT => 'craynpu',
};
$event_order{'AR_PI_PTI_PCLK_TRSP_OFIFO_SBE_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_PI_PII_PCLK_MSIX_MSG_CNT'} = {
    NAME => 'AR_PI_PII_PCLK_MSIX_MSG_CNT',
    LABEL => 'AR_PI_PII_PCLK_MSIX_MSG_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Incremented when an MSI-X message is sent to the HAL',
    CAT => 'craynpu',
};
$event_order{'AR_PI_PII_PCLK_MSIX_MSG_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_PI_PII_PCLK_MSIX_MSG_STALLED_CNT'} = {
    NAME => 'AR_PI_PII_PCLK_MSIX_MSG_STALLED_CNT',
    LABEL => 'AR_PI_PII_PCLK_MSIX_MSG_STALLED_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Incremented each clock cycle that the MSI-X mux has a message to send to the HAL but is waiting on an acknowledgment for the previous message',
    CAT => 'craynpu',
};
$event_order{'AR_PI_PII_PCLK_MSIX_MSG_STALLED_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_PI_PII_PCLK_MSIX_MSG_FIFO_SBE_CNT'} = {
    NAME => 'AR_PI_PII_PCLK_MSIX_MSG_FIFO_SBE_CNT',
    LABEL => 'AR_PI_PII_PCLK_MSIX_MSG_FIFO_SBE_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Incremented when an SBE is detected when reading from one of the MSI-X controller asynchronous FIFOs',
    CAT => 'craynpu',
};
$event_order{'AR_PI_PII_PCLK_MSIX_MSG_FIFO_SBE_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_PI_PMI_NREQ_GET_PKTS'} = {
    NAME => 'AR_PI_PMI_NREQ_GET_PKTS',
    LABEL => 'AR_PI_PMI_NREQ_GET_PKTS',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Incremented when the PMI receives a GET request w/o errors from the NIC',
    CAT => 'craynpu',
};
$event_order{'AR_PI_PMI_NREQ_GET_PKTS'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_PI_PMI_NREQ_PUT_PKTS'} = {
    NAME => 'AR_PI_PMI_NREQ_PUT_PKTS',
    LABEL => 'AR_PI_PMI_NREQ_PUT_PKTS',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Incremented when the PMI receives a PUT request w/o errors from the NIC',
    CAT => 'craynpu',
};
$event_order{'AR_PI_PMI_NREQ_PUT_PKTS'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_PI_PMI_NREQ_AMO_PKTS'} = {
    NAME => 'AR_PI_PMI_NREQ_AMO_PKTS',
    LABEL => 'AR_PI_PMI_NREQ_AMO_PKTS',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Incremented when the PMI receives an AMO request w/o errors from the NIC',
    CAT => 'craynpu',
};
$event_order{'AR_PI_PMI_NREQ_AMO_PKTS'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_PI_PMI_NREQ_OTHER_PKTS'} = {
    NAME => 'AR_PI_PMI_NREQ_OTHER_PKTS',
    LABEL => 'AR_PI_PMI_NREQ_OTHER_PKTS',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Incremented when the PMI receives a MISC request w/o errors from the NIC',
    CAT => 'craynpu',
};
$event_order{'AR_PI_PMI_NREQ_OTHER_PKTS'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_PI_PMI_NREQ_NIC_FLITS'} = {
    NAME => 'AR_PI_PMI_NREQ_NIC_FLITS',
    LABEL => 'AR_PI_PMI_NREQ_NIC_FLITS',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Incremented when the PMI receives a valid flit from the NIC (header or data payload)',
    CAT => 'craynpu',
};
$event_order{'AR_PI_PMI_NREQ_NIC_FLITS'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_PI_PMI_NREQ_RR_BLKD'} = {
    NAME => 'AR_PI_PMI_NREQ_RR_BLKD',
    LABEL => 'AR_PI_PMI_NREQ_RR_BLKD',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Incremented when PMI blocks a NIC request due to response requiredtraffic shaping',
    CAT => 'craynpu',
};
$event_order{'AR_PI_PMI_NREQ_RR_BLKD'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_PI_PMI_NREQ_IRSP_BLKD'} = {
    NAME => 'AR_PI_PMI_NREQ_IRSP_BLKD',
    LABEL => 'AR_PI_PMI_NREQ_IRSP_BLKD',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Incremented when PMI blocks a NIC request due to IRsp buffer backpressure',
    CAT => 'craynpu',
};
$event_order{'AR_PI_PMI_NREQ_IRSP_BLKD'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_PI_PMI_NREQ_PTC_BLKD0'} = {
    NAME => 'AR_PI_PMI_NREQ_PTC_BLKD0',
    LABEL => 'AR_PI_PMI_NREQ_PTC_BLKD0',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Incremented when PMI blocks a request due to back pressure from PCIe traffic class buffer 0',
    CAT => 'craynpu',
};
$event_order{'AR_PI_PMI_NREQ_PTC_BLKD0'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_PI_PMI_NREQ_PTC_BLKD1'} = {
    NAME => 'AR_PI_PMI_NREQ_PTC_BLKD1',
    LABEL => 'AR_PI_PMI_NREQ_PTC_BLKD1',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Incremented when PMI blocks a request due to back pressure from PCIe traffic class buffer 1',
    CAT => 'craynpu',
};
$event_order{'AR_PI_PMI_NREQ_PTC_BLKD1'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_PI_PMI_NREQ_PTC_BLKD2'} = {
    NAME => 'AR_PI_PMI_NREQ_PTC_BLKD2',
    LABEL => 'AR_PI_PMI_NREQ_PTC_BLKD2',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Incremented when PMI blocks a request due to back pressure from PCIe traffic class buffer 2',
    CAT => 'craynpu',
};
$event_order{'AR_PI_PMI_NREQ_PTC_BLKD2'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_PI_PMI_NREQ_TCG_BLKD0'} = {
    NAME => 'AR_PI_PMI_NREQ_TCG_BLKD0',
    LABEL => 'AR_PI_PMI_NREQ_TCG_BLKD0',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Incremented when a NIC request in NReq buffer 0 is blocked do to lack of TIDs',
    CAT => 'craynpu',
};
$event_order{'AR_PI_PMI_NREQ_TCG_BLKD0'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_PI_PMI_NREQ_TCG_BLKD1'} = {
    NAME => 'AR_PI_PMI_NREQ_TCG_BLKD1',
    LABEL => 'AR_PI_PMI_NREQ_TCG_BLKD1',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Incremented when a NIC request in NReq buffer 1 is blocked do to lack of TIDs',
    CAT => 'craynpu',
};
$event_order{'AR_PI_PMI_NREQ_TCG_BLKD1'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_PI_PMI_NREQ_TCG_BLKD2'} = {
    NAME => 'AR_PI_PMI_NREQ_TCG_BLKD2',
    LABEL => 'AR_PI_PMI_NREQ_TCG_BLKD2',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Incremented when a NIC request in NReq buffer 2 is blocked do to lack of TIDs',
    CAT => 'craynpu',
};
$event_order{'AR_PI_PMI_NREQ_TCG_BLKD2'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_PI_PMI_IRSP_PKTS'} = {
    NAME => 'AR_PI_PMI_IRSP_PKTS',
    LABEL => 'AR_PI_PMI_IRSP_PKTS',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Incremented when PMI issues a response to the NIC from the IRsp buffer',
    CAT => 'craynpu',
};
$event_order{'AR_PI_PMI_IRSP_PKTS'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_PI_PMI_IRSP_PKTS_BLKD'} = {
    NAME => 'AR_PI_PMI_IRSP_PKTS_BLKD',
    LABEL => 'AR_PI_PMI_IRSP_PKTS_BLKD',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Incremented when a response is blocked in the IRsp buffer due to lack of NIC response credits',
    CAT => 'craynpu',
};
$event_order{'AR_PI_PMI_IRSP_PKTS_BLKD'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_PI_PMI_NRSP_PKTS'} = {
    NAME => 'AR_PI_PMI_NRSP_PKTS',
    LABEL => 'AR_PI_PMI_NRSP_PKTS',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Incremented when PMI issues a response to the NIC from the NRsp buffer',
    CAT => 'craynpu',
};
$event_order{'AR_PI_PMI_NRSP_PKTS'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_PI_PMI_NRSP_PKTS_BLKD'} = {
    NAME => 'AR_PI_PMI_NRSP_PKTS_BLKD',
    LABEL => 'AR_PI_PMI_NRSP_PKTS_BLKD',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Incremented when a response is blocked in the NRsp buffer due to lack of NIC response credits',
    CAT => 'craynpu',
};
$event_order{'AR_PI_PMI_NRSP_PKTS_BLKD'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_PI_PMI_NRSP_FLITS'} = {
    NAME => 'AR_PI_PMI_NRSP_FLITS',
    LABEL => 'AR_PI_PMI_NRSP_FLITS',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Incremented when PMI issues a flit to the NIC from the NRsp buffer(header or data payload)',
    CAT => 'craynpu',
};
$event_order{'AR_PI_PMI_NRSP_FLITS'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_PI_PMI_NRSP_HWM'} = {
    NAME => 'AR_PI_PMI_NRSP_HWM',
    LABEL => 'AR_PI_PMI_NRSP_HWM',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Incremented each clock cycle that the NRsp buffer flit count is greater than the configured NRsp high water',
    CAT => 'craynpu',
};
$event_order{'AR_PI_PMI_NRSP_HWM'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_PI_PMI_NRSP_BP'} = {
    NAME => 'AR_PI_PMI_NRSP_BP',
    LABEL => 'AR_PI_PMI_NRSP_BP',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Incremented each clock cycle that the NRsp buffer flit count is greater than the configured NRsp flow control (back pressure) threshold',
    CAT => 'craynpu',
};
$event_order{'AR_PI_PMI_NRSP_BP'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_PI_PMI_REQTRANS_BLKD'} = {
    NAME => 'AR_PI_PMI_REQTRANS_BLKD',
    LABEL => 'AR_PI_PMI_REQTRANS_BLKD',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Incremented when a NIC request in the ReqTrans block is blocked doto lack of PCIe TIDs',
    CAT => 'craynpu',
};
$event_order{'AR_PI_PMI_REQTRANS_BLKD'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_PI_PTI_NIF_RX_PKT_CNT'} = {
    NAME => 'AR_PI_PTI_NIF_RX_PKT_CNT',
    LABEL => 'AR_PI_PTI_NIF_RX_PKT_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Incremented when the NIF receives a packet from the HAL',
    CAT => 'craynpu',
};
$event_order{'AR_PI_PTI_NIF_RX_PKT_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_PI_PTI_NIF_TX_PKT_CNT'} = {
    NAME => 'AR_PI_PTI_NIF_TX_PKT_CNT',
    LABEL => 'AR_PI_PTI_NIF_TX_PKT_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Incremented when the NIF sends a packet to the NIC',
    CAT => 'craynpu',
};
$event_order{'AR_PI_PTI_NIF_TX_PKT_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_PI_PTI_NIF_PKT_DISCARD_CNT'} = {
    NAME => 'AR_PI_PTI_NIF_PKT_DISCARD_CNT',
    LABEL => 'AR_PI_PTI_NIF_PKT_DISCARD_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Incremented when the NIF discards a packet received from the HAL',
    CAT => 'craynpu',
};
$event_order{'AR_PI_PTI_NIF_PKT_DISCARD_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_PI_PTI_NIF_IFIFO_MBE_CNT'} = {
    NAME => 'AR_PI_PTI_NIF_IFIFO_MBE_CNT',
    LABEL => 'AR_PI_PTI_NIF_IFIFO_MBE_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Incremented when an MBE is detected while reading from the NIF input FIFO',
    CAT => 'craynpu',
};
$event_order{'AR_PI_PTI_NIF_IFIFO_MBE_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_PI_PTI_NIF_IFIFO_SBE_CNT'} = {
    NAME => 'AR_PI_PTI_NIF_IFIFO_SBE_CNT',
    LABEL => 'AR_PI_PTI_NIF_IFIFO_SBE_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Incremented when an SBE is detected while reading from the NIF input FIFO',
    CAT => 'craynpu',
};
$event_order{'AR_PI_PTI_NIF_IFIFO_SBE_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_PI_PTI_NIF_NIC_STALLED_CNT'} = {
    NAME => 'AR_PI_PTI_NIF_NIC_STALLED_CNT',
    LABEL => 'AR_PI_PTI_NIF_NIC_STALLED_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Incremented each clock cycle that the NIF has a packet to send tothe NIC but no credits are available',
    CAT => 'craynpu',
};
$event_order{'AR_PI_PTI_NIF_NIC_STALLED_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_PI_PTI_NIF_NIC_DATA_QW_CNT'} = {
    NAME => 'AR_PI_PTI_NIF_NIC_DATA_QW_CNT',
    LABEL => 'AR_PI_PTI_NIF_NIC_DATA_QW_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Full quad words of data sent to the NIC',
    CAT => 'craynpu',
};
$event_order{'AR_PI_PTI_NIF_NIC_DATA_QW_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_PI_PTI_NIF_NIC_DATA_BYTE_CNT'} = {
    NAME => 'AR_PI_PTI_NIF_NIC_DATA_BYTE_CNT',
    LABEL => 'AR_PI_PTI_NIF_NIC_DATA_BYTE_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Bytes of data sent to the NIC',
    CAT => 'craynpu',
};
$event_order{'AR_PI_PTI_NIF_NIC_DATA_BYTE_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_PI_PTI_LIF_REQ_RX_PKT_CNT'} = {
    NAME => 'AR_PI_PTI_LIF_REQ_RX_PKT_CNT',
    LABEL => 'AR_PI_PTI_LIF_REQ_RX_PKT_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Incremented when the LIF receives a packet from the HAL',
    CAT => 'craynpu',
};
$event_order{'AR_PI_PTI_LIF_REQ_RX_PKT_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_PI_PTI_LIF_REQ_TX_PKT_CNT'} = {
    NAME => 'AR_PI_PTI_LIF_REQ_TX_PKT_CNT',
    LABEL => 'AR_PI_PTI_LIF_REQ_TX_PKT_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Incremented when the LIF sends a packet to the local block',
    CAT => 'craynpu',
};
$event_order{'AR_PI_PTI_LIF_REQ_TX_PKT_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_PI_PTI_LIF_REQ_PKT_DISCARD_CNT'} = {
    NAME => 'AR_PI_PTI_LIF_REQ_PKT_DISCARD_CNT',
    LABEL => 'AR_PI_PTI_LIF_REQ_PKT_DISCARD_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Incremented when the LIF discards a packet received from the HAL',
    CAT => 'craynpu',
};
$event_order{'AR_PI_PTI_LIF_REQ_PKT_DISCARD_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_PI_PTI_LIF_REQ_IFIFO_MBE_CNT'} = {
    NAME => 'AR_PI_PTI_LIF_REQ_IFIFO_MBE_CNT',
    LABEL => 'AR_PI_PTI_LIF_REQ_IFIFO_MBE_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Incremented when an MBE is detected while reading from the LIF input FIFO',
    CAT => 'craynpu',
};
$event_order{'AR_PI_PTI_LIF_REQ_IFIFO_MBE_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_PI_PTI_LIF_REQ_IFIFO_SBE_CNT'} = {
    NAME => 'AR_PI_PTI_LIF_REQ_IFIFO_SBE_CNT',
    LABEL => 'AR_PI_PTI_LIF_REQ_IFIFO_SBE_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Incremented when an SBE is detected while reading from the LIF input FIFO',
    CAT => 'craynpu',
};
$event_order{'AR_PI_PTI_LIF_REQ_IFIFO_SBE_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_PI_PTI_LIF_REQ_LB_STALLED_CNT'} = {
    NAME => 'AR_PI_PTI_LIF_REQ_LB_STALLED_CNT',
    LABEL => 'AR_PI_PTI_LIF_REQ_LB_STALLED_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Incremented each clock cycle that the LIF has a packet to send tothe local block but is waiting on an acknowledgment from the previous packet',
    CAT => 'craynpu',
};
$event_order{'AR_PI_PTI_LIF_REQ_LB_STALLED_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_PI_PTI_LIF_REQ_ORF_STALLED_CNT'} = {
    NAME => 'AR_PI_PTI_LIF_REQ_ORF_STALLED_CNT',
    LABEL => 'AR_PI_PTI_LIF_REQ_ORF_STALLED_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Incremented each clock cycle that the LIF has a packet to send tothe local block but is waiting on a free outstanding request FIFOentry',
    CAT => 'craynpu',
};
$event_order{'AR_PI_PTI_LIF_REQ_ORF_STALLED_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_PI_PTI_LIF_RSP_RX_PKT_CNT'} = {
    NAME => 'AR_PI_PTI_LIF_RSP_RX_PKT_CNT',
    LABEL => 'AR_PI_PTI_LIF_RSP_RX_PKT_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Incremented when the LIF receives a packet from the local block',
    CAT => 'craynpu',
};
$event_order{'AR_PI_PTI_LIF_RSP_RX_PKT_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_PI_PTI_LIF_RSP_TX_PKT_CNT'} = {
    NAME => 'AR_PI_PTI_LIF_RSP_TX_PKT_CNT',
    LABEL => 'AR_PI_PTI_LIF_RSP_TX_PKT_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Incremented when the LIF sends a packet to the HAL',
    CAT => 'craynpu',
};
$event_order{'AR_PI_PTI_LIF_RSP_TX_PKT_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_PI_PTI_LIF_RSP_TX_ABORT_CNT'} = {
    NAME => 'AR_PI_PTI_LIF_RSP_TX_ABORT_CNT',
    LABEL => 'AR_PI_PTI_LIF_RSP_TX_ABORT_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Incremented when the LIF sends a completion abort completion to the HAL',
    CAT => 'craynpu',
};
$event_order{'AR_PI_PTI_LIF_RSP_TX_ABORT_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_PI_PTI_LIF_RSP_TX_UR_CNT'} = {
    NAME => 'AR_PI_PTI_LIF_RSP_TX_UR_CNT',
    LABEL => 'AR_PI_PTI_LIF_RSP_TX_UR_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Incremented when the LIF sends an unsupported request completion to the HAL',
    CAT => 'craynpu',
};
$event_order{'AR_PI_PTI_LIF_RSP_TX_UR_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_PI_PTI_LIF_RSP_HAL_STALLED_CNT'} = {
    NAME => 'AR_PI_PTI_LIF_RSP_HAL_STALLED_CNT',
    LABEL => 'AR_PI_PTI_LIF_RSP_HAL_STALLED_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Incremented each clock cycle that the LIF has a packet to send tothe HAL but the OFIFO is full',
    CAT => 'craynpu',
};
$event_order{'AR_PI_PTI_LIF_RSP_HAL_STALLED_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_PI_PII_F0_MSIX_MSG_CNT'} = {
    NAME => 'AR_PI_PII_F0_MSIX_MSG_CNT',
    LABEL => 'AR_PI_PII_F0_MSIX_MSG_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Incremented when a function 0 MSI-X message is written to the FIFOfor delivery to the HAL interface',
    CAT => 'craynpu',
};
$event_order{'AR_PI_PII_F0_MSIX_MSG_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_PI_PII_F1_MSIX_MSG_CNT'} = {
    NAME => 'AR_PI_PII_F1_MSIX_MSG_CNT',
    LABEL => 'AR_PI_PII_F1_MSIX_MSG_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Incremented when a function 1 MSI-X message is written to the FIFOfor delivery to the HAL interface',
    CAT => 'craynpu',
};
$event_order{'AR_PI_PII_F1_MSIX_MSG_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_PI_PII_F2_MSIX_MSG_CNT'} = {
    NAME => 'AR_PI_PII_F2_MSIX_MSG_CNT',
    LABEL => 'AR_PI_PII_F2_MSIX_MSG_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Incremented when a function 2 MSI-X message is written to the FIFOfor delivery to the HAL interface',
    CAT => 'craynpu',
};
$event_order{'AR_PI_PII_F2_MSIX_MSG_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_PI_PII_F3_MSIX_MSG_CNT'} = {
    NAME => 'AR_PI_PII_F3_MSIX_MSG_CNT',
    LABEL => 'AR_PI_PII_F3_MSIX_MSG_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Incremented when a function 3 MSI-X message is written to the FIFOfor delivery to the HAL interface',
    CAT => 'craynpu',
};
$event_order{'AR_PI_PII_F3_MSIX_MSG_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_PI_PII_F0_MSIX_TABLE_MBE_CNT'} = {
    NAME => 'AR_PI_PII_F0_MSIX_TABLE_MBE_CNT',
    LABEL => 'AR_PI_PII_F0_MSIX_TABLE_MBE_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Incremented when an MBE is detected while accessing the function 0MSI-X table',
    CAT => 'craynpu',
};
$event_order{'AR_PI_PII_F0_MSIX_TABLE_MBE_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_PI_PII_F1_MSIX_TABLE_MBE_CNT'} = {
    NAME => 'AR_PI_PII_F1_MSIX_TABLE_MBE_CNT',
    LABEL => 'AR_PI_PII_F1_MSIX_TABLE_MBE_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Incremented when an MBE is detected while accessing the function 1MSI-X table',
    CAT => 'craynpu',
};
$event_order{'AR_PI_PII_F1_MSIX_TABLE_MBE_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_PI_PII_F2_MSIX_TABLE_MBE_CNT'} = {
    NAME => 'AR_PI_PII_F2_MSIX_TABLE_MBE_CNT',
    LABEL => 'AR_PI_PII_F2_MSIX_TABLE_MBE_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Incremented when an MBE is detected while accessing the function 2MSI-X table',
    CAT => 'craynpu',
};
$event_order{'AR_PI_PII_F2_MSIX_TABLE_MBE_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_PI_PII_F3_MSIX_TABLE_MBE_CNT'} = {
    NAME => 'AR_PI_PII_F3_MSIX_TABLE_MBE_CNT',
    LABEL => 'AR_PI_PII_F3_MSIX_TABLE_MBE_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Incremented when an MBE is detected while accessing the function 3MSI-X table',
    CAT => 'craynpu',
};
$event_order{'AR_PI_PII_F3_MSIX_TABLE_MBE_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_PI_PII_F0_MSIX_TABLE_SBE_CNT'} = {
    NAME => 'AR_PI_PII_F0_MSIX_TABLE_SBE_CNT',
    LABEL => 'AR_PI_PII_F0_MSIX_TABLE_SBE_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Incremented when an SBE is detected while accessing the function 0MSI-X table',
    CAT => 'craynpu',
};
$event_order{'AR_PI_PII_F0_MSIX_TABLE_SBE_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_PI_PII_F1_MSIX_TABLE_SBE_CNT'} = {
    NAME => 'AR_PI_PII_F1_MSIX_TABLE_SBE_CNT',
    LABEL => 'AR_PI_PII_F1_MSIX_TABLE_SBE_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Incremented when an SBE is detected while accessing the function 1MSI-X table',
    CAT => 'craynpu',
};
$event_order{'AR_PI_PII_F1_MSIX_TABLE_SBE_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_PI_PII_F2_MSIX_TABLE_SBE_CNT'} = {
    NAME => 'AR_PI_PII_F2_MSIX_TABLE_SBE_CNT',
    LABEL => 'AR_PI_PII_F2_MSIX_TABLE_SBE_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Incremented when an SBE is detected while accessing the function 2MSI-X table',
    CAT => 'craynpu',
};
$event_order{'AR_PI_PII_F2_MSIX_TABLE_SBE_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_PI_PII_F3_MSIX_TABLE_SBE_CNT'} = {
    NAME => 'AR_PI_PII_F3_MSIX_TABLE_SBE_CNT',
    LABEL => 'AR_PI_PII_F3_MSIX_TABLE_SBE_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Incremented when an SBE is detected while accessing the function 3MSI-X table',
    CAT => 'craynpu',
};
$event_order{'AR_PI_PII_F3_MSIX_TABLE_SBE_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_PI_LM0_LM1_TRIGGER0_CNT'} = {
    NAME => 'AR_PI_LM0_LM1_TRIGGER0_CNT',
    LABEL => 'AR_PI_LM0_LM1_TRIGGER0_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Incremented when Logic Monitor 0 to Logic Monitor 1 Trigger 0 hasoccurred.',
    CAT => 'craynpu',
};
$event_order{'AR_PI_LM0_LM1_TRIGGER0_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_PI_LM0_LM1_TRIGGER1_CNT'} = {
    NAME => 'AR_PI_LM0_LM1_TRIGGER1_CNT',
    LABEL => 'AR_PI_LM0_LM1_TRIGGER1_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Incremented when Logic Monitor 0 to Logic Monitor 1 Trigger 1 hasoccurred',
    CAT => 'craynpu',
};
$event_order{'AR_PI_LM0_LM1_TRIGGER1_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_PI_LM1_LM0_TRIGGER0_CNT'} = {
    NAME => 'AR_PI_LM1_LM0_TRIGGER0_CNT',
    LABEL => 'AR_PI_LM1_LM0_TRIGGER0_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Incremented when Logic Monitor 1 to Logic Monitor 0 Trigger 0 hasoccurred',
    CAT => 'craynpu',
};
$event_order{'AR_PI_LM1_LM0_TRIGGER0_CNT'} = ++$event_order;

$COUNTERS{NATIVE}->{'AR_PI_LM1_LM0_TRIGGER1_CNT'} = {
    NAME => 'AR_PI_LM1_LM0_TRIGGER1_CNT',
    LABEL => 'AR_PI_LM1_LM0_TRIGGER1_CNT',
    AVAIL => 'Yes',
    DERIV => 'No',
    DESC => 'Incremented when Logic Monitor 1 to Logic Monitor 0 Trigger 1 hasoccurred',
    CAT => 'craynpu',
};
$event_order{'AR_PI_LM1_LM0_TRIGGER1_CNT'} = ++$event_order;
